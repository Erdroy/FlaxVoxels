<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlaxEngine.CSharp</name>
    </assembly>
    <members>
        <member name="T:FlaxEditor.Content.AssetItemConverter">
            <summary>
            Serialize references to the FlaxEngine.Object as Guid (format N).
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:FlaxEditor.Content.AssetItemConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AssetItemConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AssetItemConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Create.CreateFileEntry">
            <summary>
            File create entry.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Create.CreateFileEntry.SourceUrl">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.Create.CreateFileEntry.ResultUrl">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.Create.CreateFileEntry.HasSettings">
            <summary>
            Gets a value indicating whether this entry has settings to modify.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Create.CreateFileEntry.Settings">
            <summary>
            Gets or sets the settings object to modify.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Create.CreateFileEntry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Create.CreateFileEntry"/> class.
            </summary>
            <param name="outputType">The output file type.</param>
            <param name="resultUrl">The result file url.</param>
        </member>
        <member name="M:FlaxEditor.Content.Create.CreateFileEntry.Create">
            <summary>
            Creates the result file.
            </summary>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Create.CreateFileEntry.Execute">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Create.CreateFilesDialog">
            <summary>
            Dialog used to edit new file settings.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.Dialog" />
        </member>
        <member name="M:FlaxEditor.Content.Create.CreateFilesDialog.#ctor(FlaxEditor.Content.Create.CreateFileEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Create.CreateFilesDialog"/> class.
            </summary>
            <param name="entry">The entry to edit it's settings.</param>
        </member>
        <member name="M:FlaxEditor.Content.Create.CreateFilesDialog.SetupWindowSettings(FlaxEngine.CreateWindowSettings@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Create.ParticleEmitterCreateEntry">
            <summary>
            Particle emitter asset creating handler. Allows to specify asset template.
            </summary>
            <seealso cref="T:FlaxEditor.Content.Create.CreateFileEntry" />
        </member>
        <member name="T:FlaxEditor.Content.Create.ParticleEmitterCreateEntry.Templates">
            <summary>
            Types of the emitter templates that can be created.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.ParticleEmitterCreateEntry.Templates.Empty">
            <summary>
            The empty asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.ParticleEmitterCreateEntry.Templates.ConstantBurst">
            <summary>
            The simple particle system that uses constant emission rate.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.ParticleEmitterCreateEntry.Templates.PeriodicBurst">
            <summary>
            The simple periodic burst particle system.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.ParticleEmitterCreateEntry.Templates.Smoke">
            <summary>
            The layers and tags settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.ParticleEmitterCreateEntry.Templates.Sparks">
            <summary>
            The GPU sparks with depth-buffer collisions.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.ParticleEmitterCreateEntry.Templates.RibbonSpiral">
            <summary>
            The ribbon spiral particles.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Create.ParticleEmitterCreateEntry.Options">
            <summary>
            The create options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.ParticleEmitterCreateEntry.Options.Template">
            <summary>
            The template.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Create.ParticleEmitterCreateEntry.Settings">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Create.ParticleEmitterCreateEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Create.ParticleEmitterCreateEntry"/> class.
            </summary>
            <param name="resultUrl">The result file url.</param>
        </member>
        <member name="M:FlaxEditor.Content.Create.ParticleEmitterCreateEntry.Create">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Create.SettingsCreateEntry">
            <summary>
            Engine settings asset creating handler. Allows to specify type of the settings to create (e.g. <see cref="T:FlaxEditor.Content.Settings.GameSettings"/>, <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/>, etc.).
            </summary>
            <seealso cref="T:FlaxEditor.Content.Create.CreateFileEntry" />
        </member>
        <member name="T:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes">
            <summary>
            Types of the settings assets that can be created.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.GameSettings">
            <summary>
            The game settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.AudioSettings">
            <summary>
            The audio settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.TimeSettings">
            <summary>
            The time settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.LayersAndTagsSettings">
            <summary>
            The layers and tags settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.PhysicsSettings">
            <summary>
            The physics settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.GraphicsSettings">
            <summary>
            The graphics settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.NavigationSettings">
            <summary>
            The navigation settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.BuildSettings">
            <summary>
            The build settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.InputSettings">
            <summary>
            The input settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.WindowsPlatformSettings">
            <summary>
            The Windows settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.UWPPlatformSettings">
            <summary>
            The UWP settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.LinuxPlatformSettings">
            <summary>
            The Linux settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.PS4PlatformSettings">
            <summary>
            The PS4 settings
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.XboxScarlettPlatformSettings">
            <summary>
            The xbox Scarlett settings
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Create.SettingsCreateEntry.Options">
            <summary>
            The create options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.Options.Type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Create.SettingsCreateEntry.Settings">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Create.SettingsCreateEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Create.SettingsCreateEntry"/> class.
            </summary>
            <param name="resultUrl">The result file url.</param>
        </member>
        <member name="M:FlaxEditor.Content.Create.SettingsCreateEntry.Create">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.GUI.ContentNavigationButton">
            <summary>
            A navigation button for <see cref="T:FlaxEditor.Windows.ContentWindow"/>.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.NavigationButton" />
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentNavigationButton.TargetNode">
            <summary>
            Gets the target node.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentNavigationButton.#ctor(FlaxEditor.Content.ContentTreeNode,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.GUI.ContentNavigationButton"/> class.
            </summary>
            <param name="targetNode">The target node.</param>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentNavigationButton.OnClick">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentNavigationButton.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentNavigationButton.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentNavigationButton.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentNavigationButton.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.GUI.ContentViewType">
            <summary>
            The content items view modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.GUI.ContentViewType.Tiles">
            <summary>
            The uniform tiles.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.GUI.ContentViewType.List">
            <summary>
            The vertical list.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.GUI.ContentView">
            <summary>
            Main control for <see cref="T:FlaxEditor.Windows.ContentWindow"/> used to present collection of <see cref="T:FlaxEditor.Content.ContentItem"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
            <seealso cref="T:FlaxEditor.Content.IContentItemOwner" />
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.OnOpen">
            <summary>
            Called when user wants to open the item.
            </summary>
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.OnRename">
            <summary>
            Called when user wants to rename the item.
            </summary>
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.OnDelete">
            <summary>
            Called when user wants to delete the item.
            </summary>
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.OnPaste">
            <summary>
            Called when user wants to paste the files/folders.
            </summary>
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.OnDuplicate">
            <summary>
            Called when user wants to duplicate the item(s).
            </summary>
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.OnNavigateBack">
            <summary>
            Called when user wants to navigate backward.
            </summary>
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.ViewScaleChanged">
            <summary>
            Occurs when view scale gets changed.
            </summary>
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.ViewTypeChanged">
            <summary>
            Occurs when view type gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.ItemsCount">
            <summary>
            Gets the items count.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.Selection">
            <summary>
            Gets the selected items.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.SelectedCount">
            <summary>
            Gets the selected count.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.HasSelection">
            <summary>
            Gets a value indicating whether any item is selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.ViewScale">
            <summary>
            Gets or sets the view scale.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.ViewType">
            <summary>
            Gets or sets the type of the view.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.GUI.ContentView.IsSearching">
            <summary>
            Flag is used to indicate if user is searching for items. Used to show a proper message to the user.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.GUI.ContentView.ShowFileExtensions">
            <summary>
            Flag used to indicate whenever show full file names including extensions.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.GUI.ContentView.InputActions">
            <summary>
            The input actions collection to processed during user input.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.GUI.ContentView"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.ClearItems">
            <summary>
            Clears the items in the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.ShowItems(System.Collections.Generic.List{FlaxEditor.Content.ContentItem},System.Boolean)">
            <summary>
            Shows the items collection in the view.
            </summary>
            <param name="items">The items to show.</param>
            <param name="additive">If set to <c>true</c> items will be added to the current selection. Otherwise selection will be cleared before.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.IsSelected(FlaxEditor.Content.ContentItem)">
            <summary>
            Determines whether the specified item is selected.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the specified item is selected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.ClearSelection">
            <summary>
            Clears the selected items collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Select(System.Collections.Generic.List{FlaxEditor.Content.ContentItem},System.Boolean)">
            <summary>
            Selects the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="additive">If set to <c>true</c> items will be added to the current selection. Otherwise selection will be cleared before.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Select(FlaxEditor.Content.ContentItem,System.Boolean)">
            <summary>
            Selects the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="additive">If set to <c>true</c> item will be added to the current selection. Otherwise selection will be cleared before.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.SelectAll">
            <summary>
            Selects all the items.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Deselect(FlaxEditor.Content.ContentItem)">
            <summary>
            Deselects the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Duplicate">
            <summary>
            Duplicates the selected items.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Copy">
            <summary>
            Copies the selected items (to the system clipboard).
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.CanPaste">
            <summary>
            Returns true if user can paste data to the view (copied any files before).
            </summary>
            <returns>True if can paste files.</returns>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Paste">
            <summary>
            Pastes the copied items (from the system clipboard).
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.SelectFirstItem">
            <summary>
            Gives focus and selects the first item in the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.RefreshThumbnails">
            <summary>
            Refreshes thumbnails of all items in the <see cref="T:FlaxEditor.Content.GUI.ContentView"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnItemClick(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when user clicks on an item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnItemDoubleClickName(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when user wants to rename item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnItemDoubleClick(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when user wants to open item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.FlaxEditor#Content#IContentItemOwner#OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.FlaxEditor#Content#IContentItemOwner#OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.FlaxEditor#Content#IContentItemOwner#OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.FlaxEditor#Content#IContentItemOwner#OnItemDispose(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.IFileEntryAction">
            <summary>
            File entry action (import or create).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.IFileEntryAction.SourceUrl">
            <summary>
            The source file path (may be empty or null).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.IFileEntryAction.ResultUrl">
            <summary>
            The result file path.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.IFileEntryAction.Execute">
            <summary>
            Executes this action.
            </summary>
            <returns>True if, failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Import.AssetImportEntry">
            <summary>
            Asset import entry.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.AssetImportEntry.#ctor(FlaxEditor.Content.Import.Request@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.AssetImportEntry.Import">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.AudioImportSettings">
            <summary>
            Proxy object to present audio import settings in <see cref="T:FlaxEditor.Content.Import.ImportFilesDialog"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.AudioImportSettings.CustomBitDepth">
            <summary>
            A custom set of bit depth audio import sizes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.AudioImportSettings.CustomBitDepth._8">
            <summary>
            The 8.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.AudioImportSettings.CustomBitDepth._16">
            <summary>
            The 16.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.AudioImportSettings.CustomBitDepth._24">
            <summary>
            The 24.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.AudioImportSettings.CustomBitDepth._32">
            <summary>
            The 32.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.AudioImportSettings.ConvertBitDepth(System.Int32)">
            <summary>
            Converts the bit depth to enum.
            </summary>
            <param name="f">The bit depth.</param>
            <returns>The converted enum.</returns>
        </member>
        <member name="P:FlaxEditor.Content.Import.AudioImportSettings.Format">
            <summary>
            The audio data format to import the audio clip as. 
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.AudioImportSettings.CompressionQuality">
            <summary>
            The audio data compression quality. Used only if target format is using compression. Value 0 means the smallest size, value 1 means the best quality.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.AudioImportSettings.DisableStreaming">
            <summary>
            Disables dynamic audio streaming. The whole clip will be loaded into the memory. Useful for small clips (eg. gunfire sounds).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.AudioImportSettings.Is3D">
            <summary>
            Checks should the clip be played as spatial (3D) audio or as normal audio. 3D audio is stored in Mono format.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.AudioImportSettings.BitDepth">
            <summary>
            The size of a single sample in bits. The clip will be converted to this bit depth on import.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.AudioImportSettings.TryRestore(FlaxEditor.Content.Import.AudioImportSettings@,System.String)">
            <summary>
            Tries the restore the asset import options from the target resource file.
            </summary>
            <param name="options">The options.</param>
            <param name="assetPath">The asset path.</param>
            <returns>True settings has been restored, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Import.AudioImportEntry">
            <summary>
            Audio asset import entry.
            </summary>
            <seealso cref="T:FlaxEditor.Content.Import.AssetImportEntry" />
        </member>
        <member name="M:FlaxEditor.Content.Import.AudioImportEntry.#ctor(FlaxEditor.Content.Import.Request@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Import.AudioImportEntry"/> class.
            </summary>
            <param name="request">The import request.</param>
        </member>
        <member name="P:FlaxEditor.Content.Import.AudioImportEntry.Settings">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.AudioImportEntry.TryOverrideSettings(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.AudioImportEntry.Import">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.FolderImportEntry">
            <summary>
            Folder import entry.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.FolderImportEntry.SkipSettingsDialog">
            <summary>
            Flag used to skip showing import settings dialog to used. Can be used for importing assets from code by plugins.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.FolderImportEntry.#ctor(FlaxEditor.Content.Import.Request@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.FolderImportEntry.Import">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.ImportFileEntryHandler">
            <summary>
            Creates new <see cref="T:FlaxEditor.Content.Import.ImportFileEntry"/> for the given source file.
            </summary>
            <param name="request">The import request.</param>
            <returns>The file entry.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Import.ImportFileEntry">
            <summary>
            File import entry.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ImportFileEntry.SourceUrl">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.Import.ImportFileEntry.ResultUrl">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.Import.ImportFileEntry.HasSettings">
            <summary>
            Gets a value indicating whether this entry has settings to modify.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ImportFileEntry.Settings">
            <summary>
            Gets or sets the settings object to modify.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFileEntry.TryOverrideSettings(System.Object)">
            <summary>
            Tries the override import settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns>True if settings override was successful and there is no need to edit them in dedicated dialog, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFileEntry.#ctor(FlaxEditor.Content.Import.Request@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Import.ImportFileEntry"/> class.
            </summary>
            <param name="request">The import request.</param>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFileEntry.ModifyResultFilename(System.String)">
            <summary>
            Modifies the result URL filename (keeps destination folder and extension).
            </summary>
            <param name="filename">The new filename.</param>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFileEntry.Import">
            <summary>
            Performs file importing.
            </summary>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="F:FlaxEditor.Content.Import.ImportFileEntry.FileTypes">
            <summary>
            The file types registered for importing. Key is a file extension (without a leading dot).
            Allows to plug custom importing options gather for different input file types.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFileEntry.CreateEntry(FlaxEditor.Content.Import.Request@)">
            <summary>
            Creates the entry.
            </summary>
            <param name="request">The import request.</param>
            <returns>Created file entry.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFileEntry.Execute">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.ImportFilesDialog">
            <summary>
            Dialog used to edit import files settings.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.Dialog" />
        </member>
        <member name="P:FlaxEditor.Content.Import.ImportFilesDialog.EntriesCount">
            <summary>
            Gets the entries count.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFilesDialog.#ctor(System.Collections.Generic.List{FlaxEditor.Content.Import.ImportFileEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Import.ImportFilesDialog"/> class.
            </summary>
            <param name="entries">The entries to edit settings.</param>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFilesDialog.ItemNode.OnMouseDoubleClickHeader(FlaxEngine.Vector2@,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFilesDialog.ItemNode.StartRenaming">
            <summary>
            Shows the rename popup for the item.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFilesDialog.SetupWindowSettings(FlaxEngine.CreateWindowSettings@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFilesDialog.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.ModelLightmapUVsSource">
            <summary>
            Importing model lightmap UVs source
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelLightmapUVsSource.Disable">
            <summary>
            No lightmap UVs.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelLightmapUVsSource.Generate">
            <summary>
            Generate lightmap UVs from model geometry.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelLightmapUVsSource.Channel0">
            <summary>
            The texcoords channel 0.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelLightmapUVsSource.Channel1">
            <summary>
            The texcoords channel 1.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelLightmapUVsSource.Channel2">
            <summary>
            The texcoords channel 2.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelLightmapUVsSource.Channel3">
            <summary>
            The texcoords channel 3.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.ModelType">
            <summary>
            Declares the imported data type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelType.Model">
            <summary>
            The model asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelType.SkinnedModel">
            <summary>
            The skinned model asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelType.Animation">
            <summary>
            The animation asset.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.AnimationDuration">
            <summary>
            Declares the imported animation clip duration.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.AnimationDuration.Imported">
            <summary>
            The imported duration.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.AnimationDuration.Custom">
            <summary>
            The custom duration specified via keyframes range.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.ModelImportSettings">
            <summary>
            Proxy object to present model import settings in <see cref="T:FlaxEditor.Content.Import.ImportFilesDialog"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.Type">
            <summary>
            Gets or sets the type of the imported asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.CalculateNormals">
            <summary>
            True if calculate model normals, otherwise will import them.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.SmoothingNormalsAngle">
            <summary>
            Calculated normals smoothing angle.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.FlipNormals">
            <summary>
            If checked, the imported normal vectors of the mesh will be flipped (scaled by -1).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.CalculateTangents">
            <summary>
            True if calculate model tangents, otherwise will import them.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.SmoothingTangentsAngle">
            <summary>
            Calculated normals smoothing angle.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.OptimizeMeshes">
            <summary>
            Enable/disable meshes geometry optimization.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.MergeMeshes">
            <summary>
            Enable/disable geometry merge for meshes with the same materials.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.ImportLODs">
            <summary>
            Enable/disable importing meshes Level of Details.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.ImportVertexColors">
            <summary>
            Enable/disable importing vertex colors (channel 0 only).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.ImportBlendShapes">
            <summary>
            Enable/disable importing blend shapes (morph targets).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.LightmapUVsSource">
            <summary>
            The lightmap UVs source.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.Scale">
            <summary>
            Custom uniform import scale.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.Rotation">
            <summary>
            Custom import geometry rotation.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.Translation">
            <summary>
            Custom import geometry offset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.CenterGeometry">
            <summary>
            If checked, the imported geometry will be shifted to the center of mass.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.Duration">
            <summary>
            The imported animation duration mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.FramesRangeStart">
            <summary>
            The imported animation first frame index. Used only if Duration mode is set to Custom.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.FramesRangeEnd">
            <summary>
            The imported animation end frame index. Used only if Duration mode is set to Custom.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.DefaultFrameRate">
            <summary>
            The imported animation default frame rate. Can specify the default frames per second amount for imported animation. If value is 0 then the original animation frame rate will be used.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.SamplingRate">
            <summary>
            The imported animation sampling rate. If value is 0 then the original animation speed will be used.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.SkipEmptyCurves">
            <summary>
            The imported animation will have removed tracks with no keyframes or unspecified data.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.OptimizeKeyframes">
            <summary>
            The imported animation channels will be optimized to remove redundant keyframes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.EnableRootMotion">
            <summary>
            Enables root motion extraction support from this animation.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.RootNodeName">
            <summary>
            The custom node name to be used as a root motion source. If not specified the actual root node will be used.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.AnimationIndex">
            <summary>
            The zero-based index for the animation clip to import. If the source file has more than one animation it can be used to pick a desire clip.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.GenerateLODs">
            <summary>
            If checked, the importer will generate a sequence of LODs based on the base LOD index.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.BaseLOD">
            <summary>
            The index of the LOD from the source model data to use as a reference for following LODs generation.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.LODCount">
            <summary>
            The amount of LODs to include in the model (all reaming ones starting from Base LOD will be generated).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.TriangleReduction">
            <summary>
            The target amount of triangles for the generated LOD (based on the higher LOD). Normalized to range 0-1. For instance 0.4 cuts the triangle count to 40%.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.ImportMaterials">
            <summary>
            If checked, the importer will create materials for model meshes as specified in the file.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.ImportTextures">
            <summary>
            If checked, the importer will import texture files used by the model and any embedded texture resources.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.RestoreMaterialsOnReimport">
            <summary>
            If checked, the importer will try to restore the model material slots.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.ModelImportSettings.TryRestore(FlaxEditor.Content.Import.ModelImportSettings@,System.String)">
            <summary>
            Tries the restore the asset import options from the target resource file.
            </summary>
            <param name="options">The options.</param>
            <param name="assetPath">The asset path.</param>
            <returns>True settings has been restored, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Import.ModelImportEntry">
            <summary>
            Model asset import entry.
            </summary>
            <seealso cref="T:FlaxEditor.Content.Import.AssetImportEntry" />
        </member>
        <member name="M:FlaxEditor.Content.Import.ModelImportEntry.#ctor(FlaxEditor.Content.Import.Request@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Import.ModelImportEntry"/> class.
            </summary>
            <param name="request">The import request.</param>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportEntry.Settings">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.ModelImportEntry.TryOverrideSettings(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.ModelImportEntry.Import">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.Request">
            <summary>
            The content item import request data container.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.Request.InputPath">
            <summary>
            The input item path (folder or file).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.Request.OutputPath">
            <summary>
            The output path (folder or file).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.Request.IsBinaryAsset">
            <summary>
            Flag set to true for binary assets handled by the engine internally.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.Request.SkipSettingsDialog">
            <summary>
            Flag used to skip showing import settings dialog to used. Can be used for importing assets from code by plugins.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.Request.Settings">
            <summary>
            The custom settings object.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.TextureFormatType">
            <summary>
            Texture format types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.Unknown">
            <summary>
            The unknown.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.ColorRGB">
            <summary>
            The color with RGB channels.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.ColorRGBA">
            <summary>
            The color with RGBA channels.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.NormalMap">
            <summary>
            The normal map (packed and compressed).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.GrayScale">
            <summary>
            The gray scale (R channel).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.HdrRGBA">
            <summary>
            The HDR color (RGBA channels).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.HdrRGB">
            <summary>
            The HDR color (RGB channels).
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.TextureImportSettings">
            <summary>
            Proxy object to present texture import settings in <see cref="T:FlaxEditor.Content.Import.ImportFilesDialog"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType">
            <summary>
            A custom version of <see cref="T:FlaxEditor.Content.Import.TextureFormatType"/> for GUI.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType.ColorRGB">
            <summary>
            The color with RGB channels.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType.ColorRGBA">
            <summary>
            The color with RGBA channels.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType.NormalMap">
            <summary>
            The normal map (packed and compressed).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType.GrayScale">
            <summary>
            The gray scale (R channel).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType.HdrRGBA">
            <summary>
            The HDR color (RGBA channels).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType.HdrRGB">
            <summary>
            The HDR color (RGB channels).
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType">
            <summary>
            A custom set of max texture import sizes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._32">
            <summary>
            The 32.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._64">
            <summary>
            The 64.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._128">
            <summary>
            The 128.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._256">
            <summary>
            The 256.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._512">
            <summary>
            The 512.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._1024">
            <summary>
            The 1024.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._2048">
            <summary>
            The 2048.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._4096">
            <summary>
            The 4096.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._8192">
            <summary>
            The 8192.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.TextureImportSettings.ConvertMaxSize(System.Int32)">
            <summary>
            Converts the maximum size to enum.
            </summary>
            <param name="f">The max size.</param>
            <returns>The converted enum.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Import.TextureImportSettings.SpriteInfo">
            <summary>
            The sprite info.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.SpriteInfo.Area">
            <summary>
            The sprite area.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.SpriteInfo.Name">
            <summary>
            The sprite name.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.TextureImportSettings.SpriteInfo.#ctor(FlaxEngine.Rectangle,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Import.TextureImportSettings.SpriteInfo"/> struct.
            </summary>
            <param name="area">The area.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.Type">
            <summary>
            Texture format type
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.IsAtlas">
            <summary>
            True if texture should be imported as a texture atlas resource
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.NeverStream">
            <summary>
            True if disable dynamic texture streaming
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.Compress">
            <summary>
            Enables/disables texture data compression.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.IndependentChannels">
            <summary>
            True if texture channels have independent data
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.sRGB">
            <summary>
            True if use sRGB format for texture data. Recommended for color maps and diffuse color textures.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.GenerateMipMaps">
            <summary>
            True if generate mip maps chain for the texture.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.FlipY">
            <summary>
            True if flip Y coordinate of the texture.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.Scale">
            <summary>
            The import texture scale.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.MaxSize">
            <summary>
            Maximum size of the texture (for both width and height).
            Higher resolution textures will be resized during importing process.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.Resize">
            <summary>
            True if resize texture on import. Use Size property to define texture width and height. Texture scale property will be ignored.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.Size">
            <summary>
            Gets or sets the size of the imported texture. If Resize property is set to true then texture will be resized during the import to this value. Otherwise it will be ignored.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.PreserveAlphaCoverage">
            <summary>
            True if preserve alpha coverage in generated mips for alpha test reference. Scales mipmap alpha values to preserve alpha coverage based on an alpha test reference value.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.PreserveAlphaCoverageReference">
            <summary>
            The reference value for the alpha coverage preserving.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.Sprites">
            <summary>
            The sprites. Used to keep created sprites on sprite atlas reimport.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.TextureImportSettings.TryRestore(FlaxEditor.Content.Import.TextureImportSettings@,System.String)">
            <summary>
            Tries the restore the asset import options from the target resource file.
            </summary>
            <param name="options">The options.</param>
            <param name="assetPath">The asset path.</param>
            <returns>True settings has been restored, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Import.TextureImportEntry">
            <summary>
            Texture asset import entry.
            </summary>
            <seealso cref="T:FlaxEditor.Content.Import.AssetImportEntry" />
        </member>
        <member name="M:FlaxEditor.Content.Import.TextureImportEntry.#ctor(FlaxEditor.Content.Import.Request@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Import.TextureImportEntry"/> class.
            </summary>
            <param name="request">The import request.</param>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportEntry.Settings">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.TextureImportEntry.TryOverrideSettings(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.TextureImportEntry.Import">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.AssetItem">
            <summary>
            Asset item object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentItem" />
        </member>
        <member name="P:FlaxEditor.Content.AssetItem.ID">
            <summary>
            Gets the asset unique identifier.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.AssetItem.TypeName">
            <summary>
            Gets the asset type identifier.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.AssetItem.#ctor(System.String,System.String,System.Guid@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.AssetItem"/> class.
            </summary>
            <param name="path">The asset path.</param>
            <param name="typeName">The asset type name.</param>
            <param name="id">The asset identifier.</param>
        </member>
        <member name="M:FlaxEditor.Content.AssetItem.UpdateTooltipText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AssetItem.OnBuildTooltipText(System.Text.StringBuilder)">
            <summary>
            Called when building tooltip text.
            </summary>
            <param name="sb">The String Builder.</param>
        </member>
        <member name="P:FlaxEditor.Content.AssetItem.ItemType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AssetItem.IsOfType``1">
            <summary>
            Determines whether asset is of the specified type (included inheritance checks).
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <returns><c>true</c> if asset is of the specified type (including inherited types); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Content.AssetItem.IsOfType(System.Type)">
            <summary>
            Determines whether asset is of the specified type (included inheritance checks).
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if asset is of the specified type (including inherited types); otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:FlaxEditor.Content.AssetItem.DrawShadow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AssetItem.Find(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AssetItem.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.BinaryAssetItem">
            <summary>
            Represents binary asset item.
            </summary>
            <seealso cref="T:FlaxEditor.Content.AssetItem" />
        </member>
        <member name="F:FlaxEditor.Content.BinaryAssetItem.Type">
            <summary>
            The type of the asset (the same as <see cref="P:FlaxEditor.Content.AssetItem.TypeName"/> but cached as type reference).
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.BinaryAssetItem.#ctor(System.String,System.Guid@,System.String,System.Type,FlaxEditor.Content.ContentItemSearchFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.BinaryAssetItem"/> class.
            </summary>
            <param name="path">The asset path.</param>
            <param name="id">The asset identifier.</param>
            <param name="typeName">The asset type name identifier.</param>
            <param name="type">The asset type.</param>
            <param name="searchFilter">The asset type search filter type.</param>
        </member>
        <member name="M:FlaxEditor.Content.BinaryAssetItem.GetImportPath(System.String@)">
            <summary>
            Gets the asset import path.
            </summary>
            <param name="importPath">The import path.</param>
            <returns>True if fails, otherwise false.</returns>
        </member>
        <member name="P:FlaxEditor.Content.BinaryAssetItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.BinaryAssetItem.IsOfType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.TextureAssetItem">
            <summary>
            Implementation of <see cref="T:FlaxEditor.Content.BinaryAssetItem"/> for <see cref="T:FlaxEngine.TextureBase"/> assets.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetItem" />
        </member>
        <member name="M:FlaxEditor.Content.TextureAssetItem.#ctor(System.String,System.Guid@,System.String,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureAssetItem.OnBuildTooltipText(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ModelAssetItem">
            <summary>
            Implementation of <see cref="T:FlaxEditor.Content.BinaryAssetItem"/> for <see cref="T:FlaxEngine.Model"/> assets.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetItem" />
        </member>
        <member name="M:FlaxEditor.Content.ModelAssetItem.#ctor(System.String,System.Guid@,System.String,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelAssetItem.OnBuildTooltipText(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SkinnedModelAssetItem">
            <summary>
            Implementation of <see cref="T:FlaxEditor.Content.BinaryAssetItem"/> for <see cref="T:FlaxEngine.SkinnedModel"/> assets.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetItem" />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelAssetItem.#ctor(System.String,System.Guid@,System.String,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelAssetItem.OnBuildTooltipText(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ContentFolderType">
            <summary>
            Types of content directories.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentFolderType.Content">
            <summary>
            The directory with assets.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentFolderType.Source">
            <summary>
            The directory with source files.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentFolderType.Other">
            <summary>
            The other type of directory.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.ContentFolder">
            <summary>
            Represents workspace directory item.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.FolderType">
            <summary>
            Gets the type of the folder.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.CanHaveScripts">
            <summary>
            Returns true if that folder can import/manage scripts.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.CanHaveAssets">
            <summary>
            Returns true if that folder can import/manage assets.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.Node">
            <summary>
            Gets the content node.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentFolder.Children">
            <summary>
            The subitems of this folder.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.#ctor(FlaxEditor.Content.ContentFolderType,System.String,FlaxEditor.Content.ContentTreeNode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.ContentFolder"/> class.
            </summary>
            <param name="type">The folder type.</param>
            <param name="path">The path to the item.</param>
            <param name="node">The folder parent node.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.FindChild(System.String)">
            <summary>
            Tries to find child element with given path
            </summary>
            <param name="path">Element path to find</param>
            <returns>Found element of null</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.ContainsChild(System.String)">
            <summary>
            Check if folder contains child element with given path
            </summary>
            <param name="path">Element path to find</param>
            <returns>True if contains that element, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.CanRename">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.CanDrag">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.Exists">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.UpdatePath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.UpdateTooltipText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.OnParentFolderChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.Find(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.Find(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.Find(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.FindScriptWitScriptName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ContentItemType">
            <summary>
            Content item types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemType.Asset">
            <summary>
            The binary or text asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemType.Folder">
            <summary>
            The directory.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemType.Script">
            <summary>
            The script file.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemType.Scene">
            <summary>
            The scene file.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemType.Other">
            <summary>
            The other type.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.ContentItemSearchFilter">
            <summary>
            Content item filter types used for searching.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Model">
            <summary>
            The model.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.SkinnedModel">
            <summary>
            The skinned model.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Material">
            <summary>
            The material.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Scene">
            <summary>
            The scene.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Prefab">
            <summary>
            The prefab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Script">
            <summary>
            The script.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Audio">
            <summary>
            The audio.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Animation">
            <summary>
            The animation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Json">
            <summary>
            The json.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Particles">
            <summary>
            The particles.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Shader">
            <summary>
            The shader source files.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Other">
            <summary>
            The other.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.IContentItemOwner">
            <summary>
            Interface for objects that can reference the content items in order to receive events from them.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.IContentItemOwner.OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when referenced item gets deleted (asset unloaded, file deleted, etc.).
            Item should not be used after that.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.IContentItemOwner.OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when referenced item gets renamed (filename change, path change, etc.)
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.IContentItemOwner.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when item gets reimported or reloaded.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.IContentItemOwner.OnItemDispose(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when referenced item gets disposed (editor closing, database internal changes, etc.).
            Item should not be used after that.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:FlaxEditor.Content.ContentItem">
            <summary>
            Base class for all content items.
            Item parent GUI control is always <see cref="T:FlaxEditor.Content.GUI.ContentView"/> or null if not in a view.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.Content.ContentItem.DefaultMarginSize">
            <summary>
            The default margin size.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItem.DefaultTextHeight">
            <summary>
            The default text height.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItem.DefaultThumbnailSize">
            <summary>
            The default thumbnail size.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItem.DefaultWidth">
            <summary>
            The default width.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItem.DefaultHeight">
            <summary>
            The default height.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.ItemType">
            <summary>
            Gets the type of the item.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.SearchFilter">
            <summary>
            Gets the type of the item searching filter to use.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.IsAsset">
            <summary>
            Gets a value indicating whether this instance is asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.IsFolder">
            <summary>
            Gets a value indicating whether this instance is folder.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.CanHaveChildren">
            <summary>
            Gets a value indicating whether this instance can have children.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.CanRename">
            <summary>
            Determines whether this item can be renamed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.CanDrag">
            <summary>
            Gets a value indicating whether this item can be dragged and dropped.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.Exists">
            <summary>
            Gets a value indicating whether this <see cref="T:FlaxEditor.Content.ContentItem"/> exists on drive.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.ParentFolder">
            <summary>
            Gets the parent folder.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.Path">
            <summary>
            Gets the path to the item.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.FileName">
            <summary>
            Gets the item file name (filename with extension).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.ShortName">
            <summary>
            Gets the item short name (filename without extension).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.NamePath">
            <summary>
            Gets the asset name relative to the project root folder (without asset file extension)
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.DefaultThumbnail">
            <summary>
            Gets the default name of the content item thumbnail. Returns null if not used.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.HasDefaultThumbnail">
            <summary>
            Gets a value indicating whether this item has default thumbnail.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.Thumbnail">
            <summary>
            Gets or sets the item thumbnail. Warning, thumbnail may not be available if item has no references (<see cref="P:FlaxEditor.Content.ContentItem.ReferencesCount"/>).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItem.ShowFileExtension">
            <summary>
            True if force show file extension.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.ContentItem"/> class.
            </summary>
            <param name="path">The path to the item.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.UpdatePath(System.String)">
            <summary>
            Updates the item path. Use with caution or even don't use it. It's dangerous.
            </summary>
            <param name="value">The new path.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.RefreshThumbnail">
            <summary>
            Refreshes the item thumbnail.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.UpdateTooltipText">
            <summary>
            Updates the tooltip text text.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.Find(System.String)">
            <summary>
            Tries to find the item at the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>Found item or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.Find(FlaxEditor.Content.ContentItem)">
            <summary>
            Tries to find a specified item in the assets tree.
            </summary>
            <param name="item">The item.</param>
            <returns>True if has been found, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.Find(System.Guid)">
            <summary>
            Tries to find the item with the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns>Found item or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.FindScriptWitScriptName(System.String)">
            <summary>
            Tries to find script with the given name.
            </summary>
            <param name="scriptName">Name of the script.</param>
            <returns>Found script or null if missing.</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.DrawShadow">
            <summary>
            Gets a value indicating whether draw item shadow.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.TextRectangle">
            <summary>
            Gets the local space rectangle for element name text area.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.DrawThumbnail(FlaxEngine.Rectangle@)">
            <summary>
            Draws the item thumbnail.
            </summary>
            <param name="rectangle">The thumbnail rectangle.</param>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.ReferencesCount">
            <summary>
            Gets the amount of references to that item.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.AddReference(FlaxEditor.Content.IContentItemOwner)">
            <summary>
            Adds the reference to the item.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.RemoveReference(FlaxEditor.Content.IContentItemOwner)">
            <summary>
            Removes the reference from the item.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnDelete">
            <summary>
            Called when content item gets removed (by the user or externally).
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnParentFolderChanged">
            <summary>
            Called when item parent folder gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.RequestThumbnail">
            <summary>
            Requests the thumbnail.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.ReleaseThumbnail">
            <summary>
            Releases the thumbnail.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnReimport">
            <summary>
            Called when item gets reimported or reloaded.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.DoDrag">
            <summary>
            Does the drag and drop operation with this asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.ShowTooltip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.CppScriptItem">
            <summary>
            Content item that contains C++ script file with source code.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ScriptItem" />
        </member>
        <member name="M:FlaxEditor.Content.CppScriptItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.CppScriptItem"/> class.
            </summary>
            <param name="path">The path to the item.</param>
        </member>
        <member name="P:FlaxEditor.Content.CppScriptItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.CSharpScriptItem">
            <summary>
            Content item that contains C# script file with source code.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ScriptItem" />
        </member>
        <member name="M:FlaxEditor.Content.CSharpScriptItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.CSharpScriptItem"/> class.
            </summary>
            <param name="path">The path to the item.</param>
        </member>
        <member name="P:FlaxEditor.Content.CSharpScriptItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.FileItem">
            <summary>
            Content item for the auxiliary files.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentItem" />
        </member>
        <member name="M:FlaxEditor.Content.FileItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.FileItem"/> class.
            </summary>
            <param name="path">The path to the file.</param>
        </member>
        <member name="P:FlaxEditor.Content.FileItem.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FileItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FileItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.JsonAssetItem">
            <summary>
            Asset item stored in a Json format file.
            </summary>
            <seealso cref="T:FlaxEditor.Content.AssetItem" />
        </member>
        <member name="M:FlaxEditor.Content.JsonAssetItem.#ctor(System.String,System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.JsonAssetItem"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="id">The identifier.</param>
            <param name="typeName">Name of the resource type.</param>
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetItem.DrawShadow">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.NewItem">
            <summary>
            Helper content item used to mock UI during creating new assets by <see cref="T:FlaxEditor.Windows.ContentWindow"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentItem" />
        </member>
        <member name="P:FlaxEditor.Content.NewItem.Proxy">
            <summary>
            Gets the proxy object related to the created asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.NewItem.Argument">
            <summary>
            Gets the argument passed to the proxy for the item creation. In most cases it is null.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.NewItem.#ctor(System.String,FlaxEditor.Content.ContentProxy,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.NewItem"/> class.
            </summary>
            <param name="path">The path for the new item.</param>
            <param name="proxy">The content proxy object.</param>
            <param name="arg">The argument passed to the proxy for the item creation. In most cases it is null.</param>
        </member>
        <member name="P:FlaxEditor.Content.NewItem.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.NewItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.NewItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.NewItem.DrawShadow">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.PrefabItem">
            <summary>
            Content item that contains <see cref="T:FlaxEngine.Prefab"/> data.
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetItem" />
        </member>
        <member name="M:FlaxEditor.Content.PrefabItem.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.PrefabItem"/> class.
            </summary>
            <param name="path">The asset path.</param>
            <param name="id">The asset identifier.</param>
        </member>
        <member name="P:FlaxEditor.Content.PrefabItem.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PrefabItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PrefabItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabItem.IsOfType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SceneItem">
            <summary>
            Content item that contains <see cref="T:FlaxEngine.Scene"/> data.
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetItem" />
        </member>
        <member name="M:FlaxEditor.Content.SceneItem.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.SceneItem"/> class.
            </summary>
            <param name="path">The asset path.</param>
            <param name="id">The asset identifier.</param>
        </member>
        <member name="P:FlaxEditor.Content.SceneItem.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneItem.IsOfType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ScriptItem">
            <summary>
            Content item that contains script file with source code.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentItem" />
        </member>
        <member name="P:FlaxEditor.Content.ScriptItem.ScriptName">
            <summary>
            Gets the name of the script (deducted from the asset name).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ScriptItem.IsValid">
            <summary>
            Checks if the script item references the valid use script type that can be used in a gameplay.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ScriptItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.ScriptItem"/> class.
            </summary>
            <param name="path">The path to the item.</param>
        </member>
        <member name="M:FlaxEditor.Content.ScriptItem.CreateScriptName(System.String)">
            <summary>
            Creates the name of the script for the given file.
            </summary>
            <param name="path">The path.</param>
            <returns>Script name</returns>
        </member>
        <member name="P:FlaxEditor.Content.ScriptItem.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ScriptItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ScriptItem.FindScriptWitScriptName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ScriptItem.OnDelete">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ShaderSourceItem">
            <summary>
            Content item that contains shader source code.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentItem" />
        </member>
        <member name="M:FlaxEditor.Content.ShaderSourceItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.ShaderSourceItem"/> class.
            </summary>
            <param name="path">The path to the item.</param>
        </member>
        <member name="P:FlaxEditor.Content.ShaderSourceItem.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ShaderSourceItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ShaderSourceItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.AnimationGraphFunctionProxy">
            <summary>
            A <see cref="T:FlaxEngine.AnimationGraphFunction"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.AnimationGraphFunctionProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationGraphFunctionProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AnimationGraphFunctionProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AnimationGraphFunctionProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationGraphFunctionProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationGraphFunctionProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.AnimationGraphProxy">
            <summary>
            A <see cref="T:FlaxEngine.AnimationGraph"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.AnimationGraphProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationGraphProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AnimationGraphProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AnimationGraphProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationGraphProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationGraphProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.AnimationProxy">
            <summary>
            A <see cref="T:FlaxEngine.Animation"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.AnimationProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AnimationProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AnimationProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.AssetProxy">
            <summary>
            Base class for all asset proxy objects used to manage <see cref="T:FlaxEditor.Content.AssetItem"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentProxy" />
        </member>
        <member name="P:FlaxEditor.Content.AssetProxy.IsAsset">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AssetProxy.TypeName">
            <summary>
            Gets the full name of the asset type (stored data format).
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.AcceptsAsset(System.String,System.String)">
            <summary>
            Checks if this proxy supports the given asset type id at the given path.
            </summary>
            <param name="typeName">The asset type identifier.</param>
            <param name="path">The asset path.</param>
            <returns>True if proxy supports assets of the given type id and path.</returns>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.ConstructItem(System.String,System.String,System.Guid@)">
            <summary>
            Constructs the item for the asset.
            </summary>
            <param name="path">The asset path.</param>
            <param name="typeName">The asset type name identifier.</param>
            <param name="id">The asset identifier.</param>
            <returns>Created item.</returns>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <summary>
            Called when thumbnail request gets prepared for drawing.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <summary>
            Determines whether thumbnail can be drawn for the specified item.
            </summary>
            <param name="request">The request.</param>
            <returns>
              <c>true</c> if this thumbnail can be drawn for the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <summary>
            Called when thumbnail drawing begins. Proxy should setup scene GUI for guiRoot.
            </summary>
            <param name="request">The request to render thumbnail.</param>
            <param name="guiRoot">The GUI root container control.</param>
            <param name="context">GPU context.</param>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <summary>
            Called when thumbnail drawing ends. Proxy should clear custom GUI from guiRoot from that should be not destroyed.
            </summary>
            <param name="request">The request to render thumbnail.</param>
            <param name="guiRoot">The GUI root container control.</param>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.OnThumbnailDrawCleanup(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <summary>
            Called when thumbnail requests cleans data after drawing.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:FlaxEditor.Content.AudioClipProxy">
            <summary>
            A <see cref="T:FlaxEngine.AudioClip"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.AudioClipProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AudioClipProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AudioClipProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.OnThumbnailDrawCleanup(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.BinaryAssetProxy">
            <summary>
            Base class for all binary asset proxy objects used to manage <see cref="T:FlaxEditor.Content.BinaryAssetItem"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Content.AssetProxy" />
        </member>
        <member name="F:FlaxEditor.Content.BinaryAssetProxy.Extension">
            <summary>
            The binary asset files extension.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.BinaryAssetProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.BinaryAssetProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.BinaryAssetProxy.TypeName">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.BinaryAssetProxy.IsProxyFor``1">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.BinaryAssetProxy.AssetType">
            <summary>
            Gets the type of the asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.BinaryAssetProxy.ConstructItem(System.String,System.String,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.CollisionDataProxy">
            <summary>
            A <see cref="T:FlaxEngine.CollisionData"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.CollisionDataProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CollisionDataProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CollisionDataProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CollisionDataProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CollisionDataProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CollisionDataProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ContentProxy">
            <summary>
            Base class for assets proxy objects used to manage <see cref="T:FlaxEditor.Content.ContentItem"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentProxy.Name">
            <summary>
            Gets the asset type name (used by GUI, should be localizable).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentProxy.NewItemName">
            <summary>
            Gets the default name for the new items created by this proxy.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <summary>
            Determines whether this proxy is for the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if is proxy for asset item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.IsProxyFor``1">
            <summary>
            Determines whether this proxy is for the specified asset.
            </summary>
            <returns><c>true</c> if is proxy for asset item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentProxy.IsAsset">
            <summary>
            Gets a value indicating whether this proxy if for assets.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentProxy.FileExtension">
            <summary>
            Gets the file extension used by the items managed by this proxy.
            ALL LOWERCASE! WITHOUT A DOT! example: for 'myFile.TxT' proper extension is 'txt'
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <summary>
            Opens the specified item.
            </summary>
            <param name="editor"></param>
            <param name="item">The item.</param>
            <returns>Opened window or null if cannot do it.</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentProxy.CanExport">
            <summary>
            Gets a value indicating whether content items used by this proxy can be exported.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.Export(FlaxEditor.Content.ContentItem,System.String)">
            <summary>
            Exports the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="outputPath">The output path.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <summary>
            Determines whether this proxy can create items in the specified target location.
            </summary>
            <param name="targetLocation">The target location.</param>
            <returns><c>true</c> if this proxy can create items in the specified target location; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <summary>
            Determines whether this proxy can reimport specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if this proxy can reimport given item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.Create(System.String,System.Object)">
            <summary>
            Creates new item at the specified output path.
            </summary>
            <param name="outputPath">The output path.</param>
            <param name="arg">The custom argument provided for the item creation. Can be used as a source of data or null.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.OnContentWindowContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu,FlaxEditor.Content.ContentItem)">
            <summary>
            Called when content window wants to show the context menu. Allows to add custom functions for the given asset type.
            </summary>
            <param name="menu">The menu.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:FlaxEditor.Content.ContentProxy.AccentColor">
            <summary>
            Gets the unique accent color for that asset type.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.CppScriptProxy">
            <summary>
            Context proxy object for C++ script files.
            </summary>
            <seealso cref="T:FlaxEditor.Content.CSharpScriptProxy" />
        </member>
        <member name="P:FlaxEditor.Content.CppScriptProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CppScriptProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CppScriptProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CppScriptProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CppScriptProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.CSharpScriptProxy">
            <summary>
            Context proxy object for C# script files.
            </summary>
            <seealso cref="T:FlaxEditor.Content.CSharpScriptProxy" />
        </member>
        <member name="F:FlaxEditor.Content.CSharpScriptProxy.ExtensionFiler">
            <summary>
            The script files extension filter.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.CSharpScriptProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CSharpScriptProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CSharpScriptProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CSharpScriptProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CSharpScriptProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.CubeTextureProxy">
            <summary>
            A <see cref="T:FlaxEngine.CubeTexture"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.CubeTextureProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CubeTextureProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CubeTextureProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.FileProxy">
            <summary>
            File proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentProxy" />
        </member>
        <member name="P:FlaxEditor.Content.FileProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.FileProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FileProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.FileProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FileProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.FontProxy">
            <summary>
            A <see cref="T:FlaxEngine.FontAsset"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.FontProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.FontProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.FontProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FontProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FontProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.FontProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.GameplayGlobalsProxy">
            <summary>
            A <see cref="T:FlaxEngine.GameplayGlobals"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.GameplayGlobalsProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GameplayGlobalsProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.GameplayGlobalsProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.GameplayGlobalsProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GameplayGlobalsProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GameplayGlobalsProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.IESProfileProxy">
            <summary>
            A <see cref="T:FlaxEngine.IESProfile"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.IESProfileProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.IESProfileProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.IESProfileProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.JsonAssetBaseProxy">
            <summary>
            Base class for all Json asset proxy objects used to manage <see cref="T:FlaxEditor.Content.JsonAssetItem"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Content.AssetProxy" />
        </member>
        <member name="T:FlaxEditor.Content.JsonAssetProxy">
            <summary>
            Json assets proxy.
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetBaseProxy" />
        </member>
        <member name="F:FlaxEditor.Content.JsonAssetProxy.Extension">
            <summary>
            The json files extension.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetProxy.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.JsonAssetProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.JsonAssetProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.JsonAssetProxy.AcceptsAsset(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.JsonAssetProxy.ConstructItem(System.String,System.String,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.GenericJsonCreateEntry">
            <summary>
            Generic Json asset creating handler. Allows to specify type of the archetype class to use for the asset data object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.Create.CreateFileEntry" />
        </member>
        <member name="T:FlaxEditor.Content.GenericJsonCreateEntry.Options">
            <summary>
            The create options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.GenericJsonCreateEntry.Options.Type">
            <summary>
            The type of the archetype class to use for the asset data object to create.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GenericJsonCreateEntry.Options.Editor.Initialize(FlaxEditor.CustomEditors.CustomEditorPresenter,FlaxEditor.CustomEditors.LayoutElementsContainer,FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.GenericJsonCreateEntry.Settings">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GenericJsonCreateEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Create.SettingsCreateEntry"/> class.
            </summary>
            <param name="resultUrl">The result file url.</param>
        </member>
        <member name="M:FlaxEditor.Content.GenericJsonCreateEntry.Create">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.GenericJsonAssetProxy">
            <summary>
            Generic Json assets proxy (supports all json assets that don't have dedicated proxy).
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetBaseProxy" />
        </member>
        <member name="P:FlaxEditor.Content.GenericJsonAssetProxy.TypeName">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GenericJsonAssetProxy.AcceptsAsset(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GenericJsonAssetProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GenericJsonAssetProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SpawnableJsonAssetProxy`1">
            <summary>
            Content proxy for a json assets of the given type that can be spawned in the editor.
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.SpawnableJsonAssetProxy`1.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpawnableJsonAssetProxy`1.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpawnableJsonAssetProxy`1.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SpawnableJsonAssetProxy`1.TypeName">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.MaterialFunctionProxy">
            <summary>
            A <see cref="T:FlaxEngine.MaterialFunction"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.MaterialFunctionProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialFunctionProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.MaterialFunctionProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.MaterialFunctionProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialFunctionProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialFunctionProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.MaterialInstanceProxy">
            <summary>
            A <see cref="T:FlaxEngine.MaterialInstance"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.MaterialInstanceProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.MaterialInstanceProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.MaterialInstanceProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.MaterialProxy">
            <summary>
            A <see cref="T:FlaxEngine.Material"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.MaterialProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.MaterialProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.MaterialProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.OnContentWindowContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.CreateMaterialInstance(FlaxEditor.Content.BinaryAssetItem)">
            <summary>
            Creates the material instance from the given material.
            </summary>
            <param name="materialItem">The material item to use as a base material.</param>
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ModelProxy">
            <summary>
            A <see cref="T:FlaxEngine.Model"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.ModelProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ModelProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ModelProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ParticleEmitterFunctionProxy">
            <summary>
            A <see cref="T:FlaxEngine.ParticleEmitterFunction"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.ParticleEmitterFunctionProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleEmitterFunctionProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ParticleEmitterFunctionProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ParticleEmitterFunctionProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleEmitterFunctionProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleEmitterFunctionProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ParticleEmitterProxy">
            <summary>
            A <see cref="T:FlaxEngine.ParticleEmitter"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.ParticleEmitterProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleEmitterProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ParticleEmitterProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ParticleEmitterProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleEmitterProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleEmitterProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleEmitterProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleEmitterProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleEmitterProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleEmitterProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleEmitterProxy.OnThumbnailDrawCleanup(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleEmitterProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ParticleSystemProxy">
            <summary>
            A <see cref="T:FlaxEngine.ParticleSystem"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.ParticleSystemProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleSystemProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ParticleSystemProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ParticleSystemProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleSystemProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleSystemProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleSystemProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleSystemProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleSystemProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleSystemProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleSystemProxy.OnThumbnailDrawCleanup(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ParticleSystemProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.PrefabProxy">
            <summary>
            Content proxy for <see cref="T:FlaxEditor.Content.PrefabItem"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetBaseProxy" />
        </member>
        <member name="F:FlaxEditor.Content.PrefabProxy.Extension">
            <summary>
            The prefab files extension.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.PrefabProxy.AssetTypename">
            <summary>
            The prefab asset data typename.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.PrefabProxy.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PrefabProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.IsProxyFor``1">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PrefabProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PrefabProxy.TypeName">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.ConstructItem(System.String,System.String,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.PreviewsCacheProxy">
            <summary>
            A <see cref="T:FlaxEditor.PreviewsCache"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.PreviewsCacheProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PreviewsCacheProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PreviewsCacheProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PreviewsCacheProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SceneAnimationProxy">
            <summary>
            A <see cref="T:FlaxEngine.SceneAnimation"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.SceneAnimationProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneAnimationProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneAnimationProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneAnimationProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneAnimationProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneAnimationProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SceneProxy">
            <summary>
            Content proxy for <see cref="T:FlaxEditor.Content.SceneItem"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetBaseProxy" />
        </member>
        <member name="F:FlaxEditor.Content.SceneProxy.Extension">
            <summary>
            The scene files extension.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.SceneProxy.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneProxy.TypeName">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneProxy.ConstructItem(System.String,System.String,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ScriptProxy">
            <summary>
            Context proxy object for script files (represented by <see cref="T:FlaxEditor.Content.ScriptItem"/>).
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentProxy" />
        </member>
        <member name="M:FlaxEditor.Content.ScriptProxy.TryGetProjectAtFolder(System.String,System.String@)">
            <summary>
            Tries the get project that is related to the given source file path. Works only for source files located under Source folder of the project.
            </summary>
            <param name="path">The path.</param>
            <param name="moduleName">The name of the module where the source file lays. Computed from path. Might be invalid..</param>
            <returns>The found project or null.</returns>
        </member>
        <member name="P:FlaxEditor.Content.ScriptProxy.NewItemName">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ScriptProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ScriptProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ScriptProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ScriptProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SettingsProxy`1">
            <summary>
            Content proxy for json settings assets (e.g <see cref="T:FlaxEditor.Content.Settings.GameSettings"/> or <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/>).
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.SettingsProxy`1.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SettingsProxy`1.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SettingsProxy`1.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SettingsProxy`1.IsProxyFor``1">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SettingsProxy`1.TypeName">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ShaderProxy">
            <summary>
            A <see cref="T:FlaxEngine.Shader"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.ShaderProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ShaderProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ShaderProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ShaderProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ShaderProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ShaderSourceProxy">
            <summary>
            Context proxy object for shader source files (represented by <see cref="T:FlaxEditor.Content.ShaderSourceItem"/>).
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentProxy" />
        </member>
        <member name="M:FlaxEditor.Content.ShaderSourceProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ShaderSourceProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ShaderSourceProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ShaderSourceProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ShaderSourceProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ShaderSourceProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ShaderSourceProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SkeletonMaskProxy">
            <summary>
            A <see cref="T:FlaxEngine.SkeletonMask"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.SkeletonMaskProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkeletonMaskProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SkeletonMaskProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SkeletonMaskProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkeletonMaskProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkeletonMaskProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SkinnedModelProxy">
            <summary>
            A <see cref="T:FlaxEngine.SkinnedModel"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.SkinnedModelProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SkinnedModelProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SkinnedModelProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SpriteAtlasProxy">
            <summary>
            A <see cref="T:FlaxEngine.SpriteAtlas"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.SpriteAtlasProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SpriteAtlasProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SpriteAtlasProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.TextureProxy">
            <summary>
            A <see cref="T:FlaxEngine.Texture"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.TextureProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.TextureProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.TextureProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Settings.AudioSettings">
            <summary>
            The audio payback engine settings container. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.AudioSettings.DisableAudio">
            <summary>
            If checked, audio playback will be disabled in build game. Can be used if game uses custom audio playback engine.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.AudioSettings.DopplerFactor">
            <summary>
            The doppler doppler effect factor. Scale for source and listener velocities. Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.AudioSettings.MuteOnFocusLoss">
            <summary>
            True if mute all audio playback when game has no use focus.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.BuildPreset">
            <summary>
            A <see cref="T:FlaxEditor.GameCooker"/> game building preset with set of build targets.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildPreset.Name">
            <summary>
            The name of the preset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildPreset.Targets">
            <summary>
            The target configurations.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.BuildPreset.GetTarget(System.String)">
            <summary>
            Gets the target of the given name (ignore case search) or returns null if cannot find it.
            </summary>
            <param name="name">The target name.</param>
            <returns>Found target or null if is missing.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Settings.BuildSettings">
            <summary>
            The game building settings container. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.MaxAssetsPerPackage">
            <summary>
            The maximum amount of assets to include into a single assets package. Assets will be split into several packages if need to.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.MaxPackageSizeMB">
            <summary>
            The maximum size of the single assets package (in megabytes). Assets will be split into several packages if need to.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.ContentKey">
            <summary>
            The game content cooking Keys. Use the same value for a game and DLC packages to support loading them by the build game. Use 0 to randomize it during building.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.ForDistribution">
            <summary>
            If checked, the builds produced by the Game Cooker will be treated as for final game distribution (eg. for game store upload). Builds done this way cannot be tested on console devkits (eg. Xbox One, Xbox Scarlett).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.AdditionalAssets">
            <summary>
            The additional assets to include into build (into root assets set).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.AdditionalAssetFolders">
            <summary>
            The additional folders with assets to include into build (into root assets set). List of paths relative to the project directory (or absolute).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.ShadersNoOptimize">
            <summary>
            Disables shaders compiler optimizations in cooked game. Can be used to debug shaders on a target platform or to speed up the shaders compilation time.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.ShadersGenerateDebugData">
            <summary>
            Enables shader debug data generation for shaders in cooked game (depends on the target platform rendering backend).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.Presets">
            <summary>
            The build presets.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.BuildSettings.GetPreset(System.String)">
            <summary>
            Gets the preset of the given name (ignore case search) or returns null if cannot find it.
            </summary>
            <param name="name">The preset name.</param>
            <returns>Found preset or null if is missing.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Settings.BuildTarget">
            <summary>
            A <see cref="T:FlaxEditor.GameCooker"/> game building target with configuration properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.Name">
            <summary>
            The name of the target.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.Output">
            <summary>
            The output folder path.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.Platform">
            <summary>
            The target platform.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.Mode">
            <summary>
            The configuration mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.PreBuildAction">
            <summary>
            The pre-build action command line.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.PostBuildAction">
            <summary>
            The post-build action command line.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Settings.BuildTarget.Options">
            <summary>
            Gets the build options computed from the target configuration.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.GameSettings">
            <summary>
            The game settings asset archetype. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.ProductName">
            <summary>
            The product full name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.CompanyName">
            <summary>
            The company full name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.CopyrightNotice">
            <summary>
            The copyright note used for content signing (eg. source code header).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Icon">
            <summary>
            The default application icon.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.FirstScene">
            <summary>
            Reference to the first scene to load on a game startup.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Time">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Audio">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.AudioSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.LayersAndTags">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.LayersAndTagsSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Physics">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.PhysicsSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Input">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.InputSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Graphics">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.GraphicsSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Navigation">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.NavigationSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.GameCooking">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.BuildSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.CustomSettings">
            <summary>
            The custom settings to use with a game. Can be specified by the user to define game-specific options and be used by the external plugins (used as key-value pair).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.WindowsPlatform">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.WindowsPlatformSettings"/> asset. Used to apply configuration on Windows platform.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.UWPPlatform">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.UWPPlatformSettings"/> asset. Used to apply configuration on Universal Windows Platform.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.LinuxPlatform">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.LinuxPlatformSettings"/> asset. Used to apply configuration on Linux platform.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.PS4Platform">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.PS4PlatformSettings"/> asset. Used to apply configuration on PS4 platform.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.XboxScarlettPlatform">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.XboxScarlettPlatformSettings"/> asset. Used to apply configuration on Xbox Scarlett platform.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Settings.GameSettings.GameSettingsAssetPath">
            <summary>
            Gets the absolute path to the game settings asset file.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.Load">
            <summary>
            Loads the game settings asset.
            </summary>
            <returns>The loaded game settings.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.Load``1">
            <summary>
            Loads the settings of the given type.
            </summary>
            <remarks>
            Supports loading game settings, any sub settings container (e.g. <see cref="T:FlaxEditor.Content.Settings.PhysicsSettings"/>) and custom settings (see <see cref="F:FlaxEditor.Content.Settings.GameSettings.CustomSettings"/>).
            </remarks>
            <code>
            var time = GameSettings.Load&amp;ltTimeSettings&amp;gt;();
            </code>
            <typeparam name="T">The game settings type (e.g. <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/>).</typeparam>
            <returns>Loaded settings object or null if fails.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.Save``1(``0)">
            <summary>
            Saves the settings of the given type.
            </summary>
            <remarks>
            Supports saving game settings, any sub settings container (e.g. <see cref="T:FlaxEditor.Content.Settings.PhysicsSettings"/>).
            </remarks>
            <code>
            var time = GameSettings.Load&amp;ltTimeSettings&amp;gt;();
            time.TimeScale = 0.5f;
            GameSettings.Save&amp;ltTimeSettings&amp;gt;(time);
            </code>
            <typeparam name="T">The game settings type (e.g. <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/>).</typeparam>
            <returns>True if failed otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.SetCustomSettings(System.String,FlaxEngine.JsonAsset)">
            <summary>
            Sets the custom settings (or unsets if provided asset is null).
            </summary>
            <param name="key">The custom key (must be unique per context).</param>
            <param name="customSettingsAsset">The custom settings asset.</param>
            <returns>True if failed otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.Apply">
            <summary>
            Loads the current game settings asset and applies it to the engine runtime configuration.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.GraphicsSettings">
            <summary>
            The graphics rendering settings container. Allows to edit asset via editor. To modify those settings at runtime use <see cref="T:FlaxEditor.Content.Settings.GraphicsSettings"/>.
            </summary>
            <seealso cref="T:FlaxEngine.Graphics"/>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.UseVSync">
            <summary>
            Enables rendering synchronization with the refresh rate of the display device to avoid "tearing" artifacts.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.AAQuality">
            <summary>
            Anti Aliasing quality setting.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.SSRQuality">
            <summary>
            Screen Space Reflections quality.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.SSAOQuality">
            <summary>
            Screen Space Ambient Occlusion quality setting.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.VolumetricFogQuality">
            <summary>
            Volumetric Fog quality setting.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.ShadowsQuality">
            <summary>
            The shadows quality.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.ShadowMapsQuality">
            <summary>
            The shadow maps quality (textures resolution).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.AllowCSMBlending">
            <summary>
            Enables cascades splits blending for directional light shadows.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.InputSettings">
            <summary>
            The input settings container. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.InputSettings.ActionMappings">
            <summary>
            Maps a discrete button or key press events to a "friendly name" that will later be bound to event-driven behavior. The end effect is that pressing (and/or releasing) a key, mouse button, or keypad button.
            </summary>
            <seealso cref="P:FlaxEngine.Input.ActionMappings"/>
        </member>
        <member name="F:FlaxEditor.Content.Settings.InputSettings.AxisMappings">
            <summary>
            Maps keyboard, controller, or mouse inputs to a "friendly name" that will later be bound to continuous game behavior, such as movement. The inputs mapped in AxisMappings are continuously polled, even if they are just reporting that their input value.
            </summary>
            <seealso cref="P:FlaxEngine.Input.AxisMappings"/>
        </member>
        <member name="T:FlaxEditor.Content.Settings.LayersAndTagsSettings">
            <summary>
            The layers and objects tags settings. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LayersAndTagsSettings.Tags">
            <summary>
            The tag names.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LayersAndTagsSettings.Layers">
            <summary>
            The layers names.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.LayersAndTagsSettings.GetCurrentTags">
            <summary>
            Gets the current tags collection.
            </summary>
            <returns>The tags collection.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Settings.LayersAndTagsSettings.GetCurrentLayers">
            <summary>
            Gets the current layer names (max 32 items but trims last empty items).
            </summary>
            <returns>The layers.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Settings.LinuxPlatformSettings">
            <summary>
            The Linux platform settings asset archetype. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LinuxPlatformSettings.WindowMode">
            <summary>
            The default game window mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LinuxPlatformSettings.ScreenWidth">
            <summary>
            The default game window width (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LinuxPlatformSettings.ScreenHeight">
            <summary>
            The default game window height (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LinuxPlatformSettings.ResizableWindow">
            <summary>
            Enables resizing the game window by the user.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LinuxPlatformSettings.RunInBackground">
            <summary>
            Enables game running when application window loses focus.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LinuxPlatformSettings.ForceSingleInstance">
            <summary>
            Limits maximum amount of concurrent game instances running to one, otherwise user may launch application more than once.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LinuxPlatformSettings.OverrideIcon">
            <summary>
            Custom icon texture to use for the application (overrides the default one).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LinuxPlatformSettings.SupportVulkan">
            <summary>
            Enables support for Vulkan. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.NavigationSettings">
            <summary>
            The navigation system settings container.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.CellHeight">
            <summary>
            The height of a grid cell in the navigation mesh building steps using heightfields. 
            A lower number means higher precision on the vertical axis but longer build times.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.CellSize">
            <summary>
            The width/height of a grid cell in the navigation mesh building steps using heightfields. 
            A lower number means higher precision on the horizontal axes but longer build times.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.TileSize">
            <summary>
            Tile size used for Navigation mesh tiles, the final size of a tile is CellSize*TileSize.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MinRegionArea">
            <summary>
            The minimum number of cells allowed to form isolated island areas.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MergeRegionArea">
            <summary>
            Any regions with a span count smaller than this value will, if possible, be merged with larger regions.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MaxEdgeLen">
            <summary>
            The maximum allowed length for contour edges along the border of the mesh.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MaxEdgeError">
            <summary>
            The maximum distance a simplfied contour's border edges should deviate from the original raw contour.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.DetailSamplingDist">
            <summary>
            The sampling distance to use when generating the detail mesh. For height detail only.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MaxDetailSamplingError">
            <summary>
            The maximum distance the detail mesh surface should deviate from heightfield data. For height detail only.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.WalkableRadius">
            <summary>
            The radius of the smallest objects to traverse this nav mesh. Objects can't pass through gaps of less than twice the radius.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.WalkableHeight">
            <summary>
            The height of the smallest objects to traverse this nav mesh. Objects can't enter areas with ceilings lower than this value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.WalkableMaxClimb">
            <summary>
            The maximum ledge height that is considered to still be traversable.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.WalkableMaxSlopeAngle">
            <summary>
            The maximum slope that is considered walkable (in degrees). Objects can't go up or down slopes higher than this value.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.PhysicsSettings">
            <summary>
            The physics simulation settings container. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.DefaultGravity">
            <summary>
            The default gravity force value (in cm^2/s).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.QueriesHitTriggers">
            <summary>
            If enabled, any Raycast or other scene query that intersects with a Collider marked as a Trigger will returns with a hit. Individual raycasts can override this behavior.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.TriangleMeshTriangleMinAreaThreshold">
            <summary>
            Triangles from triangle meshes (CSG) with an area less than or equal to this value will be removed from physics collision data. Set to less than or equal 0 to disable.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.BounceThresholdVelocity">
            <summary>
            Minimum relative velocity required for an object to bounce. A typical value for simulation stability is about 0.2 * gravity
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.FrictionCombineMode">
            <summary>
            Default friction combine mode, controls how friction is computed for multiple materials.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.RestitutionCombineMode">
            <summary>
            Default restitution combine mode, controls how restitution is computed for multiple materials.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.DisableCCD">
            <summary>
            If true CCD will be ignored. This is an optimization when CCD is never used which removes the need for PhysX to check it internally.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.EnableAdaptiveForce">
            <summary>
            Enables adaptive forces to accelerate convergence of the solver. Can improve physics simulation performance but lead to artifacts.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.MaxDeltaTime">
            <summary>
            The maximum allowed delta time (in seconds) for the physics simulation step.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.EnableSubstepping">
            <summary>
            Whether to substep the physics simulation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.SubstepDeltaTime">
            <summary>
            Delta time (in seconds) for an individual simulation substep.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.MaxSubsteps">
            <summary>
            The maximum number of substeps for physics simulation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.LayerMasks">
            <summary>
            The collision layers masks. Used to define layer-based collision detection.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.SupportCookingAtRuntime">
            <summary>
            Enables support for cooking physical collision shapes geometry at runtime. Use it to enable generating runtime terrain collision or convex mesh colliders.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.PhysicsSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.PhysicsSettings"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.PS4PlatformSettings">
            <summary>
            The PlayStation 4 platform settings asset archetype. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PS4PlatformSettings.Icon">
            <summary>
            Application icon texture (asset id).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PS4PlatformSettings.BackgroundImage">
            <summary>
            Background image texture (asset id).
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.SettingsBase">
            <summary>
            The base class for all the settings assets.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.TimeSettings">
            <summary>
            The time settings asset archetype. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.UpdateFPS">
            <summary>
            The target amount of the game logic updates per second (script updates frequency). Use 0 for infinity.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.PhysicsFPS">
            <summary>
            The target amount of the physics simulation updates per second (also fixed updates frequency). Use 0 for infinity.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.DrawFPS">
            <summary>
            The target amount of the frames rendered per second (actual game FPS). Use 0 for infinity.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.TimeScale">
            <summary>
            The game time scale factor. Default is 1.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.UWPPlatformSettings">
            <summary>
            The Universal Windows Platform (UWP) platform settings asset archetype. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.UWPPlatformSettings.WindowMode">
            <summary>
            The preferred launch windowing mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.WindowMode.FullScreen">
            <summary>
            The full screen mode
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.WindowMode.ViewSize">
            <summary>
            The view size.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.UWPPlatformSettings.DisplayOrientations">
            <summary>
            The display orientation modes. Can be combined as flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.DisplayOrientations.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.DisplayOrientations.Landscape">
            <summary>
            The landscape.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.DisplayOrientations.LandscapeFlipped">
            <summary>
            The landscape flipped.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.DisplayOrientations.Portrait">
            <summary>
            The portrait.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.DisplayOrientations.PortraitFlipped">
            <summary>
            The portrait flipped.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.PreferredLaunchWindowingMode">
            <summary>
            The preferred launch windowing mode. Always fullscreen on Xbox.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.AutoRotationPreferences">
            <summary>
            The display orientation modes. Can be combined as flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.CertificateLocation">
            <summary>
            The location of the package certificate (relative to the project).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.SupportDX11">
            <summary>
            Enables support for DirectX 11. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.SupportDX10">
            <summary>
            Enables support for DirectX 10 and DirectX 10.1. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.WindowsPlatformSettings">
            <summary>
            The Windows platform settings asset archetype. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.WindowMode">
            <summary>
            The default game window mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.ScreenWidth">
            <summary>
            The default game window width (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.ScreenHeight">
            <summary>
            The default game window height (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.ResizableWindow">
            <summary>
            Enables resizing the game window by the user.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.RunInBackground">
            <summary>
            Enables game running when application window loses focus.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.ForceSingleInstance">
            <summary>
            Limits maximum amount of concurrent game instances running to one, otherwise user may launch application more than once.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.OverrideIcon">
            <summary>
            Custom icon texture to use for the application (overrides the default one).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.SupportDX12">
            <summary>
            Enables support for DirectX 12. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.SupportDX11">
            <summary>
            Enables support for DirectX 11. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.SupportDX10">
            <summary>
            Enables support for DirectX 10 and DirectX 10.1. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.SupportVulkan">
            <summary>
            Enables support for Vulkan. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.XboxScarlettPlatformSettings">
            <summary>
            The Xbox Scarlett platform settings asset archetype. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.XboxScarlettPlatformSettings.PublisherName">
            <summary>
            Game publisher identity name stored in game package manifest (for store).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.XboxScarlettPlatformSettings.PublisherDisplayName">
            <summary>
            Game publisher display name stored in game package manifest (for UI).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.XboxScarlettPlatformSettings.Square150x150Logo">
            <summary>
            Application small logo texture of size 150x150 px (asset id).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.XboxScarlettPlatformSettings.Square44x44Logo">
            <summary>
            Application small logo texture of size 44x44 px (asset id).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.XboxScarlettPlatformSettings.SplashScreenImage">
            <summary>
            Application splash screen texture (asset id).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.XboxScarlettPlatformSettings.StoreLogo">
            <summary>
            Application store logo texture (asset id).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.XboxScarlettPlatformSettings.BackgroundColor">
            <summary>
            Application background color.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Thumbnails.ThumbnailRequest">
            <summary>
            Contains information about asset thumbnail rendering.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Thumbnails.ThumbnailRequest.States">
            <summary>
            The request state types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.States.Created">
            <summary>
            The initial state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.States.Prepared">
            <summary>
            Request has been prepared for the rendering but still may wait for resources to load fully.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.States.Rendered">
            <summary>
            The thumbnail has been rendered. Request can be finalized.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.States.Disposed">
            <summary>
            The finalized state.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Thumbnails.ThumbnailRequest.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.Item">
            <summary>
            The item.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.Proxy">
            <summary>
            The proxy object for the asset item.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.Asset">
            <summary>
            The asset reference. May be null if not cached yet.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.Tag">
            <summary>
            The custom tag object used by the thumbnails rendering pipeline. Can be used to store the data related to the thumbnail rendering by the asset proxy.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Thumbnails.ThumbnailRequest.IsReady">
            <summary>
            Determines whether thumbnail can be drawn for the item.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailRequest.#ctor(FlaxEditor.Content.AssetItem,FlaxEditor.Content.AssetProxy)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Thumbnails.ThumbnailRequest"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="proxy">The proxy.</param>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailRequest.Prepare">
            <summary>
            Prepares this request.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailRequest.FinishRender(FlaxEngine.SpriteHandle@)">
            <summary>
            Finishes the rendering and updates the item thumbnail.
            </summary>
            <param name="icon">The icon.</param>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailRequest.Dispose">
            <summary>
            Finalizes this request.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Thumbnails.ThumbnailsModule">
            <summary>
            Manages asset thumbnails rendering and presentation.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailsModule.MinimumRequriedResourcesQuality">
            <summary>
            The minimum required quality (in range [0;1]) for content streaming resources to be loaded in order to generate thumbnail for them.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.RequestPreview(FlaxEditor.Content.ContentItem)">
            <summary>
            Requests the item preview.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.DeletePreview(FlaxEditor.Content.ContentItem)">
            <summary>
            Deletes the item preview from the cache.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.FlaxEditor#Content#IContentItemOwner#OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.FlaxEditor#Content#IContentItemOwner#OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.FlaxEditor#Content#IContentItemOwner#OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.FlaxEditor#Content#IContentItemOwner#OnItemDispose(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Thumbnails.ThumbnailsModule.PreviewRoot">
            <summary>
            Thumbnails GUI root control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailsModule.PreviewRoot.AccentColor">
            <summary>
            The item accent color to draw.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.PreviewRoot.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.PreviewRoot.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ContentTreeNode">
            <summary>
            Content folder tree node.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tree.TreeNode" />
        </member>
        <member name="F:FlaxEditor.Content.ContentTreeNode._folder">
            <summary>
            The folder.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.Folder">
            <summary>
            Gets the content folder item.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.FolderType">
            <summary>
            Gets the type of the folder.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.CanHaveScripts">
            <summary>
            Returns true if that folder can import/manage scripts.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.CanHaveAssets">
            <summary>
            Returns true if that folder can import/manage assets.
            </summary>
            <returns>True if can contain assets for project, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.ParentNode">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.Path">
            <summary>
            Gets the folder path.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.NavButtonLabel">
            <summary>
            Gets the navigation button label.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.#ctor(FlaxEditor.Content.ContentTreeNode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.ContentTreeNode"/> class.
            </summary>
            <param name="parent">The parent node.</param>
            <param name="path">The folder path.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.#ctor(FlaxEditor.Content.ContentTreeNode,FlaxEditor.Content.ContentFolderType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.ContentTreeNode"/> class.
            </summary>
            <param name="parent">The parent node.</param>
            <param name="type">The folder type.</param>
            <param name="path">The folder path.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.StartRenaming">
            <summary>
            Shows the rename popup for the item.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.UpdateFilter(System.String)">
            <summary>
            Updates the query search filter.
            </summary>
            <param name="filterText">The filter text.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnDragEnterHeader(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnDragMoveHeader(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnDragLeaveHeader">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnDragDropHeader(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.DoDragDrop">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnLongPress">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.MainContentTreeNode">
            <summary>
            Content tree node used for main directories.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentTreeNode" />
        </member>
        <member name="M:FlaxEditor.Content.MainContentTreeNode.#ctor(FlaxEditor.Content.ProjectTreeNode,FlaxEditor.Content.ContentFolderType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.MainContentTreeNode"/> class.
            </summary>
            <param name="parent">The parent project.</param>
            <param name="type">The folder type.</param>
            <param name="path">The folder path.</param>
        </member>
        <member name="M:FlaxEditor.Content.MainContentTreeNode.DoDragDrop">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MainContentTreeNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ProjectTreeNode">
            <summary>
            Root tree node for the project workspace.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentTreeNode" />
        </member>
        <member name="F:FlaxEditor.Content.ProjectTreeNode.Project">
            <summary>
            The project/
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ProjectTreeNode.Content">
            <summary>
            The project content directory.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ProjectTreeNode.Source">
            <summary>
            The project source code directory.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ProjectTreeNode.#ctor(FlaxEditor.ProjectInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.ProjectTreeNode"/> class.
            </summary>
            <param name="project">The project.</param>
        </member>
        <member name="P:FlaxEditor.Content.ProjectTreeNode.NavButtonLabel">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ProjectTreeNode.DoDragDrop">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ProjectTreeNode.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.RootContentTreeNode">
            <summary>
            Root tree node for the content workspace.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentTreeNode" />
        </member>
        <member name="M:FlaxEditor.Content.RootContentTreeNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.RootContentTreeNode"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.RootContentTreeNode.NavButtonLabel">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.PreviewsCache">
            <summary>
            Asset which contains set of asset items thumbnails (cached previews).
            </summary>
        </member>
        <member name="F:FlaxEditor.PreviewsCache.AssetIconSize">
            <summary>
            The default asset previews icon size (both width and height since it's a square).
            </summary>
        </member>
        <member name="F:FlaxEditor.PreviewsCache.AssetIconsAtlasSize">
            <summary>
            The default assets previews atlas size
            </summary>
        </member>
        <member name="F:FlaxEditor.PreviewsCache.AssetIconsAtlasMargin">
            <summary>
            The default assets previews atlas margin (between icons)
            </summary>
        </member>
        <member name="F:FlaxEditor.PreviewsCache.AssetIconsPerRow">
            <summary>
            The amount of asset icons per atlas row.
            </summary>
        </member>
        <member name="F:FlaxEditor.PreviewsCache.AssetIconsPerAtlas">
            <summary>
            The amount of asset icons per atlas.
            </summary>
        </member>
        <member name="F:FlaxEditor.PreviewsCache.AssetIconsAtlasFormat">
            <summary>
            The default format of previews atlas.
            </summary>
        </member>
        <member name="M:FlaxEditor.PreviewsCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.PreviewsCache"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.PreviewsCache.IsReady">
            <summary>
            Determines whether this atlas is ready (is loaded and has texture streamed).
            </summary>
        </member>
        <member name="P:FlaxEditor.PreviewsCache.HasFreeSlot">
            <summary>
            Determines whether this atlas has one or more free slots for the asset preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.PreviewsCache.FindSlot(System.Guid)">
            <summary>
            Finds the preview icon for given asset ID.
            </summary>
            <param name="id">The asset id to find preview for it.</param>
            <returns>The output sprite slot handle or invalid if invalid in nothing found.</returns>
        </member>
        <member name="M:FlaxEditor.PreviewsCache.OccupySlot(FlaxEngine.GPUTexture,System.Guid)">
            <summary>
            Occupies the atlas slot.
            </summary>
            <param name="source">The source texture to insert.</param>
            <param name="id">The asset identifier.</param>
            <returns>The added sprite slot handle or invalid if invalid in failed to occupy slot.</returns>
        </member>
        <member name="M:FlaxEditor.PreviewsCache.ReleaseSlot(System.Guid)">
            <summary>
            Releases the used slot.
            </summary>
            <param name="id">The asset identifier.</param>
            <returns>True if slot has been release, otherwise it was not found.</returns>
        </member>
        <member name="M:FlaxEditor.PreviewsCache.Flush">
            <summary>
            Flushes atlas data from the GPU to the asset storage (saves data).
            </summary>
        </member>
        <member name="M:FlaxEditor.PreviewsCache.Create(System.String)">
            <summary>
            Creates a new atlas.
            </summary>
            <param name="outputPath">The output asset file path.</param>
            <returns>True if this previews cache is flushing, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.GameCooker">
            <summary>
            Game building service. Processes project files and outputs build game for a target platform.
            </summary>
        </member>
        <member name="T:FlaxEditor.GameCooker.Options">
            <summary>
            Build options data.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.Options.Platform">
            <summary>
            The platform.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.Options.Configuration">
            <summary>
            The build configuration.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.Options.Flags">
            <summary>
            The options.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.Options.OutputPath">
            <summary>
            The output path (normalized, absolute).
            </summary>
        </member>
        <member name="T:FlaxEditor.GameCooker.EventType">
            <summary>
            Building event type.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.EventType.BuildStarted">
            <summary>
            The build started.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.EventType.BuildFailed">
            <summary>
            The build failed.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.EventType.BuildDone">
            <summary>
            The build done.
            </summary>
        </member>
        <member name="T:FlaxEditor.GameCooker.BuildEventDelegate">
            <summary>
            Game building event delegate.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:FlaxEditor.GameCooker.BuildProgressDelegate">
            <summary>
            Game building progress reporting delegate type.
            </summary>
            <param name="info">The information text.</param>
            <param name="totalProgress">The total progress percentage (normalized to 0-1).</param>
        </member>
        <member name="E:FlaxEditor.GameCooker.Event">
            <summary>
            Occurs when building event rises.
            </summary>
        </member>
        <member name="E:FlaxEditor.GameCooker.Progress">
            <summary>
            Occurs when building game progress fires.
            </summary>
        </member>
        <member name="M:FlaxEditor.GameCooker.GetPlatformType(FlaxEngine.BuildPlatform)">
            <summary>
            Gets the type of the platform from the game build platform type.
            </summary>
            <param name="buildPlatform">The build platform.</param>
            <returns>The run-type platform type.</returns>
        </member>
        <member name="P:FlaxEditor.GameCooker.IsRunning">
            <summary>
            Determines whether game building is running.
            </summary>
        </member>
        <member name="P:FlaxEditor.GameCooker.IsCancelRequested">
            <summary>
            Determines whether building cancel has been requested.
            </summary>
        </member>
        <member name="M:FlaxEditor.GameCooker.Build(FlaxEngine.BuildPlatform,FlaxEngine.BuildConfiguration,System.String,FlaxEngine.BuildOptions)">
            <summary>
            Starts building game for the specified platform.
            </summary>
            <param name="platform">The target platform.</param>
            <param name="configuration">The build configuration.</param>
            <param name="outputPath">The output path (output directory).</param>
            <param name="options">The build options.</param>
        </member>
        <member name="M:FlaxEditor.GameCooker.Cancel(System.Boolean)">
            <summary>
            Sends a cancel event to the game building service.
            </summary>
            <param name="waitForEnd">If set to <c>true</c> wait for the stopped building end.</param>
        </member>
        <member name="T:FlaxEditor.CustomEditors.DisplayStyle">
            <summary>
            Custom editor layout style modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.DisplayStyle.Group">
            <summary>
            Creates a separate group for the editor (drop down element). This is a default value.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.DisplayStyle.Inline">
            <summary>
            Inlines editor contents into the property area without creating a drop-down group.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.DisplayStyle.InlineIntoParent">
            <summary>
            Inlines editor contents into the parent editor layout. Won;t use property with label name.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomEditor">
            <summary>
            Base class for all custom editors used to present object(s) properties. Allows to extend game objects editing with more logic and customization.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.Style">
            <summary>
            Gets the custom editor style.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.IsSingleObject">
            <summary>
            Gets a value indicating whether single object is selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.HasDifferentValues">
            <summary>
            Gets a value indicating whether selected objects are different values.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.HasDifferentTypes">
            <summary>
            Gets a value indicating whether selected objects are different types.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.ValuesTypes">
            <summary>
            Gets the values types array (without duplicates).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.ParentEditor">
            <summary>
            Gets the parent editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.ChildrenEditors">
            <summary>
            Gets the children editors (readonly).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.Presenter">
            <summary>
            Gets the presenter control. It's the top most part of the Custom Editors layout.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.IsSetBlocked">
            <summary>
            Gets a value indicating whether setting value is blocked (during refresh).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.NeedsValuePropagationUp">
            <summary>
            Gets a value indicating whether this editor needs value propagation up (value synchronization when one of the child editors changes value, used by the struct types).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditor.LinkedLabel">
            <summary>
            The linked label used to show this custom editor. Can be null if not used (eg. editor is inlined or is using a very customized UI layout).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.RebuildLayout">
            <summary>
            Rebuilds the editor layout. Cleans the whole UI with child elements/editors and then builds new hierarchy. Call it only when necessary.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.RebuildLayoutOnRefresh">
            <summary>
            Rebuilds the editor layout on editor refresh. Postponed after dirty value gets synced. Call it after <see cref="M:FlaxEditor.CustomEditors.CustomEditor.SetValue(System.Object,System.Object)"/> to update editor after actual value assign.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.SkipChildrenRefresh">
            <summary>
            Sets the request to skip the custom editor children refresh during next update. Can be used when editor layout has to be rebuild during the update itself.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <summary>
            Initializes this editor.
            </summary>
            <param name="layout">The layout builder.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.Deinitialize">
            <summary>
            Deinitializes this editor (unbind events and cleanup).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.Cleanup">
            <summary>
            Cleanups this editor resources and child editors.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.Refresh">
            <summary>
            Refreshes this editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.CanRevertDefaultValue">
            <summary>
            Gets a value indicating whether this editor can revert the value to default value.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.RevertToDefaultValue">
            <summary>
            Reverts the property value to default value (if has). Handles undo.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.RefreshDefaultValue">
            <summary>
            Updates the default value assigned to the editor's values container. Sends the event down the custom editors hierarchy to propagate the change.
            </summary>
            <remarks>
            Has no effect on editors that don't have default value assigned.
            </remarks>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.ClearDefaultValueAll">
            <summary>
            Clears all the default value of the container in the whole custom editors tree (this container and all children).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.CanRevertReferenceValue">
            <summary>
            Gets a value indicating whether this editor can revert the value to reference value.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.RevertToReferenceValue">
            <summary>
            Reverts the property value to reference value (if has). Handles undo.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.RefreshReferenceValue">
            <summary>
            Updates the reference value assigned to the editor's values container. Sends the event down the custom editors hierarchy to propagate the change.
            </summary>
            <remarks>
            Has no effect on editors that don't have reference value assigned.
            </remarks>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.ClearReferenceValueAll">
            <summary>
            Clears all the reference value of the container in the whole custom editors tree (this container and all children).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.Copy">
            <summary>
            Copies the value to the system clipboard.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.CanPaste">
            <summary>
            Gets a value indicating whether can paste value from the system clipboard to the property value container.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.Paste">
            <summary>
            Sets the value from the system clipboard.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.SetValueToDefault">
            <summary>
            Sets the editor value to the default value (if assigned).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.SetValueToReference">
            <summary>
            Sets the editor value to the reference value (if assigned).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the object value. Actual update is performed during editor refresh in sync.
            </summary>
            <param name="value">The value.</param>
            <param name="token">The source editor token used by the value setter to support batching Undo actions (eg. for sliders or color pickers).</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.OnDirty(FlaxEditor.CustomEditors.CustomEditor,System.Object,System.Object)">
            <summary>
            Called when custom editor gets dirty (UI value has been modified).
            Allows to filter the event, block it or handle in a custom way.
            </summary>
            <param name="editor">The editor.</param>
            <param name="value">The value.</param>
            <param name="token">The source editor token used by the value setter to support batching Undo actions (eg. for sliders or color pickers).</param>
            <returns>True if allow to handle this event, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.OnUnDirty">
            <summary>
            Called when custom editor sets the value to the object and resets the dirty state. Can be sued to perform custom work after editing the target object.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.ClearToken">
            <summary>
            Clears the token assigned with <see cref="M:FlaxEditor.CustomEditors.CustomEditor.OnDirty(FlaxEditor.CustomEditors.CustomEditor,System.Object,System.Object)"/> parameter. Called on merged undo action end (eg. users stops using slider).
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomEditorPresenter">
            <summary>
            Main class for Custom Editors used to present selected objects properties and allow to modify them.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElementsContainer" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomEditorPresenter.PresenterPanel">
            <summary>
            The panel control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.VerticalPanel" />
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.PresenterPanel.Presenter">
            <summary>
            Gets the presenter.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.PresenterPanel.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.PresenterPanel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor">
            <summary>
            The root editor. Mocks some custom editors events. Created a child editor for the selected objects.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.SyncPointEditor" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor.Editor">
            <summary>
            The selected objects editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor.OverrideEditor">
            <summary>
            Gets or sets the override custom editor used to edit selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor"/> class.
            </summary>
            <param name="noSelectionText">The text to show when no item is selected.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor.Setup(FlaxEditor.CustomEditors.CustomEditorPresenter)">
            <summary>
            Setups editor for selected objects.
            </summary>
            <param name="presenter">The presenter.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor.OnModified">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditorPresenter.Panel">
            <summary>
            The panel.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditorPresenter.Editor">
            <summary>
            The selected objects editor (root, it generates actual editor for selection).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditorPresenter.Selection">
            <summary>
            The selected objects list (read-only).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditorPresenter.Undo">
            <summary>
            The undo object used by this editor.
            </summary>
        </member>
        <member name="E:FlaxEditor.CustomEditors.CustomEditorPresenter.SelectionChanged">
            <summary>
            Occurs when selection gets changed.
            </summary>
        </member>
        <member name="E:FlaxEditor.CustomEditors.CustomEditorPresenter.Modified">
            <summary>
            Occurs when any property gets changed.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditorPresenter.GetUndoObjects">
            <summary>
            Occurs when presenter wants to gather undo objects to record changes. Can be overriden to provide custom objects collection.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.SelectionCount">
            <summary>
            Gets the amount of objects being selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.OverrideEditor">
            <summary>
            Gets or sets the override custom editor used to edit selected objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.Root">
            <summary>
            Gets the root editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.BuildOnUpdate">
            <summary>
            Gets a value indicating whether build on update flag is set and layout will be updated during presenter update.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.#ctor(FlaxEditor.Undo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.CustomEditorPresenter"/> class.
            </summary>
            <param name="undo">The undo. It's optional.</param>
            <param name="noSelectionText">The custom text to display when no object is selected. Default is No selection.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.Select(System.Object)">
            <summary>
            Selects the specified object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.Select(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Selects the specified objects.
            </summary>
            <param name="objects">The objects.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.Deselect">
            <summary>
            Clears the selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.BuildLayout">
            <summary>
            Builds the editors layout.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.BuildLayoutOnUpdate">
            <summary>
            Sets the request to build the editor layout on the next update.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.OnSelectionChanged">
            <summary>
            Called when selection gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.Update">
            <summary>
            Updates custom editors. Refreshes UI values and applies changes to the selected objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.ContainerControl">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorsUtil.GetTypeNameUI(System.Type)">
            <summary>
            Gets the type name for UI. Handles in-build types like System.Single and returns float.
            </summary>
            <param name="type">The type.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorsUtil.GetPropertyNameUI(System.String)">
            <summary>
            Gets the property name for UI. Removes unnecessary characters and filters text. Makes it more user-friendly.
            </summary>
            <param name="name">The name.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ActorEditor">
            <summary>
            Dedicated custom editor for <see cref="T:FlaxEngine.Actor"/> objects.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ActorEditor.SpawnProperty(FlaxEditor.CustomEditors.LayoutElementsContainer,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ActorEditor.GetItemsForType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ActorEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ActorEditor.Deinitialize">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Dedicated.ActorEditor.RemovedScriptDummy.PrefabObject">
            <summary>
            The removed prefab object (from the prefab default instance).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ActorEditor.RemovedScriptDummy.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.AnimatedModelEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.AnimatedModel"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Dedicated.ActorEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.AnimatedModelEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.CurveObjectEditor`1">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.Curve`1"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.CurveObjectEditor`1.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.CurveObjectEditor`1.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.CurveObjectEditor`1.Deinitialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.EnvironmentProbeEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.EnvironmentProbe"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Dedicated.ActorEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.EnvironmentProbeEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.FontReferenceEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.FontReference"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.FontReferenceEditor.GetItemsForType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.LayersMatrixEditor">
            <summary>
            Custom editor for layers matrix editor. Used to define layer-based collision detection for <see cref="F:FlaxEditor.Content.Settings.PhysicsSettings.LayerMasks"/>
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.LayersMatrixEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.LayersMatrixEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.LayersMatrixEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.LayersMatrixEditor.Deinitialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ParticleEffectEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.ParticleEffect"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Dedicated.ActorEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ParticleEffectEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ParticleEffectEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.PhysicalMaterialEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.PhysicalMaterial"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PhysicalMaterialEditor.SpawnProperty(FlaxEditor.CustomEditors.LayoutElementsContainer,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PhysicalMaterialEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PhysicalMaterialEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor">
            <summary>
            Base class for all post process settings structures editors.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor.GetItemsForType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor.SpawnProperty(FlaxEditor.CustomEditors.LayoutElementsContainer,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor.Deinitialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.AmbientOcclusionSettingsEditor">
            <summary>
            Editor for <see cref="T:FlaxEngine.AmbientOcclusionSettings"/> type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.AmbientOcclusionSettingsEditor.OverrideFlags">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.BloomSettingsEditor">
            <summary>
            Editor for <see cref="T:FlaxEngine.BloomSettings"/> type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.BloomSettingsEditor.OverrideFlags">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ToneMappingSettingsEditor">
            <summary>
            Editor for <see cref="T:FlaxEngine.ToneMappingSettings"/> type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.ToneMappingSettingsEditor.OverrideFlags">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ColorGradingSettingsEditor">
            <summary>
            Editor for <see cref="T:FlaxEngine.ColorGradingSettings"/> type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.ColorGradingSettingsEditor.OverrideFlags">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.EyeAdaptationSettingsEditor">
            <summary>
            Editor for <see cref="T:FlaxEngine.EyeAdaptationSettings"/> type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.EyeAdaptationSettingsEditor.OverrideFlags">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.CameraArtifactsSettingsEditor">
            <summary>
            Editor for <see cref="T:FlaxEngine.CameraArtifactsSettings"/> type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.CameraArtifactsSettingsEditor.OverrideFlags">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.LensFlaresSettingsEditor">
            <summary>
            Editor for <see cref="T:FlaxEngine.LensFlaresSettings"/> type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.LensFlaresSettingsEditor.OverrideFlags">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.DepthOfFieldSettingsEditor">
            <summary>
            Editor for <see cref="T:FlaxEngine.AmbientOcclusionSettings"/> type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.DepthOfFieldSettingsEditor.OverrideFlags">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.MotionBlurSettingsEditor">
            <summary>
            Editor for <see cref="T:FlaxEngine.MotionBlurSettings"/> type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.MotionBlurSettingsEditor.OverrideFlags">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ScreenSpaceReflectionsSettingsEditor">
            <summary>
            Editor for <see cref="T:FlaxEngine.ScreenSpaceReflectionsSettings"/> type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.ScreenSpaceReflectionsSettingsEditor.OverrideFlags">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.AntiAliasingSettingsEditor">
            <summary>
            Editor for <see cref="T:FlaxEngine.AntiAliasingSettings"/> type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.AntiAliasingSettingsEditor.OverrideFlags">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.PostFxMaterialsSettingsEditor">
            <summary>
            Editor for <see cref="T:FlaxEngine.PostFxMaterialsSettings"/> type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.PostFxMaterialsSettingsEditor.OverrideFlags">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.RigidBodyEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.RigidBody"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Dedicated.ActorEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.RigidBodyEditor.SpawnProperty(FlaxEditor.CustomEditors.LayoutElementsContainer,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.RigidBodyEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.RigidBodyEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.DragAreaControl">
            <summary>
            Drag and drop scripts area control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.ScriptsEditor">
            <summary>
            The parent scripts editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Dedicated.DragAreaControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon">
            <summary>
            Small image control added per script group that allows to drag and drop a reference to it. Also used to reorder the scripts.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Image" />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.Script">
            <summary>
            Gets the target script.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.#ctor(FlaxEditor.CustomEditors.Dedicated.ScriptsEditor,FlaxEngine.Script)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon"/> class.
            </summary>
            <param name="editor">The script editor.</param>
            <param name="script">The target script.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptArrangeBar.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptArrangeBar.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptArrangeBar.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptArrangeBar.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptArrangeBar.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor">
            <summary>
            Custom editor for actor scripts collection.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptDragDelegate">
            <summary>
            Delegate for script drag start and event events.
            </summary>
            <param name="start">Set to true if drag started, otherwise false.</param>
            <param name="script">The target script to reorder.</param>
        </member>
        <member name="E:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptDragChange">
            <summary>
            Occurs when script drag changes (starts or ends).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor._scripts">
            <summary>
            The scripts collection. Undo operations are recorder for scripts.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.UndoObjects">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptsContainer">
            <summary>
            Values container for the collection of the scripts. Helps with prefab linkage and reference value usage (uses Prefab Instance ID rather than index in array).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptsContainer.PrefabObjectId">
            <summary>
            Gets the prefab object identifier used by the container scripts. Empty if there is no valid linkage to the prefab object.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptsContainer.#ctor(System.Type,System.Int32,FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptsContainer"/> class.
            </summary>
            <param name="elementType">Type of the collection elements (script type).</param>
            <param name="index">The script index in the actor scripts collection.</param>
            <param name="values">The collection values (scripts array).</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptsContainer.RefreshReferenceValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.OnScriptDragChange(System.Boolean,FlaxEngine.Script)">
            <summary>
            Called when script drag changes.
            </summary>
            <param name="start">if set to <c>true</c> drag just started, otherwise ended.</param>
            <param name="script">The target script.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ReorderScript(FlaxEngine.Script,System.Int32)">
            <summary>
            Changes the script order (with undo).
            </summary>
            <param name="script">The script to reorder.</param>
            <param name="targetIndex">The target index to move script.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.Deinitialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.SkyLightEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.SkyLight"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Dedicated.ActorEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.SkyLightEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.TerrainEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.Terrain"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Dedicated.ActorEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.TerrainEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.AnchorPresetsEditor">
            <summary>
            Dedicated custom editor for <see cref="T:FlaxEngine.GUI.AnchorPresets"/> enum.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.AnchorPresetsEditor.AnchorButton.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.AnchorPresetsEditor.AnchorPresetsEditorPopup.#ctor(FlaxEngine.GUI.AnchorPresets)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Dedicated.AnchorPresetsEditor.AnchorPresetsEditorPopup"/> class.
            </summary>
            <param name="presets">The initial value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.AnchorPresetsEditor.AnchorPresetsEditorPopup.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.AnchorPresetsEditor.AnchorPresetsEditorPopup.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.AnchorPresetsEditor.AnchorPresetsEditorPopup.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.AnchorPresetsEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.AnchorPresetsEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.AnchorPresetsEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.AnchorPresetsEditor.Deinitialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.UIControlControlEditor">
            <summary>
            Dedicated custom editor for <see cref="P:FlaxEngine.UIControl.Control"/> object.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.UIControlControlEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.UIControlControlEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ActorLayerEditor">
            <summary>
            Custom editor for picking actor layer. Instead of choosing bit mask or layer index it shows a combo box with simple layer picking by name.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ActorLayerEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorLayerEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorLayerEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ActorStaticFlagsEditor">
            <summary>
            Custom editor for picking actor static flags. Overrides the default enum editor logic to provide more useful functionalities.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorStaticFlagsEditor.OnValueChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ActorTagEditor">
            <summary>
            Custom editor for picking actor tag. Instead of choosing tag index or entering tag text it shows a combo box with simple tag picking by name.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ActorTagEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorTagEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorTagEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ActorTransformEditor">
            <summary>
            Actor transform editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.AxisColorX">
            <summary>
            The X axis color.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.AxisColorY">
            <summary>
            The Y axis color.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.AxisColorZ">
            <summary>
            The Z axis color.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.PositionScaleEditor">
            <summary>
            Custom editor for actor position/scale property.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.Vector3Editor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.PositionScaleEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.OrientationEditor">
            <summary>
            Custom editor for actor orientation property.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.QuaternionEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.OrientationEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ArrayEditor">
            <summary>
            Default implementation of the inspector used to edit arrays.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ArrayEditor.Count">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ArrayEditor.Allocate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ArrayEditor.Resize(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ArrayEditor.CloneValues">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.AssetItemRefEditor">
            <summary>
            Default implementation of the inspector used to edit reference to the <see cref="T:FlaxEditor.Content.AssetItem"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.SceneRefEditor">
            <summary>
            Default implementation of the inspector used to edit reference to the <see cref="T:FlaxEngine.SceneReference"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.AssetRefEditor">
            <summary>
            Default implementation of the inspector used to edit reference to the <see cref="T:FlaxEngine.Asset"/>.
            </summary>
            <remarks>Supports editing reference to the asset using various containers: <see cref="T:FlaxEngine.Asset"/> or <see cref="T:FlaxEditor.Content.AssetItem"/> or <see cref="T:System.Guid"/>.</remarks>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.AssetRefEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.AssetRefEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.AssetRefEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.BooleanEditor">
            <summary>
            Default implementation of the inspector used to edit bool value type properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.BooleanEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.BooleanEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.BooleanEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.CollectionEditor">
            <summary>
            Default implementation of the inspector used to edit arrays/list.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.CollectionEditor.CollectionItemLabel">
            <summary>
            The custom implementation of the collection items labels that can be used to reorder items.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.CollectionEditor.CollectionItemLabel.Editor">
            <summary>
            The editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.CollectionEditor.CollectionItemLabel.Index">
            <summary>
            The index of the item (zero-based).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.CollectionItemLabel.#ctor(FlaxEditor.CustomEditors.Editors.CollectionEditor,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.CollectionEditor.CollectionItemLabel"/> class.
            </summary>
            <param name="editor">The editor.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.CollectionEditor.Count">
            <summary>
            Gets the length of the collection.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.CollectionEditor.ElementType">
            <summary>
            Gets the type of the collection elements.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.Move(System.Int32,System.Int32)">
            <summary>
            Moves the specified item at the given index and swaps it with the other item. It supports undo.
            </summary>
            <param name="srcIndex">Index of the source item.</param>
            <param name="dstIndex">Index of the destination item to swap with.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.Remove(System.Int32)">
            <summary>
            Removes the item at the specified index. It supports undo.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.Allocate(System.Int32)">
            <summary>
            Allocates the collection of the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns>The collection.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.Resize(System.Int32)">
            <summary>
            Resizes collection to the specified new size.
            </summary>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.CloneValues">
            <summary>
            Clones the collection values.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ColorEditor">
            <summary>
            Default implementation of the inspector used to edit Color value type properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ColorEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ColorEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ColorEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ColorTrackball">
            <summary>
            Custom implementation of the inspector used to edit Vector4 color value type properties with color grading trackball.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ColorTrackball.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ColorTrackball.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ColorTrackball.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.DictionaryEditor">
            <summary>
            Default implementation of the inspector used to edit key-value dictionaries.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.DictionaryEditor.DictionaryItemLabel">
            <summary>
            The custom implementation of the dictionary items labels that can be used to remove items or edit keys.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.DictionaryItemLabel.#ctor(FlaxEditor.CustomEditors.Editors.DictionaryEditor,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.DictionaryEditor.DictionaryItemLabel"/> class.
            </summary>
            <param name="editor">The editor.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.DictionaryItemLabel.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.DictionaryItemLabel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.CanEditType(System.Type)">
            <summary>
            Determines whether this editor[can edit the specified dictionary type.
            </summary>
            <param name="type">Type of the dictionary.</param>
            <returns>True if can edit, otherwise false.</returns>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.DictionaryEditor.Count">
            <summary>
            Gets the length of the collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.Remove(System.Object)">
            <summary>
            Removes the item of the specified key. It supports undo.
            </summary>
            <param name="key">The key of the item to remove.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.ChangeKey(System.Object,System.Object)">
            <summary>
            Changes the key of the item.
            </summary>
            <param name="oldKey">The old key value.</param>
            <param name="newKey">The new key value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.Resize(System.Int32)">
            <summary>
            Resizes collection to the specified new size.
            </summary>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.DoubleEditor">
            <summary>
            Default implementation of the inspector used to edit double value type properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.DoubleEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DoubleEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DoubleEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.EnumEditor">
            <summary>
            Default implementation of the inspector used to edit float value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.EnumEditor.element">
            <summary>
            The enum element.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.EnumEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.EnumEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.EnumEditor.OnValueChanged">
            <summary>
            Called when value get changed. Allows to override default value setter logic.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.EnumEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl">
            <summary>
            A custom control type used to pick reference to <see cref="T:FlaxEngine.Object"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.Type">
            <summary>
            Gets or sets the allowed objects type (given type and all sub classes). Must be <see cref="T:FlaxEngine.Object"/> type of any subclass.
            </summary>
            <value>
            The allowed objects type.
            </value>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.Value">
            <summary>
            Gets or sets the selected object value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.ValueID">
            <summary>
            Gets or sets the selected object value by identifier.
            </summary>
            <value>
            The selected object value identifier.
            </value>
        </member>
        <member name="E:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.CheckValid">
            <summary>
            The custom callback for objects validation. Cane be used to implement a rule for objects to pick.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefPickerControl.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor">
            <summary>
            Default implementation of the inspector used to edit reference to the <see cref="T:FlaxEngine.Object"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.FloatEditor">
            <summary>
            Default implementation of the inspector used to edit float value type properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.FloatEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FloatEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FloatEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.GenericEditor">
            <summary>
            Default implementation of the inspector used when no specified inspector is provided for the type. Inspector 
            displays GUI for all the inspectable fields in the object.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo">
            <summary>
            Describes object property/field information for custom editors pipeline.
            </summary>
            <seealso cref="T:System.IComparable" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.Info">
            <summary>
            The member information from reflection.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.Order">
            <summary>
            The order attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.Display">
            <summary>
            The display attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.Tooltip">
            <summary>
            The tooltip attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.CustomEditor">
            <summary>
            The custom editor attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.CustomEditorAlias">
            <summary>
            The custom editor alias attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.Space">
            <summary>
            The space attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.Header">
            <summary>
            The header attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.VisibleIf">
            <summary>
            The visible if attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.IsReadOnly">
            <summary>
            The read-only attribute usage flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.ExpandGroups">
            <summary>
            The expand groups flag.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.UseGroup">
            <summary>
            Gets a value indicating whether use dedicated group.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.OverrideEditor">
            <summary>
            Gets the overridden custom editor for item editing.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.TooltipText">
            <summary>
            Gets the tooltip text (may be null if not provided).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo"/> class.
            </summary>
            <param name="info">The reflection information.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.#ctor(System.Reflection.MemberInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo"/> class.
            </summary>
            <param name="info">The reflection information.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.GetValues(FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Gets the values.
            </summary>
            <param name="instanceValues">The instance values.</param>
            <returns>The values container.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.CanMerge(FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo,FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo)">
            <summary>
            Determines whether can merge two item infos to present them at once.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
              <c>true</c> if can merge two item infos to present them at once; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.GetItemsForType(System.Type)">
            <summary>
            Gets the items for the type
            </summary>
            <param name="type">The type.</param>
            <returns>The items.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.GetItemsForType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Gets the items for the type
            </summary>
            <param name="type">The type.</param>
            <param name="useProperties">True if use type properties.</param>
            <param name="useFields">True if use type fields.</param>
            <returns>The items.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.SpawnProperty(FlaxEditor.CustomEditors.LayoutElementsContainer,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo)">
            <summary>
            Spawns the property for the given item.
            </summary>
            <param name="itemLayout">The item layout.</param>
            <param name="itemValues">The item values.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.GuidEditor">
            <summary>
            Default implementation of the inspector used to edit Guid properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.GuidEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GuidEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GuidEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.IBrushEditor">
            <summary>
            Default implementation of the inspector used to edit <see cref="T:FlaxEngine.GUI.IBrush"/> type properties.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush"/>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor"/>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.IBrushEditor.Options">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.Int2Editor">
            <summary>
            Default implementation of the inspector used to edit Int2 value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int2Editor.XElement">
            <summary>
            The X component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int2Editor.YElement">
            <summary>
            The Y component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.Int2Editor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Int2Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Int2Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.Int3Editor">
            <summary>
            Default implementation of the inspector used to edit Int3 value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int3Editor.XElement">
            <summary>
            The X component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int3Editor.YElement">
            <summary>
            The Y component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int3Editor.ZElement">
            <summary>
            The Z component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.Int3Editor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Int3Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Int3Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.Int4Editor">
            <summary>
            Default implementation of the inspector used to edit Int4 value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int4Editor.XElement">
            <summary>
            The X component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int4Editor.YElement">
            <summary>
            The Y component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int4Editor.ZElement">
            <summary>
            The Z component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int4Editor.WElement">
            <summary>
            The W component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.Int4Editor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Int4Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Int4Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.IntegerEditor">
            <summary>
            Default implementation of the inspector used to edit integer value type properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.IntegerEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.IntegerEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.IntegerEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor">
            <summary>
            Default implementation of the inspector used to edit signed integer value type properties (maps to the full range of long type).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor.GetLimits(System.Int64@,System.Int64@)">
            <summary>
            Gets the value limits.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor.GetValue(System.Object)">
            <summary>
            Gets the value as long.
            </summary>
            <param name="value">The value from object.</param>
            <returns>The value for editor.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor.SetValue(System.Int64)">
            <summary>
            Gets the value from long.
            </summary>
            <param name="value">The value from editor.</param>
            <returns>The value to object.</returns>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.SByteEditor">
            <summary>
            Default implementation of the inspector used to edit sbyte value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SByteEditor.GetLimits(System.Int64@,System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SByteEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SByteEditor.SetValue(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ShortEditor">
            <summary>
            Default implementation of the inspector used to edit short value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ShortEditor.GetLimits(System.Int64@,System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ShortEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ShortEditor.SetValue(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.LongEditor">
            <summary>
            Default implementation of the inspector used to edit long value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.LongEditor.GetLimits(System.Int64@,System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.LongEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.LongEditor.SetValue(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor">
            <summary>
            Default implementation of the inspector used to edit unsigned integer value type properties (maps to the full range of ulong type).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor.GetLimits(System.UInt64@,System.UInt64@)">
            <summary>
            Gets the value limits.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor.GetValue(System.Object)">
            <summary>
            Gets the value as long.
            </summary>
            <param name="value">The value from object.</param>
            <returns>The value for editor.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor.SetValue(System.UInt64)">
            <summary>
            Gets the value from long.
            </summary>
            <param name="value">The value from editor.</param>
            <returns>The value to object.</returns>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ByteEditor">
            <summary>
            Default implementation of the inspector used to edit byte value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ByteEditor.GetLimits(System.UInt64@,System.UInt64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ByteEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ByteEditor.SetValue(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.CharEditor">
            <summary>
            Default implementation of the inspector used to edit char value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CharEditor.GetLimits(System.UInt64@,System.UInt64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CharEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CharEditor.SetValue(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.UShortEditor">
            <summary>
            Default implementation of the inspector used to edit ushort value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UShortEditor.GetLimits(System.UInt64@,System.UInt64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UShortEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UShortEditor.SetValue(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.UintEditor">
            <summary>
            Default implementation of the inspector used to edit uint value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UintEditor.GetLimits(System.UInt64@,System.UInt64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UintEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UintEditor.SetValue(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ULongEditor">
            <summary>
            Default implementation of the inspector used to edit ulong value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ULongEditor.GetLimits(System.UInt64@,System.UInt64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ULongEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ULongEditor.SetValue(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ListEditor">
            <summary>
            Default implementation of the inspector used to edit lists.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ListEditor.Count">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ListEditor.Allocate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ListEditor.Resize(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ListEditor.CloneValues">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.MatrixEditor">
            <summary>
            Default implementation of the inspector used to edit Matrix value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.MatrixEditor.Elements">
            <summary>
            The 16 components editors.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.MatrixEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.MatrixEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.MatrixEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ModelInstanceEntryEditor">
            <summary>
            Default implementation of the inspector used to edit <see cref="T:FlaxEngine.ModelInstanceEntry"/> value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ModelInstanceEntryEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ModelInstanceEntryEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor">
            <summary>
            Base implementation of the inspector used to edit properties of the given abstract or interface type that contain a setter to assign a derived implementation type.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType">
            <summary>
            Defines type that can be assigned to the modified property.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType.Name">
            <summary>
            The type name used to show in the type selector dropdown menu (for user interface).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType.Type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType.Creator">
            <summary>
            The creator function that spawns the object of the given type.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType"/> struct.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType.#ctor(System.String,System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="creator">The instance creation function.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.Options">
            <summary>
            Gets the options collection for the property value assignment.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.QuaternionEditor">
            <summary>
            Default implementation of the inspector used to edit Quaternion value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.QuaternionEditor.XElement">
            <summary>
            The X component element
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.QuaternionEditor.YElement">
            <summary>
            The Y component element
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.QuaternionEditor.ZElement">
            <summary>
            The Z component element
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.QuaternionEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.QuaternionEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.QuaternionEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.SkeletonNodeEditor">
            <summary>
            Custom editor for picking skeleton node. Instead of choosing node index or entering node text it shows a combo box with simple tag picking by name.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.SkeletonNodeEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SkeletonNodeEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SkeletonNodeEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.SpriteHandleEditor">
            <summary>
            Default implementation of the inspector used to edit <see cref="T:FlaxEngine.SpriteHandle"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SpriteHandleEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SpriteHandleEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SpriteHandleEditor.OnDirty(FlaxEditor.CustomEditors.CustomEditor,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.StringEditor">
            <summary>
            Default implementation of the inspector used to edit string properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.StringEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.StringEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.StringEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.StyleEditor">
            <summary>
            Default implementation of the inspector used to edit styles.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.StyleEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.StyleEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <summary>
            Initializes this editor.
            </summary>
            <param name="layout">The layout builder.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.StyleEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.TypePickerControl">
            <summary>
            A custom control type used to pick reference to <see cref="T:System.Type"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.TypePickerControl.Type">
            <summary>
            Gets or sets the allowed type (given type and all sub classes). Must be <see cref="T:System.Type"/> type of any subclass.
            </summary>
            <value>
            The allowed type.
            </value>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.TypePickerControl.Value">
            <summary>
            Gets or sets the selected types value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.TypePickerControl.ValueTypeName">
            <summary>
            Gets or sets the selected type fullname (namespace and class).
            </summary>
            <value>
            The selected type fullname.
            </value>
        </member>
        <member name="E:FlaxEditor.CustomEditors.Editors.TypePickerControl.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.TypePickerControl.CheckValid">
            <summary>
            The custom callback for types validation. Cane be used to implement a rule for types to pick.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypePickerControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.TypePickerControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypePickerControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypePickerControl.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypePickerControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypePickerControl.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypePickerControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypePickerControl.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypePickerControl.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypePickerControl.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypePickerControl.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypePickerControl.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.TypeEditor">
            <summary>
            Default implementation of the inspector used to edit reference to the <see cref="T:System.Type"/>. Used to pick classes.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.TypeEditor._element">
            <summary>
            The element.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.TypeEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypeEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.TypeEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.Vector2Editor">
            <summary>
            Default implementation of the inspector used to edit Vector2 value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector2Editor.XElement">
            <summary>
            The X component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector2Editor.YElement">
            <summary>
            The Y component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.Vector2Editor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Vector2Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Vector2Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.Vector3Editor">
            <summary>
            Default implementation of the inspector used to edit Vector3 value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector3Editor.XElement">
            <summary>
            The X component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector3Editor.YElement">
            <summary>
            The Y component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector3Editor.ZElement">
            <summary>
            The Z component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.Vector3Editor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Vector3Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Vector3Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.Vector4Editor">
            <summary>
            Default implementation of the inspector used to edit Vector4 value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector4Editor.XElement">
            <summary>
            The X component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector4Editor.YElement">
            <summary>
            The Y component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector4Editor.ZElement">
            <summary>
            The Z component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector4Editor.WElement">
            <summary>
            The W component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.Vector4Editor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Vector4Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Vector4Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.VersionEditor">
            <summary>
            Default implementation of the inspector used to edit Version value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.VersionEditor.Major">
            <summary>
            The Version.Major component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.VersionEditor.Minor">
            <summary>
            The Version.Minor component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.VersionEditor.Build">
            <summary>
            The Version.Build component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.VersionEditor.Revision">
            <summary>
            The Version.Revision component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.VersionEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.VersionEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.VersionEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.ButtonElement">
            <summary>
            The button element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.ButtonElement.Button">
            <summary>
            The button.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.ButtonElement.Init(System.String)">
            <summary>
            Initializes the element.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.ButtonElement.Init(System.String,FlaxEngine.Color)">
            <summary>
            Initializes the element.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.ButtonElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.CheckBoxElement">
            <summary>
            The checkbox element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.CheckBoxElement.CheckBox">
            <summary>
            The check box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.CheckBoxElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.CheckBoxElement"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.CheckBoxElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.ComboBoxElement">
            <summary>
            The combobx element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.ComboBoxElement.ComboBox">
            <summary>
            The combo box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.ComboBoxElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.ComboBoxElement"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.ComboBoxElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.CustomElementsContainer`1">
            <summary>
            The custom layout element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElementsContainer" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.CustomElementsContainer`1.CustomControl">
            <summary>
            The custom control.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.CustomElementsContainer`1.ContainerControl">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.CustomElement`1">
            <summary>
            The custom layout element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.CustomElement`1.CustomControl">
            <summary>
            The custom control.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.CustomElement`1.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.DoubleValueElement">
            <summary>
            The double precision floating point value element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.DoubleValueElement.DoubleValue">
            <summary>
            The double value box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.DoubleValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.FloatValueElement"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.DoubleValueElement.SetLimits(System.Reflection.MemberInfo)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.LimitAttribute"/>.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.DoubleValueElement.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.LimitAttribute"/>.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.DoubleValueElement.SetLimits(FlaxEditor.CustomEditors.Elements.DoubleValueElement)">
            <summary>
            Sets the editor limits from the other <see cref="T:FlaxEditor.CustomEditors.Elements.DoubleValueElement"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.DoubleValueElement.Control">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.DoubleValueElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.DoubleValueElement.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.EnumElement">
            <summary>
            The enum editor element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.EnumElement.EnumComboBox">
            <summary>
            The combo box used to show enum values.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.EnumElement.#ctor(System.Type,FlaxEditor.GUI.EnumComboBox.BuildEntriesDelegate,FlaxEngine.EnumDisplayAttribute.FormatMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.EnumElement"/> class.
            </summary>
            <param name="type">The enum type.</param>
            <param name="customBuildEntriesDelegate">The custom entries layout builder. Allows to hide existing or add different enum values to editor.</param>
            <param name="formatMode">The formatting mode.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.EnumElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.FloatValueElement">
            <summary>
            The floating point value element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.FloatValueElement.FloatValue">
            <summary>
            The float value box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.FloatValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.FloatValueElement"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.FloatValueElement.SetLimits(System.Reflection.MemberInfo)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.LimitAttribute"/>.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.FloatValueElement.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.LimitAttribute"/>.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.FloatValueElement.SetLimits(FlaxEditor.CustomEditors.Elements.FloatValueElement)">
            <summary>
            Sets the editor limits from the other <see cref="T:FlaxEditor.CustomEditors.Elements.FloatValueElement"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.FloatValueElement.Control">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.FloatValueElement.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.FloatValueElement.IsSliding">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.GroupElement">
            <summary>
            The layout group element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.GroupElement.Panel">
            <summary>
            The drop panel.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.GroupElement.Init(System.String)">
            <summary>
            Initializes the element.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.GroupElement.ContainerControl">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.IFloatValueEditor">
            <summary>
            The floating point value editor element.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IFloatValueEditor.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IFloatValueEditor.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.IIntegerValueEditor">
            <summary>
            The integer value editor element.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IIntegerValueEditor.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IIntegerValueEditor.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.ImageElement">
            <summary>
            The image element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.ImageElement.Image">
            <summary>
            The image.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.ImageElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.IntegerValueElement">
            <summary>
            The integer value element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.IntegerValueElement.IntValue">
            <summary>
            The integer value box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.IntegerValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.IntegerValueElement"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.IntegerValueElement.SetLimits(System.Reflection.MemberInfo)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.LimitAttribute"/>.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.IntegerValueElement.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.LimitAttribute"/>.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.IntegerValueElement.SetLimits(FlaxEditor.CustomEditors.Elements.IntegerValueElement)">
            <summary>
            Sets the editor limits from the other <see cref="T:FlaxEditor.CustomEditors.Elements.IntegerValueElement"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IntegerValueElement.Control">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IntegerValueElement.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IntegerValueElement.IsSliding">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement">
            <summary>
            The signed integer value element (maps to the full range of long type).
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement.LongValue">
            <summary>
            The signed integer (long) value box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement.Control">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement">
            <summary>
            The unsigned integer value element (maps to the full range of ulong type).
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement.ULongValue">
            <summary>
            The unsigned integer (ulong) value box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement.Control">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.LabelElement">
            <summary>
            The label element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.LabelElement.Label">
            <summary>
            The label.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.LabelElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.CheckBoxElement"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.LabelElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.PropertiesListElement">
            <summary>
            <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> properties list element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElementsContainer"/>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.PropertiesListElement.Properties">
            <summary>
            The list.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.PropertiesListElement.ContainerControl">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.PropertiesListElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.PropertiesListElement"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.PropertiesListElement.OnAddEditor(FlaxEditor.CustomEditors.CustomEditor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.PropertiesListElement.ClearLayout">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.SliderElement">
            <summary>
            The slider element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.SliderElement.Slider">
            <summary>
            The slider control.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.SliderElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.SliderElement"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.SliderElement.SetLimits(System.Reflection.MemberInfo)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.RangeAttribute"/>.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.SliderElement.SetLimits(FlaxEngine.RangeAttribute)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.RangeAttribute"/>.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SliderElement.Control">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SliderElement.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SliderElement.FlaxEditor#CustomEditors#Elements#IIntegerValueEditor#Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SliderElement.IsSliding">
            <inheritdoc cref="P:FlaxEditor.CustomEditors.Elements.IFloatValueEditor.IsSliding" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.SpaceElement">
            <summary>
            The spacer element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElementsContainer" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.SpaceElement.Spacer">
            <summary>
            The spacer.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.SpaceElement.Init(System.Single)">
            <summary>
            Initializes the element.
            </summary>
            <param name="height">The height.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SpaceElement.ContainerControl">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.TextBoxElement">
            <summary>
            The textbox element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.TextBoxElement.TextBox">
            <summary>
            The text box.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.TextBoxElement.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.TextBoxElement.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.TextBoxElement"/> class.
            </summary>
            <param name="isMultiline">Enable/disable multiline text input support</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.TextBoxElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.TreeElement">
            <summary>
            The tree structure element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElementsContainer" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.TreeElement.TreeControl">
            <summary>
            The tree control.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.TreeElement.ContainerControl">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.TreeElement.Node(System.String)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.ITreeElement">
            <summary>
            Tree nodes elements.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.ITreeElement.Node(System.String)">
            <summary>
            Adds new tree node element.
            </summary>
            <param name="text">The node name (title text).</param>
            <returns>The created element.</returns>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.TreeNodeElement">
            <summary>
            The tree structure node element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElementsContainer" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.TreeNodeElement.TreeNode">
            <summary>
            The tree node control.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.TreeNodeElement.ContainerControl">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.TreeNodeElement.Node(System.String)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.VerticalPanelElement">
            <summary>
            The vertical panel element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.VerticalPanelElement.Panel">
            <summary>
            The panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.VerticalPanelElement.ContainerControl">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.CheckablePropertyNameLabel">
            <summary>
            Custom property name label that contains a checkbox used to enable/disable a property.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.CheckablePropertyNameLabel.CheckBox">
            <summary>
            The check box.
            </summary>
        </member>
        <member name="E:FlaxEditor.CustomEditors.GUI.CheckablePropertyNameLabel.CheckChanged">
            <summary>
            Event fired when 'checked' state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.CheckablePropertyNameLabel.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.CheckablePropertyNameLabel.UpdateStyle">
            <summary>
            Updates the label style.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.CheckablePropertyNameLabel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel">
            <summary>
            Custom property name label that fires mouse events for label.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.MouseDelegate">
            <summary>
            Mouse action delegate.
            </summary>
            <param name="label">The label.</param>
            <param name="location">The mouse location.</param>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.MouseLeftClick">
            <summary>
            The mouse left button clicks on the label.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.MouseRightClick">
            <summary>
            The mouse right button clicks on the label.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.MouseLeftDoubleClick">
            <summary>
            The mouse left button double clicks on the label.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.MouseRightDoubleClick">
            <summary>
            The mouse right button double clicks on the label.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.DraggablePropertyNameLabel">
            <summary>
            Custom property name label that fires mouse events for label and supports dragging.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.DraggablePropertyNameLabel.DragDelegate">
            <summary>
            Mouse drag action delegate.
            </summary>
            <param name="label">The label.</param>
            <returns>The drag data or null if not use drag.</returns>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.DraggablePropertyNameLabel.Drag">
            <summary>
            The mouse starts the drag. Callbacks gets the drag data.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.DraggablePropertyNameLabel.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.DraggablePropertyNameLabel.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.DraggablePropertyNameLabel.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.DraggablePropertyNameLabel.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.DraggablePropertyNameLabel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.PropertiesList">
            <summary>
            <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> properties list control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.PanelWithMargins" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.PropertiesList.SplitterSize">
            <summary>
            The splitter size (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.PropertiesList.SplitterMargin">
            <summary>
            The splitter margin (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.GUI.PropertiesList.SplitterValue">
            <summary>
            Gets or sets the splitter value (always in range [0; 1]).
            </summary>
            <value>
            The splitter value (always in range [0; 1]).
            </value>
        </member>
        <member name="P:FlaxEditor.CustomEditors.GUI.PropertiesList.Element">
            <summary>
            Gets the properties list element. It's a parent object for this control.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.#ctor(FlaxEditor.CustomEditors.Elements.PropertiesListElement)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.GUI.PropertiesList"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel">
            <summary>
            Displays custom editor property name.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Label" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.SetupContextMenuDelegate">
            <summary>
            Custom event delegate that can be used to extend the property name label with an additional functionality.
            </summary>
            <param name="label">The label.</param>
            <param name="menu">The menu.</param>
            <param name="linkedEditor">The linked editor. Can be null.</param>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.FirstChildControlIndex">
            <summary>
            Helper value used by the <see cref="T:FlaxEditor.CustomEditors.GUI.PropertiesList"/> to draw property names in a proper area.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.LinkedEditor">
            <summary>
            The linked custom editor (shows the label property).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.HighlightStripColor">
            <summary>
            The highlight strip color drawn on a side (transparent if skip rendering).
            </summary>
        </member>
        <member name="E:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.SetupContextMenu">
            <summary>
            Occurs when label creates the context menu popup for th property. Can be used to add some custom logic per property editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.LayoutElement">
            <summary>
            Represents single element of the Custom Editor layout.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.LayoutElement.Control">
            <summary>
            Gets the control represented by this element.
            </summary>
            <value>
            The control.
            </value>
        </member>
        <member name="T:FlaxEditor.CustomEditors.LayoutElementsContainer">
            <summary>
            Represents a container control for <see cref="T:FlaxEditor.CustomEditors.LayoutElement"/>. Can contain child elements.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.LayoutElementsContainer.isRootGroup">
            <summary>
            Helper flag that is set to true if this container is in root presenter area, otherwise it's one of child groups.
            It's used to collapse all child groups and open the root ones by auto.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.LayoutElementsContainer.Children">
            <summary>
            The children.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.LayoutElementsContainer.ContainerControl">
            <summary>
            Gets the control represented by this element.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Group(System.String,System.Boolean)">
            <summary>
            Adds new group element.
            </summary>
            <param name="title">The title.</param>
            <param name="useTransparentHeader">True if use drop down icon and transparent group header, otherwise use normal style.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Button(System.String)">
            <summary>
            Adds new button element.
            </summary>
            <param name="text">The text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Button(System.String,FlaxEngine.Color)">
            <summary>
            Adds new button element with custom color.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Custom``1">
            <summary>
            Adds new custom element.
            </summary>
            <typeparam name="T">The custom control.</typeparam>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Custom``1(System.String,System.String)">
            <summary>
            Adds new custom element with name label.
            </summary>
            <param name="name">The property name.</param>
            <typeparam name="T">The custom control.</typeparam>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.CustomContainer``1">
            <summary>
            Adds new custom elements container.
            </summary>
            <typeparam name="T">The custom control.</typeparam>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.CustomContainer``1(System.String,System.String)">
            <summary>
            Adds new custom elements container with name label.
            </summary>
            <param name="name">The property name.</param>
            <typeparam name="T">The custom control.</typeparam>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Space(System.Single)">
            <summary>
            Adds new space.
            </summary>
            <param name="height">The space height.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Image(FlaxEngine.SpriteHandle)">
            <summary>
            Adds sprite image to the layout.
            </summary>
            <param name="sprite">The sprite.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Image(FlaxEngine.Texture)">
            <summary>
            Adds texture image to the layout.
            </summary>
            <param name="texture">The texture.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Image(FlaxEngine.GPUTexture)">
            <summary>
            Adds GPU texture image to the layout.
            </summary>
            <param name="texture">The GPU texture.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Header(System.String)">
            <summary>
            Adds new header control.
            </summary>
            <param name="text">The header text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.TextBox(System.Boolean)">
            <summary>
            Adds new text box element.
            </summary>
            <param name="isMultiline">Enable/disable multiline text input support</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Checkbox">
            <summary>
            Adds new check box element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Checkbox(System.String,System.String)">
            <summary>
            Adds new check box element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Tree">
            <summary>
            Adds new tree element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Label(System.String,FlaxEngine.TextAlignment)">
            <summary>
            Adds new label element.
            </summary>
            <param name="text">The label text.</param>
            <param name="horizontalAlignment">The label text horizontal alignment.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Label(System.String,System.String,System.String)">
            <summary>
            Adds new label element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="text">The label text.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.FloatValue">
            <summary>
            Adds new float value element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.FloatValue(System.String,System.String)">
            <summary>
            Adds new float value element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.DoubleValue">
            <summary>
            Adds new double value element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.DoubleValue(System.String,System.String)">
            <summary>
            Adds new double value element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Slider">
            <summary>
            Adds new slider element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Slider(System.String,System.String)">
            <summary>
            Adds new slider element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.SignedIntegerValue">
            <summary>
            Adds new signed integer (up to long range) value element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.UnsignedIntegerValue">
            <summary>
            Adds new unsigned signed integer (up to ulong range) value element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.IntegerValue">
            <summary>
            Adds new integer value element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.IntegerValue(System.String,System.String)">
            <summary>
            Adds new integer value element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.ComboBox">
            <summary>
            Adds new combobox element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.ComboBox(System.String,System.String)">
            <summary>
            Adds new combobox element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Enum(System.Type,FlaxEditor.GUI.EnumComboBox.BuildEntriesDelegate,FlaxEngine.EnumDisplayAttribute.FormatMode)">
            <summary>
            Adds new enum value element.
            </summary>
            <param name="type">The enum type.</param>
            <param name="customBuildEntriesDelegate">The custom entries layout builder. Allows to hide existing or add different enum values to editor.</param>
            <param name="formatMode">The formatting mode.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Enum(System.String,System.Type,FlaxEditor.GUI.EnumComboBox.BuildEntriesDelegate,System.String,FlaxEngine.EnumDisplayAttribute.FormatMode)">
            <summary>
            Adds new enum value element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="type">The enum type.</param>
            <param name="customBuildEntriesDelegate">The custom entries layout builder. Allows to hide existing or add different enum values to editor.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <param name="formatMode">The formatting mode.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Object(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.CustomEditor)">
            <summary>
            Adds object(s) editor. Selects proper <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> based on overrides.
            </summary>
            <param name="values">The values.</param>
            <param name="overrideEditor">The custom editor to use. If null will detect it by auto.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Object(System.String,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.CustomEditor,System.String)">
            <summary>
            Adds object(s) editor with name label. Selects proper <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> based on overrides.
            </summary>
            <param name="name">The property name.</param>
            <param name="values">The values.</param>
            <param name="overrideEditor">The custom editor to use. If null will detect it by auto.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Object(FlaxEditor.CustomEditors.GUI.PropertyNameLabel,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.CustomEditor,System.String)">
            <summary>
            Adds object(s) editor with name label. Selects proper <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> based on overrides.
            </summary>
            <param name="label">The property label.</param>
            <param name="values">The values.</param>
            <param name="overrideEditor">The custom editor to use. If null will detect it by auto.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Property(System.String,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.CustomEditor,System.String)">
            <summary>
            Adds object property editor. Selects proper <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> based on overrides.
            </summary>
            <param name="name">The property name.</param>
            <param name="values">The values.</param>
            <param name="overrideEditor">The custom editor to use. If null will detect it by auto.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Property(FlaxEditor.CustomEditors.GUI.PropertyNameLabel,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.CustomEditor,System.String)">
            <summary>
            Adds object property editor. Selects proper <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> based on overrides.
            </summary>
            <param name="label">The property label.</param>
            <param name="values">The values.</param>
            <param name="overrideEditor">The custom editor to use. If null will detect it by auto.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.AddPropertyItem(System.String,System.String)">
            <summary>
            Adds the <see cref="T:FlaxEditor.CustomEditors.Elements.PropertiesListElement"/> to the current layout or reuses the previous one. Used to inject properties.
            </summary>
            <param name="name">The property label name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.AddPropertyItem(FlaxEditor.CustomEditors.GUI.PropertyNameLabel,System.String)">
            <summary>
            Adds the <see cref="T:FlaxEditor.CustomEditors.Elements.PropertiesListElement"/> to the current layout or reuses the previous one. Used to inject properties.
            </summary>
            <param name="label">The property label.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.OnAddElement(FlaxEditor.CustomEditors.LayoutElement)">
            <summary>
            Called when element is added to the layout.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.OnAddEditor(FlaxEditor.CustomEditors.CustomEditor)">
            <summary>
            Called when editor is added.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.ClearLayout">
            <summary>
            Clears the layout.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.LayoutElementsContainer.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.SyncPointEditor">
            <summary>
            Synchronizes objects modifications and records undo operations.
            Allows to override undo action target objects for the part of the custom editors hierarchy.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.SyncPointEditor._isDirty">
            <summary>
            The 'is dirty' flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.SyncPointEditor._setValueToken">
            <summary>
            The cached token used by the value setter to support batching Undo actions (eg. for sliders or color pickers).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.SyncPointEditor.UndoObjects">
            <summary>
            Gets the undo objects used to record undo operation changes.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.SyncPointEditor.Undo">
            <summary>
            Gets the undo.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.Deinitialize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.OnModified">
            <summary>
            Called when data gets modified by the custom editors.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.OnDirty(FlaxEditor.CustomEditors.CustomEditor,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.ClearToken">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.EndUndoRecord">
            <summary>
            Ends the undo recording if started with custom token (eg. by value slider).
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomValueContainer">
            <summary>
            Custom <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> for any type of storage and data management logic.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.ValueContainer" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomValueContainer.GetDelegate">
            <summary>
            Get value delegate.
            </summary>
            <param name="instance">The parent object instance.</param>
            <param name="index">The index (for multi selected objects).</param>
            <returns>The value.</returns>
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomValueContainer.SetDelegate">
            <summary>
            Set value delegate.
            </summary>
            <param name="instance">The parent object instance.</param>
            <param name="index">The index (for multi selected objects).</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.#ctor(System.Type,FlaxEditor.CustomEditors.CustomValueContainer.GetDelegate,FlaxEditor.CustomEditors.CustomValueContainer.SetDelegate,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.CustomValueContainer"/> class.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="getter">The value getter.</param>
            <param name="setter">The value setter.</param>
            <param name="attributes">The custom type attributes used to override the value editor logic or appearance (eg. instance of <see cref="T:FlaxEngine.LimitAttribute"/>).</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.#ctor(System.Type,System.Object,FlaxEditor.CustomEditors.CustomValueContainer.GetDelegate,FlaxEditor.CustomEditors.CustomValueContainer.SetDelegate,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.CustomValueContainer"/> class.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="initialValue">The initial value.</param>
            <param name="getter">The value getter.</param>
            <param name="setter">The value setter.</param>
            <param name="attributes">The custom type attributes used to override the value editor logic or appearance (eg. instance of <see cref="T:FlaxEngine.LimitAttribute"/>).</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.GetAttributes">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.Refresh(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.RefreshReferenceValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.DictionaryValueContainer">
            <summary>
            Custom <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> for <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.ValueContainer" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.DictionaryValueContainer.Key">
            <summary>
            The key in the collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.DictionaryValueContainer"/> class.
            </summary>
            <param name="elementType">Type of the collection elements.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.#ctor(System.Type,System.Object,FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.DictionaryValueContainer"/> class.
            </summary>
            <param name="elementType">Type of the collection elements.</param>
            <param name="key">The key.</param>
            <param name="values">The collection values.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.Refresh(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.RefreshReferenceValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.ListValueContainer">
            <summary>
            Custom <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> for <see cref="T:System.Collections.IList"/> (used for <see cref="T:System.Array"/> and <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.ValueContainer" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.ListValueContainer.Index">
            <summary>
            The index in the collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ListValueContainer"/> class.
            </summary>
            <param name="elementType">Type of the collection elements.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.#ctor(System.Type,System.Int32,FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ListValueContainer"/> class.
            </summary>
            <param name="elementType">Type of the collection elements.</param>
            <param name="index">The index.</param>
            <param name="values">The collection values.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.Refresh(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.RefreshReferenceValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.ReadOnlyValueContainer">
            <summary>
            Custom <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> for read-only values.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.ValueContainer" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ReadOnlyValueContainer"/> class.
            </summary>
            <param name="value">The initial value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ReadOnlyValueContainer"/> class.
            </summary>
            <param name="type">The values type.</param>
            <param name="value">The initial value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.Refresh(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.RefreshReferenceValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.ValueContainer">
            <summary>
            Editable object values.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.ValueContainer._hasDefaultValue">
            <summary>
            The has default value flag. Set if <see cref="F:FlaxEditor.CustomEditors.ValueContainer._defaultValue"/> is valid and assigned.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.ValueContainer._defaultValue">
            <summary>
            The default value used to show difference in the UI compared to the default object values. Used to revert modified properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.ValueContainer._hasReferenceValue">
            <summary>
            The has reference value flag. Set if <see cref="F:FlaxEditor.CustomEditors.ValueContainer._referenceValue"/> is valid and assigned.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.ValueContainer._referenceValue">
            <summary>
            The reference value used to show difference in the UI compared to the other object. Used by the prefabs system.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.ValueContainer.Info">
            <summary>
            The values source information from reflection. Used to update values.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.Type">
            <summary>
            Gets the values type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.IsSingleObject">
            <summary>
            Gets a value indicating whether single object is selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.HasDifferentValues">
            <summary>
            Gets a value indicating whether selected objects are different values.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.HasDifferentTypes">
            <summary>
            Gets a value indicating whether selected objects are different types.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.HasNull">
            <summary>
            Gets a value indicating whether any value in the collection is null. Returns false if collection is empty.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.HasValueType">
            <summary>
            Gets a value indicating whether this any value in the collection is of value type (eg. a structure, not a class type). Returns false if collection is empty.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.IsArray">
            <summary>
            Gets a value indicating whether this values container type is array.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.ValuesTypes">
            <summary>
            Gets the values types array (without duplicates).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> class.
            </summary>
            <param name="info">The member info.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.HasReferenceValue">
            <summary>
            Gets a value indicating whether this instance has reference value assigned (see <see cref="P:FlaxEditor.CustomEditors.ValueContainer.ReferenceValue"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.ReferenceValue">
            <summary>
            Gets the reference value used to show difference in the UI compared to the other object. Used by the prefabs system.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.IsReferenceValueModified">
            <summary>
            Gets a value indicating whether this instance has reference value and the any of the values in the contains is modified (compared to the reference).
            </summary>
            <remarks>
            For prefabs system it means that object property has been modified compared to the prefab value.
            </remarks>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.HasDefaultValue">
            <summary>
            Gets a value indicating whether this instance has default value assigned (see <see cref="P:FlaxEditor.CustomEditors.ValueContainer.DefaultValue"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.DefaultValue">
            <summary>
            Gets the default value used to show difference in the UI compared to the default value object. Used to revert modified properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.IsDefaultValueModified">
            <summary>
            Gets a value indicating whether this instance has default value and the any of the values in the contains is modified (compared to the reference).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.#ctor(System.Reflection.MemberInfo,FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> class.
            </summary>
            <param name="info">The member info.</param>
            <param name="instanceValues">The parent values.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.#ctor(System.Type,FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> class.
            </summary>
            <param name="customType">The target custom type of the container values. Used to override the data.</param>
            <param name="other">The other values container to clone.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.#ctor(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> class.
            </summary>
            <param name="info">The member info.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.GetAttributes">
            <summary>
            Gets the custom attributes defined for the values source member.
            </summary>
            <returns>The attributes objects array.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.Refresh(FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Refreshes the specified instance values.
            </summary>
            <param name="instanceValues">The parent values.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,System.Object)">
            <summary>
            Sets the specified instance values. Refreshes this values container.
            </summary>
            <param name="instanceValues">The parent values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Sets the specified instance values. Refreshes this values container.
            </summary>
            <param name="instanceValues">The parent values.</param>
            <param name="values">The other values to set this container to.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Sets the specified instance values with the container values.
            </summary>
            <param name="instanceValues">The parent values.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.SetDefaultValue(System.Object)">
            <summary>
            Sets the default value of the container.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.RefreshDefaultValue(System.Object)">
            <summary>
            Refreshes the default value of the container.
            </summary>
            <param name="instanceValue">The parent value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.ClearDefaultValue">
            <summary>
            Clears the default value of the container.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.SetReferenceValue(System.Object)">
            <summary>
            Sets the reference value of the container.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.RefreshReferenceValue(System.Object)">
            <summary>
            Refreshes the reference value of the container.
            </summary>
            <param name="instanceValue">The parent value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.ClearReferenceValue">
            <summary>
            Clears the reference value of the container.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditorWindow">
            <summary>
            Base class for custom editor window that can create custom GUI layout and expose various functionalities to the user.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditorWindow.Win.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditorWindow.Win.OnClose">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditorWindow.Window">
            <summary>
            Gets the editor window.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditorWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditorWindow"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditorWindow.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:FlaxEditor.CustomEditorWindow"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditorWindow.Show(FlaxEditor.GUI.Docking.DockState)">
            <summary>
            Shows the window.
            </summary>
            <param name="state">Initial window state.</param>
        </member>
        <member name="T:FlaxEditor.Editor">
            <summary>
            The main managed editor class. Editor root object.
            </summary>
        </member>
        <member name="P:FlaxEditor.Editor.Instance">
            <summary>
            Gets the Editor instance.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LocalCachePath">
            <summary>
            The path to the local cache folder shared by all the installed editor instance for a given user (used also by the Flax Launcher).
            </summary>
        </member>
        <member name="P:FlaxEditor.Editor.IsFlaxEngineTheBest">
            <summary>
            Gets a value indicating whether Flax Engine is the best in the world.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.IsDevInstance">
            <summary>
            Gets a value indicating whether this Editor is running a dev instance of the engine.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.IsOfficialBuild">
            <summary>
            Gets a value indicating whether this Editor is running as official build (distributed via Flax services).
            </summary>
        </member>
        <member name="P:FlaxEditor.Editor.IsPlayMode">
            <summary>
            True if the editor is running now in a play mode. Assigned by the managed editor instance.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Windows">
            <summary>
            The windows module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.UI">
            <summary>
            The UI module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Thumbnails">
            <summary>
            The thumbnails module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Simulation">
            <summary>
            The simulation module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Scene">
            <summary>
            The scene module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Prefabs">
            <summary>
            The prefabs module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.SceneEditing">
            <summary>
            The scene editing module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.ProgressReporting">
            <summary>
            The progress reporting module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.ContentEditing">
            <summary>
            The content editing module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.ContentDatabase">
            <summary>
            The content database module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.ContentImporting">
            <summary>
            The content importing module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.ContentFinding">
            <summary>
            The content finder module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.CodeEditing">
            <summary>
            The content editing
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.StateMachine">
            <summary>
            The editor state machine.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Options">
            <summary>
            The editor options manager.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.ProjectCache">
            <summary>
            The editor per-project cache manager.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Undo">
            <summary>
            The undo/redo
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Icons">
            <summary>
            The icons container.
            </summary>
        </member>
        <member name="P:FlaxEditor.Editor.MainTransformGizmo">
            <summary>
            Gets the main transform gizmo used by the <see cref="T:FlaxEditor.Windows.SceneEditorWindow"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Editor.IsHeadlessMode">
            <summary>
            Gets a value indicating whether this instance is running in `headless` mode. No windows or popups should be shown. Used in CL environment (without a graphical user interface).
            </summary>
        </member>
        <member name="P:FlaxEditor.Editor.IsInitialized">
            <summary>
            Gets a value indicating whether Editor instance is initialized.
            </summary>
        </member>
        <member name="E:FlaxEditor.Editor.InitializationStart">
            <summary>
            Occurs when editor initialization starts. All editor modules already received OnInit callback and editor splash screen is visible.
            </summary>
        </member>
        <member name="E:FlaxEditor.Editor.InitializationEnd">
            <summary>
            Occurs when editor initialization ends. All editor modules already received OnEndInit callback and editor splash screen will be closed.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.CustomData">
            <summary>
            The custom data container that is stored in Editor instance. Can be used by plugins to store the state during editor session (state is preserved during scripts reloads).
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.GameProject">
            <summary>
            The game project info.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.EngineProject">
            <summary>
            The engine project info.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.PerformUndo">
            <summary>
            Undo last action.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.PerformRedo">
            <summary>
            Redo last action.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.SaveAll">
            <summary>
            Saves all changes (scenes, assets, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.SaveContent">
            <summary>
            Saves all content (assets, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.OpenProject(System.String)">
            <summary>
            Closes this project with running editor and opens the given project.
            </summary>
            <param name="projectFilePath">The project file path.</param>
        </member>
        <member name="M:FlaxEditor.Editor.EnsureState(FlaxEditor.States.EditorState)">
            <summary>
            Ensure that editor is in a given state, otherwise throws <see cref="T:FlaxEditor.States.InvalidStateException"/>.
            </summary>
            <param name="state">Valid state to check.</param>
            <exception cref="T:FlaxEditor.States.InvalidStateException"></exception>
        </member>
        <member name="M:FlaxEditor.Editor.EnsureState``1">
            <summary>
            Ensure that editor is in a state of given type, otherwise throws <see cref="T:FlaxEditor.States.InvalidStateException"/>.
            </summary>
            <typeparam name="TStateType">The type of the state type.</typeparam>
        </member>
        <member name="M:FlaxEditor.Editor.Log(System.String)">
            <summary>
            Logs the specified message to the log file.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:FlaxEditor.Editor.LogWarning(System.String)">
            <summary>
            Logs the specified warning message to the log file.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:FlaxEditor.Editor.LogWarning(System.Exception)">
            <summary>
            Logs the specified warning exception to the log file.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FlaxEditor.Editor.LogError(System.String)">
            <summary>
            Logs the specified error message to the log file.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="T:FlaxEditor.Editor.NewAssetType">
            <summary>
            New asset types allowed to create.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.Material">
            <summary>
            The <see cref="T:FlaxEngine.Material"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.MaterialInstance">
            <summary>
            The <see cref="T:FlaxEngine.MaterialInstance"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.CollisionData">
            <summary>
            The <see cref="T:FlaxEngine.CollisionData"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.AnimationGraph">
            <summary>
            The <see cref="T:FlaxEngine.AnimationGraph"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.SkeletonMask">
            <summary>
            The <see cref="T:FlaxEngine.SkeletonMask"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.ParticleEmitter">
            <summary>
            The <see cref="T:FlaxEngine.ParticleEmitter"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.ParticleSystem">
            <summary>
            The <see cref="T:FlaxEngine.ParticleSystem"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.SceneAnimation">
            <summary>
            The <see cref="T:FlaxEngine.SceneAnimation"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.MaterialFunction">
            <summary>
            The <see cref="T:FlaxEngine.MaterialFunction"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.ParticleEmitterFunction">
            <summary>
            The <see cref="T:FlaxEngine.ParticleEmitterFunction"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.AnimationGraphFunction">
            <summary>
            The <see cref="T:FlaxEngine.AnimationGraphFunction"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.Import(System.String,System.String)">
            <summary>
            Imports the asset file to the target location.
            </summary>
            <param name="inputPath">The source file path.</param>
            <param name="outputPath">The result asset file path.</param>
            <returns>True if importing failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.Import(System.String,System.String,FlaxEditor.Content.Import.TextureImportSettings)">
            <summary>
            Imports the texture asset file to the target location.
            </summary>
            <param name="inputPath">The source file path.</param>
            <param name="outputPath">The result asset file path.</param>
            <param name="settings">The settings.</param>
            <returns>True if importing failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.Import(System.String,System.String,FlaxEditor.Content.Import.ModelImportSettings)">
            <summary>
            Imports the model asset file to the target location.
            </summary>
            <param name="inputPath">The source file path.</param>
            <param name="outputPath">The result asset file path.</param>
            <param name="settings">The settings.</param>
            <returns>True if importing failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.Import(System.String,System.String,FlaxEditor.Content.Import.AudioImportSettings)">
            <summary>
            Imports the audio asset file to the target location.
            </summary>
            <param name="inputPath">The source file path.</param>
            <param name="outputPath">The result asset file path.</param>
            <param name="settings">The settings.</param>
            <returns>True if importing failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.SaveJsonAsset(System.String,System.Object)">
            <summary>
            Serializes the given object to json asset.
            </summary>
            <param name="outputPath">The result asset file path.</param>
            <param name="obj">The obj to serialize.</param>
            <returns>True if saving failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.CookMeshCollision(System.String,FlaxEngine.CollisionDataType,FlaxEngine.Model,System.Int32,FlaxEngine.ConvexMeshGenerationFlags,System.Int32)">
            <summary>
            Cooks the mesh collision data and saves it to the asset using <see cref="T:FlaxEngine.CollisionData"/> format. action cannot be performed on a main thread.
            </summary>
            <param name="path">The output asset path.</param>
            <param name="type">The collision data type.</param>
            <param name="model">The source model.</param>
            <param name="modelLodIndex">The source model LOD index.</param>
            <param name="convexFlags">The convex mesh generation flags.</param>
            <param name="convexVertexLimit">The convex mesh vertex limit. Use values in range [8;255]</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.GetShaderSourceCode(FlaxEngine.Shader)">
            <summary>
            Gets the shader source code (HLSL shader code).
            </summary>
            <param name="asset">The shader asset.</param>
            <returns>The generated source code.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.GetShaderSourceCode(FlaxEngine.Material)">
            <summary>
            Gets the material shader source code (HLSL shader code).
            </summary>
            <param name="asset">The material asset.</param>
            <returns>The generated source code.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.GetShaderSourceCode(FlaxEngine.ParticleEmitter)">
            <summary>
            Gets the particle emitter GPU simulation shader source code (HLSL shader code).
            </summary>
            <param name="asset">The particle emitter asset.</param>
            <returns>The generated source code.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.GetActorEditorSphere(FlaxEngine.Actor,FlaxEngine.BoundingSphere@)">
            <summary>
            Gets the actor bounding sphere (including child actors).
            </summary>
            <param name="actor">The actor.</param>
            <param name="sphere">The bounding sphere.</param>
        </member>
        <member name="M:FlaxEditor.Editor.GetActorEditorBox(FlaxEngine.Actor,FlaxEngine.BoundingBox@)">
            <summary>
            Gets the actor bounding box (including child actors).
            </summary>
            <param name="actor">The actor.</param>
            <param name="box">The bounding box.</param>
        </member>
        <member name="M:FlaxEditor.Editor.CloseSplashScreen">
            <summary>
            Closes editor splash screen popup window.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.CreateAsset(FlaxEditor.Editor.NewAssetType,System.String)">
            <summary>
            Creates new asset at the target location.
            </summary>
            <param name="type">New asset type.</param>
            <param name="outputPath">Output asset path.</param>
        </member>
        <member name="M:FlaxEditor.Editor.CanImport(System.String)">
            <summary>
            Checks if can import asset with the given extension.
            </summary>
            <param name="extension">The file extension.</param>
            <returns>True if can import files with given extension, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.CanExport(System.String)">
            <summary>
            Checks if the given asset can be exported.
            </summary>
            <param name="path">The asset path (absolute path with an extension).</param>
            <returns>True if can export given asset, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.Export(System.String,System.String)">
            <summary>
            Exports the given asset to the specified file location.
            </summary>
            <param name="inputPath">The input asset path (absolute path with an extension).</param>
            <param name="outputFolder">The output folder path (filename with extension is computed by auto).</param>
            <returns>True if given asset has been exported, otherwise false.</returns>
        </member>
        <member name="P:FlaxEditor.Editor.IsEveryAssemblyLoaded">
            <summary>
            Checks if every managed assembly has been loaded (including user scripts assembly).
            </summary>
        </member>
        <member name="E:FlaxEditor.Editor.EnvProbeBakeStart">
            <summary>
            Occurs when environment probe baking starts.
            </summary>
        </member>
        <member name="E:FlaxEditor.Editor.EnvProbeBakeEnd">
            <summary>
            Occurs when environment probe baking ends.
            </summary>
        </member>
        <member name="T:FlaxEditor.Editor.LightmapsBakeSteps">
            <summary>
            Lightmaps baking steps.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.CacheEntries">
            <summary>
            The cache entries stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.GenerateLightmapCharts">
            <summary>
            The generate lightmap charts stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.PackLightmapCharts">
            <summary>
            The pack lightmap charts stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.UpdateLightmapsCollection">
            <summary>
            The update lightmaps collection stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.UpdateEntries">
            <summary>
            The update entries stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.GenerateHemispheresCache">
            <summary>
            The generate hemispheres cache stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.RenderHemispheres">
            <summary>
            The render hemispheres stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.Cleanup">
            <summary>
            The cleanup stage.
            </summary>
        </member>
        <member name="T:FlaxEditor.Editor.LightmapsBakeProgressDelegate">
            <summary>
            Lightmaps baking progress event delegate.
            </summary>
            <param name="step">The current step.</param>
            <param name="stepProgress">The current step progress (normalized to [0;1]).</param>
            <param name="totalProgress">The total baking progress (normalized to [0;1]).</param>
        </member>
        <member name="T:FlaxEditor.Editor.LightmapsBakeEndDelegate">
            <summary>
            Lightmaps baking nd event delegate.
            </summary>
            <param name="failed">True if baking failed or has been canceled, otherwise false.</param>
        </member>
        <member name="E:FlaxEditor.Editor.LightmapsBakeStart">
            <summary>
            Occurs when lightmaps baking starts.
            </summary>
        </member>
        <member name="E:FlaxEditor.Editor.LightmapsBakeEnd">
            <summary>
            Occurs when lightmaps baking ends.
            </summary>
        </member>
        <member name="E:FlaxEditor.Editor.LightmapsBakeProgress">
            <summary>
            Occurs when lightmaps baking progress changes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.BuildScenesOrCancel">
            <summary>
            Starts building scenes data or cancels it if already running.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.BakeLightmapsOrCancel">
            <summary>
            Starts lightmaps baking for the open scenes or cancels it if already running.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.ClearLightmaps">
            <summary>
            Clears the lightmaps linkage for all open scenes.
            </summary>
        </member>
        <member name="T:FlaxEditor.EditorAssets">
            <summary>
            Helper collection of Flax Editor in-build asset names.
            </summary>
        </member>
        <member name="P:FlaxEditor.EditorAssets.Cache.HighlightMaterialInstance">
            <summary>
            Gets the highlight material instance.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.IconsAtlas">
            <summary>
            The icons atlas.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.PrimaryFont">
            <summary>
            The primary font.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.InconsolataRegularFont">
            <summary>
            The Inconsolata Regular font.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.WindowIcon">
            <summary>
            The window icon.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.WindowIconsFont">
            <summary>
            The window icons font.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.DefaultFontMaterial">
            <summary>
            The default font material.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.HighlightMaterial">
            <summary>
            The highlight material.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.HighlightTerrainMaterial">
            <summary>
            The highlight terrain material.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.TerrainCircleBrushMaterial">
            <summary>
            The terrain circle brush material.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.WiresDebugMaterial">
            <summary>
            The debug material (wireframe).
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.DefaultSkyCubeTexture">
            <summary>
            The default sky cube texture.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.IesProfilePreviewMaterial">
            <summary>
            The IES Profile assets preview material.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.FoliageBrushMaterial">
            <summary>
            The foliage painting brush material.
            </summary>
        </member>
        <member name="T:FlaxEditor.EditorAssets.SegMDL2Icons">
            <summary>
            The icon lists used by editor from the SegMDL2 font.
            </summary>
            <remarks>
            Reference: https://docs.microsoft.com/en-us/windows/uwp/design/style/segoe-ui-symbol-font.
            </remarks>
        </member>
        <member name="T:FlaxEditor.EditorIcons">
            <summary>
            The editor icons atlas. Cached internally to improve performance.
            </summary>
            <remarks>
            Postfix number informs about the sprite resolution (in pixels).
            </remarks>
        </member>
        <member name="T:FlaxEditor.Gizmo.IEditorPrimitivesOwner">
            <summary>
            Interface for editor viewports that can contain and use <see cref="T:FlaxEditor.Gizmo.EditorPrimitives"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.IGizmoOwner" />
        </member>
        <member name="M:FlaxEditor.Gizmo.IEditorPrimitivesOwner.DrawEditorPrimitives(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <summary>
            Draws the custom editor primitives.
            </summary>
            <param name="context">The GPU commands context.</param>
            <param name="renderContext">The rendering context.</param>
            <param name="target">The output texture to render to.</param>
            <param name="targetDepth">The scene depth buffer that can be used to z-buffering.</param>
        </member>
        <member name="T:FlaxEditor.Gizmo.EditorPrimitives">
            <summary>
            In-build postFx used to render debug shapes, gizmo tools and other editor primitives to MSAA render target and composite it with the editor preview window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.EditorPrimitives.Viewport">
            <summary>
            The target viewport.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.EditorPrimitives.Order">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.EditorPrimitives.Render(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Gizmo.GizmoBase">
            <summary>
            Base class for all Gizmo controls that can be attached to the <see cref="T:FlaxEditor.Gizmo.IGizmoOwner"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.GizmoBase.Owner">
            <summary>
            Gets the gizmo owner.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.GizmoBase.IsActive">
            <summary>
            Gets a value indicating whether this gizmo is active.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.#ctor(FlaxEditor.Gizmo.IGizmoOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Gizmo.GizmoBase"/> class.
            </summary>
            <param name="owner">The gizmos owner.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.OnSelectionChanged(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode})">
            <summary>
            Called when selected objects collection gets changed.
            </summary>
            <param name="newSelection">The new selection pool.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.OnActivated">
            <summary>
            Called when gizmo gets activated.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.OnDeactivated">
            <summary>
            Called when gizmo gets deactivated.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.Update(System.Single)">
            <summary>
            Updates the gizmo logic (called even if not active).
            </summary>
            <param name="dt">Update delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.Pick">
            <summary>
            Performs scene object picking. Called by the viewport on left mouse button released.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.Draw(FlaxEngine.RenderContext@)">
            <summary>
            Draws the gizmo.
            </summary>
            <param name="renderContext">The rendering context.</param>
        </member>
        <member name="T:FlaxEditor.Gizmo.GizmosCollection">
            <summary>
            Represents collection of Gizmo tools where one is active and in use.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="E:FlaxEditor.Gizmo.GizmosCollection.ActiveChanged">
            <summary>
            Occurs when active gizmo tool gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.GizmosCollection.Active">
            <summary>
            Gets or sets the active gizmo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmosCollection.Remove(FlaxEditor.Gizmo.GizmoBase)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmosCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.GridGizmo">
            <summary>
            Draws a grid to feel better world origin position and the world units.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="P:FlaxEditor.Gizmo.GridGizmo.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEditor.Gizmo.GridGizmo"/> is enabled.
            </summary>
        </member>
        <member name="E:FlaxEditor.Gizmo.GridGizmo.EnabledChanged">
            <summary>
            Occurs when enabled state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.GridGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Gizmo.GridGizmo"/> class.
            </summary>
            <param name="owner">The gizmos owner.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.GridGizmo.Draw(FlaxEngine.RenderContext@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Gizmo.IGizmoOwner">
            <summary>
            Describes objects that can own gizmo tools.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.Gizmos">
            <summary>
            Gets the gizmos collection.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.RenderTask">
            <summary>
            Gets the render task used by the owner to render the scene and the gizmos.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.IsLeftMouseButtonDown">
            <summary>
            Gets a value indicating whether left mouse button is pressed down.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.IsRightMouseButtonDown">
            <summary>
            Gets a value indicating whether right mouse button is pressed down.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.IsAltKeyDown">
            <summary>
            Gets a value indicating whether Alt key is pressed down.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.IsControlDown">
            <summary>
            Gets a value indicating whether Control key is pressed down.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.SnapToGround">
            <summary>
            Gets a value indicating whether snap selected objects to ground (check if user pressed the given input key to call action).
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.ViewDirection">
            <summary>
            Gets the view forward direction.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.ViewPosition">
            <summary>
            Gets the view position.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.ViewOrientation">
            <summary>
            Gets the view orientation.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.ViewFarPlane">
            <summary>
            Gets the view far clipping plane.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.MouseRay">
            <summary>
            Gets the mouse ray (in world space of the viewport).
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.MouseDelta">
            <summary>
            Gets the mouse movement delta.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.UseSnapping">
            <summary>
            Gets a value indicating whether use grid snapping during gizmo operations.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.UseDuplicate">
            <summary>
            Gets a value indicating whether duplicate objects during gizmo operation (eg. when transforming).
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.Undo">
            <summary>
            Gets a <see cref="T:FlaxEditor.Undo"/> object used by the gizmo owner.
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.SelectionOutline">
            <summary>
            In-build postFx used to render outline for selected objects in editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.SelectionOutline._actors">
            <summary>
            The cached actors list used for drawing (reusable to reduce memory allocations). Always cleared before and after objects rendering.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.SelectionOutline.SelectionGetter">
            <summary>
            The selection getter.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.SelectionOutline.ShowSelectionOutline">
            <summary>
            Gets or sets a value indicating whether show selection outline effect.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.SelectionOutline.SelectionOutlineColor0">
            <summary>
            Gets or sets the selection outline first color (top of the screen-space gradient).
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.SelectionOutline.SelectionOutlineColor1">
            <summary>
            Gets or sets the selection outline second color (bottom of the screen-space gradient).
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.SelectionOutline.UseEditorOptions">
            <summary>
            Gets or sets a value indicating whether use editor options for selection outline color and visibility. Otherwise, if disabled it can be controlled from code.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.SelectionOutline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Gizmo.SelectionOutline"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.SelectionOutline.HasDataReady">
            <summary>
            Gets a value indicating whether this instance has data ready.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.SelectionOutline.CanRender">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.SelectionOutline.Render(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.SelectionOutline.DrawSelectionDepth(FlaxEngine.GPUContext,FlaxEngine.SceneRenderTask,FlaxEngine.GPUTexture)">
            <summary>
            Draws the selected object to depth buffer.
            </summary>
            <param name="context">The context.</param>
            <param name="task">The task.</param>
            <param name="customDepth">The custom depth (output).</param>
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmo">
            <summary>
            The most import gizmo tool used to move, rotate, scale and select scene objects in editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.TransformGizmoBase" />
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmo.ApplyTransformationDelegate">
            <summary>
            Applies scale to the selected objects pool.
            </summary>
            <param name="selection">The selected objects pool.</param>
            <param name="translationDelta">The translation delta.</param>
            <param name="rotationDelta">The rotation delta.</param>
            <param name="scaleDelta">The scale delta.</param>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmo.ApplyTransformation">
            <summary>
            The event to apply objects transformation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmo.Duplicate">
            <summary>
            The event to duplicate selected objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmo.SelectedParents">
            <summary>
            Gets the array of selected parent objects (as actors).
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Gizmo.TransformGizmo" /> class.
            </summary>
            <param name="owner">The gizmos owner.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.Pick">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.OnSelectionChanged(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode})">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmo.SelectionCount">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.GetSelectedObject(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.GetSelectedObjectsBounds(FlaxEngine.BoundingBox@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.OnApplyTransformation(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.OnEndTransforming">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.OnDuplicate">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmoBase">
            <summary>
            Base class for transformation gizmos that can be used to select objects and transform them.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase._startTransforms">
            <summary>
            The start transforms list cached for selected objects before transformation apply. Can be used to create undo operations.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase._navigationDirty">
            <summary>
            Flag used to indicate that navigation data was modified.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase._startBounds">
            <summary>
            The initial world bounds of the selected objects before performing any transformations. Used to find the dirty volume of the world during editing.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.Position">
            <summary>
            Gets the gizmo position.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.LastDelta">
            <summary>
            Gets the last transformation delta.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.#ctor(FlaxEditor.Gizmo.IGizmoOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Gizmo.TransformGizmoBase" /> class.
            </summary>
            <param name="owner">The gizmos owner.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.StartTransforming">
            <summary>
            Starts the objects transforming (optionally with duplicate).
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.EndTransforming">
            <summary>
            Ends the objects transforming.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.CanTransform">
            <summary>
            Gets a value indicating whether this tool can transform objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.CanDuplicate">
            <summary>
            Gets a value indicating whether this tool can duplicate objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.SelectionCount">
            <summary>
            Gets the selected objects count.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.GetSelectedObject(System.Int32)">
            <summary>
            Gets the selected object transformation.
            </summary>
            <param name="index">The selected object index.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.GetSelectedObjectsBounds(FlaxEngine.BoundingBox@,System.Boolean@)">
            <summary>
            Gets the selected objects bounding box (contains the whole selection).
            </summary>
            <param name="bounds">The bounds of the selected objects (merged bounds).</param>
            <param name="navigationDirty">True if editing the selected objects transformations marks the navigation system area dirty (for auto-rebuild), otherwise skip update.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.OnStartTransforming">
            <summary>
            Called when user starts transforming selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.OnApplyTransformation(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Called when gizmo tools wants to apply transformation delta to the selected objects pool.
            </summary>
            <param name="translationDelta">The translation delta.</param>
            <param name="rotationDelta">The rotation delta.</param>
            <param name="scaleDelta">The scale delta.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.OnEndTransforming">
            <summary>
            Called when user ends transforming selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.OnDuplicate">
            <summary>
            Called when user duplicates selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.Draw(FlaxEngine.RenderContext@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.GetSelectionCenter">
            <summary>
            Gets the selection center point (in world space).
            </summary>
            <returns>Center point or <see cref="F:FlaxEngine.Vector3.Zero"/> if no object selected.</returns>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.TranslationSnapEnable">
            <summary>
            True if enable grid snapping when moving objects
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.RotationSnapEnabled">
            <summary>
            True if enable grid snapping when rotating objects
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.ScaleSnapEnabled">
            <summary>
            True if enable grid snapping when scaling objects
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.TranslationSnapValue">
            <summary>
            Translation snap value
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.RotationSnapValue">
            <summary>
            Rotation snap value
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.ScaleSnapValue">
            <summary>
            Scale snap value
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.ActivePivot">
            <summary>
            Gets the current pivot type.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.ActiveAxis">
            <summary>
            Gets the current axis type.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.ActiveMode">
            <summary>
            Gets or sts the current gizmo mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.ModeChanged">
            <summary>
            Event fired when active gizmo mode gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.ActiveTransformSpace">
            <summary>
            Gets or sets the current gizmo transform space.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.TransformSpaceChanged">
            <summary>
            Event fired when active transform space gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.ToggleTransformSpace">
            <summary>
            Toggles gizmo transform space
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmoBase.Axis">
            <summary>
            Gizmo axis modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.X">
            <summary>
            The X axis.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.Y">
            <summary>
            The Y axis.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.Z">
            <summary>
            The Z axis.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.XY">
            <summary>
            The XY plane.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.ZX">
            <summary>
            The ZX plane.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.YZ">
            <summary>
            The YZ plane.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.Center">
            <summary>
            The center point.
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmoBase.Mode">
            <summary>
            Gizmo tool mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Mode.Translate">
            <summary>
            Translate object(s)
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Mode.Rotate">
            <summary>
            Rotate object(s)
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Mode.Scale">
            <summary>
            Scale object(s)
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmoBase.TransformSpace">
            <summary>
            Transform object space.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.TransformSpace.Local">
            <summary>
            Object local space coordinates
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.TransformSpace.World">
            <summary>
            World space coordinates
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmoBase.PivotType">
            <summary>
            Pivot location type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.PivotType.ObjectCenter">
            <summary>
            First selected object center
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.PivotType.SelectionCenter">
            <summary>
            Selection pool center point
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.PivotType.WorldOrigin">
            <summary>
            World origin
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.ActorSearchPopup">
            <summary>
            Popup that shows the list of actors to pick. Supports searching and basic type filtering.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ItemsListContextMenu" />
        </member>
        <member name="T:FlaxEditor.GUI.ActorSearchPopup.ActorItemView">
            <summary>
            The actor item.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ItemsListContextMenu.Item" />
        </member>
        <member name="P:FlaxEditor.GUI.ActorSearchPopup.ActorItemView.Actor">
            <summary>
            Gets the actor.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ActorSearchPopup.ActorItemView.#ctor(FlaxEngine.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ActorSearchPopup.ActorItemView"/> class.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ActorSearchPopup.ActorItemView.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ActorSearchPopup.IsValidDelegate">
            <summary>
            Validates if the given actor item can be used to pick it.
            </summary>
            <param name="actor">The actor.</param>
            <returns>True if is valid.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ActorSearchPopup.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEditor.GUI.ActorSearchPopup.IsValidDelegate,System.Action{FlaxEngine.Actor})">
            <summary>
            Shows the popup.
            </summary>
            <param name="showTarget">The show target.</param>
            <param name="showTargetLocation">The show target location.</param>
            <param name="isValid">Event called to check if a given asset item is valid to be used.</param>
            <param name="selected">Event called on asset item pick.</param>
            <returns>The dialog.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ActorSearchPopup.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.AssetPicker">
            <summary>
            Assets picking control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
            <seealso cref="T:FlaxEditor.Content.IContentItemOwner" />
        </member>
        <member name="P:FlaxEditor.GUI.AssetPicker.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.AssetPicker.SelectedID">
            <summary>
            Gets or sets the selected asset identifier.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.AssetPicker.SelectedAsset">
            <summary>
            Gets or sets the selected asset object.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.AssetPicker.AssetType">
            <summary>
            Gets or sets the assets types that this picker accepts (it supports types derived from the given type).
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.AssetPicker.SelectedItemChanged">
            <summary>
            Occurs when selected item gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.AssetPicker"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.#ctor(System.Type,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.AssetPicker"/> class.
            </summary>
            <param name="assetType">The assets types that this picker accepts.</param>
            <param name="location">The control location.</param>
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnSelectedItemChanged">
            <summary>
            Called when selected item gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnItemDispose(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.AssetSearchPopup">
            <summary>
            Popup that shows the list of assets to pick. Supports searching and basic items filtering.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ItemsListContextMenu" />
        </member>
        <member name="T:FlaxEditor.GUI.AssetSearchPopup.AssetItemView">
            <summary>
            The asset item.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ItemsListContextMenu.Item" />
        </member>
        <member name="F:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.IconSize">
            <summary>
            The icon size (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.Asset">
            <summary>
            Gets the asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.#ctor(FlaxEditor.Content.AssetItem)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.AssetSearchPopup.AssetItemView"/> class.
            </summary>
            <param name="asset">The asset.</param>
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.GetTextRect(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.OnItemDispose(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.AssetSearchPopup.IsValidDelegate">
            <summary>
            Validates if the given asset item can be used to pick it.
            </summary>
            <param name="asset">The asset.</param>
            <returns>True if is valid.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEditor.GUI.AssetSearchPopup.IsValidDelegate,System.Action{FlaxEditor.Content.AssetItem})">
            <summary>
            Shows the popup.
            </summary>
            <param name="showTarget">The show target.</param>
            <param name="showTargetLocation">The show target location.</param>
            <param name="isValid">Event called to check if a given asset item is valid to be used.</param>
            <param name="selected">Event called on asset item pick.</param>
            <returns>The dialog.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ColumnDefinition">
            <summary>
            Table column descriptor.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.ColumnDefinition.ValueFormatDelegate">
            <summary>
            Converts raw cell value to the string used by the column formatting policy.
            </summary>
            <param name="value">The value.</param>
            <returns>The value string.</returns>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.UseExpandCollapseMode">
            <summary>
            True if use expand/collapse rows feature for this column. See <see cref="P:FlaxEditor.GUI.Row.Depth"/> property which is used to describe the rows hierarchy.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.CellAlignment">
            <summary>
            The cell text alignment horizontally.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.Title">
            <summary>
            The column title.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.TitleFont">
            <summary>
            The title font.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.TitleColor">
            <summary>
            The column title text color.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.TitleBackgroundColor">
            <summary>
            The column title background background.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.MinSize">
            <summary>
            The minimum size (in pixels) of the column.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.MinSizePercentage">
            <summary>
            The minimum size percentage of the column (in range 0-100).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.MaxSize">
            <summary>
            The maximum size (in pixels) of the column.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.MaxSizePercentage">
            <summary>
            The maximum size percentage of the column (in range 0-100).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.FormatValue">
            <summary>
            The value formatting delegate.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ColumnDefinition.ClampColumnSize(System.Single,System.Single)">
            <summary>
            Clamps the size of the column (in percentage size of the table).
            </summary>
            <param name="value">The percentage size of the column (split value).</param>
            <param name="tableSize">Size of the table (width in pixels).</param>
            <returns>The clamped percentage size of the column (split value).</returns>
        </member>
        <member name="T:FlaxEditor.GUI.ComboBox">
            <summary>
            Combo box control allows to choose one item or set of items from the provided collection of options.
            </summary>
            <remarks>
            Difference between <see cref="T:FlaxEditor.GUI.ComboBox"/> and <see cref="T:FlaxEngine.GUI.Dropdown"/> is that ComboBox uses native window to show the items list while Dropdown uses a custom panel added to parent window.
            This means that Dropdown will work on all platforms that don't support multiple native windows (eg. Android, PS4, Xbox One).
            </remarks>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.GUI.ComboBox.DefaultHeight">
            <summary>
            The default height of the control.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ComboBox._items">
            <summary>
            The items.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ComboBox._tooltips">
            <summary>
            The item tooltips (optional).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ComboBox._popupMenu">
            <summary>
            The popup menu. May be null if has not been used yet.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ComboBox._mouseDown">
            <summary>
            The mouse down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ComboBox._blockPopup">
            <summary>
            The block popup flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ComboBox._selectedIndices">
            <summary>
            The selected indices.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.Items">
            <summary>
            Gets or sets the items collection.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.Tooltips">
            <summary>
            Gets or sets the items tooltips (optional).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.Sorted">
            <summary>
            True if sort items before showing the list, otherwise present them in the unchanged order.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.SupportMultiSelect">
            <summary>
            Gets or sets a value indicating whether support multi items selection.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.MaximumItemsInViewCount">
            <summary>
            Gets or sets the maximum amount of items in the view. If popup has more items to show it uses a additional scroll panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.SelectedItem">
            <summary>
            Gets or sets the selected item (returns <see cref="F:System.String.Empty"/> if no item is being selected or more than one item is selected).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.HasSelection">
            <summary>
            Gets a value indicating whether this combobox has any item selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.SelectedIndex">
            <summary>
            Gets or sets the index of the selected. If combobox has more than 1 item selected then it returns invalid index (value -1).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.Selection">
            <summary>
            Gets or sets the selection.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.ComboBox.SelectedIndexChanged">
            <summary>
            Event fired when selected index gets changed.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.ComboBox.PopupShowing">
            <summary>
            Occurs when popup is showing (before event). Can be used to update items collection before showing it to the user.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.ComboBox.PopupCreate">
            <summary>
            Custom popup creation function.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.Popup">
            <summary>
            Gets the popup menu (it may be null if not used - lazy init).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.IsPopupOpened">
            <summary>
            Gets a value indicating whether this popup menu is opened.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.Font">
            <summary>
            Gets or sets the font used to draw text.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.BackgroundColorSelected">
            <summary>
            Gets or sets the background color when combobox popup is opened.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.BorderColorSelected">
            <summary>
            Gets or sets the border color when combobox popup is opened.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.BackgroundColorHighlighted">
            <summary>
            Gets or sets the background color when combobox is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.BorderColorHighlighted">
            <summary>
            Gets or sets the border color when combobox is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.ArrowImage">
            <summary>
            Gets or sets the image used to render combobox drop arrow icon.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.ArrowColor">
            <summary>
            Gets or sets the color used to render combobox drop arrow icon.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.ArrowColorSelected">
            <summary>
            Gets or sets the color used to render combobox drop arrow icon (menu is opened).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ComboBox.ArrowColorHighlighted">
            <summary>
            Gets or sets the color used to render combobox drop arrow icon (menu is highlighted).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ComboBox"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ComboBox"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.ClearItems">
            <summary>
            Clears the items.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.AddItem(System.String)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.AddItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.SetItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.IsSelected(System.String)">
            <summary>
            Determines whether the specified item is selected.
            </summary>
            <param name="item">The item to check.</param>
            <returns><c>true</c> if the item is selected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.IsSelected(System.Int32)">
            <summary>
            Determines whether the item at the specified index is selected.
            </summary>
            <param name="index">The index.</param>
            <returns><c>true</c> if the item is selected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.OnSelectedIndexChanged">
            <summary>
            Called when selected item index gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.OnItemClicked(System.Int32)">
            <summary>
            Called when item is clicked.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.OnCreatePopup">
            <summary>
            Creates the popup menu.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ComboBox.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ContextMenu.ContextMenu">
            <summary>
            Popup menu control.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuBase" />
        </member>
        <member name="T:FlaxEditor.GUI.ContextMenu.ContextMenu.ItemsPanel">
            <summary>
            The items container.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.ItemsPanel.#ctor(FlaxEditor.GUI.ContextMenu.ContextMenu)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ContextMenu.ContextMenu.ItemsPanel"/> class.
            </summary>
            <param name="menu">The menu.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.ItemsPanel.Arrange">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenu._itemsAreaMargin">
            <summary>
            The items area margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenu._itemsMargin">
            <summary>
            The items margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenu._panel">
            <summary>
            The items panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenu.ItemsAreaMargin">
            <summary>
            Gets or sets the items area margin (items container area margin).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenu.ItemsMargin">
            <summary>
            Gets or sets the items margin.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenu.MinimumWidth">
            <summary>
            Gets or sets the minimum popup width.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenu.MaximumItemsInViewCount">
            <summary>
            Gets or sets the maximum amount of items in the view. If popup has more items to show it uses a additional scroll panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenu.Items">
            <summary>
            Gets the items (readonly).
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.ContextMenu.ContextMenu.ButtonClicked">
            <summary>
            Event fired when user clicks on the button.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenu.ItemsContainer">
            <summary>
            Gets the context menu items container control.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ContextMenu.ContextMenu"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.DisposeAllItems">
            <summary>
            Removes all the added items (buttons, separators, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.AddButton(System.String)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.AddButton(System.String,System.String)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
            <param name="shortKeys">The short keys.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.AddButton(System.String,System.Action)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
            <param name="clicked">On button clicked event.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.AddButton(System.String,System.Action{FlaxEditor.GUI.ContextMenu.ContextMenuButton})">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
            <param name="clicked">On button clicked event.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.AddButton(System.String,System.String,System.Action)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
            <param name="shortKeys">The shortKeys.</param>
            <param name="clicked">On button clicked event.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.GetChildMenu(System.String)">
            <summary>
            Gets the child menu (with that name).
            </summary>
            <param name="text">The text.</param>
            <returns>Created context menu item control or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.GetOrAddChildMenu(System.String)">
            <summary>
            Adds the child menu or gets it if already created (with that name).
            </summary>
            <param name="text">The text.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.AddChildMenu(System.String)">
            <summary>
            Adds the child menu.
            </summary>
            <param name="text">The text.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.AddSeparator">
            <summary>
            Adds the separator.
            </summary>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.OnButtonClicked(FlaxEditor.GUI.ContextMenu.ContextMenuButton)">
            <summary>
            Called when button get clicked.
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.ContainsPoint(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenu.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ContextMenu.ContextMenuDirection">
            <summary>
            Context menu popup directions.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenuDirection.RightDown">
            <summary>
            The right down.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenuDirection.RightUp">
            <summary>
            The right up.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenuDirection.LeftDown">
            <summary>
            The left down.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenuDirection.LeftUp">
            <summary>
            The left up.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.ContextMenu.ContextMenuBase">
            <summary>
            Base class for all context menu controls.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenuBase.IsOpened">
            <summary>
            Returns true if context menu is opened
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenuBase.Direction">
            <summary>
            Gets the popup direction.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenuBase.HasChildCMOpened">
            <summary>
            Gets a value indicating whether any child context menu has been opened.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenuBase.TopmostCM">
            <summary>
            Gets the topmost context menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenuBase.IsSubMenu">
            <summary>
            Gets a value indicating whether this context menu is a sub-menu. Sub menus are treated like child context menus of the other menu (eg. hierarchy).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuBase"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2)">
            <summary>
            Show context menu over given control.
            </summary>
            <param name="parent">Parent control to attach to it.</param>
            <param name="location">Popup menu origin location in parent control coordinates.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.Hide">
            <summary>
            Hide popup menu and all child menus.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.ShowChild(FlaxEditor.GUI.ContextMenu.ContextMenuBase,FlaxEngine.Vector2,System.Boolean)">
            <summary>
            Shows new child context menu.
            </summary>
            <param name="child">The child menu.</param>
            <param name="location">The child menu initial location.</param>
            <param name="isSubMenu">True if context menu is a normal sub-menu, otherwise it is a custom menu popup linked as child.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.HideChild">
            <summary>
            Hides child popup menu if any opened.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.UpdateWindowSize">
            <summary>
            Updates the size of the window to match context menu dimensions.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.OnShow">
            <summary>
            Called on context menu show.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.OnHide">
            <summary>
            Called on context menu hide.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenuBase.IsMouseOver">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuBase.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ContextMenu.ContextMenuButton">
            <summary>
            Context Menu button control.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuItem" />
        </member>
        <member name="E:FlaxEditor.GUI.ContextMenu.ContextMenuButton.Clicked">
            <summary>
            Event fired when user clicks on the button.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.ContextMenu.ContextMenuButton.ButtonClicked">
            <summary>
            Event fired when user clicks on the button.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenuButton.Text">
            <summary>
            The button text.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenuButton.ShortKeys">
            <summary>
            The button short keys information (eg. 'Ctrl+C').
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenuButton.Icon">
            <summary>
            Item icon (best is 16x16).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenuButton.Checked">
            <summary>
            The checked state.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenuButton.AutoCheck">
            <summary>
            The automatic check mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuButton.#ctor(FlaxEditor.GUI.ContextMenu.ContextMenu,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuButton"/> class.
            </summary>
            <param name="parent">The parent context menu.</param>
            <param name="text">The text.</param>
            <param name="shortKeys">The short keys tip.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuButton.SetAutoCheck(System.Boolean)">
            <summary>
            Sets the automatic check mode. In auto check mode the button sets the check sprite as an icon when user clicks it.
            </summary>
            <param name="value">True if use auto check, otherwise false.</param>
            <returns>This button.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuButton.SetChecked(System.Boolean)">
            <summary>
            Sets the checked state.
            </summary>
            <param name="value">True if check it, otherwise false.</param>
            <returns>This button.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuButton.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuButton.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuButton.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuButton.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuButton.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenuButton.MinimumWidth">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ContextMenu.ContextMenuChildMenu">
            <summary>
            Context Menu control that cn be expanded to the child popup menu.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuItem" />
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenuChildMenu.Text">
            <summary>
            The item text.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ContextMenu.ContextMenuChildMenu.ContextMenu">
            <summary>
            The child context menu.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuChildMenu.#ctor(FlaxEditor.GUI.ContextMenu.ContextMenu,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuChildMenu"/> class.
            </summary>
            <param name="parent">The parent context menu.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuChildMenu.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuChildMenu.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenuChildMenu.MinimumWidth">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ContextMenu.ContextMenuItem">
            <summary>
            Context Menu child control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenuItem.ParentContextMenu">
            <summary>
            Gets the parent context menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ContextMenu.ContextMenuItem.MinimumWidth">
            <summary>
            Gets the minimum width of this item.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuItem.#ctor(FlaxEditor.GUI.ContextMenu.ContextMenu,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuItem"/> class.
            </summary>
            <param name="parent">The parent context menu.</param>
            <param name="width">The initial width.</param>
            <param name="height">The initial height.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuItem.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ContextMenu.ContextMenuSeparator">
            <summary>
            Context Menu separator control that visually separate chunks of the popup menu items.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuItem" />
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuSeparator.#ctor(FlaxEditor.GUI.ContextMenu.ContextMenu)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuSeparator"/> class.
            </summary>
            <param name="parent">The parent context menu.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ContextMenu.ContextMenuSeparator.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.CurveEditorBase">
            <summary>
            The base class for <see cref="T:FlaxEngine.Curve`1"/> editors. Allows to use generic curve editor without type information at compile-time.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.CurveEditorBase.UseMode">
            <summary>
            The UI use mode flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditorBase.UseMode.Off">
            <summary>
            Disable usage.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditorBase.UseMode.Vertical">
            <summary>
            Allow only vertical usage.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditorBase.UseMode.Horizontal">
            <summary>
            Allow only horizontal usage.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditorBase.UseMode.On">
            <summary>
            Allow both vertical and horizontal usage.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.CurveEditorBase.Edited">
            <summary>
            Occurs when curve gets edited.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditorBase.MaxKeyframes">
            <summary>
            The maximum amount of keyframes to use in a single curve.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditorBase.EnableZoom">
            <summary>
            True if enable view zooming. Otherwise user won't be able to zoom in or out.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditorBase.EnablePanning">
            <summary>
            True if enable view panning. Otherwise user won't be able to move the view area.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditorBase.ScrollBars">
            <summary>
            Gets or sets the scroll bars usage.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditorBase.ShowStartEndLines">
            <summary>
            Enables drawing start/end values continuous lines.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditorBase.ShowBackground">
            <summary>
            Enables drawing background.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditorBase.ShowAxes">
            <summary>
            Enables drawing time and values axes (lines and labels).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditorBase.FPS">
            <summary>
            The amount of frames per second of the curve animation (optional). Can be sued to restrict the keyframes time values to the given time quantization rate.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditorBase.ShowCollapsed">
            <summary>
            Gets or sets a value indicating whether show curve collapsed as a list of keyframe points rather than a full curve.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditorBase.ViewOffset">
            <summary>
            Gets or sets the view offset (via scroll bars).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditorBase.ViewScale">
            <summary>
            Gets or sets the view scale.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditorBase.OnEdited">
            <summary>
            Called when curve gets edited.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditorBase.UpdateKeyframes">
            <summary>
            Updates the keyframes positioning.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditorBase.Evaluate(System.Object@,System.Single,System.Boolean)">
            <summary>
            Evaluates the animation curve value at the specified time.
            </summary>
            <param name="result">The interpolated value from the curve at provided time.</param>
            <param name="time">The time to evaluate the curve at.</param>
            <param name="loop">If true the curve will loop when it goes past the end or beginning. Otherwise the curve value will be clamped.</param>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditorBase.GetKeyframes">
            <summary>
            Gets the keyframes collection as boxes object values.
            </summary>
            <returns>The array of boxed keyframe values of type <see cref="T:FlaxEngine.Curve`1.Keyframe"/>.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditorBase.SetKeyframes(FlaxEngine.Curve{System.Object}.Keyframe[])">
            <summary>
            Sets the keyframes collection as boxes object values.
            </summary>
            <param name="keyframes">The array of boxed keyframe values of type <see cref="T:FlaxEngine.Curve`1.Keyframe"/>.</param>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditorBase.AddKeyframe(System.Single,System.Object)">
            <summary>
            Adds the new keyframe as boxed value.
            </summary>
            <param name="time">The keyframe time.</param>
            <param name="value">The keyframe value.</param>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditorBase.SetKeyframe(System.Int32,System.Object)">
            <summary>
            Sets the existing keyframe value as boxed value.
            </summary>
            <param name="index">The keyframe index.</param>
            <param name="value">The keyframe value.</param>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditorBase.GetUseModeMask(FlaxEditor.GUI.CurveEditorBase.UseMode)">
            <summary>
            Converts the <see cref="T:FlaxEditor.GUI.CurveEditorBase.UseMode"/> into the <see cref="T:FlaxEngine.Vector2"/> mask.
            </summary>
            <param name="mode">The mode.</param>
            <returns>The mask.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditorBase.ApplyUseModeMask(FlaxEditor.GUI.CurveEditorBase.UseMode,FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Filters teh given value using the the <see cref="T:FlaxEditor.GUI.CurveEditorBase.UseMode"/>.
            </summary>
            <param name="mode">The mode.</param>
            <param name="value">The value to process.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The combined value.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.CurveEditor`1">
            <summary>
            The Bezier curve editor control.
            </summary>
            <typeparam name="T">The keyframe value type.</typeparam>
            <seealso cref="T:FlaxEditor.GUI.CurveEditorBase" />
        </member>
        <member name="T:FlaxEditor.GUI.CurveEditor`1.IKeyframeAccess`1">
            <summary>
            The generic keyframe value accessor object for curve editor.
            </summary>
            <typeparam name="TT">The keyframe value type.</typeparam>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.IKeyframeAccess`1.GetDefaultValue(`1@)">
            <summary>
            Gets the default value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.IKeyframeAccess`1.GetCurveComponents">
            <summary>
            Gets the curve components count. Vector types should return amount of component to use for value editing.
            </summary>
            <returns>The components count.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.IKeyframeAccess`1.GetCurveValue(`1@,System.Int32)">
            <summary>
            Gets the value of the component for the curve.
            </summary>
            <param name="value">The keyframe value.</param>
            <param name="component">The component index.</param>
            <returns>The curve value.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.IKeyframeAccess`1.SetCurveValue(System.Single,`1@,System.Int32)">
            <summary>
            Sets the curve value of the component.
            </summary>
            <param name="curve">The curve value to assign.</param>
            <param name="value">The keyframe value.</param>
            <param name="component">The component index.</param>
        </member>
        <member name="T:FlaxEditor.GUI.CurveEditor`1.Contents">
            <summary>
            The curve contents container control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Contents.#ctor(FlaxEditor.GUI.CurveEditor{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.CurveEditor`1.Contents"/> class.
            </summary>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Contents.IntersectsContent(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Contents.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Contents.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Contents.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Contents.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Contents.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Contents.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Contents.SetScaleInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Contents.PointToKeyframes(FlaxEngine.Vector2,FlaxEngine.Rectangle@)">
            <summary>
            Converts the input point from curve editor contents control space into the keyframes time/value coordinates.
            </summary>
            <param name="point">The point.</param>
            <param name="curveContentAreaBounds">The curve contents area bounds.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.CurveEditor`1.KeyframePoint">
            <summary>
            The single keyframe control.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.KeyframePoint.Editor">
            <summary>
            The parent curve editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.KeyframePoint.Index">
            <summary>
            The keyframe index.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.KeyframePoint.Component">
            <summary>
            The component index.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.KeyframePoint.IsSelected">
            <summary>
            Flag for selected keyframes.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.KeyframePoint.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.KeyframePoint.OnLocationChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.KeyframePoint.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.KeyframePoint.UpdateTooltip">
            <summary>
            Updates the tooltip.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.CurveEditor`1.TangentPoint">
            <summary>
            The single keyframe tangent control.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.TangentPoint.Curve">
            <summary>
            The parent curve editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.TangentPoint.Index">
            <summary>
            The keyframe index.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.TangentPoint.Component">
            <summary>
            The component index.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.TangentPoint.IsIn">
            <summary>
            True if tangent is `In`, otherwise it's `Out`.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.TangentPoint.Point">
            <summary>
            The keyframe.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditor`1.TangentPoint.TangentValue">
            <summary>
            Gets the tangent value on curve.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.TangentPoint.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.TangentPoint.UpdateTooltip">
            <summary>
            Updates the tooltip.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.LabelsSize">
            <summary>
            The timeline intervals metric area size (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.UnitsPerSecond">
            <summary>
            The timeline units per second (on time axis).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.KeyframesSize">
            <summary>
            The keyframes size.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1._keyframes">
            <summary>
            The keyframes collection.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.CurveEditor`1.KeyframesChanged">
            <summary>
            Occurs when keyframes collection gets changed (keyframe added or removed).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditor`1.Keyframes">
            <summary>
            Gets the keyframes collection (read-only).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditor`1.ViewOffset">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditor`1.ViewScale">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.Accessor">
            <summary>
            The keyframes data accessor.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditor`1.IsUserEditing">
            <summary>
            Gets a value indicating whether user is editing the curve.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.CurveEditor`1.DefaultValue">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditor`1.ScrollBars">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditor`1.FPS">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.CurveEditor`1.ShowCollapsed">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.CurveEditor`1"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.SetKeyframes(System.Collections.Generic.IEnumerable{FlaxEngine.Curve{`0}.Keyframe})">
            <summary>
            Sets the keyframes collection.
            </summary>
            <param name="keyframes">The keyframes.</param>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.OnKeyframesChanged">
            <summary>
            Called when keyframes collection gets changed (keyframe added or removed).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Evaluate(`0@,System.Single,System.Boolean)">
            <summary>
            Evaluates the animation curve value at the specified time.
            </summary>
            <param name="result">The interpolated value from the curve at provided time.</param>
            <param name="time">The time to evaluate the curve at.</param>
            <param name="loop">If true the curve will loop when it goes past the end or beginning. Otherwise the curve value will be clamped.</param>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.AddKeyframe(FlaxEngine.Curve{`0}.Keyframe)">
            <summary>
            Adds the new keyframe.
            </summary>
            <param name="k">The keyframe to add.</param>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Popup.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Popup.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Popup.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Popup.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.ShowWholeCurve">
            <summary>
            Shows the whole curve.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.ResetView">
            <summary>
            Resets the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.UpdateKeyframes">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Evaluate(System.Object@,System.Single,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.GetKeyframes">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.SetKeyframes(FlaxEngine.Curve{System.Object}.Keyframe[])">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.AddKeyframe(System.Single,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.SetKeyframe(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.GetKeyframePoint(FlaxEngine.Curve{`0}.Keyframe@,System.Int32)">
            <summary>
            Gets the keyframe point (in keyframes space).
            </summary>
            <param name="k">The keyframe.</param>
            <param name="component">The keyframe value component index.</param>
            <returns>The point in time/value space.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.PointToKeyframes(FlaxEngine.Vector2,FlaxEngine.Rectangle@)">
            <summary>
            Converts the input point from curve editor control space into the keyframes time/value coordinates.
            </summary>
            <param name="point">The point.</param>
            <param name="curveContentAreaBounds">The curve contents area bounds.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.PointFromKeyframes(FlaxEngine.Vector2,FlaxEngine.Rectangle@)">
            <summary>
            Converts the input point from the keyframes time/value coordinates into the curve editor control space.
            </summary>
            <param name="point">The point.</param>
            <param name="curveContentAreaBounds">The curve contents area bounds.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.CurveEditor`1.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Dialogs.IColorPickerDialog">
            <summary>
            The base interface for the color picker dialogs.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.IColorPickerDialog.ClosePicker">
            <summary>
            Closes the picker (similar to value editing cancel).
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Dialogs.ColorPickerDialog">
            <summary>
            Color picking dialog.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.Dialog" />
        </member>
        <member name="P:FlaxEditor.GUI.Dialogs.ColorPickerDialog.SelectedColor">
            <summary>
            Gets the selected color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorPickerDialog.#ctor(FlaxEngine.Color,FlaxEditor.GUI.Input.ColorValueBox.ColorPickerEvent,FlaxEditor.GUI.Input.ColorValueBox.ColorPickerClosedEvent,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Dialogs.ColorPickerDialog"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="colorChanged">The color changed event.</param>
            <param name="pickerClosed">The close event.</param>
            <param name="useDynamicEditing">True if allow dynamic value editing (slider-like usage), otherwise will fire color change event only on editing end.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorPickerDialog.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorPickerDialog.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorPickerDialog.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorPickerDialog.ClosePicker">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Dialogs.ColorSelector">
            <summary>
            Color selecting control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Dialogs.ColorSelector._color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Dialogs.ColorSelector._wheelRect">
            <summary>
            The wheel rectangle.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Dialogs.ColorSelector.ColorChanged">
            <summary>
            Occurs when selected color gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Dialogs.ColorSelector.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Dialogs.ColorSelector"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Dialogs.ColorSelector"/> class.
            </summary>
            <param name="wheelSize">Size of the wheel.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.UpdateMouse(FlaxEngine.Vector2@)">
            <summary>
            Updates the color selected by the mouse.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders">
            <summary>
            Color selecting control with additional sliders.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.ColorSelector" />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders"/> class.
            </summary>
            <param name="wheelSize">Size of the wheel.</param>
            <param name="slidersThickness">The sliders thickness.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.UpdateMouse(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Dialogs.Dialog">
            <summary>
            Helper class for showing user dialogs.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Dialogs.Dialog._isWaitingForDialog">
            <summary>
            Flag used to block the calling thread if it used ShowDialog option.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Dialogs.Dialog._window">
            <summary>
            The parent window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Dialogs.Dialog._result">
            <summary>
            The dialog result.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Dialogs.Dialog._dialogSize">
            <summary>
            The dialog size.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Dialogs.Dialog.Result">
            <summary>
            Gets the dialog result.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Dialogs.Dialog"/> class.
            </summary>
            <param name="title">The title.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.ShowDialog">
            <summary>
            Shows the dialog and waits for the result.
            </summary>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.ShowDialog(FlaxEngine.GUI.WindowRootControl)">
            <summary>
            Shows the dialog and waits for the result.
            </summary>
            <param name="parentWindow">The parent window.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.ShowDialog(FlaxEngine.GUI.Control)">
            <summary>
            Shows the dialog and waits for the result.
            </summary>
            <param name="control">The control calling.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.ShowDialog(FlaxEngine.Window)">
            <summary>
            Shows the dialog and waits for the result.
            </summary>
            <param name="parentWindow">The parent window.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.Show">
            <summary>
            Shows the dialog.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.Show(FlaxEngine.GUI.WindowRootControl)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="parentWindow">The parent window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.Show(FlaxEngine.GUI.Control)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="control">The control calling.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.Show(FlaxEngine.Window)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="parentWindow">The parent window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.Close">
            <summary>
            Closes this dialog.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.Close(FlaxEngine.DialogResult)">
            <summary>
            Closes dialog with the specified result.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.SetupWindowSettings(FlaxEngine.CreateWindowSettings@)">
            <summary>
            Setups the window settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.OnShow">
            <summary>
            Called when dialogs popups.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.CanCloseWindow(FlaxEngine.ClosingReason)">
            <summary>
            Determines whether this dialog can be closed.
            </summary>
            <param name="reason">The reason.</param>
            <returns><c>true</c> if this dialog can be closed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.Docking.DockHintWindow">
            <summary>
            Helper class used to handle docking windows dragging and docking.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Create(FlaxEditor.GUI.Docking.FloatWindowDockPanel)">
            <summary>
            Creates the new dragging hit window.
            </summary>
            <param name="toMove">Floating dock panel to move.</param>
            <returns>The dock hint window object.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Create(FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Creates the new dragging hit window.
            </summary>
            <param name="toMove">Dock window to move.</param>
            <returns>The dock hint window object.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.CalculateDockRect(FlaxEditor.GUI.Docking.DockState,FlaxEngine.Rectangle@)">
            <summary>
            Calculates window rectangle in the dock window.
            </summary>
            <param name="state">Window dock state.</param>
            <param name="rect">Dock panel rectangle.</param>
            <returns>Calculated window rectangle.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.Docking.DockHintWindow.Proxy">
            <summary>
            Contains helper proxy windows shared across docking panels. They are used to visualize docking window locations.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Window">
            <summary>
            The drag proxy window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Left">
            <summary>
            The left hint proxy window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Right">
            <summary>
            The right hint proxy window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Up">
            <summary>
            The up hint proxy window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Down">
            <summary>
            The down hint proxy window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Center">
            <summary>
            The center hint proxy window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.HintWindowsSize">
            <summary>
            The hint windows size.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.InitHitProxy">
            <summary>
            Initializes the hit proxy windows. Those windows are used to indicate drag target areas (left, right, top, bottom, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Init(FlaxEngine.Vector2@)">
            <summary>
            Initializes the hint window.
            </summary>
            <param name="initSize">Initial size of the proxy window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Hide">
            <summary>
            Hides proxy windows.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Dispose">
            <summary>
            Releases proxy data and windows.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Docking.DockState">
            <summary>
            Dockable window mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.Unknown">
            <summary>
            The unknown state.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.Float">
            <summary>
            The floating window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.DockFill">
            <summary>
            The dock fill as a tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.DockTop">
            <summary>
            The dock top.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.DockLeft">
            <summary>
            The dock left.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.DockBottom">
            <summary>
            The dock bottom.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.DockRight">
            <summary>
            The dock right.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.Hidden">
            <summary>
            The hidden state.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Docking.DockPanel">
            <summary>
            Dockable panel control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanel.DefaultHeaderHeight">
            <summary>
            The default dock tabs header height.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanel.DefaultLeftTextMargin">
            <summary>
            The default tabs header text left margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanel.DefaultRightTextMargin">
            <summary>
            The default tabs header text right margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanel.DefaultButtonsSize">
            <summary>
            The default tabs header buttons size.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanel.DefaultButtonsMargin">
            <summary>
            The default tabs header buttons margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanel.DefaultSplitterValue">
            <summary>
            The default splitters value.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.IsMaster">
            <summary>
            Returns true if this panel is a master panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.IsFloating">
            <summary>
            Returns true if this panel is a floating window panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.DockAreaBounds">
            <summary>
            Gets docking area bounds (tabs rectangle) in a screen space.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.ChildPanels">
            <summary>
            Gets the child panels.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.ChildPanelsCount">
            <summary>
            Gets the child panels count.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.Tabs">
            <summary>
            Gets the tabs.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.TabsCount">
            <summary>
            Gets amount of the tabs in a dock panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.SelectedTabIndex">
            <summary>
            Gets or sets the index of the selected tab.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.SelectedTab">
            <summary>
            Gets the selected tab.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.FirstTab">
            <summary>
            Gets the first tab.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.LastTab">
            <summary>
            Gets the last tab.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.ParentDockPanel">
            <summary>
            Gets the parent panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.TabsProxy">
            <summary>
            Gets the tabs header proxy.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.#ctor(FlaxEditor.GUI.Docking.DockPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Docking.DockPanel"/> class.
            </summary>
            <param name="parentPanel">The parent panel.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.CloseAll(FlaxEngine.ClosingReason)">
            <summary>
            Closes all the windows.
            </summary>
            <param name="reason">Window closing reason.</param>
            <returns>True if action has been cancelled (due to window internal logic).</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.GetTab(System.Int32)">
            <summary>
            Gets tab at the given index.
            </summary>
            <param name="tabIndex">The index of the tab page.</param>
            <returns>The tab.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.GetTabIndex(FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Gets tab at the given index.
            </summary>
            <param name="tab">The tab page.</param>
            <returns>The index of the given tab.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.ContainsTab(FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Determines whether panel contains the specified tab.
            </summary>
            <param name="tab">The tab.</param>
            <returns>
              <c>true</c> if panel contains the specified tab; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.SelectTab(System.Int32)">
            <summary>
            Selects the tab page.
            </summary>
            <param name="tabIndex">The index of the tab page to select.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.SelectTab(FlaxEditor.GUI.Docking.DockWindow,System.Boolean)">
            <summary>
            Selects the tab page.
            </summary>
            <param name="tab">The tab page to select.</param>
            <param name="autoFocus">True if focus tab after selection change.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.OnSelectedTabChanged">
            <summary>
            Called when selected tab gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.HitTest(FlaxEngine.Vector2@)">
            <summary>
            Performs hit test over dock panel
            </summary>
            <param name="position">Screen space position to test</param>
            <returns>Dock panel that has been hit or null if nothing found</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.TryGetDockState(System.Single@)">
            <summary>
            Try get panel dock state
            </summary>
            <param name="splitterValue">Splitter value</param>
            <returns>Dock State</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.CreateChildPanel(FlaxEditor.GUI.Docking.DockState,System.Single)">
            <summary>
            Create child dock panel
            </summary>
            <param name="state">Dock panel state</param>
            <param name="splitterValue">Initial splitter value</param>
            <returns>Child panel</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.OnLastTabRemoved">
            <summary>
            Called when last tab gets removed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.DockWindow(FlaxEditor.GUI.Docking.DockState,FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Docks the window.
            </summary>
            <param name="state">The state.</param>
            <param name="window">The window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.UndockWindow(FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Undocks the window.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.AddTab(FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Adds the tab.
            </summary>
            <param name="window">The window to insert as a tab.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Docking.DockPanelProxy">
            <summary>
            Proxy control used for docking <see cref="T:FlaxEditor.GUI.Docking.DockWindow"/> inside <see cref="T:FlaxEditor.GUI.Docking.DockPanel"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.IsMouseLeftButtonDown">
            <summary>
            The is mouse down flag (left button).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.IsMouseRightButtonDown">
            <summary>
            The is mouse down flag (right button).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.IsMouseMiddleButtonDown">
            <summary>
            The is mouse down flag (middle button).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.IsMouseDownOverCross">
            <summary>
            The is mouse down over cross button flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.MouseDownWindow">
            <summary>
            The mouse down window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.MousePosition">
            <summary>
            The mouse position.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.StartDragAsyncWindow">
            <summary>
            The start drag asynchronous window.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.#ctor(FlaxEditor.GUI.Docking.DockPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Docking.DockPanelProxy"/> class.
            </summary>
            <param name="panel">The panel.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.GetDesireClientArea(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Docking.DockWindow">
            <summary>
            Dockable window UI control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockWindow._masterPanel">
            <summary>
            The master panel.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockWindow._dockedTo">
            <summary>
            The parent panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.HideOnClose">
            <summary>
            Gets or sets a value indicating whether hide window on close.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.MasterPanel">
            <summary>
            Gets the master panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.ParentDockPanel">
            <summary>
            Gets the parent dock panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.IsDocked">
            <summary>
            Gets a value indicating whether this window is docked.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.IsSelected">
            <summary>
            Gets a value indicating whether this window is selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.DefaultSize">
            <summary>
            Gets the default window size.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.SerializationTypename">
            <summary>
            Gets the serialization typename.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.Title">
            <summary>
            Gets or sets the window title.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.TitleSize">
            <summary>
            Gets the size of the title.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockWindow.InputActions">
            <summary>
            The input actions collection to processed during user input.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.#ctor(FlaxEditor.GUI.Docking.MasterDockPanel,System.Boolean,FlaxEngine.GUI.ScrollBars)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Docking.DockWindow"/> class.
            </summary>
            <param name="masterPanel">The master docking panel.</param>
            <param name="hideOnClose">True if hide window on closing, otherwise it will be destroyed.</param>
            <param name="scrollBars">The scroll bars.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.ShowFloating">
            <summary>
            Shows the window in a floating state.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.ShowFloating(FlaxEngine.WindowStartPosition)">
            <summary>
            Shows the window in a floating state.
            </summary>
            <param name="position">Window location.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.ShowFloating(FlaxEngine.Vector2,FlaxEngine.WindowStartPosition)">
            <summary>
            Shows the window in a floating state.
            </summary>
            <param name="size">Window size, set Vector2.Zero to use default.</param>
            <param name="position">Window location.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.Show(FlaxEditor.GUI.Docking.DockState,FlaxEditor.GUI.Docking.DockPanel)">
            <summary>
            Shows the window.
            </summary>
            <param name="state">Initial window state.</param>
            <param name="toDock">Panel to dock to it.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.Show(FlaxEditor.GUI.Docking.DockState,FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Shows the window.
            </summary>
            <param name="state">Initial window state.</param>
            <param name="toDock">Window to dock to it.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.FocusOrShow">
            <summary>
            Focuses or shows the window.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.FocusOrShow(FlaxEditor.GUI.Docking.DockState)">
            <summary>
            Focuses or shows the window.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.Close(FlaxEngine.ClosingReason)">
            <summary>
            Closes the window.
            </summary>
            <param name="reason">Window closing reason.</param>
            <returns>True if action has been cancelled (due to window internal logic).</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.SelectTab(System.Boolean)">
            <summary>
            Selects this tab page.
            </summary>
            <param name="autoFocus">True if focus tab after selection change.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnUnlink">
            <summary>
            Called when window is unlinked from the master panel.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.Undock">
            <summary>
            Undocks this window.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnClosing(FlaxEngine.ClosingReason)">
            <summary>
            Called when window is closing. Operation can be cancelled.
            </summary>
            <param name="reason">The reason.</param>
            <returns>True if cancel, otherwise false to allow.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnClose">
            <summary>
            Called when window is closed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnShow">
            <summary>
            Called when window shows.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.UseLayoutData">
            <summary>
            Gets a value indicating whether window uses custom layout data.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <summary>
            Called when during windows layout serialization. Each window can use it to store custom interface data (eg. splitter position).
            </summary>
            <param name="writer">The Xml writer.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <summary>
            Called when during windows layout deserialization. Each window can use it to load custom interface data (eg. splitter position).
            </summary>
            <param name="node">The Xml document node.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnLayoutDeserialize">
            <summary>
            Called when during windows layout deserialization if window has no layout data to load. Can be used to restore default UI layout.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.Focus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnShowContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu)">
            <summary>
            Called when dock panel wants to show the context menu for this window. Can be used to inject custom buttons and items to the context menu (on top).
            </summary>
            <param name="menu">The menu.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Docking.FloatWindowDockPanel">
            <summary>
            Floating Window Dock Panel control.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Docking.DockPanel" />
        </member>
        <member name="P:FlaxEditor.GUI.Docking.FloatWindowDockPanel.MasterPanel">
            <summary>
            Gets the master panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.FloatWindowDockPanel.Window">
            <summary>
            Gets the window.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.#ctor(FlaxEditor.GUI.Docking.MasterDockPanel,FlaxEngine.GUI.RootControl)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Docking.FloatWindowDockPanel"/> class.
            </summary>
            <param name="masterPanel">The master panel.</param>
            <param name="window">The window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.BeginDrag">
            <summary>
            Begin drag operation on the window
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.CreateFloatWindow(FlaxEngine.GUI.RootControl,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.WindowStartPosition,System.String)">
            <summary>
            Creates a floating window.
            </summary>
            <param name="parent">Parent window handle.</param>
            <param name="location">Client area location.</param>
            <param name="size">Window client area size.</param>
            <param name="startPosition">Window start position.</param>
            <param name="title">Initial window title.</param>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.FloatWindowDockPanel.IsFloating">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.TryGetDockState(System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.OnLastTabRemoved">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.OnSelectedTabChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Docking.MasterDockPanel">
            <summary>
            Master Dock Panel control used as a root control for dockable windows workspace.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Docking.DockPanel" />
        </member>
        <member name="F:FlaxEditor.GUI.Docking.MasterDockPanel.Windows">
            <summary>
            Array with all created dock windows for that master panel.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.MasterDockPanel.FloatingPanels">
            <summary>
            Array with all floating windows for that master panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.MasterDockPanel.VisibleWindowsCount">
            <summary>
            Gets the visible windows count.
            </summary>
            <value>
            The visible windows count.
            </value>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.MasterDockPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Docking.MasterDockPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.MasterDockPanel.ResetLayout">
            <summary>
            Resets windows layout.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.MasterDockPanel.HitTest(FlaxEngine.Vector2@,FlaxEditor.GUI.Docking.FloatWindowDockPanel)">
            <summary>
            Performs hit test over dock panel.
            </summary>
            <param name="position">Screen space position to test.</param>
            <param name="excluded">Floating window to omit during searching (and all docked to that one).</param>
            <returns>Dock panel that has been hit or null if nothing found.</returns>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.MasterDockPanel.IsMaster">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.MasterDockPanel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.MasterDockPanel.TryGetDockState(System.Single@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragActors">
            <summary>
            Actors references collection drag handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors.#ctor(System.Func{FlaxEditor.SceneGraph.ActorNode,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragActors"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragActors`1">
            <summary>
            Helper class for handling <see cref="T:FlaxEditor.SceneGraph.ActorNode"/> drag and drop.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragActors`1.DragPrefix">
            <summary>
            The default prefix for drag data used for <see cref="T:FlaxEditor.SceneGraph.ActorNode"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.#ctor(System.Func{FlaxEditor.SceneGraph.ActorNode,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.ToDragData(FlaxEngine.Actor)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="actor">The actor.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.ToDragData(FlaxEditor.SceneGraph.ActorNode)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.ToDragData(System.Collections.Generic.IEnumerable{FlaxEditor.SceneGraph.ActorNode})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.GetDragData(FlaxEngine.Actor)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="actor">The actor.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.GetDragData(FlaxEditor.SceneGraph.ActorNode)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">The item.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.GetDragData(System.Collections.Generic.IEnumerable{FlaxEditor.SceneGraph.ActorNode})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="items">The items.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.FromDragData(FlaxEngine.GUI.DragData)">
            <inheritdoc/>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragActorType">
            <summary>
            Actor type drag handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActorType.#ctor(System.Func{System.Type,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragActorType"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragActorType`1">
            <summary>
            Helper class for handling actor type drag and drop (for spawning).
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragActorType`1.DragPrefix">
            <summary>
            The default prefix for drag data used for actor type drag and drop.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActorType`1.#ctor(System.Func{System.Type,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActorType`1.ToDragData(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActorType`1.ToDragData(System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActorType`1.GetDragData(System.Type)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">The actor type.</param>
            <returns>The data</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActorType`1.FromDragData(FlaxEngine.GUI.DragData)">
            <summary>
            Tries to parse the drag data to extract <see cref="T:System.Type"/> collection.
            </summary>
            <param name="data">The data.</param>
            <returns>Gathered objects or empty array if cannot get any valid.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragAssets">
            <summary>
            Assets collection drag handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets.#ctor(System.Func{FlaxEditor.Content.AssetItem,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragAssets"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragAssets`1">
            <summary>
            Helper class for handling <see cref="T:FlaxEditor.Content.AssetItem"/> drag and drop.
            </summary>
            <seealso cref="T:FlaxEditor.Content.AssetItem" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragAssets`1.DragPrefix">
            <summary>
            The default prefix for drag data used for <see cref="T:FlaxEditor.Content.ContentItem"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.#ctor(System.Func{FlaxEditor.Content.AssetItem,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.ToDragData(FlaxEngine.Asset)">
            <summary>
            Gets the drag data (finds asset item).
            </summary>
            <param name="asset">The asset.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.ToDragData(FlaxEditor.Content.AssetItem)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.ToDragData(System.Collections.Generic.IEnumerable{FlaxEditor.Content.AssetItem})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.GetDragData(FlaxEngine.Asset)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="asset">The asset.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.GetDragData(FlaxEditor.Content.AssetItem)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">The item.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.GetDragData(System.Collections.Generic.IEnumerable{FlaxEditor.Content.AssetItem})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="items">The items.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.FromDragData(FlaxEngine.GUI.DragData)">
            <summary>
            Tries to parse the drag data to extract <see cref="T:FlaxEditor.Content.AssetItem"/> collection.
            </summary>
            <param name="data">The data.</param>
            <returns>Gathered objects or empty array if cannot get any valid.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragEventArgs">
            <summary>
            Drag event arguments data container.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragHandlers">
            <summary>
            Handles a list of <see cref="T:FlaxEditor.GUI.Drag.DragHelper`2"/>s
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHandlers.OnDragEnter(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag enter.
            </summary>
            <param name="data">The data.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHandlers.OnDragLeave">
            <summary>
            Called when drag leaves.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHandlers.OnDragDrop(FlaxEditor.GUI.Drag.DragEventArgs)">
            <summary>
            Called when drag drops.
            </summary>
            <param name="dragEventArgs">The <see cref="T:FlaxEditor.GUI.Drag.DragEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHandlers.HasValidDrag">
            <summary>
            Determines whether has valid drag handler to handle the drag request.
            </summary>
            <returns>True if has valid drag handler to handle the drag request, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHandlers.WithValidDrag">
            <summary>
            Gets the first valid drag helper.
            </summary>
            <returns>The drag helper.</returns>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragHandlers.Effect">
            <summary>
            Gets the valid drag effect to use.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragHelper">
            <summary>
            The drag events helper object.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragHelper.HasValidDrag">
            <summary>
            Gets a value indicating whether this instance has valid drag.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragHelper.Effect">
            <summary>
            Gets the drag effect.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper.OnDragEnter(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag enters.
            </summary>
            <param name="data">The data.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper.OnDragLeave">
            <summary>
            Called when drag leaves.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper.OnDragDrop">
            <summary>
            Called when drag drops.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper.OnDragDrop(FlaxEditor.GUI.Drag.DragEventArgs)">
            <summary>
            Called when drag drops.
            </summary>
            <param name="dragEventArgs">The <see cref="T:FlaxEditor.GUI.Drag.DragEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragHelper`2">
            <summary>
            Base class for drag and drop operation helpers.
            </summary>
            <typeparam name="T">Type of the objects to collect from drag data.</typeparam>
            <typeparam name="U">Type of the drag-drop event.</typeparam>
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragHelper`2.Objects">
            <summary>
            The objects gathered.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragHelper`2.HasValidDrag">
            <summary>
            Gets a value indicating whether this instance has valid drag data.
            </summary>
            <value>
              <c>true</c> if this instance has valid drag data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragHelper`2.Effect">
            <summary>
            Gets the current drag effect.
            </summary>
            <value>
            The effect.
            </value>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragHelper`2.ValidateFunction">
            <summary>
            The validation function
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.ToDragData(`0)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">An item.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.ToDragData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="items">The items.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.FromDragData(FlaxEngine.GUI.DragData)">
            <summary>
            Tries to parse the drag data.
            </summary>
            <param name="data">The data.</param>
            <returns>Gathered objects or empty IEnumerable if cannot get any valid.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.DragDrop(`1,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Handler drag drop event.
            </summary>
            <param name="dragEventArgs">The drag event arguments.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.InvalidDrag">
            <summary>
            Invalids the drag data.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.OnDragEnter(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag enters.
            </summary>
            <param name="data">The data.</param>
            <returns>True if drag event is valid and can be performed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.OnDragLeave">
            <summary>
            Called when drag leaves.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.OnDragDrop">
            <summary>
            Called when drag drops.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.OnDragDrop(FlaxEditor.GUI.Drag.DragEventArgs)">
            <summary>
            Called when drag drops.
            </summary>
            <param name="dragEventArgs">Arguments</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragItems">
            <summary>
            Drag content items handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems.#ctor(System.Func{FlaxEditor.Content.ContentItem,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragItems"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragItems`1">
            <summary>
            Helper class for handling <see cref="T:FlaxEditor.Content.ContentItem"/> drag and drop.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentItem" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragItems`1.DragPrefix">
            <summary>
            The default prefix for drag data used for <see cref="T:FlaxEditor.Content.ContentItem"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.#ctor(System.Func{FlaxEditor.Content.ContentItem,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.ToDragData(System.String)">
            <summary>
            Gets the drag data for the given file.
            </summary>
            <param name="path">The path.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.ToDragData(FlaxEditor.Content.ContentItem)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.ToDragData(System.Collections.Generic.IEnumerable{FlaxEditor.Content.ContentItem})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.GetDragData(System.String)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="path">The path.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.GetDragData(FlaxEditor.Content.ContentItem)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">The item.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.GetDragData(System.Collections.Generic.IEnumerable{FlaxEditor.Content.ContentItem})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="items">The items.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.FromDragData(FlaxEngine.GUI.DragData)">
            <inheritdoc/>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragNames">
            <summary>
            Generic items names collection drag handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragNames.#ctor(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragNames"/> class.
            </summary>
            <param name="prefix">The drag data prefix.</param>
            <param name="validateFunction">The validation function.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragNames`1">
            <summary>
            Helper class for handling generic items names drag and drop.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragNames`1.DragPrefix">
            <summary>
            Gets the drag data prefix.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragNames`1.#ctor(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="prefix">The drag data prefix.</param>
            <param name="validateFunction">The validation function.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragNames`1.ToDragData(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragNames`1.ToDragData(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragNames`1.GetDragData(System.String,System.String)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="dragPrefix">The drag dat prefix.</param>
            <param name="name">The name.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragNames`1.GetDragData(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="dragPrefix">The drag dat prefix.</param>
            <param name="names">The names.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragNames`1.FromDragData(FlaxEngine.GUI.DragData)">
            <summary>
            Tries to parse the drag data to extract generic items names collection.
            </summary>
            <param name="data">The data.</param>
            <returns>Gathered objects or empty array if cannot get any valid.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragScriptItems">
            <summary>
            Script items drag handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems.#ctor(System.Func{FlaxEditor.Content.ScriptItem,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragScriptItems"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragScriptItems`1">
            <summary>
            Helper class for handling <see cref="T:FlaxEditor.Content.ScriptItem"/> drag and drop.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ScriptItem" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragScriptItems`1.DragPrefix">
            <summary>
            The default prefix for drag data used for <see cref="T:FlaxEditor.Content.ContentItem"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems`1.#ctor(System.Func{FlaxEditor.Content.ScriptItem,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems`1.ToDragData(FlaxEditor.Content.ScriptItem)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems`1.ToDragData(System.Collections.Generic.IEnumerable{FlaxEditor.Content.ScriptItem})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems`1.GetDragData(FlaxEditor.Content.ScriptItem)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">The item.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems`1.GetDragData(System.Collections.Generic.IEnumerable{FlaxEditor.Content.ScriptItem})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="items">The items.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems`1.FromDragData(FlaxEngine.GUI.DragData)">
            <summary>
            Tries to parse the drag data.
            </summary>
            <param name="data">The data.</param>
            <returns>
            Gathered objects or empty IEnumerable if cannot get any valid.
            </returns>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragScripts">
            <summary>
            Scripts references drag handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts.#ctor(System.Func{FlaxEngine.Script,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragScripts"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragScripts`1">
            <summary>
            Helper class for handling <see cref="T:FlaxEngine.Script"/> instance drag and drop.
            </summary>
            <seealso cref="T:FlaxEngine.Script" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragScripts`1.DragPrefix">
            <summary>
            The default prefix for drag data used for <see cref="T:FlaxEngine.Script"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.#ctor(System.Func{FlaxEngine.Script,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.ToDragData(FlaxEngine.Script)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.ToDragData(System.Collections.Generic.IEnumerable{FlaxEngine.Script})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.GetDragData(FlaxEngine.Script)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">The script.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.GetDragData(System.Collections.Generic.IEnumerable{FlaxEngine.Script})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="items">The items.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.FromDragData(FlaxEngine.GUI.DragData)">
            <summary>
            Tries to parse the drag data.
            </summary>
            <param name="data">The data.</param>
            <returns>
            Gathered objects or empty IEnumerable if cannot get any valid.
            </returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.IsValidData(FlaxEngine.GUI.DragDataText)">
            <summary>
            Tries to parse the drag data to validate if it has valid scripts darg.
            </summary>
            <param name="data">The data.</param>
            <returns>True if drag data has valid scripts, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.EnumComboBox">
            <summary>
            The custom combobox for enum editing. Supports some special cases for flag enums.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ComboBox" />
        </member>
        <member name="F:FlaxEditor.GUI.EnumComboBox._enumType">
            <summary>
            The enum type.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.EnumComboBox._entries">
            <summary>
            The enum entries. The same order as items in combo box.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.EnumComboBox._cachedValue">
            <summary>
            The cached value from the UI.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.EnumComboBox._hasValueCached">
            <summary>
            True if has value cached, otherwise false.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.EnumComboBox.Entry">
            <summary>
            The enum entry.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.EnumComboBox.Entry.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.EnumComboBox.Entry.Tooltip">
            <summary>
            The tooltip text.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.EnumComboBox.Entry.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.EnumComboBox.Entry.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.EnumComboBox.Entry"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="tooltip">The tooltip.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FlaxEditor.GUI.EnumComboBox.BuildEntriesDelegate">
            <summary>
            Custom extension delegate used to build enum element entries layout.
            </summary>
            <param name="type">The type.</param>
            <param name="entries">The output entries collection.</param>
        </member>
        <member name="P:FlaxEditor.GUI.EnumComboBox.IsFlags">
            <summary>
            Gets a value indicating whether this enum has flags.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.EnumComboBox.EnumTypeValue">
            <summary>
            Gets or sets the value of the enum (may not be int).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.EnumComboBox.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.EnumComboBox.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.EnumComboBox.#ctor(System.Type,FlaxEditor.GUI.EnumComboBox.BuildEntriesDelegate,FlaxEngine.EnumDisplayAttribute.FormatMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.EnumElement"/> class.
            </summary>
            <param name="type">The enum type.</param>
            <param name="customBuildEntriesDelegate">The custom entries layout builder. Allows to hide existing or add different enum values to editor.</param>
            <param name="formatMode">The formatting mode.</param>
        </member>
        <member name="M:FlaxEditor.GUI.EnumComboBox.OnValueChanged">
            <summary>
            Called when value gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.EnumComboBox.CacheValue">
            <summary>
            Caches the selected UI enum value.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.EnumComboBox.BuildEntriesDefault(System.Type,System.Collections.Generic.List{FlaxEditor.GUI.EnumComboBox.Entry},FlaxEngine.EnumDisplayAttribute.FormatMode)">
            <summary>
            Builds the default entries for the given enum type.
            </summary>
            <param name="type">The type.</param>
            <param name="entries">The output entries.</param>
            <param name="formatMode">The formatting mode.</param>
        </member>
        <member name="M:FlaxEditor.GUI.EnumComboBox.OnItemClicked(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Input.ColorValueBox">
            <summary>
            Color value editor with picking support.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="T:FlaxEditor.GUI.Input.ColorValueBox.ColorPickerEvent">
            <summary>
            Delegate function used for the color picker events handling.
            </summary>
            <param name="color">The selected color.</param>
            <param name="sliding">True if user is using a slider, otherwise false.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Input.ColorValueBox.ColorPickerClosedEvent">
            <summary>
            Delegate function used for the color picker close event handling.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Input.ColorValueBox.ShowPickColorDialogDelegate">
            <summary>
            Delegate function used to handle showing color picking dialog.
            </summary>
            <param name="targetControl">The GUI control that invokes the picker.</param>
            <param name="initialValue">The initial value.</param>
            <param name="colorChanged">The color changed event.</param>
            <param name="pickerClosed">The color editing end event.</param>
            <param name="useDynamicEditing">True if allow dynamic value editing (slider-like usage), otherwise will fire color change event only on editing end.</param>
            <returns>The created color picker dialog or null if failed.</returns>
        </member>
        <member name="F:FlaxEditor.GUI.Input.ColorValueBox.ShowPickColorDialog">
            <summary>
            Shows picking color dialog (see <see cref="T:FlaxEditor.GUI.Input.ColorValueBox.ShowPickColorDialogDelegate"/>).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.ColorValueBox._currentDialog">
            <summary>
            The current opened dialog.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.ColorValueBox._isSliding">
            <summary>
            True if slider is in use.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.ColorValueBox._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Input.ColorValueBox.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.ColorValueBox.Value">
            <summary>
            Gets or sets the color value.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.ColorValueBox.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.ColorValueBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Input.ColorValueBox"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.ColorValueBox.#ctor(FlaxEngine.Color,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Input.ColorValueBox"/> class.
            </summary>
            <param name="value">The initial value.</param>
            <param name="x">The x location</param>
            <param name="y">The y location</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.ColorValueBox.OnValueChanged">
            <summary>
            Called when value gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.ColorValueBox.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.ColorValueBox.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.ColorValueBox.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Input.DoubleValueBox">
            <summary>
            Double precision floating point value editor.
            </summary>
            <seealso cref="T:System.Double" />
        </member>
        <member name="P:FlaxEditor.GUI.Input.DoubleValueBox.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Input.DoubleValueBox.MinValue">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Input.DoubleValueBox.MaxValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.DoubleValueBox.#ctor(System.Double,System.Single,System.Single,System.Single,System.Double,System.Double,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Input.FloatValueBox"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The x location.</param>
            <param name="y">The y location.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="slideSpeed">The slide speed.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.DoubleValueBox.SetLimits(System.Double,System.Double)">
            <summary>
            Sets the value limits.
            </summary>
            <param name="min">The minimum value (bottom range).</param>
            <param name="max">The maximum value (upper range).</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.DoubleValueBox.SetLimits(FlaxEngine.RangeAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.DoubleValueBox.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.DoubleValueBox.SetLimits(FlaxEditor.GUI.Input.DoubleValueBox)">
            <summary>
            Sets the limits from the other <see cref="T:FlaxEditor.GUI.Input.DoubleValueBox"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.DoubleValueBox.UpdateText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.DoubleValueBox.TryGetValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.DoubleValueBox.ApplySliding(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Input.FloatValueBox">
            <summary>
            Floating point value editor.
            </summary>
            <seealso cref="T:System.Single" />
        </member>
        <member name="P:FlaxEditor.GUI.Input.FloatValueBox.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Input.FloatValueBox.MinValue">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Input.FloatValueBox.MaxValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.FloatValueBox.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Input.FloatValueBox"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The x location.</param>
            <param name="y">The y location.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="slideSpeed">The slide speed.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.FloatValueBox.SetLimits(System.Single,System.Single)">
            <summary>
            Sets the value limits.
            </summary>
            <param name="min">The minimum value (bottom range).</param>
            <param name="max">The maximum value (upper range).</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.FloatValueBox.SetLimits(FlaxEngine.RangeAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.FloatValueBox.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.FloatValueBox.SetLimits(FlaxEditor.GUI.Input.FloatValueBox)">
            <summary>
            Sets the limits from the other <see cref="T:FlaxEditor.GUI.Input.FloatValueBox"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.FloatValueBox.UpdateText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.FloatValueBox.TryGetValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.FloatValueBox.ApplySliding(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Input.IntValueBox">
            <summary>
            Integer value editor.
            </summary>
            <seealso cref="T:System.Int32" />
        </member>
        <member name="P:FlaxEditor.GUI.Input.IntValueBox.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Input.IntValueBox.MinValue">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Input.IntValueBox.MaxValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.IntValueBox.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Input.IntValueBox"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The x location.</param>
            <param name="y">The y location.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="slideSpeed">The slide speed.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.IntValueBox.SetLimits(System.Int32,System.Int32)">
            <summary>
            Sets the value limits.
            </summary>
            <param name="min">The minimum value (bottom range).</param>
            <param name="max">The maximum value (upper range).</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.IntValueBox.SetLimits(FlaxEngine.RangeAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.IntValueBox.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.IntValueBox.SetLimits(FlaxEditor.GUI.Input.IntValueBox)">
            <summary>
            Sets the limits from the other <see cref="T:FlaxEditor.GUI.Input.IntValueBox"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.IntValueBox.UpdateText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.IntValueBox.TryGetValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.IntValueBox.ApplySliding(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Input.LongValueBox">
            <summary>
            Integer (long type) value editor.
            </summary>
            <seealso cref="T:System.Int64" />
        </member>
        <member name="P:FlaxEditor.GUI.Input.LongValueBox.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Input.LongValueBox.MinValue">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Input.LongValueBox.MaxValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.LongValueBox.#ctor(System.Int64,System.Single,System.Single,System.Single,System.Int64,System.Int64,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Input.LongValueBox"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The x location.</param>
            <param name="y">The y location.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="slideSpeed">The slide speed.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.LongValueBox.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.LongValueBox.UpdateText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.LongValueBox.TryGetValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.LongValueBox.ApplySliding(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Input.SliderControl">
            <summary>
            Float value editor with fixed size text box and slider.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Input.SliderControl.Slider">
            <summary>
            The horizontal slider control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.GUI.Input.SliderControl.Slider.DefaultSize">
            <summary>
            The default size.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.SliderControl.Slider.DefaultThickness">
            <summary>
            The default thickness.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.SliderControl.Slider.Minimum">
            <summary>
            The minimum value (constant)
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.SliderControl.Slider.Maximum">
            <summary>
            The maximum value (constant).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.SliderControl.Slider.Value">
            <summary>
            Gets or sets the value (normalized to range 0-100).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.SliderControl.Slider.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.SliderControl.Slider.TrackLineColor">
            <summary>
            The color of the slider track line
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.SliderControl.Slider.ThumbColor">
            <summary>
            The color of the slider thumb when it's not selected
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.SliderControl.Slider.ThumbColorSelected">
            <summary>
            The color of the slider thumb when it's selected
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.SliderControl.Slider.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.SliderControl.Slider.SlidingStart">
            <summary>
            Occurs when sliding starts.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.SliderControl.Slider.SlidingEnd">
            <summary>
            Occurs when sliding ends.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.Slider.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Input.SliderControl.Slider"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:FlaxEditor.GUI.Input.SliderControl.Slider.TrackSize">
            <summary>
            Gets the size of the track.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.Slider.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.Slider.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.Slider.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.Slider.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.Slider.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.Slider.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.Slider.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.GUI.Input.SliderControl._slider">
            <summary>
            The slider.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.SliderControl._textBox">
            <summary>
            The text box.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.SliderControl.TextBoxSize">
            <summary>
            The text box size (rest will be the slider area).
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Input.SliderControl.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.SliderControl.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.SliderControl.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.SliderControl.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.SliderControl.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Input.SliderControl.SlidingStart">
            <summary>
            Occurs when sliding starts.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Input.SliderControl.SlidingEnd">
            <summary>
            Occurs when sliding ends.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Input.SliderControl"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The position x.</param>
            <param name="y">The position y.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.SetLimits(FlaxEngine.RangeAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.UpdateText">
            <summary>
            Updates the text of the textbox.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.UpdateSlider">
            <summary>
            Updates the slider value.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.OnValueChanged">
            <summary>
            Called when value gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.SliderControl.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Input.ULongValueBox">
            <summary>
            Unsigned integer (ulong type) value editor.
            </summary>
            <seealso cref="T:System.UInt64" />
        </member>
        <member name="P:FlaxEditor.GUI.Input.ULongValueBox.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Input.ULongValueBox.MinValue">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Input.ULongValueBox.MaxValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.ULongValueBox.#ctor(System.UInt64,System.Single,System.Single,System.Single,System.UInt64,System.UInt64,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Input.ULongValueBox"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The x location.</param>
            <param name="y">The y location.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="slideSpeed">The slide speed.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.ULongValueBox.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.ULongValueBox.UpdateText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.ULongValueBox.TryGetValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.ULongValueBox.ApplySliding(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Input.ValueBox`1">
            <summary>
            Base class for text boxes for float/int value editing. Supports slider and range clamping.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <seealso cref="T:FlaxEngine.GUI.TextBox" />
        </member>
        <member name="F:FlaxEditor.GUI.Input.ValueBox`1.SlidingBoxSize">
            <summary>
            The sliding box size.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.ValueBox`1._value">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.ValueBox`1._min">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.ValueBox`1._max">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.ValueBox`1._slideSpeed">
            <summary>
            The slider speed.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.ValueBox`1._isSliding">
            <summary>
            True if slider is in use.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Input.ValueBox`1._startSlideValue">
            <summary>
            The value cached on sliding start.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Input.ValueBox`1.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.ValueBox`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.ValueBox`1.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.ValueBox`1.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.ValueBox`1.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Input.ValueBox`1.SlidingStart">
            <summary>
            Occurs when sliding starts.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Input.ValueBox`1.SlidingEnd">
            <summary>
            Occurs when sliding ends.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.ValueBox`1.SlideSpeed">
            <summary>
            Gets or sets the slider speed. Use value 0 to disable and hide slider UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.ValueBox`1.#ctor(`0,System.Single,System.Single,System.Single,`0,`0,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Input.ValueBox`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="sliderSpeed">The slider speed.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.ValueBox`1.UpdateText">
            <summary>
            Updates the text of the textbox.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.ValueBox`1.TryGetValue">
            <summary>
            Tries the get value from the textbox text.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.ValueBox`1.ApplySliding(System.Single)">
            <summary>
            Applies the sliding delta to the value.
            </summary>
            <param name="delta">The delta (scaled).</param>
        </member>
        <member name="M:FlaxEditor.GUI.Input.ValueBox`1.OnValueChanged">
            <summary>
            Called when value gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.ValueBox`1.CanUseSliding">
            <summary>
            Gets a value indicating whether this value box can use sliding.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Input.ValueBox`1.SlideRect">
            <summary>
            Gets the slide rectangle.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Input.ValueBox`1.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.ValueBox`1.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.ValueBox`1.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.ValueBox`1.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.ValueBox`1.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.ValueBox`1.OnEditEnd">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Input.ValueBox`1.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Input.ValueBox`1.TextRectangle">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Input.ValueBox`1.TextClipRectangle">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ItemsListContextMenu">
            <summary>
            The custom context menu that shows a list of items and supports searching by name and query results highlighting.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuBase" />
        </member>
        <member name="T:FlaxEditor.GUI.ItemsListContextMenu.Item">
            <summary>
            The single list item control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.GUI.ItemsListContextMenu.Item._isMouseDown">
            <summary>
            The is mouse down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ItemsListContextMenu.Item._highlights">
            <summary>
            The search query highlights.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ItemsListContextMenu.Item.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.ItemsListContextMenu.Item.Clicked">
            <summary>
            Occurs when items gets clicked by the user.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ItemsListContextMenu.Item"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ItemsListContextMenu.Item"/> class.
            </summary>
            <param name="name">The item name.</param>
            <param name="tag">The item tag object.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.UpdateFilter(System.String)">
            <summary>
            Updates the filter.
            </summary>
            <param name="filterText">The filter text.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.GetTextRect(FlaxEngine.Rectangle@)">
            <summary>
            Gets the text rectangle.
            </summary>
            <param name="rect">The output rectangle.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="E:FlaxEditor.GUI.ItemsListContextMenu.ItemClicked">
            <summary>
            Event fired when any item in this popup menu gets clicked.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ItemsListContextMenu.ItemsPanel">
            <summary>
            The panel control where you should add your items.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ItemsListContextMenu"/> class.
            </summary>
            <param name="width">The control width.</param>
            <param name="height">The control height.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.AddItem(FlaxEditor.GUI.ItemsListContextMenu.Item)">
            <summary>
            Adds the item to the view and registers for the click event.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.OnClickItem(FlaxEditor.GUI.ItemsListContextMenu.Item)">
            <summary>
            Called when user clicks on an item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.ResetView">
            <summary>
            Resets the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.MainMenu">
            <summary>
            Menu strip with child buttons.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEditor.GUI.MainMenu.Selected">
            <summary>
            Gets or sets the selected button (with opened context menu).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.#ctor(FlaxEngine.GUI.RootControl)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.MainMenu"/> class.
            </summary>
            <param name="mainWindow">The main window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.AddButton(System.String)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The button text.</param>
            <returns>Created button control.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.GetButton(System.String)">
            <summary>
            Gets the button.
            </summary>
            <param name="text">The button text.</param>
            <returns>The button or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.MainMenuButton">
            <summary>
            Main menu button control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.GUI.MainMenuButton.Text">
            <summary>
            The button text.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.MainMenuButton.ContextMenu">
            <summary>
            The context menu.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.MainMenuButton.BackgroundColorMouseOver">
            <summary>
            The background color when mouse is over.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.MainMenuButton.BackgroundColorMouseOverOpened">
            <summary>
            The background color when mouse is over and context menu is opened.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.MainMenuButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.MainMenuButton"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:FlaxEditor.GUI.MainMenuButton.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.MainMenuButton.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.MainMenuButton.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.MainMenuButton.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.NavigationBar">
            <summary>
            A navigation bar control. Shows the current location path with UI buttons to navigate around.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="F:FlaxEditor.GUI.NavigationBar.DefaultButtonsMargin">
            <summary>
            The default buttons margin.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.NavigationBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.NavigationBar"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.NavigationBar.Arrange">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.NavigationBar.UpdateBounds(FlaxEditor.GUI.ToolStrip)">
            <summary>
            Updates the bar bounds and positions it after the last toolstrip button. Ensures to fit the toolstrip area (navigation bar horizontal scroll bar can be used to view the full path).
            </summary>
            <param name="toolstrip">The toolstrip.</param>
        </member>
        <member name="T:FlaxEditor.GUI.NavigationButton">
            <summary>
            A navigation bar button. Allows to change the current location and view the path.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Button" />
        </member>
        <member name="F:FlaxEditor.GUI.NavigationButton._validDragOver">
            <summary>
            The valid drag is over flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.NavigationButton.DefaultMargin">
            <summary>
            The default margin (horizontal).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.NavigationButton.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.NavigationButton"/> class.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.GUI.NavigationButton.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.NavigationButton.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.PlatformSelector">
            <summary>
            Editor control that allows user to select a platform icon.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.PlatformSelector.Selected">
            <summary>
            Gets or sets the selected platform.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.PlatformSelector.SelectedChanged">
            <summary>
            Occurs when selected platform gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.PlatformSelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.PlatformSelector"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.PrefabDiffContextMenu">
            <summary>
            The custom context menu that shows a tree of prefab diff items.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuBase" />
        </member>
        <member name="F:FlaxEditor.GUI.PrefabDiffContextMenu.Tree">
            <summary>
            The tree control where you should add your nodes.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.PrefabDiffContextMenu.RevertAll">
            <summary>
            The event called to revert all the changes applied.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.PrefabDiffContextMenu.ApplyAll">
            <summary>
            The event called to apply all the changes.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.PrefabDiffContextMenu.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.PrefabDiffContextMenu"/> class.
            </summary>
            <param name="width">The control width.</param>
            <param name="height">The control height.</param>
        </member>
        <member name="M:FlaxEditor.GUI.PrefabDiffContextMenu.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.PrefabDiffContextMenu.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.PrefabDiffContextMenu.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.PrefabDiffContextMenu.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.RenamePopup">
            <summary>
            Popup menu useful for renaming objects via UI. Displays text box for renaming.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuBase" />
        </member>
        <member name="E:FlaxEditor.GUI.RenamePopup.Renamed">
            <summary>
            Occurs when renaming is done.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.RenamePopup.Closed">
            <summary>
            Occurs when popup is closing (after renaming done or not).
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.RenamePopup.ValidateDelegate">
            <summary>
            Input value validation delegate.
            </summary>
            <param name="popup">The popup reference.</param>
            <param name="value">The input text value.</param>
            <returns>True if text is valid, otherwise false.</returns>
        </member>
        <member name="F:FlaxEditor.GUI.RenamePopup.Validate">
            <summary>
            Occurs when input text validation should be performed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.RenamePopup.InitialValue">
            <summary>
            Gets or sets the initial value.
            </summary>
            <value>
            The initial value.
            </value>
        </member>
        <member name="P:FlaxEditor.GUI.RenamePopup.Text">
            <summary>
            Gets or sets the input field text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="M:FlaxEditor.GUI.RenamePopup.#ctor(System.String,FlaxEngine.Vector2,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.RenamePopup"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="size">The size.</param>
            <param name="isMultiline">Enable/disable multiline text input support</param>
        </member>
        <member name="M:FlaxEditor.GUI.RenamePopup.Show(FlaxEngine.GUI.Control,FlaxEngine.Rectangle,System.String,System.Boolean)">
            <summary>
            Shows the rename popup.
            </summary>
            <param name="control">The target control.</param>
            <param name="area">The target control area to cover.</param>
            <param name="value">The initial value.</param>
            <param name="isMultiline">Enable/disable multiline text input support</param>
            <returns>Created popup.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.RenamePopup.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.RenamePopup.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.RenamePopup.OnHide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.RenamePopup.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Row">
            <summary>
            Single row control for <see cref="P:FlaxEditor.GUI.Row.Table"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="P:FlaxEditor.GUI.Row.Table">
            <summary>
            Gets the parent table that owns this row.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Row.Values">
            <summary>
            Gets or sets the cell values.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Row.Depth">
            <summary>
            Gets or sets the row depth level.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Row.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Row"/> class.
            </summary>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Row.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Row.OnParentChangedInternal">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Row.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Row.OnVisibleChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.StatusBar">
            <summary>
            Status strip GUI control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.StatusBar.DefaultHeight">
            <summary>
            The default height.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.StatusBar.StatusColor">
            <summary>
            Gets or sets the color of the status strip.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.StatusBar.Text">
            <summary>
            Gets or sets the status text.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.StatusBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.StatusBar"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.StatusBar.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.StyleValueEditor">
            <summary>
            Editor control for the UI style.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="T:FlaxEditor.GUI.StyleValueEditor.ValueChangedEvent">
            <summary>
            Delegate function used for the change events handling.
            </summary>
            <param name="value">The selected value.</param>
            <param name="sliding">True if user is using a slider, otherwise false.</param>
        </member>
        <member name="F:FlaxEditor.GUI.StyleValueEditor._isSliding">
            <summary>
            True if slider is in use.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.StyleValueEditor._value">
            <summary>
            The style.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.StyleValueEditor.Value">
            <summary>
            The style
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.StyleValueEditor.ValueChanged">
            <summary>
            Fires when the style changes
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.StyleValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.StyleValueEditor"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.StyleValueEditor.#ctor(FlaxEngine.GUI.Style,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.StyleValueEditor"/> class.
            </summary>
            <param name="value">The initial value.</param>
            <param name="x">The x location</param>
            <param name="y">The y location</param>
        </member>
        <member name="M:FlaxEditor.GUI.StyleValueEditor.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.StyleValueEditor.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Table">
            <summary>
            Table control with columns and rows.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEditor.GUI.Table.HeaderHeight">
            <summary>
            Gets or sets the height of the table column headers.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Table.Columns">
            <summary>
            Gets or sets the columns description.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Table.Splits">
            <summary>
            The column split values. Specified per column as normalized value to range [0;1]. Actual column width is calculated by multiplication of split value and table width.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Table.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Table"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Table.GetColumnWidth(System.Int32)">
            <summary>
            Gets the actual column width (in pixels).
            </summary>
            <param name="columnIndex">Zero-based index of the column.</param>
            <returns>The column width in pixels.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Table.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Table.DrawColumn(FlaxEngine.Rectangle@,System.Int32)">
            <summary>
            Draws the column.
            </summary>
            <param name="rect">The the header area rectangle.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Table.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Table.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Table.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Table.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Table.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Tabs.Tab">
            <summary>
            Single tab control used by <see cref="T:FlaxEditor.GUI.Tabs.Tabs"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.Tab.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.Tab.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Tabs.Tab.Selected">
            <summary>
            Occurs when tab gets selected.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tab.#ctor(FlaxEngine.SpriteHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tabs.Tab"/> class.
            </summary>
            <param name="icon">The icon.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tab.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tabs.Tab"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tab.#ctor(System.String,FlaxEngine.SpriteHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tabs.Tab"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="icon">The icon.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tab.OnSelected">
            <summary>
            Called when tab gets selected.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Tabs.Tabs">
            <summary>
            Represents control which contains collection of <see cref="T:FlaxEditor.GUI.Tabs.Tab"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="T:FlaxEditor.GUI.Tabs.Tabs.TabHeader">
            <summary>
            Tab header control. Draw the tab title and handles selecting it.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.Tabs.TabHeader.Tabs">
            <summary>
            The tabs control.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.Tabs.TabHeader.Index">
            <summary>
            The index of the tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.Tabs.TabHeader.Tab">
            <summary>
            The tab.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tabs.TabHeader.#ctor(FlaxEditor.GUI.Tabs.Tabs,System.Int32,FlaxEditor.GUI.Tabs.Tab)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tabs.Tabs.TabHeader"/> class.
            </summary>
            <param name="tabs">The tabs.</param>
            <param name="index">The tab index.</param>
            <param name="tab">The tab.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tabs.TabHeader.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tabs.TabHeader.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Tabs.Tabs.TabsHeader">
            <summary>
            The tabs headers container control. Arranges the tabs headers and support scrolling them.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.Tabs.TabsHeader.Tabs">
            <summary>
            The tabs control.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tabs.TabsHeader.#ctor(FlaxEditor.GUI.Tabs.Tabs)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tabs.Tabs.TabsHeader"/> class.
            </summary>
            <param name="tabs">The tabs.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tabs.TabsHeader.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.Tabs._selectedIndex">
            <summary>
            The selected tab index.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.Tabs._tabsSize">
            <summary>
            The tabs size.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.Tabs._orientation">
            <summary>
            The orientation.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.Tabs.TabsSize">
            <summary>
            Gets the size of the tabs.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.Tabs.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.Tabs.TabStripColor">
            <summary>
            Gets or sets the color of the tab strip background.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Tabs.Tabs.SelectedTabChanged">
            <summary>
            Occurs when selected tab gets changed.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.Tabs.TabsPanel">
            <summary>
            The tabs panel control.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.Tabs.SelectedTab">
            <summary>
            Gets or sets the selected tab.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.Tabs.SelectedTabIndex">
            <summary>
            Gets or sets the selected tab index.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.Tabs.UseScroll">
            <summary>
            Gets or sets a value indicating whether use scroll bars for the tabs.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.Tabs.TabsTextHorizontalAlignment">
            <summary>
            Gets or sets the horizontal tabs text alignment within the tab titles bounds.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.Tabs.TabsTextVerticalAlignment">
            <summary>
            Gets or sets the vertical tabs text alignment within the tab titles bounds.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tabs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tabs.Tabs"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tabs.AddTab``1(``0)">
            <summary>
            Adds the tab.
            </summary>
            <typeparam name="T">Tab control type.</typeparam>
            <param name="tab">The tab.</param>
            <returns>The tab.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tabs.OnSelectedTabChanged">
            <summary>
            Called when selected tab gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tabs.OnChildrenChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tabs.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Tabs.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.GUI.Background">
            <summary>
            The timeline background control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.Background.#ctor(FlaxEditor.GUI.Timeline.Timeline)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.GUI.Background"/> class.
            </summary>
            <param name="timeline">The timeline.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.Background.IntersectsContent(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.Background.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.Background.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.Background.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.GUI.GradientEditor">
            <summary>
            The color gradient editing control for a timeline media event. Allows to edit the gradients stops to create the linear color animation over time.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.GUI.GradientEditor.Stop">
            <summary>
            The gradient stop.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.GUI.GradientEditor.Stop.Frame">
            <summary>
            The gradient stop frame position (on time axis, relative to the event start).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.GUI.GradientEditor.Stop.Value">
            <summary>
            The color gradient value.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopControl">
            <summary>
            The stop control type.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopControl.Gradient">
            <summary>
            The gradient editor reference.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopControl.Index">
            <summary>
            The gradient stop index.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopControl.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopControl.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopControl.OnTestTooltipOverControl(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopControl.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopControl.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopControl.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.GUI.GradientEditor.Stops">
            <summary>
            Gets or sets the list of gradient stops.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.GUI.GradientEditor.StopsChanged">
            <summary>
            Occurs when stops collection gets changed (added/removed).
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.GUI.GradientEditor.Edited">
            <summary>
            Occurs when stops collection gets modified (stop value or time modified).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.GUI.GradientEditor"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.SetScale(System.Single)">
            <summary>
            Sets the scale factor (used to convert the gradient stops frame into control pixels).
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.OnTimelineFpsChanged(System.Single,System.Single)">
            <summary>
            Called when timeline FPS gets changed.
            </summary>
            <param name="before">The before value.</param>
            <param name="after">The after value.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.OnStopsChanged">
            <summary>
            Called when stops collection gets changed (added/removed).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.OnEdited">
            <summary>
            Called when stops collection gets modified (stop value or time modified).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.AddUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.RemoveUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.GradientEditor.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.GUI.PositionHandle">
            <summary>
            The timeline current position tracking control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.PositionHandle.#ctor(FlaxEditor.GUI.Timeline.Timeline)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.GUI.PositionHandle"/> class.
            </summary>
            <param name="timeline">The timeline.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.PositionHandle.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.PositionHandle.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.GUI.TimelineEdge">
            <summary>
            Timeline ending edge control that can be used to modify timeline duration with a mouse.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.TimelineEdge.#ctor(FlaxEditor.GUI.Timeline.Timeline,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.GUI.TimelineEdge"/> class.
            </summary>
            <param name="timeline">The parent timeline.</param>
            <param name="isStart">True if edge edits the timeline start, otherwise it's for the ending cap.</param>
            <param name="canEdit">True if can edit the edge.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.TimelineEdge.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.TimelineEdge.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.TimelineEdge.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.TimelineEdge.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.TimelineEdge.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.TimelineEdge.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.GUI.TimelineEdge.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Media">
            <summary>
            Timeline track media event (range-based). Can be added to the timeline track.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Media.ProxyBase`2">
            <summary>
            The base class for media properties proxy objects.
            </summary>
            <typeparam name="TTrack">The type of the track.</typeparam>
            <typeparam name="TMedia">The type of the media.</typeparam>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Media.ProxyBase`2.Track">
            <summary>
            The track reference/
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Media.ProxyBase`2.Media">
            <summary>
            The media reference.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Media.ProxyBase`2.StartFrame">
            <summary>
            Gets or sets the start frame of the media event.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Media.ProxyBase`2.DurationFrames">
            <summary>
            Gets or sets the total duration of the media event in the timeline sequence frames amount.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.ProxyBase`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Media.ProxyBase`2"/> class.
            </summary>
            <param name="track">The track.</param>
            <param name="media">The media.</param>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Media.StartFrame">
            <summary>
            Gets or sets the start frame of the media event.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Media.StartFrameChanged">
            <summary>
            Occurs when start frame gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Media.DurationFrames">
            <summary>
            Gets or sets the total duration of the media event in the timeline sequence frames amount.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Media.DurationFramesChanged">
            <summary>
            Occurs when media duration gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Media.Start">
            <summary>
            Gets the media start time in seconds.
            </summary>
            <seealso cref="P:FlaxEditor.GUI.Timeline.Media.StartFrame"/>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Media.Duration">
            <summary>
            Get the media duration in seconds.
            </summary>
            <seealso cref="P:FlaxEditor.GUI.Timeline.Media.DurationFrames"/>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Media.Timeline">
            <summary>
            Gets the parent timeline.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Media.Track">
            <summary>
            Gets the track.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Media.PropertiesEditObject">
            <summary>
            The track properties editing proxy object. Assign it to add media properties editing support.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Media"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnTimelineShowContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu,FlaxEngine.GUI.Control)">
            <summary>
            Called when showing timeline context menu to the user. Can be used to add custom buttons.
            </summary>
            <param name="menu">The menu.</param>
            <param name="controlUnderMouse">The found control under the mouse cursor.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnTimelineChanged(FlaxEditor.GUI.Timeline.Track)">
            <summary>
            Called when parent track gets changed.
            </summary>
            <param name="track">The track.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnTimelineFpsChanged(System.Single,System.Single)">
            <summary>
            Called when timeline FPS gets changed.
            </summary>
            <param name="before">The before value.</param>
            <param name="after">The after value.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnDeleted">
            <summary>
            Called when media gets removed by the user.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnStartFrameChanged">
            <summary>
            Called when media start frame gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnDurationFramesChanged">
            <summary>
            Called when media duration in frames gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnTimelineZoomChanged">
            <summary>
            Called when timeline zoom gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.GetDesireClientArea(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Media.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.ParticleSystemTimeline">
            <summary>
            The timeline editor for particle system asset.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Timeline" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.Proxy.#ctor(FlaxEditor.GUI.Timeline.ParticleSystemTimeline)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.#ctor(FlaxEditor.Viewport.Previews.ParticleSystemPreview)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.ParticleSystemTimeline"/> class.
            </summary>
            <param name="preview">The particle system preview.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.OnEmittersParametersOverridesEdited">
            <summary>
            Called when emitters parameters overrides collection gets edited.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.SetupDragDrop">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.OnPlay">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.OnPause">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.OnStop">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.Load(FlaxEngine.ParticleSystem)">
            <summary>
            Loads the timeline from the specified <see cref="T:FlaxEngine.ParticleSystem"/> asset.
            </summary>
            <param name="asset">The asset.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.Save(FlaxEngine.ParticleSystem)">
            <summary>
            Saves the timeline data to the <see cref="T:FlaxEngine.ParticleSystem"/> asset.
            </summary>
            <param name="asset">The asset.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.LoadTimelineData(System.Int32,System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.SaveTimelineData(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.LoadTimelineCustomData(System.Int32,System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.SaveTimelineCustomData(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.Load(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.ParticleSystemTimeline.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.SceneAnimationTimeline">
            <summary>
            The timeline editor for scene animation asset.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Timeline" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.SceneAnimationTimeline.Proxy.#ctor(FlaxEditor.GUI.Timeline.SceneAnimationTimeline)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.SceneAnimationTimeline.Player">
            <summary>
            Gets or sets the animation player actor used for the timeline preview.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.SceneAnimationTimeline.PlayerChanged">
            <summary>
            Occurs when the selected player gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.SceneAnimationTimeline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.SceneAnimationTimeline"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.SceneAnimationTimeline.SetupDragDrop">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.SceneAnimationTimeline.OnPlay">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.SceneAnimationTimeline.OnPause">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.SceneAnimationTimeline.OnStop">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.SceneAnimationTimeline.OnSeek(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.SceneAnimationTimeline.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.SceneAnimationTimeline.Load(FlaxEngine.SceneAnimation)">
            <summary>
            Loads the timeline from the specified <see cref="T:FlaxEngine.SceneAnimation"/> asset.
            </summary>
            <param name="asset">The asset.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.SceneAnimationTimeline.Save(FlaxEngine.SceneAnimation)">
            <summary>
            Saves the timeline data to the <see cref="T:FlaxEngine.SceneAnimation"/> asset.
            </summary>
            <param name="asset">The asset.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Timeline">
            <summary>
            The timeline control that contains tracks section and headers. Can be used to create time-based media interface for camera tracks editing, audio mixing and events tracking.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.TimeIntervalsHeader.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.TimeIntervalsHeader.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.TimeIntervalsHeader.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.TimeIntervalsHeader.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.TimeIntervalsHeader.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Timeline.ProxyBase`1">
            <summary>
            The base class for timeline properties proxy objects.
            </summary>
            <typeparam name="TTimeline">The type of the timeline.</typeparam>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.ProxyBase`1.Timeline">
            <summary>
            The timeline reference.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.ProxyBase`1.DurationFrames">
            <summary>
            Gets or sets the total duration of the timeline in the frames amount.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.ProxyBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Timeline.ProxyBase`1"/> class.
            </summary>
            <param name="timeline">The timeline.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Timeline.TimeShowModes">
            <summary>
            The time axis value formatting modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.TimeShowModes.Frames">
            <summary>
            The frame numbers.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.TimeShowModes.Seconds">
            <summary>
            The seconds amount.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.TimeShowModes.Time">
            <summary>
            The time.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Timeline.PlaybackStates">
            <summary>
            The timeline animation playback states.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.PlaybackStates.Disabled">
            <summary>
            The timeline animation feature is disabled.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.PlaybackStates.Seeking">
            <summary>
            The timeline animation feature is disabled except for current frame seeking.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.PlaybackStates.Stopped">
            <summary>
            The timeline animation is stopped.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.PlaybackStates.Playing">
            <summary>
            The timeline animation is playing.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.PlaybackStates.Paused">
            <summary>
            The timeline animation is paused.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Timeline.PlaybackButtons">
            <summary>
            The timeline playback buttons types.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.PlaybackButtons.None">
            <summary>
            No buttons.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.PlaybackButtons.Play">
            <summary>
            The play/pause button.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.PlaybackButtons.Stop">
            <summary>
            The stop button.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.PlaybackButtons.Navigation">
            <summary>
            The current frame navigation  buttons (left/right frame, seep begin/end).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.HeaderTopAreaHeight">
            <summary>
            The header top area height (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.UnitsPerSecond">
            <summary>
            The timeline units per second (on time axis).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.StartOffset">
            <summary>
            The start offset for the timeline (on time axis).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline._isModified">
            <summary>
            Flag used to mark modified timeline data.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline._tracks">
            <summary>
            The tracks collection.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.TimeShowMode">
            <summary>
            Gets or sets the current time showing mode.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Timeline.TimeShowModeChanged">
            <summary>
            Occurs when current time showing mode gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.ShowPreviewValues">
            <summary>
            Gets or sets the preview values showing option value.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Timeline.ShowPreviewValuesChanged">
            <summary>
            Occurs when preview values showing option gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.CurrentFrame">
            <summary>
            Gets or sets the current animation playback time position (frame number).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.CurrentTime">
            <summary>
            Gets the current animation time position (in seconds).
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Timeline.CurrentFrameChanged">
            <summary>
            Occurs when current playback animation frame gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.FramesPerSecond">
            <summary>
            Gets or sets the amount of frames per second of the timeline animation.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Timeline.FramesPerSecondChanged">
            <summary>
            Occurs when frames per second gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.DurationFrames">
            <summary>
            Gets or sets the timeline animation duration in frames.
            </summary>
            <seealso cref="P:FlaxEditor.GUI.Timeline.Timeline.FramesPerSecond"/>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.Duration">
            <summary>
            Gets the timeline animation duration in seconds.
            </summary>
            <seealso cref="P:FlaxEditor.GUI.Timeline.Timeline.FramesPerSecond"/>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Timeline.DurationFramesChanged">
            <summary>
            Occurs when timeline duration gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.Tracks">
            <summary>
            Gets the collection of the tracks added to this timeline (read-only list).
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Timeline.TracksChanged">
            <summary>
            Occurs when tracks collection gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.IsModified">
            <summary>
            Gets a value indicating whether this timeline was modified by the user (needs saving and flushing with data source).
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Timeline.Modified">
            <summary>
            Occurs when timeline gets modified (track edited, media moved, etc.).
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Timeline.Play">
            <summary>
            Occurs when timeline starts playing animation.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Timeline.Pause">
            <summary>
            Occurs when timeline pauses playing animation.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Timeline.Stop">
            <summary>
            Occurs when timeline stops playing animation.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.Splitter">
            <summary>
            Gets the splitter.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.TrackArchetypes">
            <summary>
            The track archetypes.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.SelectedTracks">
            <summary>
            The selected tracks.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.SelectedMedia">
            <summary>
            The selected media events.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Timeline.SelectionChanged">
            <summary>
            Occurs when any collection of the selected objects in the timeline gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.MediaBackground">
            <summary>
            Gets the media controls background panel (with scroll bars).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.MediaPanel">
            <summary>
            Gets the media controls parent panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.TracksPanel">
            <summary>
            Gets the track controls parent panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.PlaybackState">
            <summary>
            Gets the state of the timeline animation playback.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.PropertiesEditObject">
            <summary>
            The timeline properties editing proxy object. Assign it to add timeline properties editing support.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.Zoom">
            <summary>
            Gets or sets the timeline view zoom.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.CanPlayPauseStop">
            <summary>
            Gets or sets a value indicating whether user can sue Play/Pause/Stop buttons, otherwise those should be disabled.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Timeline.IsMovingPositionHandle">
            <summary>
            Gets a value indicating whether user is moving position handle (seeking).
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Timeline.DragHandler">
            <summary>
            The drag and drop handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.DragHandler.Helper">
            <summary>
            The drag and drop handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.DragHandler.Action">
            <summary>
            The action.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.DragHandler.#ctor(FlaxEditor.GUI.Drag.DragHelper,System.Action{FlaxEditor.GUI.Timeline.Timeline,FlaxEditor.GUI.Drag.DragHelper})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Timeline.DragHandler"/> struct.
            </summary>
            <param name="helper">The helper.</param>
            <param name="action">The action.</param>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.DragHandlers">
            <summary>
            The drag handlers pairs of drag helper and the function that creates a track on drag drop.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Timeline.CameraCutThumbnailRenderer">
            <summary>
            The camera cut thumbnail renderer.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.#ctor(FlaxEditor.GUI.Timeline.Timeline.PlaybackButtons,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Timeline"/> class.
            </summary>
            <param name="playbackButtons">The playback buttons to use.</param>
            <param name="canChangeFps">True if user can modify the timeline FPS, otherwise it will be fixed or controlled from the code.</param>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Timeline.ShowViewContextMenu">
            <summary>
            Occurs when timeline shows the View context menu. Can be sued to add custom options.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnShowViewContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu)">
            <summary>
            Called when timeline shows the View context menu. Can be sued to add custom options.
            </summary>
            <param name="menu">The menu.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnStop">
            <summary>
            Called when animation should stop.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnPlay">
            <summary>
            Called when animation should play.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnPause">
            <summary>
            Called when animation should pause.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnSeek(System.Int32)">
            <summary>
            Called when animation playback position should be changed.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.AddTrack(FlaxEditor.GUI.Timeline.TrackArchetype)">
            <summary>
            Adds the track.
            </summary>
            <param name="archetype">The archetype.</param>
            <returns>The created track object.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.LoadTimelineData(System.Int32,System.IO.BinaryReader)">
            <summary>
            Loads the timeline data.
            </summary>
            <param name="version">The version.</param>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.SaveTimelineData(System.IO.BinaryWriter)">
            <summary>
            Saves the timeline data.
            </summary>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.LoadTimelineCustomData(System.Int32,System.IO.BinaryReader)">
            <summary>
            Loads the timeline data after reading the timeline tracks.
            </summary>
            <param name="version">The version.</param>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.SaveTimelineCustomData(System.IO.BinaryWriter)">
            <summary>
            Saves the timeline data after saving the timeline tracks.
            </summary>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.Load(System.Byte[])">
            <summary>
            Loads the timeline from the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.Save">
            <summary>
            Saves the timeline data.
            </summary>
            <returns>The saved timeline data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.AddTrack(FlaxEditor.GUI.Timeline.Track)">
            <summary>
            Adds the track.
            </summary>
            <param name="track">The track.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.AddLoadedTrack(FlaxEditor.GUI.Timeline.Track)">
            <summary>
            Adds the loaded track. Does not handle any UI updates.
            </summary>
            <param name="track">The track.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.RemoveTrack(FlaxEditor.GUI.Timeline.Track)">
            <summary>
            Removes the track.
            </summary>
            <param name="track">The track.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnTracksChanged">
            <summary>
            Called when collection of the tracks gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.Select(FlaxEditor.GUI.Timeline.Track,System.Boolean)">
            <summary>
            Selects the specified track.
            </summary>
            <param name="track">The track.</param>
            <param name="addToSelection">If set to <c>true</c> track will be added to selection, otherwise will clear selection before.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.Deselect(FlaxEditor.GUI.Timeline.Track)">
            <summary>
            Deselects the specified track.
            </summary>
            <param name="track">The track.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.Select(FlaxEditor.GUI.Timeline.Media,System.Boolean)">
            <summary>
            Selects the specified media event.
            </summary>
            <param name="media">The media.</param>
            <param name="addToSelection">If set to <c>true</c> track will be added to selection, otherwise will clear selection before.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.Deselect(FlaxEditor.GUI.Timeline.Media)">
            <summary>
            Deselects the specified media event.
            </summary>
            <param name="media">The media.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.Deselect">
            <summary>
            Deselects all media and tracks.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnSelectionChanged">
            <summary>
            Called when selection gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.DeleteSelection">
            <summary>
            Deletes the selected tracks/media events.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.Delete(FlaxEditor.GUI.Timeline.Track)">
            <summary>
            Deletes the tracks.
            </summary>
            <param name="track">The track to delete (and its sub tracks).</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnDeleteTrack(FlaxEditor.GUI.Timeline.Track)">
            <summary>
            Called to delete track.
            </summary>
            <param name="track">The track.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.SetupDragDrop">
            <summary>
            Called once to setup the drag drop handling for the timeline (lazy init on first drag action).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.MarkAsEdited">
            <summary>
            Mark timeline as edited.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.Clear">
            <summary>
            Clears this instance. Removes all tracks, parameters and state.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.ClearEditedFlag">
            <summary>
            Clears the modification flag.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnTracksOrderChanged">
            <summary>
            Called when tracks order gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.IsTrackNameValid(System.String)">
            <summary>
            Determines whether the specified track name is valid.
            </summary>
            <param name="name">The name.</param>
            <returns> <c>true</c> if is track name is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.ArrangeTracks">
            <summary>
            Arranges the tracks.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.ShowWholeTimeline">
            <summary>
            Shows the whole timeline.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.PropertiesEditPopup.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.PropertiesEditPopup.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.PropertiesEditPopup.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.PropertiesEditPopup.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.TracksPanelArea.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.TracksPanelArea.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.TracksPanelArea.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.TracksPanelArea.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.TracksPanelArea.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.TracksPanelArea.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.ShowEditPopup(System.Object,FlaxEngine.Vector2@)">
            <summary>
            Shows the timeline object editing popup.
            </summary>
            <param name="obj">The object.</param>
            <param name="location">The show location (in timeline space).</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnShowContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu)">
            <summary>
            Called when showing context menu to the user. Can be used to add custom buttons.
            </summary>
            <param name="menu">The menu.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Timeline.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Track">
            <summary>
            The Timeline track that contains a header and custom timeline events/media.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.DragPrefix">
            <summary>
            The default prefix for drag data used for tracks dragging.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.DefaultNodeOffsetY">
            <summary>
            The default node offset in y.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.DefaultDragInsertPositionMargin">
            <summary>
            The default drag insert position margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.HeaderHeight">
            <summary>
            The header height.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track._muteCheckbox">
            <summary>
            The mute track checkbox.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.Timeline">
            <summary>
            Gets the parent timeline.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.ParentTrack">
            <summary>
            Gets the parent track (null if this track is one of the root tracks in timeline).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.TrackIndex">
            <summary>
            Gets or sets the index of the track (in timeline track list).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.Media">
            <summary>
            Gets the collection of the media events added to this track (read-only list).
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Track.MediaChanged">
            <summary>
            Occurs when collection of the media events gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.SubTracks">
            <summary>
            Gets the collection of the child tracks added to this track (read-only list).
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Timeline.Track.SubTracksChanged">
            <summary>
            Occurs when collection of the sub tracks gets changed.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.Name">
            <summary>
            The track text.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.Title">
            <summary>
            The track custom title text (name is used if title is null).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.TitleTintColor">
            <summary>
            The track title color.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.Icon">
            <summary>
            The track icon.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.IconColor">
            <summary>
            The icon color (tint).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.Color">
            <summary>
            The track color.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.Mute">
            <summary>
            The mute flag. Muted tracks are disabled.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.Loop">
            <summary>
            The loop flag. Looped tracks are doing a playback of its data in a loop.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Track.Archetype">
            <summary>
            The track archetype.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.IsExpandedAll">
            <summary>
            Gets a value indicating whether this track is expanded and all of its parents are also expanded.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.HasParentsExpanded">
            <summary>
            Gets a value indicating whether this all of this track parents are expanded.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.HasSubTracks">
            <summary>
            Gets a value indicating whether this track has any sub-tracks.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this track is expanded.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.IsCollapsed">
            <summary>
            Gets or sets a value indicating whether this track is collapsed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Track"/> class.
            </summary>
            <param name="options">The track initial options.</param>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.ArrowRect">
            <summary>
            Gets the arrow rectangle.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnTimelineChanged(FlaxEditor.GUI.Timeline.Timeline)">
            <summary>
            Called when parent timeline gets changed.
            </summary>
            <param name="timeline">The timeline.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnTimelineZoomChanged">
            <summary>
            Called when timeline zoom gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnTimelineFpsChanged(System.Single,System.Single)">
            <summary>
            Called when timeline FPS gets changed.
            </summary>
            <param name="before">The before value.</param>
            <param name="after">The after value.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnTimelineCurrentFrameChanged(System.Int32)">
            <summary>
            Called when timeline current frame gets changed.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnParentTrackChanged(FlaxEditor.GUI.Timeline.Track)">
            <summary>
            Called when parent track gets changed.
            </summary>
            <param name="parent">The parent track.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.ContainsTrack(FlaxEditor.GUI.Timeline.Track)">
            <summary>
            Determines whether the specified track contains is contained in this track sub track or any sub track children.
            </summary>
            <param name="track">The track.</param>
            <returns><c>true</c> if this track contains the specified track; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnLoaded">
            <summary>
            Called when track gets loaded from the serialized timeline data.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnSpawned">
            <summary>
            Called when tracks gets spawned by the user.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnDeleted">
            <summary>
            Called when tracks gets removed by the user.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnTimelineArrange">
            <summary>
            Arranges the track and all its media. Called when timeline performs layout for the contents.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.GetNextKeyframeFrame(System.Single,System.Int32@)">
            <summary>
            Gets the frame of the next keyframe (if found).
            </summary>
            <param name="time">The start time.</param>
            <param name="result">The result value.</param>
            <returns>True if found next keyframe, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.GetPreviousKeyframeFrame(System.Single,System.Int32@)">
            <summary>
            Gets the frame of the previous keyframe (if found).
            </summary>
            <param name="time">The start time.</param>
            <param name="result">The result value.</param>
            <returns>True if found previous keyframe, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.AddMedia(FlaxEditor.GUI.Timeline.Media)">
            <summary>
            Adds the media.
            </summary>
            <param name="media">The media.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.RemoveMedia(FlaxEditor.GUI.Timeline.Media)">
            <summary>
            Removes the media.
            </summary>
            <param name="media">The media.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.AdSubTrack(FlaxEditor.GUI.Timeline.Track)">
            <summary>
            Adds the sub track.
            </summary>
            <param name="track">The track.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.RemoveSubTrack(FlaxEditor.GUI.Timeline.Track)">
            <summary>
            Removes the sub track.
            </summary>
            <param name="track">The track.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnMediaChanged">
            <summary>
            Called when collection of the media items gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnSubTracksChanged">
            <summary>
            Called when collection of the sub tracks gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.DragTracks.Effect">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnDragEnterHeader(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag and drop enters the track header area.
            </summary>
            <param name="data">The data.</param>
            <returns>Drag action response.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnDragMoveHeader(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag and drop moves over the track header area.
            </summary>
            <param name="data">The data.</param>
            <returns>Drag action response.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnDragDropHeader(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag and drop performs over the track header area.
            </summary>
            <param name="data">The data.</param>
            <returns>Drag action response.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnDragLeaveHeader">
            <summary>
            Called when drag and drop leaves the track header area.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.DoDragDrop">
            <summary>
            Begins the drag drop operation.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnExpandedChanged">
            <summary>
            Called when expanded state gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.CanDrag">
            <summary>
            Gets a value indicating whether user can drag this track.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.CanRename">
            <summary>
            Gets a value indicating whether user can rename this track.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Track.CanExpand">
            <summary>
            Gets a value indicating whether user can expand the track contents of the inner hierarchy.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.CanAddChildTrack(FlaxEditor.GUI.Timeline.Track)">
            <summary>
            Determines whether this track can get the child track.
            </summary>
            <param name="track">The track.</param>
            <returns>True if can add this track, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.UpdateDrawPositioning(FlaxEngine.Vector2@)">
            <summary>
            Updates the drag over mode based on the given mouse location.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.TestHeaderHit(FlaxEngine.Vector2@)">
            <summary>
            Tests the header hit.
            </summary>
            <param name="location">The location.</param>
            <returns>True if hits it.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.StartRenaming">
            <summary>
            Starts the track renaming action.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnRename(System.String)">
            <summary>
            Called when track should be renamed.
            </summary>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.Rename(System.String)">
            <summary>
            Renames the track to the specified name and handles duplicated track names (adds number after the given name to make it unique).
            </summary>
            <param name="name">The base name.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.Delete">
            <summary>
            Deletes this track.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.Expand">
            <summary>
            Expand track.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.Collapse">
            <summary>
            Collapse track.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.ExpandAll">
            <summary>
            Expand track and all the children.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.CollapseAll">
            <summary>
            Collapse track and all the children.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.ExpandAllParents">
            <summary>
            Ensure that all track parents are expanded.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu)">
            <summary>
            Called when context menu is being prepared to show. Can be used to add custom options.
            </summary>
            <param name="menu">The menu.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnKeyUp(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.LoadName(System.IO.BinaryReader)">
            <summary>
            Loads the name using UTF8 encoding by reading name length (as 32bit int) followed by the contents and null-terminated character.
            </summary>
            <param name="stream">The input stream.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Track.SaveName(System.IO.BinaryWriter,System.String)">
            <summary>
            Saves the name using UTF8 encoding by writing name length (as 32bit int) followed by the contents and null-terminated character.
            </summary>
            <param name="stream">The output stream.</param>
            <param name="value">The value to write (can be null).</param>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.CreateTrackDelegate">
            <summary>
            Create a new track object.
            </summary>
            <param name="options">The options.</param>
            <returns>The created track object.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.LoadTrackDelegate">
            <summary>
            Loads a track data.
            </summary>
            <param name="version">The serialized data version.</param>
            <param name="track">The track.</param>
            <param name="stream">The input stream.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.SaveTrackDelegate">
            <summary>
            Saves a track data.
            </summary>
            <param name="track">The track.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.TrackArchetype">
            <summary>
            Defines the track type.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.TrackArchetype.TypeId">
            <summary>
            The track type identifier (must match C++ implementation).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.TrackArchetype.Name">
            <summary>
            The name of the track type (for UI).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.TrackArchetype.DisableSpawnViaGUI">
            <summary>
            True if hide track archetype from spawning via GUI.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.TrackArchetype.Icon">
            <summary>
            The icon of the track type (for UI).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.TrackArchetype.Create">
            <summary>
            The track create factory callback.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.TrackArchetype.Load">
            <summary>
            The track data loading callback.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.TrackArchetype.Save">
            <summary>
            The track data saving callback.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.TrackCreateOptions">
            <summary>
            Track creation options.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.TrackCreateOptions.Archetype">
            <summary>
            The track archetype.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.TrackCreateOptions.Mute">
            <summary>
            Create muted track.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.TrackCreateOptions.Loop">
            <summary>
            Create looped track.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.ActorTrack">
            <summary>
            The timeline track for animating <see cref="T:FlaxEngine.Actor"/> objects.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ActorTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.ActorTrack._selectActor">
            <summary>
            The select actor icon.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.ActorTrack.ActorID">
            <summary>
            The object ID.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.ActorTrack.Actor">
            <summary>
            Gets the object instance (it might be missing).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ActorTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.ActorTrack.Object">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ActorTrack.OnShowAddContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ActorTrack.AddScriptTrack(FlaxEngine.Script)">
            <summary>
            Adds the script track to this actor track.
            </summary>
            <param name="script">The script object.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ActorTrack.IsActorValid(FlaxEngine.Actor)">
            <summary>
            Determines whether actor is valid for this track.
            </summary>
            <param name="actor">The actor.</param>
            <returns>True if it's valid, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ActorTrack.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.AudioMedia">
            <summary>
            The timeline media that represents an audio clip media event.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Media" />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.AudioMedia.Loop">
            <summary>
            True if loop track, otherwise audio clip will stop on the end.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.AudioMedia.Proxy.Audio">
            <summary>
            Gets or sets the audio clip to play.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.AudioMedia.Proxy.Loop">
            <summary>
            Gets or sets the audio clip looping mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioMedia.Proxy.#ctor(FlaxEditor.GUI.Timeline.Tracks.AudioTrack,FlaxEditor.GUI.Timeline.Tracks.AudioMedia)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.AudioMedia.Preview">
            <summary>
            The audio clip preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioMedia.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioMedia.OnTimelineChanged(FlaxEditor.GUI.Timeline.Track)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioMedia.OnTimelineZoomChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.AudioTrack">
            <summary>
            The timeline track that represents an audio clip playback.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Track" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.AudioTrack.TrackLoop">
            <summary>
            Gets or sets the audio clip looping mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioTrack.OnSubTracksChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioTrack.OnAssetChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack">
            <summary>
            The child volume track for audio track. Used to animate audio volume over time.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Track" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.Curve">
            <summary>
            The volume curve. Values can be in range 0-1 to animate volume intensity and the track playback starts at the parent audio track media beginning. This curve does not loop.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.GetNextKeyframeFrame(System.Single,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.GetPreviousKeyframeFrame(System.Single,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.CanDrag">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.CanRename">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.CanExpand">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.OnParentTrackChanged(FlaxEditor.GUI.Timeline.Track)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.OnExpandedChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.OnVisibleChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.OnTimelineChanged(FlaxEditor.GUI.Timeline.Timeline)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.OnTimelineZoomChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.OnTimelineArrange">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.OnTimelineFpsChanged(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.OnTimelineCurrentFrameChanged(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.AudioVolumeTrack.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia">
            <summary>
            The timeline media that represents an camera cut media event.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Media" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia.UpdateThumbnails(System.Int32[])">
            <summary>
            Updates the thumbnails.
            </summary>
            <param name="indices">The icon indices to update (null if update all of them).</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia.OnThumbnailRenderingBegin(FlaxEngine.SceneRenderTask,FlaxEngine.GPUContext,FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Request@)">
            <summary>
            Called when thumbnail rendering begins.
            </summary>
            <param name="task">The scene rendering task to customize.</param>
            <param name="context">The GPU rendering context.</param>
            <param name="req">The request data.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia.OnThumbnailRenderingEnd(FlaxEngine.SceneRenderTask,FlaxEngine.GPUContext,FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Request@,FlaxEngine.SpriteHandle@)">
            <summary>
            Called when thumbnail rendering ends. The task output buffer contains ready frame.
            </summary>
            <param name="task">The scene rendering task to customize.</param>
            <param name="context">The GPU rendering context.</param>
            <param name="req">The request data.</param>
            <param name="sprite">The thumbnail sprite.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia.OnTimelineChanged(FlaxEditor.GUI.Timeline.Track)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia.OnStartFrameChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia.OnDurationFramesChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia.OnTimelineShowContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu,FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer">
            <summary>
            The helper utility for rendering camera cuts tracks thumbnails.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Request">
            <summary>
            The camera cut thumbnail rendering request.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Request.Media">
            <summary>
            The media.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Request.ThumbnailIndex">
            <summary>
            The thumbnail index.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Request.#ctor(FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Request"/> struct.
            </summary>
            <param name="media">The media.</param>
            <param name="thumbnailIndex"> The index of the thumbnail.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Request.Equals(FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Request)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Request.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Request.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Atlas">
            <summary>
            The thumbnails atlas.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Atlas.Texture">
            <summary>
            The atlas texture.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Atlas.SlotsUsage">
            <summary>
            The slots usage flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Atlas.Count">
            <summary>
            The used slots count.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Atlas.IsFull">
            <summary>
            Gets a value indicating whether this instance is full.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Height">
            <summary>
            The thumbnail height.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Width">
            <summary>
            The thumbnail width.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.AddRequest(FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Request)">
            <summary>
            Adds the request for thumbnail rendering.
            </summary>
            <param name="req">The request.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.RemoveRequest(FlaxEditor.GUI.Timeline.Tracks.CameraCutMedia)">
            <summary>
            Removes all the requests that are related to the given media.
            </summary>
            <param name="media">The media.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.ReleaseThumbnail(FlaxEngine.SpriteHandle)">
            <summary>
            Releases the thumbnail ans frees the sprite slot used by it.
            </summary>
            <param name="sprite">The sprite.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutThumbnailRenderer.Dispose">
            <summary>
            Releases object resources.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.CameraCutTrack">
            <summary>
            The timeline track for animating <see cref="T:FlaxEngine.Camera"/> objects.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Tracks.ActorTrack" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.CameraCutTrack.Camera">
            <summary>
            Gets the camera object instance (it might be missing).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.CameraCutTrack.TrackMedia">
            <summary>
            Gets the camera track media.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutTrack.OnObjectExistenceChanged(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutTrack.IsActorValid(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutTrack.OnSpawned">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CameraCutTrack.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack">
            <summary>
            The timeline track for animating object property via Bezier Curve.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Tracks.MemberTrack" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.Curve">
            <summary>
            The curve editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.GetNextKeyframeFrame(System.Single,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.GetPreviousKeyframeFrame(System.Single,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.Evaluate(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.CanExpand">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.OnMemberChanged(System.Reflection.MemberInfo,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.OnVisibleChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.OnExpandedChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.OnTimelineChanged(FlaxEditor.GUI.Timeline.Timeline)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.OnTimelineZoomChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.OnTimelineArrange">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.OnTimelineFpsChanged(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.OnTimelineCurrentFrameChanged(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.CurvePropertyTrack.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.EventTrack">
            <summary>
            The timeline track for invoking events on a certain points in the time.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Tracks.MemberTrack" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.EventTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.EventTrack.Events">
            <summary>
            The event keyframes editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.EventTrack.EventParamsSizes">
            <summary>
            The event parameters data sizes collection.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.EventTrack.EventParamsTypes">
            <summary>
            The event parameters types collection.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.EventTrack.EventKey">
            <summary>
            The event key data.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.EventTrack.EventKey.Parameters">
            <summary>
            The parameters values.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.EventTrack.EventKey.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.EventTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.EventTrack.GetNextKeyframeFrame(System.Single,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.EventTrack.GetPreviousKeyframeFrame(System.Single,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.EventTrack.MemberTypes">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.EventTrack.OnMemberChanged(System.Reflection.MemberInfo,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.EventTrack.OnVisibleChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.EventTrack.OnTimelineChanged(FlaxEditor.GUI.Timeline.Timeline)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.EventTrack.OnTimelineZoomChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.EventTrack.OnTimelineArrange">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.EventTrack.OnTimelineFpsChanged(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.EventTrack.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.FolderTrack">
            <summary>
            The timeline track that represents a folder used to group and organize tracks.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Track" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.FolderTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.FolderTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Tracks.FolderTrack"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.FolderTrack.CanAddChildTrack(FlaxEditor.GUI.Timeline.Track)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack">
            <summary>
            The timeline track for animating object property via keyframes collection.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Tracks.MemberTrack" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.Keyframes">
            <summary>
            The keyframes editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.GetNextKeyframeFrame(System.Single,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.GetPreviousKeyframeFrame(System.Single,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.Evaluate(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for the given property type.
            </summary>
            <param name="propertyType">The type of the property.</param>
            <returns>The default value.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.OnMemberChanged(System.Reflection.MemberInfo,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.OnVisibleChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.OnTimelineChanged(FlaxEditor.GUI.Timeline.Timeline)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.OnTimelineZoomChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.OnTimelineArrange">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.OnTimelineFpsChanged(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.OnTimelineCurrentFrameChanged(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.MemberTrack">
            <summary>
            The timeline track for animating object member (managed object).
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Track" />
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.ValueSize">
            <summary>
            The member value data size (in bytes).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.MemberName">
            <summary>
            Gets or sets the object member name (just a member name). Does not validate the value on set.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.MemberTypeName">
            <summary>
            The member typename (fullname including namespace but not assembly).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.Member">
            <summary>
            Gets or sets the object member. Performs the value validation on set.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.MemberTrack._previewValue">
            <summary>
            The preview value label.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.MemberTrack._rightKey">
            <summary>
            The navigate right keyframe icon.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.MemberTrack._addKey">
            <summary>
            The add keyframe icon.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.MemberTrack._leftKey">
            <summary>
            The navigate left keyframe icon.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Tracks.MemberTrack"/> class.
            </summary>
            <param name="options">The track initial options.</param>
            <param name="useNavigationButtons">True if show keyframe navigation buttons, otherwise false.</param>
            <param name="useValuePreview">True if show current value preview, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.Evaluate(System.Single)">
            <summary>
            Evaluates the member value value at the specified time.
            </summary>
            <param name="time">The time to evaluate the member at.</param>
            <returns>The member value at provided time.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.GetMember(System.Type,System.String)">
            <summary>
            Gets the member from the given type.
            </summary>
            <param name="type">The declaring type.</param>
            <param name="name">The member name.</param>
            <returns>The member or null if not found.</returns>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.MemberTypes">
            <summary>
            Gets the allowed member types for this track type.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.TryGetValue(System.Object@)">
            <summary>
            Tries the get current value from the assigned object property.
            </summary>
            <param name="value">The result value. Valid only if methods returns true.</param>
            <returns>True if got value, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.GetValueText(System.Object)">
            <summary>
            Gets the value text for UI.
            </summary>
            <param name="value">The value.</param>
            <returns>The text.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.GetValueDataSize(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the size of the value data type.
            </summary>
            <param name="member">The member.</param>
            <param name="type">The type.</param>
            <returns>The value data size (in bytes).</returns>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.CanDrag">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.CanRename">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.OnMemberChanged(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Called when member gets changed.
            </summary>
            <param name="value">The member value assigned.</param>
            <param name="type">The member type assigned.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.MemberTrack.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.NestedSceneAnimationMedia">
            <summary>
            The timeline media that represents a nested scene animation media event.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Media" />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.NestedSceneAnimationMedia.Proxy.NestedSceneAnimation">
            <summary>
            Gets or sets the nested scene animation to play.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.NestedSceneAnimationMedia.Proxy.Loop">
            <summary>
            Gets or sets the nested animation looping mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.NestedSceneAnimationMedia.Proxy.#ctor(FlaxEditor.GUI.Timeline.Tracks.NestedSceneAnimationTrack,FlaxEditor.GUI.Timeline.Tracks.NestedSceneAnimationMedia)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.NestedSceneAnimationMedia.OnTimelineChanged(FlaxEditor.GUI.Timeline.Track)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.NestedSceneAnimationTrack">
            <summary>
            The timeline track that represents a nested scene animation playback.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Track" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.NestedSceneAnimationTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.NestedSceneAnimationTrack.TrackLoop">
            <summary>
            Gets or sets the nested animation looping mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.NestedSceneAnimationTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.ObjectPropertyTrack">
            <summary>
            The timeline track for animating sub-object properties via child tracks.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Tracks.MemberTrack" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectPropertyTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectPropertyTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.ObjectPropertyTrack.Object">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectPropertyTrack.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.ObjectReferencePropertyTrack">
            <summary>
            The timeline track for animating <see cref="T:FlaxEngine.Object"/> reference property via keyframes collection.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Tracks.MemberTrack" />
            <seealso cref="T:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectReferencePropertyTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectReferencePropertyTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectReferencePropertyTrack.GetDefaultValue(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectReferencePropertyTrack.GetValueDataSize(System.Reflection.MemberInfo,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectReferencePropertyTrack.TryGetValue(System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.IObjectTrack">
            <summary>
            The base interface for <see cref="T:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.IObjectTrack.Object">
            <summary>
            Gets the object instance (may be null if reference is invalid or data is missing).
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack">
            <summary>
            The timeline track for animating managed objects.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Track" />
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack._addButton">
            <summary>
            The add button.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.Object">
            <summary>
            Gets the object instance (may be null if reference is invalid or data is missing).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.OnObjectExistenceChanged(System.Object)">
            <summary>
            Called when object existence gets changed (eg. object found after being not found).
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.OnShowAddContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu)">
            <summary>
            Called when showing the context menu for add button (for sub-tracks adding).
            </summary>
            <param name="menu">The menu.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.AddMemberTag">
            <summary>
            The data for add property track buttons tag.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.AddMemberTag.Member">
            <summary>
            The member.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.AddMemberTag.Archetype">
            <summary>
            The archetype.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.AddEvents(FlaxEditor.GUI.Timeline.Track,FlaxEditor.GUI.ContextMenu.ContextMenu,System.Type,System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Adds the object events track options to menu.
            </summary>
            <param name="parentTrack">The parent track.</param>
            <param name="menu">The menu.</param>
            <param name="type">The object type.</param>
            <param name="memberCheck">The custom callback that can reject the members that should not be animated. Returns true if member is valid. Can be null to skip this feature.</param>
            <returns>The added options count.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.OnAddMemberTrack(FlaxEditor.GUI.ContextMenu.ContextMenuButton)">
            <summary>
            Called on context menu button click to add new object property animation track. Button should have <see cref="T:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.AddMemberTag"/> value assigned to the <see cref="F:FlaxEngine.GUI.Control.Tag"/> field.
            </summary>
            <param name="button">The button (with <see cref="T:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.AddMemberTag"/> value assigned to the <see cref="F:FlaxEngine.GUI.Control.Tag"/> field.).</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.AddPropertyTrack(System.Reflection.MemberInfo)">
            <summary>
            Adds the property or field track to this object track.
            </summary>
            <param name="m">The member (property or a field).</param>
            <returns>The created track or null if failed.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.AddProperties(FlaxEditor.GUI.Timeline.Track,FlaxEditor.GUI.ContextMenu.ContextMenu,System.Type,System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Adds the object properties animation track options to menu.
            </summary>
            <param name="parentTrack">The parent track.</param>
            <param name="menu">The menu.</param>
            <param name="type">The object type.</param>
            <param name="memberCheck">The custom callback that can reject the members that should not be animated. Returns true if member is valid. Can be null to skip this feature.</param>
            <returns>The added options count.</returns>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack.BasicTypesTrackArchetypes">
            <summary>
            Maps the type to the default track archetype for it.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.ParticleEmitterMedia">
            <summary>
            The timeline media that represents a particle miter playback media event.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Media" />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.ParticleEmitterMedia.Proxy.ParticleEmitter">
            <summary>
            Gets or sets the particle emitter to simulate.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ParticleEmitterMedia.Proxy.#ctor(FlaxEditor.GUI.Timeline.Tracks.ParticleEmitterTrack,FlaxEditor.GUI.Timeline.Tracks.ParticleEmitterMedia)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ParticleEmitterMedia.OnTimelineChanged(FlaxEditor.GUI.Timeline.Track)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.ParticleEmitterTrack">
            <summary>
            The timeline track that represents a particle emitter playback.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Track" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ParticleEmitterTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.ParticleEmitterTrack.ParametersOverrides">
            <summary>
            The overriden values for the emitters parameters. Key is parameter ID, value is the custom value.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ParticleEmitterTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Tracks.ParticleEmitterTrack"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ParticleEmitterTrack.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.PostProcessMaterialMedia">
            <summary>
            The timeline media that represents a post-process material media event.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Media" />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.PostProcessMaterialMedia.Proxy.PostProcessMaterial">
            <summary>
            Gets or sets the post process material to show.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.PostProcessMaterialMedia.Proxy.#ctor(FlaxEditor.GUI.Timeline.Tracks.PostProcessMaterialTrack,FlaxEditor.GUI.Timeline.Tracks.PostProcessMaterialMedia)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.PostProcessMaterialMedia.OnTimelineChanged(FlaxEditor.GUI.Timeline.Track)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.PostProcessMaterialTrack">
            <summary>
            The timeline track that represents a post-process material playback.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Track" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.PostProcessMaterialTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.PostProcessMaterialTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Tracks.PostProcessMaterialTrack"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeMedia">
            <summary>
            The timeline media that represents a screen fade animation event.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Media" />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeMedia.Proxy.Gradient">
            <summary>
            Gets or sets the color gradient stops collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeMedia.Proxy.#ctor(FlaxEditor.GUI.Timeline.Tracks.ScreenFadeTrack,FlaxEditor.GUI.Timeline.Tracks.ScreenFadeMedia)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeMedia.Gradient">
            <summary>
            The gradient.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeMedia.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeMedia"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeMedia.OnTimelineChanged(FlaxEditor.GUI.Timeline.Track)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeMedia.OnTimelineZoomChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeMedia.OnTimelineFpsChanged(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeMedia.OnTimelineShowContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu,FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeTrack">
            <summary>
            The timeline track that represents a screen fade animation.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Track" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Timeline.Tracks.ScreenFadeTrack"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.ScriptTrack">
            <summary>
            The timeline track for animating <see cref="T:FlaxEngine.Script"/> objects.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Tracks.ObjectTrack" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ScriptTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.ScriptTrack.ScriptID">
            <summary>
            The object ID.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.ScriptTrack.Script">
            <summary>
            Gets the object instance (it might be missing).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ScriptTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.ScriptTrack.Object">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.ScriptTrack.OnShowAddContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.SingleMediaAssetMedia">
            <summary>
            The timeline media that represents a media event with an asset reference.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Media" />
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.SingleMediaAssetMedia.Asset">
            <summary>
            The asset id.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.SingleMediaAssetTrack`2">
            <summary>
            The base class for timeline tracks that use single media with an asset reference.
            </summary>
            <typeparam name="TAsset">The type of the asset.</typeparam>
            <typeparam name="TMedia">The type of the media event.</typeparam>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Track" />
        </member>
        <member name="F:FlaxEditor.GUI.Timeline.Tracks.SingleMediaAssetTrack`2._picker">
            <summary>
            The asset reference picker control.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.SingleMediaAssetTrack`2.Asset">
            <summary>
            Gets or sets the asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.SingleMediaAssetTrack`2.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.SingleMediaAssetTrack`2.OnAssetChanged">
            <summary>
            Called when selected asset gets changed.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.SingleMediaTrack`1">
            <summary>
            The base class for timeline tracks that use single media.
            </summary>
            <typeparam name="TMedia">The type of the media.</typeparam>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Track" />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.SingleMediaTrack`1.TrackMedia">
            <summary>
            Gets the track media.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.SingleMediaTrack`1.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.SingleMediaTrack`1.OnSpawned">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.StringPropertyTrack">
            <summary>
            The timeline track for animating string property via keyframes collection.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Tracks.MemberTrack" />
            <seealso cref="T:FlaxEditor.GUI.Timeline.Tracks.KeyframesPropertyTrack" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.StringPropertyTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.StringPropertyTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.StringPropertyTrack.GetDefaultValue(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.StringPropertyTrack.TryGetValue(System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Timeline.Tracks.StructPropertyTrack">
            <summary>
            The timeline track for animating structure property via keyframes collection.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Timeline.Tracks.MemberTrack" />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.StructPropertyTrack.GetArchetype">
            <summary>
            Gets the archetype.
            </summary>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.StructPropertyTrack.#ctor(FlaxEditor.GUI.Timeline.TrackCreateOptions@)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.GUI.Timeline.Tracks.StructPropertyTrack.Object">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Timeline.Tracks.StructPropertyTrack.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.KeyframesEditor">
            <summary>
            The generic keyframes animation editor control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="T:FlaxEditor.GUI.KeyframesEditor.Keyframe">
            <summary>
            A single keyframe.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.KeyframesEditor.Keyframe.Time">
            <summary>
            The time of the keyframe.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.KeyframesEditor.Keyframe.Value">
            <summary>
            The value of the curve at keyframe.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Keyframe.#ctor(System.Single,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.KeyframesEditor.Keyframe"/> struct.
            </summary>
            <param name="time">The time.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Keyframe.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Keyframe.CompareTo(FlaxEditor.GUI.KeyframesEditor.Keyframe)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.KeyframesEditor.Contents">
            <summary>
            The keyframes contents container control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Contents.#ctor(FlaxEditor.GUI.KeyframesEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.KeyframesEditor.Contents"/> class.
            </summary>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Contents.IntersectsContent(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Contents.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Contents.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Contents.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Contents.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Contents.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Contents.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Contents.SetScaleInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Contents.PointToKeyframes(FlaxEngine.Vector2,FlaxEngine.Rectangle@)">
            <summary>
            Converts the input point from curve editor contents control space into the keyframes time/value coordinates.
            </summary>
            <param name="point">The point.</param>
            <param name="curveContentAreaBounds">The curve contents area bounds.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.KeyframesEditor.KeyframePoint">
            <summary>
            The single keyframe control.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.KeyframesEditor.KeyframePoint.Editor">
            <summary>
            The parent keyframes editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.KeyframesEditor.KeyframePoint.Index">
            <summary>
            The keyframe index.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.KeyframesEditor.KeyframePoint.IsSelected">
            <summary>
            Flag for selected keyframes.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.KeyframePoint.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.KeyframePoint.OnLocationChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.KeyframePoint.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.KeyframePoint.UpdateTooltip">
            <summary>
            Updates the tooltip.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.KeyframesEditor.UnitsPerSecond">
            <summary>
            The timeline units per second (on time axis).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.KeyframesEditor.KeyframesSize">
            <summary>
            The keyframes size.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.KeyframesEditor._keyframes">
            <summary>
            The keyframes collection.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.KeyframesEditor.KeyframesChanged">
            <summary>
            Occurs when keyframes collection gets changed (keyframe added or removed).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.KeyframesEditor.Keyframes">
            <summary>
            Gets the keyframes collection (read-only).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.KeyframesEditor.ViewOffset">
            <summary>
            Gets or sets the view offset (via scroll bars).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.KeyframesEditor.ViewScale">
            <summary>
            Gets or sets the view scale.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.KeyframesEditor.Edited">
            <summary>
            Occurs when curve gets edited.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.KeyframesEditor.MaxKeyframes">
            <summary>
            The maximum amount of keyframes to use in a single curve.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.KeyframesEditor.EnableZoom">
            <summary>
            True if enable view zooming. Otherwise user won't be able to zoom in or out.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.KeyframesEditor.EnablePanning">
            <summary>
            True if enable view panning. Otherwise user won't be able to move the view area.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.KeyframesEditor.IsUserEditing">
            <summary>
            Gets a value indicating whether user is editing the curve.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.KeyframesEditor.ScrollBars">
            <summary>
            Gets or sets the scroll bars usage.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.KeyframesEditor.DefaultValue">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.KeyframesEditor.FPS">
            <summary>
            The amount of frames per second of the curve animation (optional). Can be sued to restrict the keyframes time values to the given time quantization rate.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.KeyframesEditor"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Evaluate(System.Single)">
            <summary>
            Evaluates the keyframe value at the specified time.
            </summary>
            <param name="time">The time to evaluate the keyframe value.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.ResetKeyframes">
            <summary>
            Resets the keyframes collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.SetKeyframes(System.Collections.Generic.IEnumerable{FlaxEditor.GUI.KeyframesEditor.Keyframe})">
            <summary>
            Sets the keyframes collection.
            </summary>
            <param name="keyframes">The keyframes.</param>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.OnKeyframesChanged">
            <summary>
            Called when keyframes collection gets changed (keyframe added or removed).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.AddKeyframe(FlaxEditor.GUI.KeyframesEditor.Keyframe)">
            <summary>
            Adds the new keyframe.
            </summary>
            <param name="k">The keyframe to add.</param>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.SetKeyframe(System.Int32,System.Object)">
            <summary>
            Sets the existing keyframe value as boxed value.
            </summary>
            <param name="index">The keyframe index.</param>
            <param name="value">The keyframe value.</param>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Popup.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Popup.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Popup.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Popup.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.ShowWholeCurve">
            <summary>
            Shows the whole curve.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.ResetView">
            <summary>
            Resets the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.UpdateKeyframes">
            <summary>
            Updates the keyframes positioning.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.KeyframesEditor.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ToolStrip">
            <summary>
            Tool strip with child items.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.ToolStrip.DefaultMarginV">
            <summary>
            The default margin vertically.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ToolStrip.DefaultMarginH">
            <summary>
            The default margin horizontally.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ToolStrip.ButtonClicked">
            <summary>
            Event fired when button gets clicked.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ToolStrip.LastButton">
            <summary>
            Tries to get the last button.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ToolStrip.ButtonsCount">
            <summary>
            Gets amount of buttons that has been added
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ToolStrip.ItemsHeight">
            <summary>
            Gets the height for the items.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ToolStrip"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.AddButton(FlaxEngine.SpriteHandle,System.Action)">
            <summary>
            Adds the button.
            </summary>
            <param name="sprite">The icon sprite.</param>
            <param name="onClick">The custom action to call on button clicked.</param>
            <returns>The button.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.AddButton(FlaxEngine.SpriteHandle,System.String,System.Action)">
            <summary>
            Adds the button.
            </summary>
            <param name="sprite">The icon sprite.</param>
            <param name="text">The text.</param>
            <param name="onClick">The custom action to call on button clicked.</param>
            <returns>The button.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.AddButton(System.String,System.Action)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
            <param name="onClick">The custom action to call on button clicked.</param>
            <returns>The button.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.AddSeparator">
            <summary>
            Adds the separator.
            </summary>
            <returns>The separator.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ToolStripButton">
            <summary>
            Tool strip button control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.GUI.ToolStripButton.DefaultMargin">
            <summary>
            The default margin for button parts (icon, text, etc.).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ToolStripButton.Clicked">
            <summary>
            Event fired when user clicks the button.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ToolStripButton.Checked">
            <summary>
            The checked state.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ToolStripButton.AutoCheck">
            <summary>
            The automatic check mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ToolStripButton.Text">
            <summary>
            Gets or sets the button text.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ToolStripButton.Icon">
            <summary>
            The icon.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.#ctor(System.Single,FlaxEngine.SpriteHandle@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ToolStripButton"/> class.
            </summary>
            <param name="height">The height.</param>
            <param name="icon">The icon.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.SetAutoCheck(System.Boolean)">
            <summary>
            Sets the automatic check mode.
            </summary>
            <param name="value">True if use auto check, otherwise false.</param>
            <returns>This button.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.SetChecked(System.Boolean)">
            <summary>
            Sets the checked state.
            </summary>
            <param name="value">True if check it, otherwise false.</param>
            <returns>This button.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ToolStripSeparator">
            <summary>
            Toolstrip separator control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripSeparator.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ToolStripSeparator"/> class.
            </summary>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripSeparator.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Tree.Tree">
            <summary>
            Tree control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Tree.Tree.KeyUpdateTimeout">
            <summary>
            The key updates timeout in seconds.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Tree.Tree.SelectionChangedDelegate">
            <summary>
            Delegate for selected tree nodes collection change.
            </summary>
            <param name="before">The before state.</param>
            <param name="after">The after state.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Tree.Tree.NodeClickDelegate">
            <summary>
            Delegate for node click events.
            </summary>
            <param name="node">The node.</param>
            <param name="location">The location.</param>
        </member>
        <member name="E:FlaxEditor.GUI.Tree.Tree.SelectedChanged">
            <summary>
            Action fired when tree nodes selection gets changed.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Tree.Tree.RightClick">
            <summary>
            Action fired when mouse goes right click up on node.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tree.Tree.Selection">
            <summary>
            List with all selected nodes
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.Tree.SelectedNode">
            <summary>
            Gets the first selected node or null.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.Tree.Margin">
            <summary>
            Gets or sets the margin for the child tree nodes.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.Tree.AutoSize">
            <summary>
            Gets or sets the value indicating whenever the tree will auto-size to the tree nodes dimensions.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tree.Tree"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tree.Tree"/> class.
            </summary>
            <param name="supportMultiSelect">True if support multi selection for tree nodes, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.Select(FlaxEditor.GUI.Tree.TreeNode)">
            <summary>
            Selects single tree node.
            </summary>
            <param name="node">Node to select.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.Select(System.Collections.Generic.List{FlaxEditor.GUI.Tree.TreeNode})">
            <summary>
            Selects tree nodes.
            </summary>
            <param name="nodes">Nodes to select.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.Deselect">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.AddOrRemoveSelection(FlaxEditor.GUI.Tree.TreeNode)">
            <summary>
            Adds or removes node to/from the selection
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.SelectRange(FlaxEditor.GUI.Tree.TreeNode)">
            <summary>
            Selects tree nodes range (used to select part of the tree using Shift+Mouse).
            </summary>
            <param name="endNode">End range node</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.SelectAllExpanded">
            <summary>
            Select all expanded nodes
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.UpdateSize">
            <summary>
            Updates the tree size.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.OnGotFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.OnParentResized">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Tree.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Tree.TreeNode">
            <summary>
            Tree node control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Tree.TreeNode.DefaultDragInsertPositionMargin">
            <summary>
            The default drag insert position margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tree.TreeNode.DefaultNodeOffsetY">
            <summary>
            The default node offset on Y axis.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this node is expanded.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.IsCollapsed">
            <summary>
            Gets or sets a value indicating whether this node is collapsed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.TextMargin">
            <summary>
            Gets or sets the text margin.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.TextFont">
            <summary>
            Gets or sets the font used to render text.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.BackgroundColorSelected">
            <summary>
            Gets or sets the color of the background when tree node is selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.BackgroundColorHighlighted">
            <summary>
            Gets or sets the color of the background when tree node is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.BackgroundColorSelectedUnfocused">
            <summary>
            Gets or sets the color of the background when tree node is selected but not focused.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.ParentTree">
            <summary>
            Gets the parent tree control.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.IsRoot">
            <summary>
            Gets a value indicating whether this node is root.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.MinimumWidth">
            <summary>
            Gets the minimum width of the node sub-tree.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.ChildrenIndent">
            <summary>
            The indent applied to the child nodes.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.HeaderHeight">
            <summary>
            The height of the tree node header area.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.ArrowRect">
            <summary>
            Gets the arrow rectangle.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.HeaderRect">
            <summary>
            Gets the header rectangle.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.TextRect">
            <summary>
            Gets the header text rectangle.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.DragOverMode">
            <summary>
            Gets the drag over action type.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.TreeNode.HasAnyVisibleChild">
            <summary>
            Gets a value indicating whether this node has any visible child. Returns false if it has no children.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tree.TreeNode"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tree.TreeNode"/> class.
            </summary>
            <param name="canChangeOrder">Enable/disable changing node order in parent tree node.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.#ctor(System.Boolean,FlaxEngine.SpriteHandle,FlaxEngine.SpriteHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tree.TreeNode"/> class.
            </summary>
            <param name="canChangeOrder">Enable/disable changing node order in parent tree node.</param>
            <param name="iconCollapsed">The icon for node collapsed.</param>
            <param name="iconOpened">The icon for node opened.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.Expand(System.Boolean)">
            <summary>
            Expand node.
            </summary>
            <param name="noAnimation">True if skip node expanding animation.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.Collapse(System.Boolean)">
            <summary>
            Collapse node.
            </summary>
            <param name="noAnimation">True if skip node expanding animation.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.ExpandAll(System.Boolean)">
            <summary>
            Expand node and all the children.
            </summary>
            <param name="noAnimation">True if skip node expanding animation.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.CollapseAll(System.Boolean)">
            <summary>
            Collapse node and all the children.
            </summary>
            <param name="noAnimation">True if skip node expanding animation.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.ExpandAllParents(System.Boolean)">
            <summary>
            Ensure that all node parents are expanded.
            </summary>
            <param name="noAnimation">True if skip node expanding animation.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.EndAnimation">
            <summary>
            Ends open/close animation by force.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.Select">
            <summary>
            Select node in the tree.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnDragEnterHeader(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag and drop enters the node header area.
            </summary>
            <param name="data">The data.</param>
            <returns>Drag action response.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnDragMoveHeader(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag and drop moves over the node header area.
            </summary>
            <param name="data">The data.</param>
            <returns>Drag action response.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnDragDropHeader(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag and drop performs over the node header area.
            </summary>
            <param name="data">The data.</param>
            <returns>Drag action response.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnDragLeaveHeader">
            <summary>
            Called when drag and drop leaves the node header area.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.DoDragDrop">
            <summary>
            Begins the drag drop operation.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnMouseDoubleClickHeader(FlaxEngine.Vector2@,FlaxEngine.MouseButton)">
            <summary>
            Called when mouse double clicks header.
            </summary>
            <param name="location">The mouse location.</param>
            <param name="button">The button.</param>
            <returns>True if event has been handled.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnLongPress">
            <summary>
            Called when mouse is pressing node header for a long time.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnExpandedChanged">
            <summary>
            Called when expanded/collapsed state changes.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.TestHeaderHit(FlaxEngine.Vector2@)">
            <summary>
            Tests the header hit.
            </summary>
            <param name="location">The location.</param>
            <returns>True if hits it.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.UpdateDrawPositioning(FlaxEngine.Vector2@)">
            <summary>
            Updates the drag over mode based on the given mouse location.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.CacheTextColor">
            <summary>
            Caches the color of the text for this node. Called during update before children nodes but after parent node so it can reuse parent tree node data.
            </summary>
            <returns>Text color.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.UpdateTextWidth">
            <summary>
            Updates the cached width of the text.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnKeyUp(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnParentResized">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnParentChangedInternal">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.TreeNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.TypeSearchPopup">
            <summary>
            Popup that shows the list of types to pick. Supports searching and basic type filtering.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ItemsListContextMenu" />
        </member>
        <member name="T:FlaxEditor.GUI.TypeSearchPopup.TypeItemView">
            <summary>
            The type item.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ItemsListContextMenu.Item" />
        </member>
        <member name="P:FlaxEditor.GUI.TypeSearchPopup.TypeItemView.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.TypeSearchPopup.TypeItemView.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.TypeSearchPopup.TypeItemView"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FlaxEditor.GUI.TypeSearchPopup.TypeItemView.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.TypeSearchPopup.IsValidDelegate">
            <summary>
            Validates if the given actor item can be used to pick it.
            </summary>
            <param name="type">The type.</param>
            <returns>True if is valid.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.TypeSearchPopup.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEditor.GUI.TypeSearchPopup.IsValidDelegate,System.Action{System.Type})">
            <summary>
            Shows the popup.
            </summary>
            <param name="showTarget">The show target.</param>
            <param name="showTargetLocation">The show target location.</param>
            <param name="isValid">Event called to check if a given asset item is valid to be used.</param>
            <param name="selected">Event called on asset item pick.</param>
            <returns>The dialog.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.TypeSearchPopup.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.History.HistoryStack">
            <summary>
            Controller for handling stack manipulations in history and reverse buffers.
            </summary>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.History.HistoryStack"/> class.
            </summary>
            <param name="historyActionsLimit">The history actions limit.</param>
        </member>
        <member name="P:FlaxEditor.History.HistoryStack.HistoryActionsLimit">
            <summary>
            Gets the history actions limit.
            </summary>
            <value>
            The history actions limit.
            </value>
        </member>
        <member name="P:FlaxEditor.History.HistoryStack.HistoryCount">
            <summary>
            Gets the history count.
            </summary>
            <value>
            The history count.
            </value>
        </member>
        <member name="P:FlaxEditor.History.HistoryStack.ReverseCount">
            <summary>
            Gets the reverse count.
            </summary>
            <value>
            The reverse count.
            </value>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.Push(FlaxEditor.History.IHistoryAction)">
            <summary>
            Adds new history element at top of history stack, and drops reverse stack
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.PeekHistory">
            <summary>
            Gets top-most item in history stack
            </summary>
            <returns>Found element or null</returns>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.PeekReverse">
            <summary>
            Gets top-most item in reverse stack
            </summary>
            <returns>Found element or null</returns>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.PopHistory">
            <summary>
            Gets top-most item in history stack, and removes it from history stack. Adds forgot element in reverse stack.
            </summary>
            <returns>Found element or null</returns>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.PopReverse">
            <summary>
            Gets top-most item in reverse stack, and removes it from reverse stack. Adds forgot element in history stack.
            </summary>
            <returns>Found element or null</returns>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.TravelBack(System.Int32)">
            <summary>
            Gets element at given index from top of history stack, and adds all skipped elements to reverse stack
            </summary>
            <remarks>If skipElements is bigger, then amount of elements in history, returns null, clears history and pushes all to reverse stack</remarks>
            <param name="skipElements">Amount of elements to skip from history stack</param>
            <returns>>Found element or null</returns>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.TravelReverse(System.Int32)">
            <summary>
            Gets element at given index from top of reverse stack, and adds all skipped elements to history stack
            </summary>
            <remarks>If skipElements is bigger, then amount of elements in reverse, returns null, clears reverse and pushes all to history stack</remarks>
            <param name="skipElements">Amount of elements to skip from reverse stack</param>
            <returns>>Found element or null</returns>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.Clear">
            <summary>
            Clears whole history (back and front).
            </summary>
        </member>
        <member name="T:FlaxEditor.History.IHistoryAction">
            <summary>
            Interface for <see cref="T:FlaxEditor.History.HistoryStack"/> actions.
            </summary>
        </member>
        <member name="P:FlaxEditor.History.IHistoryAction.ActionString">
            <summary>
            Name or key of performed action
            </summary>
        </member>
        <member name="M:FlaxEditor.History.IHistoryAction.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:FlaxEditor.History.UndoActionObject">
            <summary>
            Undo action object.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="T:FlaxEditor.History.UndoActionObject.DataValue">
            <summary>
            The data value storage to solve issue for flax objects and editor scene tree nodes which are serialized by ref id.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataValue.Generic">
            <summary>
            The generic value (anything).
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataValue.FlaxObject">
            <summary>
            The flax object.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataValue.EditorNode">
            <summary>
            The editor node object.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataValue.Id">
            <summary>
            The id.
            </summary>
        </member>
        <member name="P:FlaxEditor.History.UndoActionObject.DataValue.Value">
            <summary>
            Gets the proper value.
            </summary>
        </member>
        <member name="M:FlaxEditor.History.UndoActionObject.DataValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.History.UndoActionObject.DataValue"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FlaxEditor.History.UndoActionObject.DataStorage">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataStorage.Values1">
            <summary>
            The values 1.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataStorage.Values2">
            <summary>
            The values 2.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataStorage.Instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="T:FlaxEditor.History.UndoActionObject.DataPrepared">
            <summary>
            Prepared undo data container object.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataPrepared.Diff">
            <summary>
            The difference data.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataPrepared.TargetInstance">
            <summary>
            The target object instance.
            </summary>
        </member>
        <member name="P:FlaxEditor.History.UndoActionObject.Target">
            <summary>
            Gets the target.
            </summary>
        </member>
        <member name="M:FlaxEditor.History.UndoActionObject.#ctor(System.Collections.Generic.List{FlaxEditor.Utilities.MemberComparison},System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.History.UndoActionObject"/> class.
            </summary>
            <param name="diff">The difference.</param>
            <param name="actionString">The action string.</param>
            <param name="targetInstance">The target instance.</param>
        </member>
        <member name="M:FlaxEditor.History.UndoActionObject.PrepareData">
            <summary>
            Prepares the data for the undo.
            </summary>
            <returns>The prepared undo action data.</returns>
        </member>
        <member name="P:FlaxEditor.History.UndoActionObject.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.History.UndoActionObject.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.History.UndoActionObject.Undo">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.IEditable">
            <summary>
            Interface for all objects that can be modified (dirty state) and expose some functionalities and events.
            </summary>
        </member>
        <member name="E:FlaxEditor.IEditable.OnEdited">
            <summary>
            Occurs when object gets edited.
            </summary>
        </member>
        <member name="P:FlaxEditor.IEditable.IsEdited">
            <summary>
            Gets a value indicating whether this object is edited (dirty state).
            </summary>
            <value>
              <c>true</c> if this object instance is edited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:FlaxEditor.IEditable.MarkAsEdited">
            <summary>
            Marks object as edited (sets dirty flag).
            </summary>
        </member>
        <member name="T:FlaxEditor.Modules.ContentDatabaseModule">
            <summary>
            Manages assets database and searches for workspace directory changes.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="P:FlaxEditor.Modules.ContentDatabaseModule.Game">
            <summary>
            The project directory.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentDatabaseModule.Engine">
            <summary>
            The engine directory.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ContentDatabaseModule.Projects">
            <summary>
            The list of all projects workspace directories (including game, engine and plugins projects).
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ContentDatabaseModule.Proxy">
            <summary>
            The list with all content items proxy objects.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.ContentDatabaseModule.ItemAdded">
            <summary>
            Occurs when new items is added to the workspace content database.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.ContentDatabaseModule.ItemRemoved">
            <summary>
            Occurs when new items is removed from the workspace content database.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.ContentDatabaseModule.WorkspaceModified">
            <summary>
            Occurs when workspace has been modified.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentDatabaseModule.ItemsCreated">
            <summary>
            Gets the amount of created items.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentDatabaseModule.ItemsDeleted">
            <summary>
            Gets the amount of deleted items.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.GetProjectWorkspace(FlaxEditor.ProjectInfo)">
            <summary>
            Gets the project workspace used by the given project.
            </summary>
            <param name="project">The project.</param>
            <returns>The project workspace or null if not loaded into database.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.GetProxy(FlaxEditor.Content.ContentItem)">
            <summary>
            Gets the proxy object for the given content item.
            </summary>
            <param name="item">The item.</param>
            <returns>Content proxy for that item or null if cannot find.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.GetProxy``1">
            <summary>
            Gets the proxy object for the given asset type.
            </summary>
            <returns>Content proxy for that asset type or null if cannot find.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.GetProxy(System.String)">
            <summary>
            Gets the proxy object for the given file extension. Warning! Different asset types may share the same file extension.
            </summary>
            <param name="extension">The file extension.</param>
            <returns>Content proxy for that item or null if cannot find.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.GetAssetProxy(System.String,System.String)">
            <summary>
            Gets the proxy object for the given asset type id.
            </summary>
            <param name="typeName">The asset type name.</param>
            <param name="path">The asset path.</param>
            <returns>Asset proxy or null if cannot find.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.RefreshFolder(FlaxEditor.Content.ContentItem,System.Boolean)">
            <summary>
            Refreshes the given item folder. Tries to find new content items and remove not existing ones.
            </summary>
            <param name="item">Folder to refresh</param>
            <param name="checkSubDirs">True if search for changes inside a subdirectories, otherwise only top-most folder will be updated</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Find(System.String)">
            <summary>
            Tries to find item at the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>Found item or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Find(System.Guid)">
            <summary>
            Tries to find item with the specified ID.
            </summary>
            <param name="id">The item ID.</param>
            <returns>Found item or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.FindAsset(System.Guid)">
            <summary>
            Tries to find asset with the specified ID.
            </summary>
            <param name="id">The asset ID.</param>
            <returns>Found asset item or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.FindScript(System.String)">
            <summary>
            Tries to find script item at the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>Found script or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.FindScript(System.Guid)">
            <summary>
            Tries to find script item with the specified ID.
            </summary>
            <param name="id">The item ID.</param>
            <returns>Found script or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.FindScriptWitScriptName(System.String)">
            <summary>
            Tries to find script item with the specified name.
            </summary>
            <param name="scriptName">The name of the script.</param>
            <returns>Found script or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.FindScriptWitScriptName(FlaxEngine.Script)">
            <summary>
            Tries to find script item that is used by the specified script object.
            </summary>
            <param name="script">The instance of the script.</param>
            <returns>Found script or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Move(System.Collections.Generic.List{FlaxEditor.Content.ContentItem},FlaxEditor.Content.ContentFolder)">
            <summary>
            Moves the specified items to the different location. Handles moving whole directories and single assets.
            </summary>
            <param name="items">The items.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Move(FlaxEditor.Content.ContentItem,FlaxEditor.Content.ContentFolder)">
            <summary>
            Moves the specified item to the different location. Handles moving whole directories and single assets.
            </summary>
            <param name="item">The item.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Move(FlaxEditor.Content.ContentItem,System.String)">
            <summary>
            Moves the specified item to the different location. Handles moving whole directories and single assets.
            </summary>
            <param name="item">The item.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Copy(FlaxEditor.Content.ContentItem,System.String)">
            <summary>
            Copies the specified item to the target location. Handles copying whole directories and single assets.
            </summary>
            <param name="item">The item.</param>
            <param name="targetPath">The target item path.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Delete(FlaxEditor.Content.ContentItem)">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.ContentEditingModule">
            <summary>
            Opening/editing asset windows module.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="M:FlaxEditor.Modules.ContentEditingModule.Open(FlaxEditor.Content.ContentItem,System.Boolean)">
            <summary>
            Opens the specified item in dedicated editor window.
            </summary>
            <param name="item">The content item.</param>
            <param name="disableAutoShow">True if disable automatic window showing. Used during workspace layout loading to deserialize it faster.</param>
            <returns>Opened window or null if cannot open item.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentEditingModule.IsValidAssetName(FlaxEditor.Content.ContentItem,System.String,System.String@)">
            <summary>
            Determines whether specified new short name is valid name for the given content item.
            </summary>
            <param name="item">The item.</param>
            <param name="shortName">The new short name.</param>
            <param name="hint">The hint text if name is invalid.</param>
            <returns>
              <c>true</c> if name is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentEditingModule.FastTempAssetClone(System.String,System.String@)">
            <summary>
            Clones the asset to the temporary folder.
            </summary>
            <param name="srcPath">The path of the source asset to clone.</param>
            <param name="resultPath">The result path.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentEditingModule.CloneAssetFile(System.String,System.String,System.Guid)">
            <summary>
            Duplicates the asset file and changes it's ID.
            </summary>
            <param name="srcPath">The source file path.</param>
            <param name="dstPath">The destination file path.</param>
            <param name="dstId">The destination asset identifier.</param>
            <returns>True if cannot perform that operation, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Modules.SearchResult">
            <summary>
            The search result.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SearchResult.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SearchResult.Type">
            <summary>
            The type name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SearchResult.Item">
            <summary>
            The item.
            </summary>
        </member>
        <member name="T:FlaxEditor.Modules.ContentFindingModule">
            <summary>
            The content finding module.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentFindingModule.Finder">
            <summary>
            The content finding context menu.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.ContentFindingModule.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Modules.ContentFindingModule"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentFindingModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ContentFindingModule.OnExit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ContentFindingModule.ShowFinder(FlaxEngine.GUI.Control)">
            <summary>
            Shows the finder.
            </summary>
            <param name="control">The target control to show finder over it.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentFindingModule.AddQuickAction(System.String,System.Action)">
            <summary>
            Adds <paramref name="action"/> to quick action list.
            </summary>
            <param name="name">The action's name.</param>
            <param name="action">The actual action callback.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentFindingModule.RemoveQuickAction(System.String)">
            <summary>
            Removes a quick action by name.
            </summary>
            <param name="name">Thr action's name.</param>
            <returns>True when it succeed, false if there is no Quick Action with this name.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentFindingModule.Search(System.String)">
            <summary>
            Searches any assets/scripts/quick actions that match the provided type and name.
            </summary>
            <param name="charsToFind">Two pattern can be used, the first one will just take a string without ':' and will only match names.
            The second looks like this "name:type", it will match name and type. Experimental : You can use regular expressions, might break if you are using ':' character.</param>
            <returns>The results list.</returns>
        </member>
        <member name="F:FlaxEditor.Modules.ContentFindingModule.Aliases">
            <summary>
            The aliases to match the given type to its name.
            </summary>
        </member>
        <member name="T:FlaxEditor.Modules.ContentImportingModule">
            <summary>
            Imports assets and other resources to the project. Provides per asset import settings editing.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="P:FlaxEditor.Modules.ContentImportingModule.IsImporting">
            <summary>
            Gets a value indicating whether this instance is importing assets.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentImportingModule.ImportingProgress">
            <summary>
            Gets the importing assets progress.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentImportingModule.ImportBatchDone">
            <summary>
            Gets the amount of files done in the current import batch.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentImportingModule.ImportBatchSize">
            <summary>
            Gets the size of the current import batch (imported files + files to import left).
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.ContentImportingModule.ImportingQueueBegin">
            <summary>
            Occurs when assets importing starts.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.ContentImportingModule.ImportFileBegin">
            <summary>
            Occurs when file is being imported.
            </summary>
        </member>
        <member name="T:FlaxEditor.Modules.ContentImportingModule.ImportFileEndDelegate">
            <summary>
            Import file end delegate.
            </summary>
            <param name="entry">The imported file entry.</param>
            <param name="failed">if set to <c>true</c> if importing failed, otherwise false.</param>
        </member>
        <member name="E:FlaxEditor.Modules.ContentImportingModule.ImportFileEnd">
            <summary>
            Occurs when file importing end.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.ContentImportingModule.ImportingQueueEnd">
            <summary>
            Occurs when assets importing ends.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.#ctor(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.Create(FlaxEditor.Content.Create.CreateFileEntry)">
            <summary>
            Creates the specified file entry (can show create settings dialog if needed).
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.ShowImportFileDialog(FlaxEditor.Content.ContentFolder)">
            <summary>
            Shows the dialog for selecting files to import.
            </summary>
            <param name="targetLocation">The target location.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.Reimport(FlaxEditor.Content.BinaryAssetItem,System.Object,System.Boolean)">
            <summary>
            Reimports the specified <see cref="T:FlaxEditor.Content.BinaryAssetItem"/> item.
            </summary>
            <param name="item">The item.</param>
            <param name="settings">The import settings to override.</param>
            <param name="skipSettingsDialog">True if skip any popup dialogs showing for import options adjusting. Can be used when importing files from code.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.Import(System.Collections.Generic.IEnumerable{System.String},FlaxEditor.Content.ContentFolder,System.Boolean)">
            <summary>
            Imports the specified files.
            </summary>
            <param name="files">The files.</param>
            <param name="targetLocation">The target location.</param>
            <param name="skipSettingsDialog">True if skip any popup dialogs showing for import options adjusting. Can be used when importing files from code.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.Import(System.String,FlaxEditor.Content.ContentFolder,System.Boolean,System.Object)">
            <summary>
            Imports the specified file.
            </summary>
            <param name="file">The file.</param>
            <param name="targetLocation">The target location.</param>
            <param name="skipSettingsDialog">True if skip any popup dialogs showing for import options adjusting. Can be used when importing files from code.</param>
            <param name="settings">Import settings to override. Use null to skip this value.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.Import(System.String,System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Imports the specified file to the target destination.
            Actual importing is done later after gathering settings from the user via <see cref="T:FlaxEditor.Content.Import.ImportFilesDialog"/>.
            </summary>
            <param name="inputPath">The input path.</param>
            <param name="outputPath">The output path.</param>
            <param name="isBinaryAsset">True if output file is a binary asset.</param>
            <param name="skipSettingsDialog">True if skip any popup dialogs showing for import options adjusting. Can be used when importing files from code.</param>
            <param name="settings">Import settings to override. Use null to skip this value.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.EditorModule">
            <summary>
            Base class for all Editor modules.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.EditorModule.InitOrder">
            <summary>
            Gets the initialization order. Lower first ordering.
            </summary>
            <value>
            The initialization order.
            </value>
        </member>
        <member name="F:FlaxEditor.Modules.EditorModule.Editor">
            <summary>
            Gets the editor object.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.EditorModule.Undo">
            <summary>
            Gets the editor undo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Modules.EditorModule"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.OnInit">
            <summary>
            Called when Editor is startup up. Performs module initialization.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.OnEndInit">
            <summary>
            Called when Editor is ready and will start work.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.OnUpdate">
            <summary>
            Called when every Editor update tick.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.OnExit">
            <summary>
            Called when Editor is closing. Performs module cleanup.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.OnPlayBegin">
            <summary>
            Called when Editor is entering play mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.OnPlayEnd">
            <summary>
            Called when Editor leaves the play mode.
            </summary>
        </member>
        <member name="T:FlaxEditor.Modules.PrefabsModule">
            <summary>
            Prefabs management module.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="E:FlaxEditor.Modules.PrefabsModule.PrefabCreating">
            <summary>
            Occurs before prefab asset creating. Argument is a target actor.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.PrefabsModule.PrefabCreated">
            <summary>
            Occurs after prefab asset creating. Arguments is created prefab asset item.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.PrefabsModule.PrefabApplying">
            <summary>
            Occurs before applying changes to the prefab. Arguments are prefab and the target instance.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.PrefabsModule.PrefabApplied">
            <summary>
            Occurs after applying changes to the prefab. Arguments are prefab and the target instance.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.PrefabsModule.CreatePrefab">
            <summary>
            Starts the creating prefab for the selected actor by showing the new item creation dialog in <see cref="T:FlaxEditor.Windows.ContentWindow"/>.
            </summary>
            <remarks>
            To create prefab manually (from code) use <see cref="M:FlaxEngine.PrefabManager.CreatePrefab(FlaxEngine.Actor,System.String,System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="M:FlaxEditor.Modules.PrefabsModule.CreatePrefab(FlaxEngine.Actor)">
            <summary>
            Starts the creating prefab for the given actor by showing the new item creation dialog in <see cref="T:FlaxEditor.Windows.ContentWindow"/>. User can specify the new asset name.
            </summary>
            <remarks>
            To create prefab manually (from code) use <see cref="M:FlaxEngine.PrefabManager.CreatePrefab(FlaxEngine.Actor,System.String,System.Boolean)"/> method.
            </remarks>
            <param name="actor">The root prefab actor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.PrefabsModule.BreakLinks">
            <summary>
            Breaks any prefab links for the selected objects. Supports undo/redo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.PrefabsModule.SelectPrefab">
            <summary>
            Selects in Content Window the prefab asset used by the selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.PrefabsModule.ApplyAll(FlaxEngine.Actor)">
            <summary>
            Applies the difference from the prefab object instance, saves the changes and synchronizes them with the active instances of the prefab asset.
            </summary>
            <remarks>
            Applies all the changes from not only the given actor instance but all actors created within that prefab instance.
            </remarks>
            <param name="instance">The modified instance.</param>
        </member>
        <member name="T:FlaxEditor.Modules.ProgressReportingModule">
            <summary>
            Helper module for engine long-operations progress reporting in the editor (eg. files importing, static light baking, etc.).
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.BuildingGame">
            <summary>
            The game building progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.ImportAssets">
            <summary>
            The assets importing progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.CompileScripts">
            <summary>
            The scripts compilation progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.BakeLightmaps">
            <summary>
            The lightmaps baking progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.BakeEnvProbes">
            <summary>
            The environment probes baking progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.CodeEditorOpen">
            <summary>
            The code editor async open progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.NavMeshBuilding">
            <summary>
            The navigation mesh building progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.GenerateScriptsProjectFiles">
            <summary>
            The scripts project files generation progress handler.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ProgressReportingModule.FirstActiveHandler">
            <summary>
            Gets the first active handler.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ProgressReportingModule.IsAnyActive">
            <summary>
            Gets a value indicating whether any progress handler is active.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.ProgressReportingModule.RegisterHandler(FlaxEditor.Progress.ProgressHandler)">
            <summary>
            Registers the handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ProgressReportingModule.UnregisterHandler(FlaxEditor.Progress.ProgressHandler)">
            <summary>
            Unregisters the handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="T:FlaxEditor.Modules.ProjectCacheModule">
            <summary>
            Caching local project data manager. Used to store and manage the information about expanded actor nodes in the scene tree and other local user data used by the editor. Stores data in the project cache directory.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="P:FlaxEditor.Modules.ProjectCacheModule.AutoSaveInterval">
            <summary>
            Gets or sets the automatic data save interval.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.#ctor(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.IsExpandedActor(System.Guid@)">
            <summary>
            Determines whether actor identified by the given ID is expanded in the scene tree UI.
            </summary>
            <param name="id">The actor identifier.</param>
            <returns><c>true</c> if actor is expanded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.SetExpandedActor(System.Guid@,System.Boolean)">
            <summary>
            Sets the actor expanded cached value.
            </summary>
            <param name="id">The identifier.</param>
            <param name="isExpanded">if set to <c>true</c> actor will be cached as an expanded, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.HasCustomData(System.String)">
            <summary>
            Determines whether project cache contains custom data of the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if has custom data of the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.GetCustomData(System.String)">
            <summary>
            Gets the custom data by the key.
            </summary>
            <remarks>
            Use <see cref="M:FlaxEditor.Modules.ProjectCacheModule.HasCustomData(System.String)"/> to check if a key is valid.
            </remarks>
            <param name="key">The key.</param>
            <returns>The custom data.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.TryGetCustomData(System.String,System.String@)">
            <summary>
            Tries to get the custom data by the key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>The custom data.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.SetCustomData(System.String,System.String)">
            <summary>
            Sets the custom data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SceneEditingModule">
            <summary>
            Editing scenes module. Manages scene objects selection and editing modes.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="F:FlaxEditor.Modules.SceneEditingModule.Selection">
            <summary>
            The selected objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SceneEditingModule.SelectionCount">
            <summary>
            Gets the amount of the selected objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SceneEditingModule.HasSthSelected">
            <summary>
            Gets a value indicating whether any object is selected.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SceneEditingModule.SelectionChanged">
            <summary>
            Occurs when selected objects collection gets changed.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SceneEditingModule.SpawnBegin">
            <summary>
            Occurs before spawning actor to game action.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SceneEditingModule.SpawnEnd">
            <summary>
            Occurs after spawning actor to game action.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SceneEditingModule.SelectionDeleteBegin">
            <summary>
            Occurs before selection delete action.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SceneEditingModule.SelectionDeleteEnd">
            <summary>
            Occurs after selection delete action.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.SelectAllScenes">
            <summary>
            Selects all scenes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Select(FlaxEngine.Actor)">
            <summary>
            Selects the specified actor (finds it's scene graph node).
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Select(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode},System.Boolean)">
            <summary>
            Selects the specified collection of objects.
            </summary>
            <param name="selection">The selection.</param>
            <param name="additive">if set to <c>true</c> will use additive mode, otherwise will clear previous selection.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Select(FlaxEditor.SceneGraph.SceneGraphNode[],System.Boolean)">
            <summary>
            Selects the specified collection of objects.
            </summary>
            <param name="selection">The selection.</param>
            <param name="additive">if set to <c>true</c> will use additive mode, otherwise will clear previous selection.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Select(FlaxEditor.SceneGraph.SceneGraphNode,System.Boolean)">
            <summary>
            Selects the specified object.
            </summary>
            <param name="selection">The selection.</param>
            <param name="additive">if set to <c>true</c> will use additive mode, otherwise will clear previous selection.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Deselect(FlaxEditor.SceneGraph.SceneGraphNode)">
            <summary>
            Deselects given object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Deselect">
            <summary>
            Clears selected objects collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Spawn(FlaxEngine.Actor,FlaxEngine.Actor)">
            <summary>
            Spawns the specified actor to the game (with undo).
            </summary>
            <param name="actor">The actor.</param>
            <param name="parent">The parent actor. Set null as default.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Delete">
            <summary>
            Deletes the selected objects. Supports undo/redo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Copy">
            <summary>
            Copies the selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Paste">
            <summary>
            Pastes the copied objects. Supports undo/redo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Paste(FlaxEngine.Actor)">
            <summary>
            Pastes the copied objects. Supports undo/redo.
            </summary>
            <param name="pasteTargetActor">The target actor to paste copied data.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Cut">
            <summary>
            Cuts the selected objects. Supports undo/redo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Duplicate">
            <summary>
            Duplicates the selected objects. Supports undo/redo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.OnSelectionChanged">
            <summary>
            Called when selection gets changed. Invokes the other events and updates editor. Call it when you manually modify selected objects collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.OnInit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SceneModule">
            <summary>
            Scenes and actors management module.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="T:FlaxEditor.Modules.SceneModule.ScenesRootNode">
            <summary>
            The root node for the scene graph created for the loaded scenes and actors hierarchy.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.RootNode" />
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.ScenesRootNode.Spawn(FlaxEngine.Actor,FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Modules.SceneModule.ScenesRootNode.Undo">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Modules.SceneModule.Root">
            <summary>
            The root tree node for the whole scene graph.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SceneModule.ActorRemoved">
            <summary>
            Occurs when actor gets removed. Editor and all submodules should remove references to that actor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.MarkSceneEdited(FlaxEngine.Scene)">
            <summary>
            Marks the scene as modified.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.MarkSceneEdited(FlaxEditor.SceneGraph.Actors.SceneNode)">
            <summary>
            Marks the scene as modified.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.MarkSceneEdited(System.Collections.Generic.IEnumerable{FlaxEngine.Scene})">
            <summary>
            Marks the scenes as modified.
            </summary>
            <param name="scenes">The scenes.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.MarkAllScenesEdited">
            <summary>
            Marks all the scenes as modified.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.IsEdited(FlaxEngine.Scene)">
            <summary>
            Determines whether the specified scene is edited.
            </summary>
            <param name="scene">The scene.</param>
            <returns>
              <c>true</c> if the specified scene is edited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.IsEdited">
            <summary>
            Determines whether any scene is edited.
            </summary>
            <returns>
              <c>true</c> if any scene is edited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.IsEverySceneEdited">
            <summary>
            Determines whether every scene is edited.
            </summary>
            <returns>
              <c>true</c> if every scene is edited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.CreateSceneFile(System.String)">
            <summary>
            Creates the new scene file. The default scene contains set of simple actors.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.SaveScene(FlaxEngine.Scene)">
            <summary>
            Saves scene (async).
            </summary>
            <param name="scene">Scene to save.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.SaveScene(FlaxEditor.SceneGraph.Actors.SceneNode)">
            <summary>
            Saves scene (async).
            </summary>
            <param name="scene">Scene to save.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.SaveScenes">
            <summary>
            Saves all open scenes (async).
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.OpenScene(System.Guid,System.Boolean)">
            <summary>
            Opens scene (async).
            </summary>
            <param name="sceneId">Scene ID</param>
            <param name="additive">True if don't close opened scenes and just add new scene to them, otherwise will release current scenes and load single one.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.CloseScene(FlaxEngine.Scene)">
            <summary>
            Closes scene (async).
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.CloseAllScenes">
            <summary>
            Closes all opened scene (async).
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.CheckSaveBeforeClose(FlaxEditor.SceneGraph.Actors.SceneNode)">
            <summary>
            Show save before scene load/unload action.
            </summary>
            <param name="scene">The scene that will be closed.</param>
            <returns>True if action has been canceled, otherwise false</returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.CheckSaveBeforeClose">
            <summary>
            Show save before scene load/unload action.
            </summary>
            <returns>True if action has been canceled, otherwise false</returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.ClearRefsToSceneObjects(System.Boolean)">
            <summary>
            Clears references to the scene objects by the editor. Deselects objects.
            </summary>
            <param name="fullCleanup">True if cleanup all data (including serialized and cached data). Otherwise will just clear living references to the scene objects.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.GetActorNode(FlaxEngine.Actor)">
            <summary>
            Gets the actor node.
            </summary>
            <param name="actor">The actor.</param>
            <returns>Found actor node or null if missing. Actor may not be linked to the scene tree so node won't be found in that case.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.GetActorNode(System.Guid)">
            <summary>
            Gets the actor node.
            </summary>
            <param name="actorId">The actor id.</param>
            <returns>Found actor node or null if missing. Actor may not be linked to the scene tree so node won't be found in that case.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.ExecuteOnGraph(FlaxEditor.SceneGraph.SceneGraphTools.GraphExecuteCallbackDelegate)">
            <summary>
            Executes the custom action on the graph nodes.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SimulationModule">
            <summary>
            Manages play in-editor feature (game simulation).
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="P:FlaxEditor.Modules.SimulationModule.ShouldPlayModeStartWithStep">
            <summary>
            Checks if play mode should start only with single frame update and then enter step mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SimulationModule.IsPlayModeRequested">
            <summary>
            Returns true if play mode has been requested.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestStartPlay">
            <summary>
            Requests start playing in editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestStopPlay">
            <summary>
            Requests stop playing in editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestPlayOrStopPlay">
            <summary>
            Requests the playing start or stop in editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestResumeOrPause">
            <summary>
            Requests the playing mode resume or pause if already running.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestPausePlay">
            <summary>
            Requests pause in playing.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestResumePlay">
            <summary>
            Request resume in playing.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestPlayOneFrame">
            <summary>
            Requests playing single frame in advance.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.OnPlayBegin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.OnPlayEnd">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.OnUpdate">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SourceCodeEditing.CachedCustomAnimGraphNodesCollection">
            <summary>
            Cached collection of custom nodes types including cached node archetypes for each one of them.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection" />
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.CachedCustomAnimGraphNodesCollection.HasTypeFromGameScripts">
            <summary>
            Gets a value indicating whether this instance has any type from game scripts (or editor scripts) - those can be reloaded at runtime so prevent crashes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedCustomAnimGraphNodesCollection.#ctor(System.Int32,System.Type,System.Func{System.Type,System.Boolean},System.Func{System.Reflection.Assembly,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedCustomAnimGraphNodesCollection.GetArchetypes">
            <summary>
            Gets the cached archetypes.
            </summary>
            <returns>The archetypes collection.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedCustomAnimGraphNodesCollection.Search">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedCustomAnimGraphNodesCollection.ClearTypes">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection">
            <summary>
            Cached types collection container.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection._type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection._list">
            <summary>
            The list.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection.#ctor(System.Int32,System.Type,System.Func{System.Type,System.Boolean},System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection"/> class.
            </summary>
            <param name="capacity">The initial collection capacity.</param>
            <param name="type">The type of things to find. It can be attribute to find all classes with the given attribute defined.</param>
            <param name="checkFunc">Additional callback used to check if the given type is valid. Returns true if add type, otherwise false.</param>
            <param name="checkAssembly">Additional callback used to check if the given assembly is valid. Returns true if search for types in the given assembly, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection.Get">
            <summary>
            Gets all the types from the all loaded assemblies (including project scripts and scripts from the plugins).
            </summary>
            <returns>The types collection (readonly).</returns>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection.Search">
            <summary>
            Searches for the types and fills with data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection.ClearTypes">
            <summary>
            Clears the types.
            </summary>
        </member>
        <member name="T:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule">
            <summary>
            Source code editing module.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.Editors">
            <summary>
            Gets the source code editors registered for usage in editor.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.EditorAdded">
            <summary>
            Occurs when source code editor gets added.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.EditorRemoved">
            <summary>
            Occurs when source code editor gets removed.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.SelectedEditorChanged">
            <summary>
            Occurs when selected source code editor gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.SelectedEditor">
            <summary>
            Gets or sets the selected editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.All">
            <summary>
            The all types collection from all assemblies (excluding C# system libraries).
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.Actors">
            <summary>
            The actors collection.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.Scripts">
            <summary>
            The scripts collection.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.Controls">
            <summary>
            The control types collection.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.AnimGraphNodes">
            <summary>
            The Animation Graph custom nodes collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.AddEditor(FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor)">
            <summary>
            Adds the editor to the collection.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.RemoveEditor(FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor)">
            <summary>
            Removes the editor from the collection.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.OpenSolution">
            <summary>
            Opens the solution file using the selected selected code editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.OpenFile(System.String,System.Int32)">
            <summary>
            Opens the file using the selected code editor.
            </summary>
            <param name="path">The file path to open.</param>
            <param name="line">The line number to navigate to. Use 0 to not use it.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.OnEndInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.OnExit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.ClearTypes">
            <summary>
            Clears all the cached types.
            </summary>
        </member>
        <member name="T:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor">
            <summary>
            Default source code editor. Picks the best available editor on the current the platform.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor" />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.GenerateProjectCustomArgs">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OpenSolution">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OpenFile(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OnFileAdded(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OnSelected(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OnDeselected(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OnAdded(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OnRemoved(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor">
            <summary>
            In-build source code editor.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor" />
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.Type">
            <summary>
            The type of the editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.#ctor(FlaxEditor.CodeEditorTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.GenerateProjectCustomArgs">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OpenSolution">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OpenFile(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OnFileAdded(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OnSelected(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OnDeselected(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OnAdded(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OnRemoved(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor">
            <summary>
            Interface for source code editing plugins.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.Name">
            <summary>
            Gets the editor name. Used to show in the UI.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.GenerateProjectCustomArgs">
            <summary>
            Gets the custom arguments for the Flax.Build tool to add when generating project files for this code editor. Can be used to pick a different project files generator. Empty by default.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OpenSolution">
            <summary>
            Opens the solution file (source code project file).
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OpenFile(System.String,System.Int32)">
            <summary>
            Opens the source file.
            </summary>
            <param name="path">The file path to open.</param>
            <param name="line">The line number to navigate to. Use 0 to not use it.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OnFileAdded(System.String)">
            <summary>
            Called when source file gets added to the workspace. Can be used to automatically include new files into the project files.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OnSelected(FlaxEditor.Editor)">
            <summary>
            Called when editor gets selected.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OnDeselected(FlaxEditor.Editor)">
            <summary>
            Called when editor gets deselected.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OnAdded(FlaxEditor.Editor)">
            <summary>
            Called when editor gets added.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OnRemoved(FlaxEditor.Editor)">
            <summary>
            Called when editor gets removed.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="T:FlaxEditor.Modules.UIModule">
            <summary>
            Manages Editor UI. Especially main window UI.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="F:FlaxEditor.Modules.UIModule.MainMenu">
            <summary>
            The main menu control.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.UIModule.ToolStrip">
            <summary>
            The tool strip control.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.UIModule.MasterPanel">
            <summary>
            The master dock panel for all Editor windows.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.UIModule.StatusBar">
            <summary>
            The status strip control.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.UIModule.VisjectSurfaceBackground">
            <summary>
            The visject surface background texture. Cached to be used globally.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuFile">
            <summary>
            Gets the File menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuEdit">
            <summary>
            Gets the Edit menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuScene">
            <summary>
            Gets the Scene menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuGame">
            <summary>
            Gets the Game menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuTools">
            <summary>
            Gets the Tools menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuWindow">
            <summary>
            Gets the Window menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuHelp">
            <summary>
            Gets the Help menu.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.UncheckPauseButton">
            <summary>
            Unchecks toolstrip pause button.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.IsPauseButtonChecked">
            <summary>
            Checks if toolstrip pause button is being checked.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.UpdateToolstrip">
            <summary>
            Updates the toolstrip.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.AddMenuButton(System.String,System.String,System.Action)">
            <summary>
            Adds the menu button.
            </summary>
            <param name="group">The group.</param>
            <param name="text">The text.</param>
            <param name="clicked">The button clicked event.</param>
            <returns>The created menu item.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.UpdateStatusBar">
            <summary>
            Updates the status bar.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.CustomWindowBorderControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.OnEndInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.WindowsModule">
            <summary>
            Manages Editor windows and popups.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="P:FlaxEditor.Modules.WindowsModule.MainWindow">
            <summary>
            The main editor window.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.WindowsModule.MainWindowClosing">
            <summary>
            Occurs when main editor window is being closed.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.ContentWin">
            <summary>
            The content window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.EditWin">
            <summary>
            The edit game window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.GameWin">
            <summary>
            The game window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.PropertiesWin">
            <summary>
            The properties window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.SceneWin">
            <summary>
            The scene tree window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.DebugLogWin">
            <summary>
            The debug log window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.OutputLogWin">
            <summary>
            The output log window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.ToolboxWin">
            <summary>
            The toolbox window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.GraphicsQualityWin">
            <summary>
            The graphics quality window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.GameCookerWin">
            <summary>
            The game cooker window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.ProfilerWin">
            <summary>
            The profiler window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.EditorOptionsWin">
            <summary>
            The editor options window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.PluginsWin">
            <summary>
            The plugins manager window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.Windows">
            <summary>
            List with all created editor windows.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.TakeScreenshot">
            <summary>
            Takes the screenshot of the current viewport.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.UpdateWindowTitle">
            <summary>
            Updates the main window title.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.FlashMainWindow">
            <summary>
            Flash main editor window to catch user attention
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.FindEditor(FlaxEditor.Content.ContentItem)">
            <summary>
            Finds the first window that is using given element to view/edit it.
            </summary>
            <param name="item">The item.</param>
            <returns>Editor window or null if cannot find any window.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.CloseAllEditors(FlaxEditor.Content.ContentItem)">
            <summary>
            Closes all windows that are using given element to view/edit it.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.SaveCurrentLayout">
            <summary>
            Saves the current workspace layout.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.LoadDefaultLayout">
            <summary>
            Loads the default workspace layout for the current editor version.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.LoadLayout(System.String)">
            <summary>
            Loads the layout from the file.
            </summary>
            <param name="path">The layout file path.</param>
            <returns>True if layout has been loaded otherwise if failed (e.g. missing file).</returns>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.LayoutNameDialog.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.SaveLayout">
            <summary>
            Asks user for the layout name and saves the current windows layout in the current project cache folder.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.SaveLayout(System.String)">
            <summary>
            Saves the layout to the file.
            </summary>
            <param name="path">The layout file path.</param>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.GetWindow(System.String)">
            <summary>
            Gets <see cref="T:FlaxEditor.Windows.EditorWindow"/> that is represented by the given serialized typename. Used to restore workspace layout.
            </summary>
            <param name="typename">The typename.</param>
            <returns>The window or null if failed.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.OnEndInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.OnExit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.OnPlayBegin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.OnPlayEnd">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Options.Editor`1">
            <summary>
            Editor options editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Options.Editor`1.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Options.EditorOptions">
            <summary>
            Editor options data container object.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.EditorOptions.General">
            <summary>
            The general options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.EditorOptions.Interface">
            <summary>
            The interface options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.EditorOptions.Input">
            <summary>
            The input options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.EditorOptions.Viewport">
            <summary>
            The viewport options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.EditorOptions.Visual">
            <summary>
            The visual options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.EditorOptions.SourceCode">
            <summary>
            The source code options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.EditorOptions.Theme">
            <summary>
            The theme options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.EditorOptions.CustomSettings">
            <summary>
            The custom settings collection. Can be used by the editor plugins to provide customization for options. Key is a settings tab name and the value is the serialized settings object (for a custom editor).
            </summary>
        </member>
        <member name="M:FlaxEditor.Options.EditorOptions.GetCustomSettings``1(System.String)">
            <summary>
            Tries to load the custom settings object by the given key. If settings are missing it creates a new default object of this type.
            </summary>
            <typeparam name="T">The settings object type.</typeparam>
            <param name="name">The name.</param>
            <returns>The loaded settings object</returns>
        </member>
        <member name="T:FlaxEditor.Options.GeneralOptions">
            <summary>
            General editor options data container.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.GeneralOptions.StartupSceneModes">
            <summary>
            The editor startup scene modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.GeneralOptions.StartupSceneModes.None">
            <summary>
            Don't open scene on startup.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.GeneralOptions.StartupSceneModes.ProjectDefault">
            <summary>
            The project default scene.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.GeneralOptions.StartupSceneModes.LastOpened">
            <summary>
            The last opened scene in the editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.StartupSceneMode">
            <summary>
            Gets or sets the scene to load on editor startup.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.UndoActionsCapacity">
            <summary>
            Gets or sets a limit for the editor undo actions. Higher values may increase memory usage but also improve changes rollback history length.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.EditorFPS">
            <summary>
            Gets or sets a limit for the editor draw/update frames per second rate (FPS). Use higher values if you need more responsive interface or lower values to use less device power. Value 0 disables any limits.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoReloadScriptsOnMainWindowFocus">
            <summary>
            Gets or sets a value indicating whether perform automatic scripts reload on main window focus.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.ForceScriptCompilationOnStartup">
            <summary>
            Gets or sets a value indicating whether automatically compile game scripts before starting the editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoRebuildCSG">
            <summary>
            Gets or sets a value indicating whether perform automatic CSG rebuild on brush change.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoRebuildCSGTimeoutMs">
            <summary>
            Gets or sets the auto CSG rebuilding timeout (in milliseconds). Use lower value for more frequent and responsive updates but higher complexity.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoRebuildNavMesh">
            <summary>
            Gets or sets a value indicating whether perform automatic NavMesh rebuild on scene change.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoRebuildNavMeshTimeoutMs">
            <summary>
            Gets or sets the auto CSG rebuilding timeout (in milliseconds). Use lower value for more frequent and responsive updates but higher complexity.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.EnableAutoSave">
            <summary>
            Gets or sets a value indicating whether enable auto saves.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoSaveFrequency">
            <summary>
            Gets or sets a value indicating auto saves interval (in minutes).
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoSaveScenes">
            <summary>
            Gets or sets a value indicating whether enable auto saves for scenes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoSaveContent">
            <summary>
            Gets or sets a value indicating whether enable auto saves for content.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.EnableEditorAnalytics">
            <summary>
            Gets or sets a value indicating whether enable editor analytics service.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.InputBinding">
            <summary>
            The input binding container.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.InputBinding.Key">
            <summary>
            The key to bind.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.InputBinding.Modifier1">
            <summary>
            The first modifier (<see cref="F:FlaxEngine.KeyboardKeys.None"/> if not used).
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.InputBinding.Modifier2">
            <summary>
            The second modifier (<see cref="F:FlaxEngine.KeyboardKeys.None"/> if not used).
            </summary>
        </member>
        <member name="M:FlaxEditor.Options.InputBinding.#ctor(FlaxEngine.KeyboardKeys)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Options.InputBinding"/> struct.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:FlaxEditor.Options.InputBinding.#ctor(FlaxEngine.KeyboardKeys,FlaxEngine.KeyboardKeys)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Options.InputBinding"/> struct.
            </summary>
            <param name="key">The key.</param>
            <param name="modifier1">The first modifier.</param>
        </member>
        <member name="M:FlaxEditor.Options.InputBinding.#ctor(FlaxEngine.KeyboardKeys,FlaxEngine.KeyboardKeys,FlaxEngine.KeyboardKeys)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Options.InputBinding"/> struct.
            </summary>
            <param name="key">The key.</param>
            <param name="modifier1">The first modifier.</param>
            <param name="modifier2">The second modifier.</param>
        </member>
        <member name="M:FlaxEditor.Options.InputBinding.Parse(System.String,FlaxEngine.KeyboardKeys@)">
            <summary>
            Parses the specified key text value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result (valid only if parsing succeed).</param>
            <returns>True if parsing succeed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Options.InputBinding.ToString(FlaxEngine.KeyboardKeys)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the key enum (for UI).
            </summary>
            <param name="key">The key.</param>
            <returns>A <see cref="T:System.String" /> that represents the key.</returns>
        </member>
        <member name="M:FlaxEditor.Options.InputBinding.TryParse(System.String,FlaxEditor.Options.InputBinding@)">
            <summary>
            Tries the parse the input text value to the <see cref="T:FlaxEditor.Options.InputBinding"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result value (valid only if method returns true).</param>
            <returns>True if parsing succeed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Options.InputBinding.Process(FlaxEngine.GUI.Control)">
            <summary>
            Processes this input binding to check if state matches.
            </summary>
            <param name="control">The input providing control.</param>
            <returns>True if input has been processed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Options.InputBinding.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.InputBindingConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.InputBindingConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.InputBindingConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.InputBindingEditor.InputBindingBox.OnEditBegin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.InputBindingEditor.InputBindingBox.OnCharInput(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.InputBindingEditor.InputBindingBox.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Options.InputBindingEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.InputBindingEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.InputBindingEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Options.InputActionsContainer">
            <summary>
            The input actions processing helper that handles input bindings configuration layer.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.InputActionsContainer.Binding">
            <summary>
            The binding.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.InputActionsContainer.Binding.Binder">
            <summary>
            The binded options callback.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.InputActionsContainer.Binding.Callback">
            <summary>
            The action callback.
            </summary>
        </member>
        <member name="M:FlaxEditor.Options.InputActionsContainer.Binding.#ctor(System.Func{FlaxEditor.Options.InputOptions,FlaxEditor.Options.InputBinding},System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Options.InputActionsContainer.Binding"/> struct.
            </summary>
            <param name="binder">The input binding options getter (can read from editor options or use constant binding).</param>
            <param name="callback">The callback to invoke on user input.</param>
        </member>
        <member name="M:FlaxEditor.Options.InputActionsContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Options.InputActionsContainer"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Options.InputActionsContainer.#ctor(FlaxEditor.Options.InputActionsContainer.Binding[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Options.InputActionsContainer"/> class.
            </summary>
            <param name="bindings">The input bindings collection.</param>
        </member>
        <member name="M:FlaxEditor.Options.InputActionsContainer.Add(FlaxEditor.Options.InputActionsContainer.Binding)">
            <summary>
            Adds the specified binding.
            </summary>
            <param name="binding">The input binding.</param>
        </member>
        <member name="M:FlaxEditor.Options.InputActionsContainer.Add(System.Func{FlaxEditor.Options.InputOptions,FlaxEditor.Options.InputBinding},System.Action)">
            <summary>
            Adds the specified binding.
            </summary>
            <param name="binder">The input binding options getter (can read from editor options or use constant binding).</param>
            <param name="callback">The callback to invoke on user input.</param>
        </member>
        <member name="M:FlaxEditor.Options.InputActionsContainer.Add(FlaxEditor.Options.InputActionsContainer.Binding[])">
            <summary>
            Adds the specified bindings.
            </summary>
            <param name="bindings">The input bindings collection.</param>
        </member>
        <member name="M:FlaxEditor.Options.InputActionsContainer.Process(FlaxEditor.Editor,FlaxEngine.GUI.Control,FlaxEngine.KeyboardKeys)">
            <summary>
            Processes the specified key input and tries to invoke first matching callback for the current user input state.
            </summary>
            <param name="editor">The editor instance.</param>
            <param name="control">The input providing control.</param>
            <param name="key">The input key.</param>
            <returns>True if event has been handled, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Options.InputOptions">
            <summary>
            Input editor options data container.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.InterfaceOptions">
            <summary>
            Editor interface options data container.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.InterfaceOptions.TimestampsFormats">
            <summary>
            The log timestamp modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.InterfaceOptions.TimestampsFormats.None">
            <summary>
            No prefix.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.InterfaceOptions.TimestampsFormats.Utc">
            <summary>
            The UTC time format.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.InterfaceOptions.TimestampsFormats.LocalTime">
            <summary>
            The local time format.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.InterfaceOptions.TimestampsFormats.TimeSinceStartup">
            <summary>
            The time since startup (in seconds).
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.InterfaceScale">
            <summary>
            Gets or sets the Editor User Interface scale. Applied to all UI elements, windows and text. Can be used to scale the interface up on a bigger display. Editor restart required.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.UseNativeWindowSystem">
            <summary>
            Gets or sets a value indicating whether use native window title bar. Editor restart required.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.ShowSelectedCameraPreview">
            <summary>
            Gets or sets a value indicating whether show selected camera preview in the editor window.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.CenterMouseOnGameWinFocus">
            <summary>
            Gets or sets a value indicating whether center mouse position on window focus in play mode. Helps when working with games that lock mouse cursor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.DebugLogTimestampsFormat">
            <summary>
            Gets or sets the timestamps prefix mode for debug log messages.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.OutputLogTimestampsFormat">
            <summary>
            Gets or sets the timestamps prefix mode for output log messages.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.OutputLogShowLogType">
            <summary>
            Gets or sets the timestamps prefix mode for output log messages.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.OutputLogTextFont">
            <summary>
            Gets or sets the output log text font.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.OutputLogTextColor">
            <summary>
            Gets or sets the output log text color.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.OutputLogTextShadowColor">
            <summary>
            Gets or sets the output log text shadow color.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.OutputLogTextShadowOffset">
            <summary>
            Gets or sets the output log text shadow offset. Set to 0 to disable this feature.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.FocusGameWinOnPlay">
            <summary>
            Gets or sets a value indicating whether auto-focus game window on play mode start.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.TitleFont">
            <summary>
            Gets or sets the title font for editor UI.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.LargeFont">
            <summary>
            Gets or sets the large font for editor UI.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.MediumFont">
            <summary>
            Gets or sets the medium font for editor UI.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.SmallFont">
            <summary>
            Gets or sets the small font for editor UI.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.OptionsModule">
            <summary>
            Editor options management module.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="F:FlaxEditor.Options.OptionsModule.Options">
            <summary>
            The current editor options. Don't modify the values directly (local session state lifetime), use <see cref="M:FlaxEditor.Options.OptionsModule.Apply(FlaxEditor.Options.EditorOptions)"/>.
            </summary>
        </member>
        <member name="E:FlaxEditor.Options.OptionsModule.OptionsChanged">
            <summary>
            Occurs when editor options get changed (reloaded or applied).
            </summary>
        </member>
        <member name="E:FlaxEditor.Options.OptionsModule.CustomSettingsChanged">
            <summary>
            Occurs when editor options get changed (reloaded or applied).
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.OptionsModule.CreateCustomSettingsDelegate">
            <summary>
            The custom settings factory delegate. It should return the default settings object for a given options content.
            </summary>
            <returns>The custom settings object.</returns>
        </member>
        <member name="P:FlaxEditor.Options.OptionsModule.CustomSettings">
            <summary>
            Gets the custom settings factories. Each entry defines the custom settings type identified by teh given key name. The value si a factory function that returns the default options fpr a given type.
            </summary>
        </member>
        <member name="M:FlaxEditor.Options.OptionsModule.AddCustomSettings(System.String,FlaxEditor.Options.OptionsModule.CreateCustomSettingsDelegate)">
            <summary>
            Adds the custom settings factory.
            </summary>
            <param name="name">The name.</param>
            <param name="factory">The factory function.</param>
        </member>
        <member name="M:FlaxEditor.Options.OptionsModule.RemoveCustomSettings(System.String)">
            <summary>
            Removes the custom settings factory.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:FlaxEditor.Options.OptionsModule.Load">
            <summary>
            Loads the settings from the file.
            </summary>
        </member>
        <member name="M:FlaxEditor.Options.OptionsModule.Apply(FlaxEditor.Options.EditorOptions)">
            <summary>
            Applies the specified options and updates the dependant services.
            </summary>
            <param name="options">The new options.</param>
        </member>
        <member name="M:FlaxEditor.Options.OptionsModule.CreateDefaultStyle">
            <summary>
            Creates the default style.
            </summary>
            <returns>The style object.</returns>
        </member>
        <member name="M:FlaxEditor.Options.OptionsModule.OnInit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Options.SourceCodeOptions">
            <summary>
            Source code options data container.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.SourceCodeOptions.SourceCodeEditorEditor">
            <summary>
            Editor for the editing of the editable SourceCodeEditor property.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="P:FlaxEditor.Options.SourceCodeOptions.SourceCodeEditorEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.SourceCodeOptions.SourceCodeEditorEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.SourceCodeOptions.SourceCodeEditorEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Options.SourceCodeOptions.SourceCodeEditor">
            <summary>
            Gets or sets the source code editing IDE to use for project and source files accessing.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.ThemeOptions">
            <summary>
            Theme options data container object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Options.ThemeOptions.ThemeOptionsEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.ThemeOptions.ThemeOptionsEditor.Deinitialize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.ThemeOptions.ThemeOptionsEditor.OnDirty(FlaxEditor.CustomEditors.CustomEditor,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Options.ThemeOptions.StyleOptionsEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.ThemeOptions.StyleOptionsEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.ThemeOptions.StyleOptionsEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Options.ThemeOptions.SelectedStyle">
            <summary>
            Currently selected style.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.ThemeOptions.Styles">
            <summary>
            All available styles.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.ViewportOptions">
            <summary>
            Editor viewport options data container.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.ViewportOptions.MouseSensitivity">
            <summary>
            Gets or sets the mouse movement sensitivity scale applied when using the viewport camera.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.ViewportOptions.DefaultMovementSpeed">
            <summary>
            Gets or sets the default movement speed for the viewport camera (must match the dropdown menu values in the viewport).
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.ViewportOptions.DefaultNearPlane">
            <summary>
            Gets or sets the default near clipping plane distance for the viewport camera.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.ViewportOptions.DefaultFarPlane">
            <summary>
            Gets or sets the default far clipping plane distance for the viewport camera.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.ViewportOptions.DefaultFieldOfView">
            <summary>
            Gets or sets the default field of view angle (in degrees) for the viewport camera.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.VisualOptions">
            <summary>
            Visual editor options data container.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.VisualOptions.ShowSelectionOutline">
            <summary>
            Gets or sets the selection outline enable flag.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.VisualOptions.SelectionOutlineColor0">
            <summary>
            Gets or sets the first outline color.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.VisualOptions.SelectionOutlineColor1">
            <summary>
            Gets or sets the second outline color.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.VisualOptions.GizmoSize">
            <summary>
            Gets or sets the transform gizmo size.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.VisualOptions.HighlightColor">
            <summary>
            Gets or sets the color used to highlight selected meshes and CSG surfaces.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.VisualOptions.EnableMSAAForDebugDraw">
            <summary>
            Gets or sets a value indicating whether enable MSAA for DebugDraw primitives rendering. Helps with pixel aliasing but reduces performance.
            </summary>
        </member>
        <member name="T:FlaxEditor.EditorPlugin">
            <summary>
            Base class for all plugins used in Editor.
            </summary>
            <remarks>
            Plugins should have a public and parameter-less constructor.
            </remarks>
            <seealso cref="T:FlaxEngine.Plugin" />
        </member>
        <member name="P:FlaxEditor.EditorPlugin.GamePluginType">
            <summary>
            Gets the type of the <see cref="T:FlaxEngine.GamePlugin"/> that is related to this plugin. Some plugins may be used only in editor while others want to gave a runtime representation. Use this property to link the related game plugin.
            </summary>
        </member>
        <member name="P:FlaxEditor.EditorPlugin.Editor">
            <summary>
            Gets the editor instance. Use it to extend the editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.EditorPlugin.Initialize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.EditorPlugin.InitializeEditor">
            <summary>
            Initialization method called when this plugin is loaded and the Editor is after initialization. Use this method to add custom editor functionalities or override the existing ones.
            </summary>
        </member>
        <member name="T:FlaxEditor.PluginUtils">
            <summary>
            Helper utilities for the plugins management in Editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.PluginUtils.TryGetPluginIcon(FlaxEngine.Plugin)">
            <summary>
            Tries the get plugin icon (plugin may not have it).
            </summary>
            <param name="plugin">The plugin.</param>
            <returns>The found texture asset to be used as a icon, or null if missing or invalid.</returns>
        </member>
        <member name="M:FlaxEditor.PluginUtils.GetPluginToExport(FlaxEngine.GamePlugin@,FlaxEditor.EditorPlugin@,System.String@)">
            <summary>
            Gets the plugin to export (editor or game or both). Searches the game scripts assemblies only. Performs validation.
            </summary>
            <param name="gamePlugin">The game plugin.</param>
            <param name="editorPlugin">The editor plugin.</param>
            <param name="errorMsg">If searching fails, then it contains a result message with error information. Can be used to inform user about the actual problem.</param>
            <returns>True if found plugin is valid, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.BakeEnvProbesProgress">
            <summary>
            Environment probes baking progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.BakeEnvProbesProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.BakeEnvProbesProgress"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.BakeLightmapsProgress">
            <summary>
            Static lightmaps baking progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.BakeLightmapsProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.BakeLightmapsProgress"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.BuildingGameProgress">
            <summary>
            Game building progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.BuildingGameProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.BuildingGameProgress"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.CodeEditorOpenProgress">
            <summary>
            Async code editor opening progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.CodeEditorOpenProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.CodeEditorOpenProgress"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.CodeEditorOpenProgress.OnStart">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.CompileScriptsProgress">
            <summary>
            Scripts compilation progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.CompileScriptsProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.CompileScriptsProgress"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.CompileScriptsProgress.OnStart">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.GenerateScriptsProjectFilesProgress">
            <summary>
            Async scripts project files generation progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.GenerateScriptsProjectFilesProgress.OnStart">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.GenerateScriptsProjectFilesProgress.RunAsync">
            <summary>
            Runs the projects generation (as async task).
            </summary>
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.GenerateScriptsProjectFilesProgress.Run">
            <summary>
            Runs the projects generation.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.ImportAssetsProgress">
            <summary>
            Importing assets progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.ImportAssetsProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.ImportAssetsProgress"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.NavMeshBuildingProgress">
            <summary>
            Navigation mesh building progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.NavMeshBuildingProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.NavMeshBuildingProgress"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.ProgressHandler">
            <summary>
            Base class for all editor handlers used to report actions progress to the user.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.ProgressHandler.ProgressDelegate">
            <summary>
            Progress handler events delegate.
            </summary>
            <param name="handler">The calling handler.</param>
        </member>
        <member name="P:FlaxEditor.Progress.ProgressHandler.IsActive">
            <summary>
            Gets a value indicating whether this handler is active.
            </summary>
        </member>
        <member name="P:FlaxEditor.Progress.ProgressHandler.Progress">
            <summary>
            Gets the current progress (normalized to range [0;1]).
            </summary>
        </member>
        <member name="P:FlaxEditor.Progress.ProgressHandler.InfoText">
            <summary>
            Gets the information text.
            </summary>
        </member>
        <member name="E:FlaxEditor.Progress.ProgressHandler.ProgressStart">
            <summary>
            Occurs when progress starts (becomes active).
            </summary>
        </member>
        <member name="E:FlaxEditor.Progress.ProgressHandler.ProgressChanged">
            <summary>
            Occurs when progress gets changed (or info text changes).
            </summary>
        </member>
        <member name="E:FlaxEditor.Progress.ProgressHandler.ProgressEnd">
            <summary>
            Occurs when progress end (becomes inactive).
            </summary>
        </member>
        <member name="P:FlaxEditor.Progress.ProgressHandler.CanBeCanceled">
            <summary>
            Gets a value indicating whether this handler action can be cancelled.
            </summary>
        </member>
        <member name="M:FlaxEditor.Progress.ProgressHandler.Cancel">
            <summary>
            Cancels this progress action.
            </summary>
        </member>
        <member name="M:FlaxEditor.Progress.ProgressHandler.OnStart">
            <summary>
            Called when progress action starts.
            </summary>
        </member>
        <member name="M:FlaxEditor.Progress.ProgressHandler.OnUpdate(System.Single,System.String)">
            <summary>
            Called when progress action gets updated (changed nfo text or progress value).
            </summary>
            <param name="progress">The progress (normalized to range [0;1]).</param>
            <param name="infoText">The information text.</param>
        </member>
        <member name="M:FlaxEditor.Progress.ProgressHandler.OnEnd">
            <summary>
            Called when progress action ends.
            </summary>
        </member>
        <member name="T:FlaxEditor.ProjectInfo">
            <summary>
            Contains information about Flax project.
            </summary>
        </member>
        <member name="T:FlaxEditor.ProjectInfo.Reference">
            <summary>
            The project reference.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.Reference.Name">
            <summary>
            The referenced project name.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.Reference.Project">
            <summary>
            The referenced project.
            </summary>
        </member>
        <member name="M:FlaxEditor.ProjectInfo.Reference.ToString">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.ProjectInfo.Name">
            <summary>
            The project name.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.ProjectPath">
            <summary>
            The project file path.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.ProjectFolderPath">
            <summary>
            The project root folder path.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.Version">
            <summary>
            The project version.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.Company">
            <summary>
            The project publisher company.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.Copyright">
            <summary>
            The project copyright note.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.GameTarget">
            <summary>
            The name of the build target to use for the game building (final, cooked game code).
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.EditorTarget">
            <summary>
            The name of the build target to use for the game in editor building (editor game code).
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.References">
            <summary>
            The project references.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.DefaultScene">
            <summary>
            The default scene asset identifier to open on project startup.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.DefaultSceneSpawn">
            <summary>
            The default scene spawn point (position and view direction).
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.MinEngineVersion">
            <summary>
            The minimum version supported by this project.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.EngineNickname">
            <summary>
            The user-friendly nickname of the engine installation to use when opening the project. Can be used to open game project with a custom engine distributed for team members. This value must be the same in engine and game projects to be paired.
            </summary>
        </member>
        <member name="M:FlaxEditor.ProjectInfo.GetAllProjects">
            <summary>
            Gets all projects including this project, it's references and their references (any deep level of references).
            </summary>
            <returns>The collection of projects.</returns>
        </member>
        <member name="M:FlaxEditor.ProjectInfo.Save">
            <summary>
            Saves the project file.
            </summary>
        </member>
        <member name="M:FlaxEditor.ProjectInfo.Load(System.String)">
            <summary>
            Loads the project from the specified file.
            </summary>
            <param name="path">The path.</param>
            <returns>The loaded project.</returns>
        </member>
        <member name="M:FlaxEditor.ProjectInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.ActorChildNode">
            <summary>
            Helper base class for actor sub nodes (eg. link points, child parts).
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.SceneGraphNode" />
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="F:FlaxEditor.SceneGraph.ActorChildNode.Index">
            <summary>
            The node index.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorChildNode.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.ActorChildNode"/> class.
            </summary>
            <param name="id">The child id.</param>
            <param name="index">The child index.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.ParentScene">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.CanTransform">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.IsActive">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.IsActiveInHierarchy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.OrderInParent">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.CanDelete">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.CanCopyPaste">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.CanDrag">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.EditableObject">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.UndoRecordObject">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.ActorChildNode`1">
            <summary>
            Helper base class for actor sub nodes (eg. link points, child parts).
            </summary>
            <typeparam name="T">The parent actor type.</typeparam>
            <seealso cref="T:FlaxEditor.SceneGraph.SceneGraphNode" />
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="F:FlaxEditor.SceneGraph.ActorChildNode`1._actor">
            <summary>
            The actor.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorChildNode`1.#ctor(`0,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.ActorChildNode`1"/> class.
            </summary>
            <param name="actor">The parent actor.</param>
            <param name="id">The child id.</param>
            <param name="index">The child index.</param>
        </member>
        <member name="T:FlaxEditor.SceneGraph.ActorNode">
            <summary>
            A tree node used to visualize scene actors structure in <see cref="T:FlaxEditor.Windows.SceneTreeWindow"/>. It's a ViewModel object for <see cref="P:FlaxEditor.SceneGraph.ActorNode.Actor"/>.
            It's part of the Scene Graph.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.SceneGraphNode" />
            <seealso cref="P:FlaxEditor.SceneGraph.ActorNode.Actor" />
        </member>
        <member name="F:FlaxEditor.SceneGraph.ActorNode._actor">
            <summary>
            The linked actor object.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.ActorNode._treeNode">
            <summary>
            The tree node used to present hierarchy structure in GUI.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.Actor">
            <summary>
            Gets the actor.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.TreeNode">
            <summary>
            Gets the tree node (part of the GUI).
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.ActorNode.ActorChildNodes">
            <summary>
            The actor child nodes used to represent special parts of the actor (meshes, links, surfaces).
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.#ctor(FlaxEngine.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.ActorNode"/> class.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.#ctor(FlaxEngine.Actor,FlaxEditor.SceneGraph.GUI.ActorTreeNode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.ActorNode"/> class.
            </summary>
            <param name="actor">The actor.</param>
            <param name="treeNode">The custom tree node.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.Find(FlaxEngine.Actor)">
            <summary>
            Tries to find the tree node for the specified actor.
            </summary>
            <param name="actor">The actor.</param>
            <returns>Tree node or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.AddChildNode(FlaxEditor.SceneGraph.ActorChildNode)">
            <summary>
            Adds the child node.
            </summary>
            <param name="node">The node.</param>
            <returns>The node</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.DisposeChildNodes">
            <summary>
            Disposes the child nodes.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.FindChildActor(FlaxEngine.Actor)">
            <summary>
            Tries to find the tree node for the specified actor in child nodes collection.
            </summary>
            <param name="actor">The actor.</param>
            <returns>Tree node or null if cannot find it.</returns>
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.CanCreatePrefab">
            <summary>
            Gets a value indicating whether this actor can be used to create prefab from it (as a root).
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.HasPrefabLink">
            <summary>
            Gets a value indicating whether this actor has a valid linkage to the prefab asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.ParentScene">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.CanTransform">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.CanCopyPaste">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.IsActive">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.IsActiveInHierarchy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.OrderInParent">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.Transform">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.EditableObject">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.RayCast(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.Delete">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.PostSpawn">
            <summary>
            Action called after spawning actor in editor (via drag to viewport, with toolbox, etc.).
            Can be used to tweak default values of the actor.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.OnParentChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.ActorNodeWithIcon">
            <summary>
            Helper class for actors with icon drawn in editor (eg. lights, probes, etc.).
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNodeWithIcon.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNodeWithIcon.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.AnimatedModelNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.AnimatedModel"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.AnimatedModelNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.AudioListenerNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.AudioListener"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.AudioListenerNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.AudioSourceNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.AudioSource"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.AudioSourceNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.BoneSocketNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.BoneSocket"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoneSocketNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.BoxBrushNode">
            <summary>
            Actor node for <see cref="T:FlaxEngine.BoxBrush"/>.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode">
            <summary>
            Sub actor node used to edit volume.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorChildNode`1" />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.Brush">
            <summary>
            Gets the brush actor.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.Surface">
            <summary>
            Gets the brush surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.#ctor(FlaxEditor.SceneGraph.Actors.BoxBrushNode,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode"/> class.
            </summary>
            <param name="actor">The parent node.</param>
            <param name="id">The identifier.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.Transform">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.EditableObject">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxBrushNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxBrushNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.BoxColliderNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.BoxCollider"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ColliderNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxColliderNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxColliderNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.BoxVolumeNode">
            <summary>
            Actor node for <see cref="T:FlaxEngine.BoxVolume"/>.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.BoxVolumeNode.SideLinkNode">
            <summary>
            Sub actor node used to edit volume.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorChildNode`1" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxVolumeNode.SideLinkNode.#ctor(FlaxEditor.SceneGraph.Actors.BoxVolumeNode,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.Actors.BoxVolumeNode.SideLinkNode"/> class.
            </summary>
            <param name="actor">The parent node.</param>
            <param name="id">The identifier.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.BoxVolumeNode.SideLinkNode.Transform">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxVolumeNode.SideLinkNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxVolumeNode.SideLinkNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxVolumeNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxVolumeNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.CameraNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.Camera"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.CameraNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.CameraNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.DecalNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.Decal"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.DecalNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.DirectionalLightNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.DirectionalLight"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.DirectionalLightNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.DirectionalLightNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.EnvironmentProbeNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.EnvironmentProbe"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.EnvironmentProbeNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.ExponentialHeightFogNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.ExponentialHeightFog"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.ExponentialHeightFogNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.FoliageNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.Foliage"/> actor type.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.FoliageNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.NavLinkNode">
            <summary>
            Actor node for <see cref="T:FlaxEngine.NavLink"/>.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.NavLinkNode.LinkNode">
            <summary>
            Sub actor node used to edit link start and end points.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorChildNode`1" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavLinkNode.LinkNode.#ctor(FlaxEditor.SceneGraph.Actors.NavLinkNode,System.Guid,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.Actors.NavLinkNode.LinkNode"/> class.
            </summary>
            <param name="actor">The parent node.</param>
            <param name="id">The identifier.</param>
            <param name="isStart">The start node or end node.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.NavLinkNode.LinkNode.Transform">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavLinkNode.LinkNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavLinkNode.LinkNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavLinkNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavLinkNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.NavMeshBoundsVolumeNode">
            <summary>
            Actor node for <see cref="T:FlaxEngine.NavMeshBoundsVolume"/>.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.Actors.BoxVolumeNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavMeshBoundsVolumeNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.ParticleEffectNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.ParticleEffect"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.ParticleEffectNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.PointLightNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.PointLight"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.PointLightNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.PostFxVolumeNode">
            <summary>
            Actor node for <see cref="T:FlaxEngine.PostFxVolume"/>.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.PostFxVolumeNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.SceneAnimationPlayerNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.SceneAnimationPlayer"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SceneAnimationPlayerNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.SceneNode">
            <summary>
            Actor tree node for <see cref="T:FlaxEngine.Scene"/> objects.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.IsEdited">
            <summary>
            Gets or sets a value indicating whether this scene is edited.
            </summary>
            <value>
              <c>true</c> if this scene is edited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.Scene">
            <summary>
            Gets the scene.
            </summary>
            <value>
            The scene.
            </value>
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SceneNode.#ctor(FlaxEngine.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.Actors.SceneNode"/> class.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.CanCreatePrefab">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.CanCopyPaste">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.CanDelete">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.CanDrag">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.ParentScene">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.SkyboxNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.Skybox"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SkyboxNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.SkyLightNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.SkyLight"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SkyLightNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.SkyNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.Sky"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SkyNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.SpotLightNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.SpotLight"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SpotLightNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SpotLightNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.StaticModelNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.StaticModel"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.StaticModelNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.TerrainNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.Terrain"/> actor type.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.TerrainNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.TextRenderNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.TextRender"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.TextRenderNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.TextRenderNode.PostSpawn">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.UICanvasNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.UICanvas"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.UICanvasNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.UICanvasNode.PostSpawn">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.UICanvasNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.UICanvasNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.UIControlNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.UIControl"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.UIControlNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.UIControlNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.ColliderNode">
            <summary>
            Scene Graph node type used for the collider shapes.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
            <seealso cref="T:FlaxEngine.Collider" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ColliderNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ColliderNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.GUI.ActorTreeNode">
            <summary>
            Tree node GUI control used as a proxy object for actors hierarchy.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tree.TreeNode" />
        </member>
        <member name="F:FlaxEditor.SceneGraph.GUI.ActorTreeNode._actorNode">
            <summary>
            The actor node that owns this node.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.GUI.ActorTreeNode.Actor">
            <summary>
            Gets the actor.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ActorNode">
            <summary>
            Gets the actor node.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.GUI.ActorTreeNode"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.UpdateText">
            <summary>
            Updates the tree node text.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.UpdateFilter(System.String)">
            <summary>
            Updates the query search filter.
            </summary>
            <param name="filterText">The filter text.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.CacheTextColor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.StartRenaming">
            <summary>
            Starts the actor renaming action.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnExpandedChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnDragEnterHeader(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnDragMoveHeader(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnDragLeaveHeader">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ReparentAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ReparentAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ReparentAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ReparentAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnDragDropHeader(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ValidateDragAsset(FlaxEditor.Content.AssetItem)">
            <summary>
            Validates the asset for drag and drop into one of the scene tree nodes.
            </summary>
            <param name="assetItem">The item.</param>
            <returns>True if can drag and drop it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ValidateDragActorType(System.Type)">
            <summary>
            Validates the type of the actor for drag and drop into one of the scene tree nodes.
            </summary>
            <param name="actorType">Type of the actor.</param>
            <returns>True if can drag and drop it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.DoDragDrop">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.GUI.SceneTreeNode">
            <summary>
            A <see cref="T:FlaxEditor.SceneGraph.GUI.ActorTreeNode"/> custom implementation for <see cref="T:FlaxEditor.SceneGraph.Actors.SceneNode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.GUI.ActorTreeNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.SceneTreeNode.UpdateText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.SceneTreeNode.CacheTextColor">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.LocalSceneGraph">
            <summary>
            Manages the manual local scene graph made of actors not added to gameplay but used in editor. Handles creating, updating and removing scene graph nodes for the given root actor that holds the hierarchy.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.LocalSceneGraph.Root">
            <summary>
            The root node.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.LocalSceneGraph.MainActor">
            <summary>
            Gets or sets the main actor used to track the hierarchy.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.LocalSceneGraph.Main">
            <summary>
            Gets the main scene graph node (owns <see cref="P:FlaxEditor.SceneGraph.LocalSceneGraph.MainActor"/>).
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.LocalSceneGraph.#ctor(FlaxEditor.SceneGraph.RootNode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.LocalSceneGraph"/> class.
            </summary>
            <param name="root">The root node of the graph. Allows to override some logic for the scene graph section.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.LocalSceneGraph.Dispose">
            <summary>
            Releases all created scene graph nodes and unlinks the <see cref="P:FlaxEditor.SceneGraph.LocalSceneGraph.MainActor"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.SceneGraph.RootNode">
            <summary>
            Represents root node of the whole scene graph.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.RootNode"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.RootNode"/> class.
            </summary>
            <param name="id">The node id.</param>
        </member>
        <member name="E:FlaxEditor.SceneGraph.RootNode.ActorChildNodesDispose">
            <summary>
            Called when actor child nodes get released.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.OnActorChildNodesDispose(FlaxEditor.SceneGraph.ActorNode)">
            <summary>
            Called when actor child nodes get released.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.ParentScene">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.Root">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.CanCopyPaste">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.CanDelete">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.CanDrag">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.IsActive">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.IsActiveInHierarchy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.Transform">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.RayCast(FlaxEngine.Ray@,FlaxEngine.Ray@,System.Single@,FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.FlagTypes)">
            <summary>
            Performs raycasting over nodes hierarchy trying to get the closest object hit by the given ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="view">The view.</param>
            <param name="distance">The result distance.</param>
            <param name="flags">The raycasting flags.</param>
            <returns>Hit object or null if there is no intersection at all.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.RayCast(FlaxEngine.Ray@,FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@,FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.FlagTypes)">
            <summary>
            Performs raycasting over nodes hierarchy trying to get the closest object hit by the given ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="view">The view.</param>
            <param name="distance">The result distance.</param>
            <param name="normal">The result intersection surface normal vector.</param>
            <param name="flags">The raycasting flags.</param>
            <returns>Hit object or null if there is no intersection at all.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.Delete">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.Spawn(FlaxEngine.Actor,FlaxEngine.Actor)">
            <summary>
            Spawns the specified actor.
            </summary>
            <param name="actor">The actor.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.Undo">
            <summary>
            Gets the undo.
            </summary>
        </member>
        <member name="T:FlaxEditor.SceneGraph.SceneGraphFactory">
            <summary>
            Factory service for Scene Graph nodes creating.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphFactory.CustomNodesTypes">
            <summary>
            The custom nodes types. Key = object type, Value = custom graph node type
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphFactory.Nodes">
            <summary>
            The nodes collection where key is ID.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphFactory.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.SceneGraphFactory"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphFactory.FindNode(System.Guid)">
            <summary>
            Tries to find the node by the given ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphFactory.GetNode(System.Guid)">
            <summary>
            Gets the node for the given object ID or creates a new node for actors (with automatic linkage to the parent).
            </summary>
            <param name="id">The identifier.</param>
            <returns>The result node.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphFactory.BuildSceneTree(FlaxEngine.Scene)">
            <summary>
            Builds the scene tree.
            </summary>
            <param name="scene">The scene.</param>
            <returns>The root scene node.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphFactory.BuildActorNode(FlaxEngine.Actor)">
            <summary>
            Builds the actor node. Warning! Don't create duplicated nodes.
            </summary>
            <param name="actor">The actor.</param>
            <returns>Created node or null if failed.</returns>
        </member>
        <member name="T:FlaxEditor.SceneGraph.SceneGraphNode">
            <summary>
            Base class for all leaf node objects which belong to scene graph used by the Editor.
            Scene Graph is directional graph without cyclic references. It's a tree.
            A <see cref="T:FlaxEditor.Modules.SceneModule"/> class is responsible for Scene Graph management.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.parentNode">
            <summary>
            The parent node.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.ChildNodes">
            <summary>
            Gets the children list.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.SceneGraphNode"/> class.
            </summary>
            <param name="id">The unique node identifier. Cannot be changed at runtime.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.ID">
            <summary>
            Gets the identifier. Must be unique and immutable.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.ParentScene">
            <summary>
            Gets the parent scene.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.Root">
            <summary>
            Gets the root node of the scene graph (if has).
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.Transform">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.CanCopyPaste">
            <summary>
            Gets a value indicating whether this instance can be copied or/and pasted.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.CanDelete">
            <summary>
            Gets a value indicating whether this node can be deleted by the user.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.CanDrag">
            <summary>
            Gets a value indicating whether this node can be dragged by the user.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.CanTransform">
            <summary>
            Gets a value indicating whether this node can be transformed by the user.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:FlaxEditor.SceneGraph.SceneGraphNode"/> is active.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.IsActiveInHierarchy">
            <summary>
            Gets a value indicating whether this <see cref="T:FlaxEditor.SceneGraph.SceneGraphNode"/> is active and all parent nodes are also active.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.OrderInParent">
            <summary>
            Gets or sets order of the node in the parent container.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.ParentNode">
            <summary>
            Gets or sets the parent node.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.EditableObject">
            <summary>
            Gets the object to edit via properties editor when this node is being selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.UndoRecordObject">
            <summary>
            Gets the object used to record undo changes.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.ContainsInHierarchy(FlaxEditor.SceneGraph.SceneGraphNode)">
            <summary>
            Determines whether the specified object is in a hierarchy (one of the children or lower).
            </summary>
            <param name="node">The node to check,</param>
            <returns>True if given actor is part of the hierarchy, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.ContainsChild(FlaxEditor.SceneGraph.SceneGraphNode)">
            <summary>
            Determines whether the specified object is one of the children.
            </summary>
            <param name="node">The node to check,</param>
            <returns>True if given object is a child, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.AddChild(FlaxEditor.SceneGraph.SceneGraphNode)">
            <summary>
            Adds the child node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData">
            <summary>
            The scene graph raycasting data container.
            </summary>
        </member>
        <member name="T:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.FlagTypes">
            <summary>
            The raycasting optional flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.FlagTypes.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.FlagTypes.SkipColliders">
            <summary>
            The skip colliders flag. Use it to ignore physics colliders intersections detection.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.FlagTypes.SkipEditorPrimitives">
            <summary>
            The skip editor primitives. Use it to ignore editor icons and primitives intersections detection.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.Ray">
            <summary>
            The ray.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.View">
            <summary>
            The camera view ray.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.Flags">
            <summary>
            The flags.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.RayCastChildren(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Performs raycasting over child nodes hierarchy trying to get the closest object hit by the given ray.
            </summary>
            <param name="ray">The ray casting data.</param>
            <param name="distance">The result distance.</param>
            <param name="normal">The result intersection surface normal vector.</param>
            <returns>Hit object or null if there is no intersection at all.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.RayCast(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Performs raycasting over nodes hierarchy trying to get the closest object hit by the given ray.
            </summary>
            <param name="ray">The ray casting data.</param>
            <param name="distance">The result distance.</param>
            <param name="normal">The result intersection surface normal vector.</param>
            <returns>Hit object or null if there is no intersection at all.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Checks if given ray intersects with the node.
            </summary>
            <param name="ray">The ray casting data.</param>
            <param name="distance">The distance.</param>
            <param name="normal">The result intersection surface normal vector.</param>
            <returns>True ray hits this node, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <summary>
            Called when selected nodes should draw debug shapes using <see cref="T:FlaxEngine.DebugDraw"/> interface.
            </summary>
            <param name="data">The debug draw data.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.Delete">
            <summary>
            Deletes object represented by this node eg. actor.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.Dispose">
            <summary>
            Releases the node and the child tree. Disposed all GUI parts and used resources.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.OnDispose">
            <summary>
            Called when node or parent node is disposing.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.OnParentChanged">
            <summary>
            Called when parent node gets changed.
            </summary>
        </member>
        <member name="T:FlaxEditor.SceneGraph.SceneGraphTools">
            <summary>
            Set of tools for <see cref="T:FlaxEditor.SceneGraph.SceneGraphNode"/> processing.
            </summary>
        </member>
        <member name="T:FlaxEditor.SceneGraph.SceneGraphTools.GraphExecuteCallbackDelegate">
            <summary>
            Delegate for scene graph action execution callback.
            </summary>
            <param name="node">The node.</param>
            <returns>True if call deeper, otherwise skip calling node children.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphTools.ExecuteOnGraph(FlaxEditor.SceneGraph.SceneGraphNode,FlaxEditor.SceneGraph.SceneGraphTools.GraphExecuteCallbackDelegate)">
            <summary>
            Executes the custom action on the graph nodes.
            </summary>
            <param name="node">The node</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphTools.BuildNodesParents``1(System.Collections.Generic.List{``0})">
            <summary>
            Builds the array made of input nodes that are at the top level. The result collection contains only nodes that don't have parent nodes in the given collection.
            </summary>
            <typeparam name="T">The scene graph node type.</typeparam>
            <param name="nodes">The nodes.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphTools.BuildNodesParents``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Builds the list made of input nodes that are at the top level. The result collection contains only nodes that don't have parent nodes in the given collection.
            </summary>
            <typeparam name="T">The scene graph node type.</typeparam>
            <param name="nodes">The nodes.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphTools.BuildAllNodes``1(System.Collections.Generic.List{``0})">
            <summary>
            Builds the array made of all nodes in the input list and child tree. The result collection contains all nodes in the tree.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphTools.BuildAllNodes``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode})">
            <summary>
            Builds the list made of all nodes in the input list and child tree. The result collection contains all nodes in the tree.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:FlaxEditor.CodeEditorTypes">
            <summary>
            Types of in-build code editors.
            </summary>
        </member>
        <member name="F:FlaxEditor.CodeEditorTypes.Custom">
            <summary>
            Custom/external editor
            </summary>
        </member>
        <member name="F:FlaxEditor.CodeEditorTypes.SystemDefault">
            <summary>
            Default program associated by the file extension on the system
            </summary>
        </member>
        <member name="F:FlaxEditor.CodeEditorTypes.VS2008">
            <summary>
            Visual Studio 2008
            </summary>
        </member>
        <member name="F:FlaxEditor.CodeEditorTypes.VS2010">
            <summary>
            Visual Studio 2010
            </summary>
        </member>
        <member name="F:FlaxEditor.CodeEditorTypes.VS2012">
            <summary>
            Visual Studio 2012
            </summary>
        </member>
        <member name="F:FlaxEditor.CodeEditorTypes.VS2013">
            <summary>
            Visual Studio 2013
            </summary>
        </member>
        <member name="F:FlaxEditor.CodeEditorTypes.VS2015">
            <summary>
            Visual Studio 2059
            </summary>
        </member>
        <member name="F:FlaxEditor.CodeEditorTypes.VS2017">
            <summary>
            Visual Studio 2017
            </summary>
        </member>
        <member name="F:FlaxEditor.CodeEditorTypes.VS2019">
            <summary>
            Visual Studio 2019
            </summary>
        </member>
        <member name="F:FlaxEditor.CodeEditorTypes.VSCode">
            <summary>
            Visual Studio Code
            </summary>
        </member>
        <member name="F:FlaxEditor.CodeEditorTypes.MAX">
            <summary>
            The count of items in the CodeEditorTypes enum.
            </summary>
        </member>
        <member name="T:FlaxEditor.CodeEditingManager">
            <summary>
            Editor utility to managed and use different code editors. Allows to open solution and source code files.
            </summary>
        </member>
        <member name="P:FlaxEditor.CodeEditingManager.IsAsyncOpenRunning">
            <summary>
            Determines whether asynchronous open action is running in a background.
            </summary>
        </member>
        <member name="M:FlaxEditor.CodeEditingManager.OpenFile(FlaxEditor.CodeEditorTypes,System.String,System.Int32)">
            <summary>
            Opens the file. Handles async opening.
            </summary>
            <param name="editorType">The code editor type.</param>
            <param name="path">The file path.</param>
            <param name="line">The target line (use 0 to not use it).</param>
        </member>
        <member name="M:FlaxEditor.CodeEditingManager.OpenSolution(FlaxEditor.CodeEditorTypes)">
            <summary>
            Opens the solution project. Handles async opening.
            </summary>
            <param name="editorType">The code editor type.</param>
        </member>
        <member name="M:FlaxEditor.CodeEditingManager.OnFileAdded(FlaxEditor.CodeEditorTypes,System.String)">
            <summary>
            Called when source file gets added to the workspace. Can be used to automatically include new files into the project files.
            </summary>
            <param name="editorType">The code editor type.</param>
            <param name="path">The path.</param>
        </member>
        <member name="T:FlaxEditor.ScriptsBuilder">
            <summary>
            Game scrips building service. Compiles user C# scripts into binary assemblies. Exposes many events used to track scripts compilation and reloading.
            </summary>
        </member>
        <member name="T:FlaxEditor.ScriptsBuilder.CompilationEndDelegate">
            <summary>
            Compilation end event delegate.
            </summary>
            <param name="success">False if compilation has failed, otherwise true.</param>
        </member>
        <member name="T:FlaxEditor.ScriptsBuilder.CompilationMessageDelegate">
            <summary>
            Compilation message events delegate.
            </summary>
            <param name="message">The message.</param>
            <param name="file">The target file.</param>
            <param name="line">The target line.</param>
        </member>
        <member name="E:FlaxEditor.ScriptsBuilder.CompilationEnd">
            <summary>
            Occurs when compilation ends.
            </summary>
        </member>
        <member name="E:FlaxEditor.ScriptsBuilder.CompilationSuccess">
            <summary>
            Occurs when compilation success.
            </summary>
        </member>
        <member name="E:FlaxEditor.ScriptsBuilder.CompilationFailed">
            <summary>
            Occurs when compilation failed.
            </summary>
        </member>
        <member name="E:FlaxEditor.ScriptsBuilder.CompilationBegin">
            <summary>
            Occurs when compilation begins.
            </summary>
        </member>
        <member name="E:FlaxEditor.ScriptsBuilder.CompilationStarted">
            <summary>
            Occurs when compilation just started.
            </summary>
        </member>
        <member name="E:FlaxEditor.ScriptsBuilder.ScriptsReloadCalled">
            <summary>
            Occurs when user scripts reload action is called.
            </summary>
        </member>
        <member name="E:FlaxEditor.ScriptsBuilder.ScriptsReloadBegin">
            <summary>
            Occurs when user scripts reload starts.
            User objects should be removed at this point to reduce leaks and issues. Game scripts and game editor scripts assemblies will be reloaded.
            </summary>
        </member>
        <member name="E:FlaxEditor.ScriptsBuilder.ScriptsReload">
            <summary>
            Occurs when user scripts reload is performed (just before the actual reload, scenes are serialized and unloaded). All user objects should be cleanup.
            </summary>
        </member>
        <member name="E:FlaxEditor.ScriptsBuilder.ScriptsReloadEnd">
            <summary>
            Occurs when user scripts reload ends.
            </summary>
        </member>
        <member name="E:FlaxEditor.ScriptsBuilder.CodeEditorAsyncOpenBegin">
            <summary>
            Occurs when code editor starts asynchronous open a file or a solution.
            </summary>
        </member>
        <member name="E:FlaxEditor.ScriptsBuilder.CodeEditorAsyncOpenEnd">
            <summary>
            Occurs when code editor ends asynchronous open a file or a solution.
            </summary>
        </member>
        <member name="P:FlaxEditor.ScriptsBuilder.CompilationsCount">
            <summary>
            Gets amount of source code compile actions since Editor startup.
            </summary>
        </member>
        <member name="P:FlaxEditor.ScriptsBuilder.LastCompilationFailed">
            <summary>
            Checks if last scripting building failed due to errors.
            </summary>
        </member>
        <member name="P:FlaxEditor.ScriptsBuilder.IsSourceDirty">
            <summary>
            Returns true if source code has been edited.
            </summary>
        </member>
        <member name="P:FlaxEditor.ScriptsBuilder.IsCompiling">
            <summary>
            Returns true if scripts are being now compiled/reloaded.
            </summary>
        </member>
        <member name="P:FlaxEditor.ScriptsBuilder.IsReady">
            <summary>
            Returns true if source code has been compiled and assemblies are ready to load.
            </summary>
        </member>
        <member name="M:FlaxEditor.ScriptsBuilder.MarkWorkspaceDirty">
            <summary>
            Indicates that scripting directory has been modified so scripts need to be rebuild.
            </summary>
        </member>
        <member name="M:FlaxEditor.ScriptsBuilder.CheckForCompile">
            <summary>
            Checks if need to compile source code. If so calls compilation.
            </summary>
        </member>
        <member name="M:FlaxEditor.ScriptsBuilder.Compile">
            <summary>
            Requests project source code compilation.
            </summary>
        </member>
        <member name="M:FlaxEditor.ScriptsBuilder.RunBuildTool(System.String)">
            <summary>
            Invokes the Flax.Build tool in the current project workspace and waits for the process end (blocking). Prints the build tool output to the log. Can be invoked from any thread.
            </summary>
            <param name="args">The Flax.Build tool invocation arguments.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.ScriptsBuilder.GenerateProject(System.String)">
            <summary>
            Generates the project files.
            </summary>
            <param name="customArgs">The additional Flax.Build tool invocation arguments.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.ScriptsBuilder.FindScript(System.String)">
            <summary>
            Tries to find a script type with the given name.
            </summary>
            <param name="scriptName">The script full name.</param>
            <returns>Found script type or null if missing or invalid name.</returns>
        </member>
        <member name="M:FlaxEditor.ScriptsBuilder.GetExistingEditors(System.Int32*,System.Int32)">
            <summary>
            Gets the list of existing in-build code editors.
            </summary>
        </member>
        <member name="M:FlaxEditor.ScriptsBuilder.GetBinariesConfiguration(System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Gets the options for the game scripts to use for the Editor.
            </summary>
        </member>
        <member name="T:FlaxEditor.States.BuildingLightingState">
            <summary>
            In this state engine is building static lighting for the scene. Editing scene and content is blocked.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.BuildingLightingState.CanEditContent">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.BuildingLightingState.IsPerformanceHeavy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.BuildingLightingState.Status">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingLightingState.CanEnter">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingLightingState.CanExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingLightingState.OnEnter">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingLightingState.OnExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.BuildingScenesState">
            <summary>
            In this state engine is building scenes data such as static lighting, navigation mesh and reflection probes. Editing scene and content is blocked.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="M:FlaxEditor.States.BuildingScenesState.StaticLightingState.Cancel">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingScenesState.Cancel">
            <summary>
            Cancels the build.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.BuildingScenesState.CanEditContent">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.BuildingScenesState.IsPerformanceHeavy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.BuildingScenesState.Status">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingScenesState.CanEnter">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingScenesState.CanExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingScenesState.OnEnter">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingScenesState.Update">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingScenesState.OnExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.ChangingScenesState">
            <summary>
            In this state editor is changing loaded scenes collection.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.ChangingScenesState.Status">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.ChangingScenesState.LoadScene(System.Guid,System.Boolean)">
            <summary>
            Loads the scene.
            </summary>
            <param name="sceneId">The scene asset ID.</param>
            <param name="additive">True if don't close opened scenes and just add new scene to the collection, otherwise will release current scenes and load single one.</param>
        </member>
        <member name="M:FlaxEditor.States.ChangingScenesState.UnloadScene(FlaxEngine.Scene)">
            <summary>
            Unloads the scene.
            </summary>
            <param name="scene">The scene to unload.</param>
        </member>
        <member name="M:FlaxEditor.States.ChangingScenesState.UnloadScene(System.Collections.Generic.IEnumerable{FlaxEngine.Scene})">
            <summary>
            Unloads the scenes collection.
            </summary>
            <param name="scenes">The scenes to unload.</param>
        </member>
        <member name="M:FlaxEditor.States.ChangingScenesState.ChangeScenes(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{FlaxEngine.Scene})">
            <summary>
            Changes the scenes.
            </summary>
            <param name="toLoad">Scenes to load.</param>
            <param name="toUnload">Scenes to unload.</param>
        </member>
        <member name="P:FlaxEditor.States.ChangingScenesState.CanEditContent">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.ChangingScenesState.OnEnter">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.ChangingScenesState.OnExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.ClosingState">
            <summary>
            In this state editor is performing closing actions and will shutdown. This is last state and cannot leave it.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.ClosingState.CanEditContent">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.ClosingState.IsEditorReady">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.ClosingState.Status">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.ClosingState.CanExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.ClosingState.OnEnter">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.EditingSceneState">
            <summary>
            In this state user may edit scene and use editor normally.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.CanUseToolbox">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.CanUseUndoRedo">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.CanChangeScene">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.CanEditScene">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.CanEnterPlayMode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.CanReloadScripts">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.Status">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.EditorState">
            <summary>
            Base class for all Editor states.
            </summary>
            <seealso cref="T:FlaxEngine.Utilities.State" />
        </member>
        <member name="P:FlaxEditor.States.EditorState.StateMachine">
            <summary>
            Gets the editor state machine.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorState.Editor">
            <summary>
            Gets the editor object.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanEditContent">
            <summary>
            Checks if can edit assets in this state.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanEditScene">
            <summary>
            Checks if can edit scene in this state
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanUseToolbox">
            <summary>
            Checks if can use toolbox in this state.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanUseUndoRedo">
            <summary>
            Checks if can use undo/redo in this state.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanChangeScene">
            <summary>
            Checks if can change scene in this state.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanEnterPlayMode">
            <summary>
            Checks if can enter play mode in this state.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanReloadScripts">
            <summary>
            Checks if can enter recompile scripts in this state.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorState.IsEditorReady">
            <summary>
            Checks if static is valid for Editor UI calls and other stuff.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorState.IsPerformanceHeavy">
            <summary>
            Checks if state requires more device resources (eg. for lightmaps baking or navigation cooking). Can be used to disable other engine and editor features during this state.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorState.Status">
            <summary>
            Gets the state status message for the UI. Returns null if use the default value.
            </summary>
        </member>
        <member name="M:FlaxEditor.States.EditorState.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.States.EditorState"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.States.EditorState.Update">
            <summary>
            Update state. Called every Engine tick.
            </summary>
        </member>
        <member name="M:FlaxEditor.States.EditorState.CanExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.EditorStateMachine">
            <summary>
            Flax Editor states machine.
            </summary>
            <seealso cref="T:FlaxEngine.Utilities.StateMachine" />
        </member>
        <member name="P:FlaxEditor.States.EditorStateMachine.CurrentState">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorStateMachine.IsPlayMode">
            <summary>
            Checks if editor is in playing mode
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorStateMachine.IsEditMode">
            <summary>
            Checks if editor is in editing mode
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.LoadingState">
            <summary>
            Editor loading state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.ClosingState">
            <summary>
            Editor closing state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.EditingSceneState">
            <summary>
            Editor editing scene state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.ChangingScenesState">
            <summary>
            Editor changing scenes state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.PlayingState">
            <summary>
            Editor playing state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.ReloadingScriptsState">
            <summary>
            Editor reloading scripts state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.BuildingLightingState">
            <summary>
            Editor building lighting state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.BuildingScenesState">
            <summary>
            Editor building scenes data state.
            </summary>
        </member>
        <member name="M:FlaxEditor.States.EditorStateMachine.SwitchState(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.InvalidStateException">
            <summary>
            Operation cannot be performed in the current editor state.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:FlaxEditor.States.InvalidStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.States.InvalidStateException"/> class.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="T:FlaxEditor.States.LoadingState">
            <summary>
            Editor loading initial state
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.LoadingState.CanEditContent">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.LoadingState.IsEditorReady">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.LoadingState.CanReloadScripts">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.LoadingState.Status">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.LoadingState.StartInitEnding(System.Boolean)">
            <summary>
            Starts the Editor initialization process ending.
            </summary>
            <param name="skipCompile">True if skip scripts compilation on startup.</param>
        </member>
        <member name="M:FlaxEditor.States.LoadingState.Update">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.LoadingState.OnExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.PlayingState">
            <summary>
            In this state editor is simulating game.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.PlayingState.WasDirty">
            <summary>
            Gets a value indicating whether any scene was dirty before entering the play mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.PlayingState.CanEditScene">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.PlayingState.CanEnterPlayMode">
            <inheritdoc />
        </member>
        <member name="E:FlaxEditor.States.PlayingState.SceneDuplicating">
            <summary>
            Occurs when play mode is starting (before scene duplicating).
            </summary>
        </member>
        <member name="E:FlaxEditor.States.PlayingState.SceneDuplicated">
            <summary>
            Occurs when play mode is starting (after scene duplicating).
            </summary>
        </member>
        <member name="E:FlaxEditor.States.PlayingState.GameSettingsApplying">
            <summary>
            Occurs when play mode is applying game settings. Can be used to cache the editor local state of some settings.
            </summary>
        </member>
        <member name="E:FlaxEditor.States.PlayingState.GameSettingsApplied">
            <summary>
            Occurs when play mode applied game settings. Can be used to preserve the editor local state of some settings.
            </summary>
        </member>
        <member name="E:FlaxEditor.States.PlayingState.SceneRestoring">
            <summary>
            Occurs when play mode is ending (before scene restoring).
            </summary>
        </member>
        <member name="E:FlaxEditor.States.PlayingState.SceneRestored">
            <summary>
            Occurs when play mode is ending (after scene restoring).
            </summary>
        </member>
        <member name="P:FlaxEditor.States.PlayingState.IsPaused">
            <summary>
            Gets or sets a value indicating whether game logic is paused.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.PlayingState.Status">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.PlayingState.OnEnter">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.PlayingState.OnExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.ReloadingScriptsState">
            <summary>
            In this state editor is reloading user scripts.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.ReloadingScriptsState.Status">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.AnimationGraphFunctionSurface">
            <summary>
            The Visject Surface implementation for the animation graph functions editor.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.AnimGraphSurface" />
            <seealso cref="T:FlaxEditor.Surface.Archetypes.Function.IFunctionSurface" />
        </member>
        <member name="M:FlaxEditor.Surface.AnimationGraphFunctionSurface.#ctor(FlaxEditor.Surface.IVisjectSurfaceOwner,System.Action,FlaxEditor.Undo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.AnimationGraphFunctionSurface.CanUseNodeType(FlaxEditor.Surface.NodeArchetype)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.AnimationGraphFunctionSurface.FunctionTypes">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.AnimGraphSurface">
            <summary>
            The Visject Surface implementation for the animation graph editor.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.VisjectSurface" />
        </member>
        <member name="F:FlaxEditor.Surface.AnimGraphSurface._cmStateMachineMenu">
            <summary>
            The state machine editing context menu.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.AnimGraphSurface._cmStateMachineTransitionMenu">
            <summary>
            The state machine transition editing context menu.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.#ctor(FlaxEditor.Surface.IVisjectSurfaceOwner,System.Action,FlaxEditor.Undo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.OnContextChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.GetConnectionTypeName(FlaxEditor.Surface.ConnectionType)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.CanUseNodeType(FlaxEditor.Surface.NodeArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.ValidateDragItem(FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.HandleDragDropAssets(System.Collections.Generic.List{FlaxEditor.Content.AssetItem},FlaxEditor.Surface.VisjectSurface.DragDropEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation">
            <summary>
            Contains archetypes for nodes from the Animation group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.Output">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode"/> for the main animation graph node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.Output.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.Sample">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode"/> for the animation sampling nodes
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.Sample.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.Sample.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.Sample.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.BlendPose">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode"/> for the animation poses blending.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.BlendPose.MaxBlendPoses">
            <summary>
            The maximum amount of the blend poses to support.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.BlendPose.FirstBlendPoseBoxIndex">
            <summary>
            The index of the first input blend pose box.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.BlendPose.BlendPosesCount">
            <summary>
            Gets or sets used blend poses count (visible to the user).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.BlendPose.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.BlendPose.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.BlendPose.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.BoneTransformMode">
            <summary>
            The bone transformation modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.BoneTransformMode.None">
            <summary>
            No transformation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.BoneTransformMode.Add">
            <summary>
            Applies the transformation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.BoneTransformMode.Replace">
            <summary>
            Replaces the transformation.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.RootMotionMode">
            <summary>
            The animated model root motion mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.RootMotionMode.NoExtraction">
            <summary>
            Don't extract nor apply the root motion.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.RootMotionMode.Ignore">
            <summary>
            Ignore root motion (remove from root node transform).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.RootMotionMode.Enable">
            <summary>
            Enable root motion (remove from root node transform and apply to the target).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.AnimationGraphFunctionNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.AnimationGraphFunctionNode.LoadSignature(System.Guid,System.Int32[]@,System.String[]@)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode" /> for the blending multiple animations.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend._selectedAnimationLabel">
            <summary>
            The selected animation label.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend._selectedAnimation">
            <summary>
            The selected animation combobox;
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend._animationPicker">
            <summary>
            The animation picker.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend._animationSpeedLabel">
            <summary>
            The animation speed label.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend._animationSpeed">
            <summary>
            The animation speed editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend._isUpdatingUI">
            <summary>
            Flag for editor UI updating. Used to skip value change events to prevent looping data flow.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.MaxAnimationsCount">
            <summary>
            The maximum animations amount to blend per node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.SelectedAnimationIndex">
            <summary>
            Gets or sets the index of the selected animation.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.UpdateUI(System.Int32,System.Boolean,FlaxEngine.Vector4@,System.Guid@)">
            <summary>
            Updates the editor UI.
            </summary>
            <param name="selectedIndex">Index of the selected blend point.</param>
            <param name="isValid">if set to <c>true</c> is selection valid.</param>
            <param name="data0">The packed data 0.</param>
            <param name="data1">The packed data 1.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.UpdateUI">
            <summary>
            Updates the editor UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode" /> for the blending multiple animations in 1D.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.Editor">
            <summary>
            The Multi Blend 1D blend space editor.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Archetypes.BlendPointsEditor" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.Editor.#ctor(FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.Editor"/> class.
            </summary>
            <param name="node">The parent Visject Node node.</param>
            <param name="x">The X location.</param>
            <param name="y">The Y location.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.Editor.GetData(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Guid[],FlaxEngine.Vector2[])">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.Editor.SelectedIndex">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.Editor.SetLocation(System.Int32,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.UpdateUI(System.Int32,System.Boolean,FlaxEngine.Vector4@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode" /> for the blending multiple animations in 2D.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.Editor">
            <summary>
            The Multi Blend 2D blend space editor.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Archetypes.BlendPointsEditor" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.Editor.#ctor(FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.Editor"/> class.
            </summary>
            <param name="node">The parent Visject Node node.</param>
            <param name="x">The X location.</param>
            <param name="y">The Y location.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.Editor.GetData(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Guid[],FlaxEngine.Vector2[])">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.Editor.SelectedIndex">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.Editor.SetLocation(System.Int32,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.UpdateUI(System.Int32,System.Boolean,FlaxEngine.Vector4@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.StateMachine">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode" /> for the state machine output node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceContext" />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachine._isUpdatingUI">
            <summary>
            Flag for editor UI updating. Used to skip value change events to prevent looping data flow.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachine.StateMachineTitle">
            <summary>
            Gets or sets the node title text.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachine.MaxTransitionsPerUpdate">
            <summary>
            Gets or sets the maximum amount of active transitions per update.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachine.ReinitializeOnBecomingRelevant">
            <summary>
            Gets or sets a value indicating whether reinitialize state machine on becoming relevant (used for blending, etc.).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachine.SkipFirstUpdateTransition">
            <summary>
            Gets or sets a value indicating whether skip any triggered transitions during first animation state machine update.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.Edit">
            <summary>
            Opens the state machine editing UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.StartRenaming">
            <summary>
            Starts the state machine renaming by showing a rename popup to the user.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.UpdateUI">
            <summary>
            Updates the editor UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.OnSpawned">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachine.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachine.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode" /> for the state machine entry node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
            <seealso cref="T:FlaxEditor.Surface.IConnectionInstigator" />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.FirstStateId">
            <summary>
            Gets or sets the first state node identifier for the state machine pointed by the entry node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.FirstState">
            <summary>
            Gets or sets the first state for the state machine pointed by the entry node.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.UpdateRectangles">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.CanSelect(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.DrawConnections(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.RemoveConnections">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.ConnectionOrigin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.AreConnected(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.CanConnectWith(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.DrawConnectingLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Color@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.Connect(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineState">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode" /> for the state machine state node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
            <seealso cref="T:FlaxEditor.Surface.IConnectionInstigator" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceContext" />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.AddRemoveTransitionAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.AddRemoveTransitionAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.AddRemoveTransitionAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.AddRemoveTransitionAction.Dispose">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.Transitions">
            <summary>
            The transitions list from this state to the others.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.StateTitle">
            <summary>
            Gets or sets the node title text.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.StateData">
            <summary>
            Gets or sets the state data (transitions list with rules graph and other options).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.TransitionsRectangle">
            <summary>
            The transitions rectangle (in surface-space).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.DrawConnection(FlaxEditor.Surface.VisjectSurface,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Color@)">
            <summary>
            Draws the connection between two state machine nodes.
            </summary>
            <param name="surface">The surface.</param>
            <param name="startPos">The start position.</param>
            <param name="endPos">The end position.</param>
            <param name="color">The line color.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.GetConnectionEndPoint(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Gets the connection end point for the given input position. Puts the end point near the edge of the node bounds.
            </summary>
            <param name="startPos">The start position (in surface space).</param>
            <param name="endPos">The end position (in surface space).</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.UpdateRectangles">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnSpawned">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.LoadData">
            <summary>
            Loads the state data from the node value (reads transitions and related information).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.SaveData(System.Boolean)">
            <summary>
            Saves the state data to the node value (writes transitions and related information).
            </summary>
            <param name="withUndo">True if save data via node parameter editing via undo or without undo action.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.ClearData">
            <summary>
            Clears the state data (removes transitions and related information).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.Edit">
            <summary>
            Opens the state editing UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.UpdateTransitionsOrder">
            <summary>
            Updates the transitions order in the list vy using the <see cref="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Order"/> property.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.UpdateTransitionsColors">
            <summary>
            Updates the transitions colors (for disabled/enabled/solo transitions matching).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.UpdateTransitions">
            <summary>
            Updates the transitions rectangles.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.StartRenaming">
            <summary>
            Starts the state renaming by showing a rename popup to the user.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.CanSelect(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.RemoveConnections">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.DrawConnections(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.ConnectionOrigin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.AreConnected(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.CanConnectWith(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.DrawConnectingLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Color@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.Connect(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition">
            <summary>
            State machine transition data container object.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineState"/>
            <seealso cref="T:FlaxEditor.Surface.ISurfaceContext"/>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data">
            <summary>
            The packed data container for the transition data storage. Helps with serialization and versioning the data.
            </summary>
            <remarks>
            It does not store GC objects references to make it more lightweight. Transition rule bytes data is stores in a separate way.
            </remarks>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes">
            <summary>
            The transition flag types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes.Enabled">
            <summary>
            The enabled flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes.Solo">
            <summary>
            The solo flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes.UseDefaultRule">
            <summary>
            The use default rule flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.Destination">
            <summary>
            The destination state node ID.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.Flags">
            <summary>
            The flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.Order">
            <summary>
            The order.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.BlendDuration">
            <summary>
            The blend duration (in seconds).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.BlendMode">
            <summary>
            The blend mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.Unused0">
            <summary>
            The unused data 0.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.Unused1">
            <summary>
            The unused data 1.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.Unused2">
            <summary>
            The unused data 2.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.HasFlag(FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes)">
            <summary>
            Determines whether the data has a given flag set.
            </summary>
            <param name="flag">The flag.</param>
            <returns><c>true</c> if the specified flag is set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.SetFlag(FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes,System.Boolean)">
            <summary>
            Sets the flag to the given value.
            </summary>
            <param name="flag">The flag.</param>
            <param name="value">If set to <c>true</c> the flag will be set, otherwise it will be cleared.</param>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.SourceState">
            <summary>
            The transition start state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.DestinationState">
            <summary>
            The transition end state.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Enabled">
            <summary>
            If checked, the transition can be triggered, otherwise it will be ignored.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Solo">
            <summary>
            If checked, animation graph will ignore other transitions from the source state and use only this transition.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.UseDefaultRule">
            <summary>
            If checked, animation graph will perform automatic transition based on the state animation pose (single shot animation play).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Order">
            <summary>
            The transition order (higher first).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.BlendDuration">
            <summary>
            The blend duration (in seconds).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.BlendMode">
            <summary>
            The blend mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.RuleGraph">
            <summary>
            The rule graph data.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.StartPos">
            <summary>
            The start position (cached).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.EndPos">
            <summary>
            The end position (cached).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Bounds">
            <summary>
            The bounds of the transition connection line (cached).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.LineColor">
            <summary>
            The color of the transition connection line (cached).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.#ctor(FlaxEditor.Surface.Archetypes.Animation.StateMachineState,FlaxEditor.Surface.Archetypes.Animation.StateMachineState,FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data@,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="data">The transition data container.</param>
            <param name="ruleGraph">The transition rule graph. Can be null.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.GetData(FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data@)">
            <summary>
            Gets the transition data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Delete">
            <summary>
            Removes the transition.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.SelectSourceState">
            <summary>
            Selects the source state node of the transition
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.SelectDestinationState">
            <summary>
            Selects the destination state node of the transition
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Edit">
            <summary>
            Opens the transition editor popup.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.EditRule">
            <summary>
            Opens the transition rule editing UI.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor">
            <summary>
            TheAnim Graph state machine transition editor (as contextual popup).
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuBase" />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor.Transition">
            <summary>
            Gets the transition being modified.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor.#ctor(FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor"/> class.
            </summary>
            <param name="transition">The transition.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.BlendPointsEditor">
            <summary>
            The blend space editor used by the animation multi blend nodes.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint">
            <summary>
            Represents single blend point.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.DefaultSize">
            <summary>
            The default size for the blend points.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.#ctor(FlaxEditor.Surface.Archetypes.BlendPointsEditor,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint"/> class.
            </summary>
            <param name="editor">The editor.</param>
            <param name="index">The blend point index.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnGotFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.BlendPointsEditor.Is2D">
            <summary>
            Gets a value indicating whether blend space is 2D, otherwise it is 1D.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.#ctor(System.Boolean,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.BlendPointsEditor"/> class.
            </summary>
            <param name="is2D">The value indicating whether blend space is 2D, otherwise it is 1D.</param>
            <param name="x">The X location.</param>
            <param name="y">The Y location.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.GetData(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Guid[],FlaxEngine.Vector2[])">
            <summary>
            Gets the blend space data.
            </summary>
            <param name="rangeX">The space range for X axis (X-width, Y-height).</param>
            <param name="rangeY">The space range for Y axis (X-width, Y-height).</param>
            <param name="pointsAnims">The points anims (input array to fill of size equal 14).</param>
            <param name="pointsLocations">The points locations (input array to fill of size equal 14).</param>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.BlendPointsEditor.SelectedIndex">
            <summary>
            Gets or sets the index of the selected blend point.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.SetLocation(System.Int32,FlaxEngine.Vector2)">
            <summary>
            Sets the blend point location.
            </summary>
            <param name="index">The index.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.GetPointsArea(FlaxEngine.Rectangle@)">
            <summary>
            Gets the blend points area.
            </summary>
            <param name="pointsArea">The control-space area.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPointPosToBlendSpacePos(FlaxEngine.Vector2)">
            <summary>
            Converts the blend point position into the blend space position (defined by min/max per axis).
            </summary>
            <param name="pos">The blend point control position.</param>
            <returns>The blend space position.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendSpacePosToBlendPointPos(FlaxEngine.Vector2)">
            <summary>
            Converts the blend space position into the blend point position.
            </summary>
            <param name="pos">The blend space position.</param>
            <returns>The blend point control position.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendAreaRect">
            <summary>
            Gets the blend area rect (in local control space for the range min-max).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Bitwise">
            <summary>
            Contains archetypes for nodes from the Bitwise group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Bitwise.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Boolean">
            <summary>
            Contains archetypes for nodes from the Boolean group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Boolean.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Comparisons">
            <summary>
            Contains archetypes for nodes from the Comparisons group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Comparisons.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Constants">
            <summary>
            Contains archetypes for nodes from the Constants group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Constants.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Constants.TryParseValues(System.String,System.Single[]@)">
            <summary>
            Tries to parse a list of numbers separated by commas
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Custom">
            <summary>
            Contains helper utilities for custom graph nodes management.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Custom.GroupID">
            <summary>
            The custom nodes group identifier. Reserved for nodes that are provided by external source eg: game scripts or editor plugin. Handling of those nodes is surface-type dependant.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Custom.GetNodeTypeName(FlaxEditor.Surface.NodeArchetype)">
            <summary>
            Gets the name of the node type (C# typename).
            </summary>
            <param name="arch">The node archetype.</param>
            <returns>The node typename.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Custom.GetNodeGroup(FlaxEditor.Surface.NodeArchetype)">
            <summary>
            Gets the node group name.
            </summary>
            <remarks>Every custom node can specify the group that it belongs to.</remarks>
            <param name="arch">The node archetype.</param>
            <returns>The node group name.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Function">
            <summary>
            Contains archetypes for nodes from the Function group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Function.IFunctionSurface">
            <summary>
            The interface for Visject surfaces that can contain function nodes (eg. material functions).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Function.IFunctionSurface.FunctionTypes">
            <summary>
            Gets the allowed types for function inputs/outputs.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionNode.OnLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionNode.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Function.FunctionInputOutputNode.SignatureName">
            <summary>
            Gets or sets the function input/output name.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionInputOutputNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionInputOutputNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionInputOutputNode.OnSpawned">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionInputOutputNode.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionInputOutputNode.OnShowSecondaryContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionInputOutputNode.StartRenaming">
            <summary>
            Starts the function input/output parameter renaming by showing a rename popup to the user.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionInputOutputNode.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionInputOutputNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionInputNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionInputNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionInputNode.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionInputNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionOutputNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionOutputNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionOutputNode.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Function.FunctionOutputNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Function.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Layers">
            <summary>
            Contains archetypes for nodes from the Layers group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Layers.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Material">
            <summary>
            Contains archetypes for nodes from the Material group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode"/> for main material node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes">
            <summary>
            Material node input boxes (each enum item value maps to box ID).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Layer">
            <summary>
            The layer input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Color">
            <summary>
            The color input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Mask">
            <summary>
            The mask input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Emissive">
            <summary>
            The emissive input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Metalness">
            <summary>
            The metalness input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Specular">
            <summary>
            The specular input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Roughness">
            <summary>
            The roughness input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.AmbientOcclusion">
            <summary>
            The ambient occlusion input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Normal">
            <summary>
            The normal input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Opacity">
            <summary>
            The opacity input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Refraction">
            <summary>
            The refraction input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.PositionOffset">
            <summary>
            The position offset input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.TessellationMultiplier">
            <summary>
            The tessellation multiplier input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.WorldDisplacement">
            <summary>
            The world displacement input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.SubsurfaceColor">
            <summary>
            The subsurface color input.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.GetBox(FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes)">
            <summary>
            Gets the material box.
            </summary>
            <param name="box">The input type.</param>
            <returns>The box</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.UpdateBoxes">
            <summary>
            Update material node boxes
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.ConnectionTick(FlaxEditor.Surface.Elements.Box)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Material.MaterialFunctionNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Material.MaterialFunctionNode.LoadSignature(System.Guid,System.Int32[]@,System.String[]@)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Math">
            <summary>
            Contains archetypes for nodes from the Math group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Math.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Packing">
            <summary>
            Contains archetypes for nodes from the Packing group.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Packing.AppendNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Packing.AppendNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Packing.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Parameters">
            <summary>
            Contains archetypes for nodes from the Parameters group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet">
            <summary>
            Surface node type for parameters group Get node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.Prototypes">
            <summary>
            The prototypes to use for this node to setup elements based on the parameter type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.DefaultPrototypes">
            <summary>
            The default prototypes for thr node elements to use for the given parameter type.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.OnParamCreated(FlaxEditor.Surface.SurfaceParameter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.OnParamRenamed(FlaxEditor.Surface.SurfaceParameter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.OnParamDeleted(FlaxEditor.Surface.SurfaceParameter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.OnLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGetParticleEmitter">
            <summary>
            Surface node type for parameters group Get node for Particle Emitter graph.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGetParticleEmitter.DefaultPrototypesParticleEmitter">
            <summary>
            The <see cref="F:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.DefaultPrototypes"/> implementation for Particle Emitter graph.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGetParticleEmitter.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Parameters.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.ParticleModules">
            <summary>
            Contains archetypes for nodes from the Particle Modules group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.ParticleModules.ModuleType">
            <summary>
            The particle emitter module types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.ParticleModules.ModuleType.Spawn">
            <summary>
            The spawn module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.ParticleModules.ModuleType.Initialize">
            <summary>
            The init module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.ParticleModules.ModuleType.Update">
            <summary>
            The update module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.ParticleModules.ModuleType.Render">
            <summary>
            The render module.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode"/> for particle emitter module node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.ParticleSurface">
            <summary>
            Gets the particle emitter surface.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.ModuleEnabled">
            <summary>
            Gets or sets a value indicating whether the module is enabled.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.ModuleType">
            <summary>
            Gets the type of the module.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.CalculateNodeSize(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.UpdateRectangles">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.OnDeleted">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.ParticleModules.SetParticleAttributeModuleNode">
            <summary>
            The particle emitter module that can write to the particle attribute.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.SetParticleAttributeModuleNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.SetParticleAttributeModuleNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.SetParticleAttributeModuleNode.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.ParticleModules.OrientSpriteNode">
            <summary>
            The particle emitter module applies the sprite orientation.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.OrientSpriteNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.OrientSpriteNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.OrientSpriteNode.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.ParticleModules.SortModuleNode">
            <summary>
            The particle emitter module that can sort particles.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Archetypes.ParticleModules.ParticleModuleNode" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.SortModuleNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.SortModuleNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.ParticleModules.SortModuleNode.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.ParticleModules.NodeElementsOffset">
            <summary>
            The particle module node elements offset applied to controls to reduce default surface node header thickness.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.ParticleModules.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Particles">
            <summary>
            Contains archetypes for nodes from the Particles group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Particles.ValueTypes">
            <summary>
            The particle value types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Particles.ValueTypes.Float">
            <summary>
             <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Particles.ValueTypes.Vector2">
            <summary>
            <see cref="T:FlaxEngine.Vector2"/>
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Particles.ValueTypes.Vector3">
            <summary>
            <see cref="T:FlaxEngine.Vector3"/>
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Particles.ValueTypes.Vector4">
            <summary>
            <see cref="T:FlaxEngine.Vector4"/>
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Particles.ValueTypes.Int">
            <summary>
            <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Particles.ValueTypes.Uint">
            <summary>
            <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode"/> for main particle emitter node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.ModulesHeader">
            <summary>
            The particle emitter modules set header (per context).
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.ModulesHeader.HeaderHeight">
            <summary>
            The header height.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.ModulesHeader.ModuleType">
            <summary>
            Gets the type of the module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.ModulesHeader.AddModuleButton">
            <summary>
            The add module button.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.ModulesHeader.#ctor(FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode,FlaxEditor.Surface.Archetypes.ParticleModules.ModuleType)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.ModulesHeader"/> class.
            </summary>
            <param name="parent">The parent emitter node.</param>
            <param name="type">The module type.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.ModulesHeader.Draw">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.ParticleSurface">
            <summary>
            Gets the particle emitter surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.Headers">
            <summary>
            The particle modules sets headers (per context).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.OnLocationChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Particles.ParticleAttributeNode">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode"/> for particle data access node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Particles.ParticleAttributeNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Particles.ParticleAttributeNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Particles.ParticleAttributeNode.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterFunctionNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Particles.ParticleEmitterFunctionNode.LoadSignature(System.Guid,System.Int32[]@,System.String[]@)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Particles.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Textures">
            <summary>
            Contains archetypes for nodes from the Textures group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Textures.CommonSamplerType">
            <summary>
            Common samplers types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Textures.CommonSamplerType.LinearClamp">
            <summary>
            The linear clamp
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Textures.CommonSamplerType.PointClamp">
            <summary>
            The point clamp
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Textures.CommonSamplerType.LinearWrap">
            <summary>
            The linear wrap
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Textures.CommonSamplerType.PointWrap">
            <summary>
            The point wrap
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Textures.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Tools">
            <summary>
            Contains archetypes for nodes from the Tools group.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.Gradient.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.Gradient.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.GradientStop.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.GradientStop.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.GradientStop.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.GradientStop.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.GradientStop.OnTestTooltipOverControl(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.GradientStop.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.GradientStop.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.ColorGradientNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.CurveNode`1.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.CurveNode`1.OnLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.CurveNode`1.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.CurveNode`1.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Tools.GetGameplayGlobalNode">
            <summary>
            Surface node type for Gameplay Globals get.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.GetGameplayGlobalNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.GetGameplayGlobalNode.OnLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Tools.GetGameplayGlobalNode.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Tools.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.ConnectionType">
            <summary>
            Graph boxes connection type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Impulse">
            <summary>
            Digital signal
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Bool">
            <summary>
            Boolean value, true or false
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Integer">
            <summary>
            Integer value
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Float">
            <summary>
            Floating point value
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Vector2">
            <summary>
            Vector2 - 2 floating point values
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Vector3">
            <summary>
            Vector3 - 3 floating point values
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Vector4">
            <summary>
            Vector4 - 4 floating point values
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Object">
            <summary>
            Any type of object like: actor, actor element etc.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Rotation">
            <summary>
            3D rotation transform based on 4 component quaternion
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Transform">
            <summary>
            Full 3D transform: position, rotation and scale
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Box">
            <summary>
            Axis aligned bounding box(two Vector3s)
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.ImpulseSecondary">
            <summary>
            Digital signal (secondary)
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.UnsignedInteger">
            <summary>
            Unsigned integer value
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Scalar">
            <summary>
            Bool, Int, Float
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Vector">
            <summary>
            Vector2, Vector3, Vector4
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Variable">
            <summary>
            All variables
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.All">
            <summary>
            All possible connections types
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Constants">
            <summary>
            Set of static properties for the surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.NodeCloseButtonSize">
            <summary>
            The node close button size.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.NodeCloseButtonMargin">
            <summary>
            The node close button margin from the edges.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.NodeHeaderSize">
            <summary>
            The node header height.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.NodeFooterSize">
            <summary>
            The node footer height.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.NodeMarginX">
            <summary>
            The node left margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.NodeMarginY">
            <summary>
            The node right margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.BoxOffsetX">
            <summary>
            The box position offset on the x axis.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.BoxSize">
            <summary>
            The box size (with and height).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.LayoutOffsetY">
            <summary>
            The node layout offset on the y axis (height of the boxes rows, etc.). It's used to make the design more consistent.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.ContentFinder">
            <summary>
            The content finder popup. Allows to search for project items and quickly navigate to.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuBase" />
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.ContentFinder.ItemHeight">
            <summary>
            Gets or sets the height per item.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.ContentFinder.VisibleItemCount">
            <summary>
            Gets or sets the number of item to show.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.ContentFinder.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.ContentFinder.MatchedItems">
            <summary>
            Gets actual matched item list.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.ContentFinder.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.ContextMenu.ContentFinder"/> class.
            </summary>
            <param name="width">The finder width.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.ContentFinder.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.ContentFinder.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.ContentFinder.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.SearchItem">
            <summary>
            The <see cref="T:FlaxEditor.Surface.ContextMenu.ContentFinder"/> item.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.SearchItem._icon">
            <summary>
            The item icon.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.SearchItem.Name">
            <summary>
            The item name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.SearchItem.Type">
            <summary>
            The item type name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.SearchItem.Item">
            <summary>
            The item object reference.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.SearchItem.#ctor(System.String,System.String,System.Object,FlaxEditor.Surface.ContextMenu.ContentFinder,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.ContextMenu.SearchItem"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="item">The item.</param>
            <param name="finder">The finder.</param>
            <param name="width">The item width.</param>
            <param name="height">The item height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.SearchItem.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.SearchItem.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.SearchItem.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.SearchItem.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.AssetSearchItem">
            <summary>
            The <see cref="T:FlaxEditor.Surface.ContextMenu.SearchItem"/> for assets. Supports using asset thumbnail.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.ContextMenu.SearchItem" />
            <seealso cref="T:FlaxEditor.Content.IContentItemOwner" />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.AssetSearchItem.#ctor(System.String,System.String,FlaxEditor.Content.AssetItem,FlaxEditor.Surface.ContextMenu.ContentFinder,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.AssetSearchItem.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.AssetSearchItem.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.AssetSearchItem.OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.AssetSearchItem.OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.AssetSearchItem.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.AssetSearchItem.OnItemDispose(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCM">
            <summary>
            The Visject Surface dedicated context menu for nodes spawning.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ContextMenu.ContextMenuBase" />
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCM.ItemClickedDelegate">
            <summary>
            Visject context menu item clicked delegate.
            </summary>
            <param name="clickedItem">The item that was clicked</param>
            <param name="selectedBox">The currently user-selected box. Can be null.</param>
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCM.NodeSpawnCheckDelegate">
            <summary>
            Visject Surface node archetype spawn ability checking delegate.
            </summary>
            <param name="arch">The node archetype to check.</param>
            <returns>True if can use this node to spawn it on a surface, otherwise false..</returns>
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCM.ParameterGetterDelegate">
            <summary>
            Visject Surface parameters getter delegate.
            </summary>
            <returns>TThe list of surface parameters or null if failed (readonly).</returns>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.VisjectCM.SelectedItem">
            <summary>
            The selected item
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.ContextMenu.VisjectCM.OnItemClicked">
            <summary>
            Event fired when any item in this popup menu gets clicked.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCM.ShowExpanded">
            <summary>
            Gets or sets a value indicating whether show groups expanded or collapsed.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCM.InitInfo">
            <summary>
            The surface context menu initialization parameters.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.VisjectCM.InitInfo.Groups">
            <summary>
            The groups archetypes. Cannot be null.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.VisjectCM.InitInfo.CanSpawnNode">
            <summary>
            The custom callback to handle node types validation for spawning. Cannot be null.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.VisjectCM.InitInfo.ParametersGetter">
            <summary>
            The surface parameters getter. Can be null.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.VisjectCM.InitInfo.CustomNodesGroup">
            <summary>
            The group with custom nodes group. Can be null.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.VisjectCM.InitInfo.ParameterGetNodeArchetype">
            <summary>
            The parameter getter node archetype to spawn when adding the parameter getter.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.#ctor(FlaxEditor.Surface.ContextMenu.VisjectCM.InitInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCM"/> class.
            </summary>
            <param name="info">The initialization info data.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.AddGroup(FlaxEditor.Surface.GroupArchetype)">
            <summary>
            Adds the group archetype to add to the menu.
            </summary>
            <param name="groupArchetype">The group.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.SortGroups">
            <summary>
            Sort the groups and keeps <see cref="F:FlaxEditor.Surface.ContextMenu.VisjectCM._groups"/> in sync
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.OnClickItem(FlaxEditor.Surface.ContextMenu.VisjectCMItem)">
            <summary>
            Called when user clicks on an item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.ExpandAll(System.Boolean)">
            <summary>
            Expands all the groups.
            </summary>
            <param name="animate">Enable/disable animation feature.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.ResetView">
            <summary>
            Resets the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.UpdateSurfaceParametersGroup">
            <summary>
            Updates the surface parameters group.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEditor.Surface.Elements.Box)">
            <summary>
            Show context menu over given control.
            </summary>
            <param name="parent">Parent control to attach to it.</param>
            <param name="location">Popup menu origin location in parent control coordinates.</param>
            <param name="startBox">The currently selected box that the new node will get connected to. Can be null</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.GetNextSiblings(FlaxEngine.GUI.Control)">
            <summary>
            Gets the next siblings of a control.
            </summary>
            <param name="item">A control that is attached to a parent</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the siblings that come after the current one.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.GetNextSiblings``1(FlaxEngine.GUI.Control)">
            <summary>
            Gets the next siblings of a control that have a specific type.
            </summary>
            <typeparam name="T">The type that the controls should have.</typeparam>
            <param name="item">A control that is attached to a parent</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the siblings that come after the current one.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.GetPreviousSiblings(FlaxEngine.GUI.Control)">
            <summary>
            Gets the previous siblings of a control.
            </summary>
            <param name="item">A control that is attached to a parent</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the siblings that come before the current one.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.GetPreviousSiblings``1(FlaxEngine.GUI.Control)">
            <summary>
            Gets the previous sibling of a control that have a specific type.
            </summary>
            <typeparam name="T">The type that the controls should have.</typeparam>
            <param name="item">A control that is attached to a parent</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the siblings that come before the current one.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCMGroup">
            <summary>
            Drop panel for group of <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCMItem"/>. It represents <see cref="T:FlaxEditor.Surface.GroupArchetype"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.DropPanel" />
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.ContextMenu">
            <summary>
            The context menu.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.Archetype">
            <summary>
            The archetype.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.SortScore">
            <summary>
            A computed score for the context menu order
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.#ctor(FlaxEditor.Surface.ContextMenu.VisjectCM,FlaxEditor.Surface.GroupArchetype)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCMGroup"/> class.
            </summary>
            <param name="cm">The context menu.</param>
            <param name="archetype">The group archetype.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.ResetView">
            <summary>
            Resets the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.UpdateFilter(System.String)">
            <summary>
            Updates the filter.
            </summary>
            <param name="filterText">The filter text.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.UpdateItemSort(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Updates the sorting of the <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCMItem"/>s of this <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCMGroup"/>
            Also updates the <see cref="P:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.SortScore"/>
            </summary>
            <param name="selectedBox">The currently user-selected box</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc/>
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCMItem">
            <summary>
            Single item used for <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCM"/>. Represents type of the <see cref="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.NodeArchetype"/> that can be spawned.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.Group">
            <summary>
            Gets the item's group
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.GroupArchetype">
            <summary>
            Gets the group archetype.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.NodeArchetype">
            <summary>
            Gets the node archetype.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.Data">
            <summary>
            Gets and sets the data of the node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.SortScore">
            <summary>
            A computed score for the context menu order
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.#ctor(FlaxEditor.Surface.ContextMenu.VisjectCMGroup,FlaxEditor.Surface.GroupArchetype,FlaxEditor.Surface.NodeArchetype)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCMItem"/> class.
            </summary>
            <param name="group">The group.</param>
            <param name="groupArchetype">The group archetype.</param>
            <param name="archetype">The archetype.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.UpdateScore(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Updates the <see cref="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.SortScore"/>
            </summary>
            <param name="selectedBox">The currently user-selected box</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.UpdateFilter(System.String)">
            <summary>
            Updates the filter.
            </summary>
            <param name="filterText">The filter text.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.AssetSelect">
            <summary>
            Assets picking control.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.AssetPicker" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.AssetSelect.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.AssetSelect.Archetype">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.AssetSelect.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Elements.AssetSelect"/> class.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="archetype">The archetype.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.AssetSelect.OnSelectedItemChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.BoolValue">
            <summary>
            Bool value element.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNodeElementControl" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.BoolValue.Value">
            <summary>
            Gets or sets a value.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.Toggle">
            <summary>
            Toggle sate
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.Get(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <summary>
            Gets the boolean value from the specified parent node. Handles type casting and components gather.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.Set(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,System.Boolean)">
            <summary>
            Sets the boolean value of the specified parent node. Handles type casting and components assignment.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <param name="toSet">The value to set.</param>
        </member>
        <member name="T:FlaxEditor.Surface.Elements.Box">
            <summary>
            Surface boxes base class (for input and output boxes). Boxes can be connected.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNodeElementControl" />
            <seealso cref="T:FlaxEditor.Surface.IConnectionInstigator" />
        </member>
        <member name="F:FlaxEditor.Surface.Elements.Box._currentType">
            <summary>
            The current connection type. It's subset or equal to <see cref="P:FlaxEditor.Surface.Elements.Box.DefaultType"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Elements.Box._currentTypeColor">
            <summary>
            The cached color for the current box type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Elements.Box._isSelected">
            <summary>
            The is selected flag for the box.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.ID">
            <summary>
            Unique box ID within single node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.DefaultType">
            <summary>
            Allowed connections type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Elements.Box.Connections">
            <summary>
            List with all connections to other boxes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.HasAnyConnection">
            <summary>
            Gets a value indicating whether this box has any connection.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.HasSingleConnection">
            <summary>
            Gets a value indicating whether this box has single connection.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.IsOutput">
            <summary>
            Gets a value indicating whether this instance is output box.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.CurrentType">
            <summary>
            Gets or sets the current type of the box connections.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Elements.Box.CurrentTypeChanged">
            <summary>
            Event called when the current type of the box gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.IsSelected">
            <summary>
            Gets a value indicating whether this box is selected.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.CanUseType(FlaxEditor.Surface.ConnectionType)">
            <summary>
            Determines whether this box can use the specified type as a connection.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if this box can use the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.RemoveConnections">
            <summary>
            Removes all existing connections of that box.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.ConnectionTick">
            <summary>
            Updates state on connection data changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.AreConnected(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Checks if box is connected with the other one.
            </summary>
            <param name="box">The other box.</param>
            <returns>True if both boxes are connected, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.BreakConnection(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Break connection to the other box (works in a both ways).
            </summary>
            <param name="box">The other box.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.CreateConnection(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Create connection to the other box (works in a both ways).
            </summary>
            <param name="box">The other box.</param>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.IsSingle">
            <summary>
            True if box can use only single connection.
            </summary>
            <returns>True if only single connection.</returns>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.IsDependentBox">
            <summary>
            True if box type depends on other boxes types of the node.
            </summary>
            <returns>True if is dependant, otherwise false.</returns>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.IsIndependentBox">
            <summary>
            True if box type doesn't depend on other boxes types of the node.
            </summary>
            <returns>True if is independent, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.OnCurrentTypeChanged">
            <summary>
            Called when current box type changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.OnConnectionsChanged">
            <summary>
            Called when connections array gets changed (also called after surface deserialization)
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.OnSelectionChanged">
            <summary>
            Called when box gets selected or deselected.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.DrawBox">
            <summary>
            Draws the box GUI using <see cref="T:FlaxEngine.Render2D"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.ConnectionOrigin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.AreConnected(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.CanConnectWith(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.DrawConnectingLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Color@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.Connect(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.BoxValue">
            <summary>
            Bounding Box value editing element.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.BoxValue.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.BoxValue.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.BoxValue.Surface">
            <summary>
            Gets the surface.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.BoxValue.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoxValue.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Elements.BoxValue"/> class.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="archetype">The node element archetype.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoxValue.Get(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <summary>
            Gets the floating point value from the specified parent node. Handles type casting and components gather.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoxValue.Set(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,FlaxEngine.BoundingBox@)">
            <summary>
            Sets the floating point value of the specified parent node. Handles type casting and components assignment.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <param name="toSet">The value to set.</param>
        </member>
        <member name="T:FlaxEditor.Surface.Elements.ColorValue">
            <summary>
            Color value picking element.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Input.ColorValueBox" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.ColorValue.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.ColorValue.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.ColorValue.Surface">
            <summary>
            Gets the surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.ColorValue.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.ColorValue.OnValueChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.ComboBoxElement">
            <summary>
            Combo box element.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ComboBox" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="F:FlaxEditor.Surface.Elements.ComboBoxElement._isAutoSelect">
            <summary>
            True if automatic value selecting is active.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.ComboBoxElement.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.ComboBoxElement.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.ComboBoxElement.Surface">
            <summary>
            Gets the surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.ComboBoxElement.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.ComboBoxElement.OnSelectedIndexChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.EnumValue">
            <summary>
            Combo box for enum element.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.EnumComboBox" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.EnumValue.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.EnumValue.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.EnumValue.Surface">
            <summary>
            Gets the surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.EnumValue.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.EnumValue.OnValueChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.FloatValue">
            <summary>
            Floating point value editing element.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Input.FloatValueBox" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.FloatValue.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.FloatValue.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.FloatValue.Surface">
            <summary>
            Gets the surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.FloatValue.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.FloatValue.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.FloatValue.OnValueChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.FloatValue.Get(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <summary>
            Gets the floating point value from the specified parent node. Handles type casting and components gather.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.FloatValue.Set(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,System.Single)">
            <summary>
            Sets the floating point value of the specified parent node. Handles type casting and components assignment.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <param name="toSet">The value to set.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.FloatValue.SetAllValues(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,System.Single)">
            <summary>
            Sets all the values to the given value (eg. all components of the vector).
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <param name="toSet">The value to assign.</param>
        </member>
        <member name="T:FlaxEditor.Surface.Elements.InputBox">
            <summary>
            Visject Surface input box element.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Elements.Box" />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.InputBox.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.InputBox.IsOutput">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.InputBox.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.InputBox.OnCurrentTypeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.InputBox.OnConnectionsChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.InputBox.CreateDefaultEditor">
            <summary>
            Creates the default value editor control.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Elements.IntegerValue">
            <summary>
            Integer value editing element.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Input.IntValueBox" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.IntegerValue.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.IntegerValue.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.IntegerValue.Surface">
            <summary>
            Gets the surface.
            </summary>
            <value>
            The surface.
            </value>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.IntegerValue.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.IntegerValue.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.IntegerValue.OnValueChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.IntegerValue.Get(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <summary>
            Gets the integer value from the specified parent node. Handles type casting and components gather.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.IntegerValue.Set(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,System.Int32)">
            <summary>
            Sets the integer value of the specified parent node. Handles type casting and components assignment.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <param name="toSet">The value to set.</param>
        </member>
        <member name="T:FlaxEditor.Surface.Elements.OutputBox">
            <summary>
            Visject Surface output box element.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Elements.Box" />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.OutputBox.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.OutputBox.DrawConnection(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Color@,System.Single)">
            <summary>
            Draws the connection between two boxes.
            </summary>
            <param name="start">The start location.</param>
            <param name="end">The end location.</param>
            <param name="color">The connection color.</param>
            <param name="thickness">The connection thickness.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.OutputBox.DrawConnections">
            <summary>
            Draw all connections coming from this box.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.OutputBox.DrawSelectedConnection(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Draw a selected connections coming from this box.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.OutputBox.IsOutput">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.OutputBox.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.SkeletonBoneIndexSelectElement">
            <summary>
            The Visject surface node element used to pick a skeleton bone index with a combo box.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.SkeletonBoneIndexSelectElement.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.SkeletonBoneIndexSelectElement.UpdateComboBox">
            <summary>
            Updates the Combo Box items list from the current skeleton nodes hierarchy.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Elements.SkeletonNodeNameSelectElement">
            <summary>
            The Visject surface node element used to pick a skeleton node name with a combo box.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.SkeletonNodeNameSelectElement.SelectedNodeName">
            <summary>
            Gets or sets the name of the selected node.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.SkeletonNodeNameSelectElement.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.SkeletonNodeNameSelectElement.UpdateComboBox">
            <summary>
            Updates the Combo Box items list from the current skeleton nodes hierarchy.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.SkeletonNodeNameSelectElement.OnSelectedIndexChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.TextBoxView">
            <summary>
            Text box input element.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.TextBox" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.TextBoxView.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.TextBoxView.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.TextBoxView.Surface">
            <summary>
            Gets the surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.TextBoxView.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.TextBoxView.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.TextView">
            <summary>
            Text drawing element.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNodeElementControl" />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.TextView.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.TextView.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.GroupArchetype">
            <summary>
            Surface nodes group archetype description.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.GroupArchetype.GroupID">
            <summary>
            Unique group ID.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.GroupArchetype.Name">
            <summary>
            The group name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.GroupArchetype.Color">
            <summary>
            Primary color for the group nodes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.GroupArchetype.Tag">
            <summary>
            The custom tag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.GroupArchetype.Archetypes">
            <summary>
            All nodes descriptions.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.GUI.VisjectContextNavigationButton">
            <summary>
            A <see cref="T:FlaxEditor.Surface.VisjectSurface"/> context navigation bar button. Allows to change the current context and view the context path.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Button" />
        </member>
        <member name="P:FlaxEditor.Surface.GUI.VisjectContextNavigationButton.Surface">
            <summary>
            Gets the parent surface.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.GUI.VisjectContextNavigationButton.Context">
            <summary>
            Gets the target context.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.GUI.VisjectContextNavigationButton.#ctor(FlaxEditor.Surface.VisjectSurface,FlaxEditor.Surface.ISurfaceContext,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.GUI.VisjectContextNavigationButton"/> class.
            </summary>
            <param name="surface">The parent surface.</param>
            <param name="context">The target context.</param>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.GUI.VisjectContextNavigationButton.OnClick">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.IParametersDependantNode">
            <summary>
            Interface for surface nodes that depend on surface parameters collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.IParametersDependantNode.OnParamCreated(FlaxEditor.Surface.SurfaceParameter)">
            <summary>
            On new parameter created
            </summary>
            <param name="param">The parameter.</param>
        </member>
        <member name="M:FlaxEditor.Surface.IParametersDependantNode.OnParamRenamed(FlaxEditor.Surface.SurfaceParameter)">
            <summary>
            On new parameter renamed
            </summary>
            <param name="param">The parameter.</param>
        </member>
        <member name="M:FlaxEditor.Surface.IParametersDependantNode.OnParamDeleted(FlaxEditor.Surface.SurfaceParameter)">
            <summary>
            On new parameter deleted
            </summary>
            <param name="param">The parameter.</param>
        </member>
        <member name="T:FlaxEditor.Surface.ISurfaceContext">
            <summary>
            Defines the context data and logic for the Visject Surface editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ISurfaceContext.SurfaceName">
            <summary>
            Gets the name of the surface (for UI).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ISurfaceContext.SurfaceData">
            <summary>
            Gets or sets the surface data. Used to load or save the surface to the data source.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ISurfaceContext.OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <summary>
            Called when Visject Surface context gets created for this surface data source. Can be used to link for some events.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:FlaxEditor.Surface.ISurfaceNodeElement">
            <summary>
            Base interface for elements that can be added to the <see cref="T:FlaxEditor.Surface.SurfaceNode"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ISurfaceNodeElement.ParentNode">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ISurfaceNodeElement.Archetype">
            <summary>
            Gets the element archetype.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.IVisjectSurfaceOwner">
            <summary>
            Interface for Visject Surface parent objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.IVisjectSurfaceOwner.OnSurfaceEditedChanged">
            <summary>
            On surface edited state gets changed
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.IVisjectSurfaceOwner.OnSurfaceGraphEdited">
            <summary>
            On surface graph edited
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.IVisjectSurfaceOwner.OnSurfaceClose">
            <summary>
            Called when surface wants to close the tool window (due to user interaction or sth else).
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.MaterialFunctionSurface">
            <summary>
            The Visject Surface implementation for the material functions editor.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.MaterialSurface" />
            <seealso cref="T:FlaxEditor.Surface.Archetypes.Function.IFunctionSurface" />
        </member>
        <member name="M:FlaxEditor.Surface.MaterialFunctionSurface.#ctor(FlaxEditor.Surface.IVisjectSurfaceOwner,System.Action,FlaxEditor.Undo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.MaterialFunctionSurface.CanUseNodeType(FlaxEditor.Surface.NodeArchetype)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.MaterialFunctionSurface.FunctionTypes">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.MaterialSurface">
            <summary>
            The Visject Surface implementation for the materials editor.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.VisjectSurface" />
        </member>
        <member name="M:FlaxEditor.Surface.MaterialSurface.#ctor(FlaxEditor.Surface.IVisjectSurfaceOwner,System.Action,FlaxEditor.Undo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.MaterialSurface.GetConnectionTypeName(FlaxEditor.Surface.ConnectionType)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.MaterialSurface.CanUseNodeType(FlaxEditor.Surface.NodeArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.MaterialSurface.ValidateDragItem(FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.MaterialSurface.HandleDragDropAssets(System.Collections.Generic.List{FlaxEditor.Content.AssetItem},FlaxEditor.Surface.VisjectSurface.DragDropEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.NodeArchetypeTryParseHandler">
            <summary>
            Delegate for node data parsing.
            </summary>
            <param name="filterText">The filter text.</param>
            <param name="data">The node data.</param>
            <returns>True if requests has been parsed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.NodeArchetype">
            <summary>
            Surface node archetype description.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.NodeArchetype.CreateCustomNodeFunc">
            <summary>
            Create custom node callback.
            </summary>
            <param name="id">The node identifier.</param>
            <param name="context">The context.</param>
            <param name="nodeArch">The node archetype.</param>
            <param name="groupArch">The node parent group archetype.</param>
            <returns>The created node object.</returns>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.TypeID">
            <summary>
            Unique node type ID within a single group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Create">
            <summary>
            Custom create function (may be null).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Size">
            <summary>
            Default initial size of the node.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Flags">
            <summary>
            Custom set of flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Title">
            <summary>
            Title text.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Description">
            <summary>
            Short node description.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.AlternativeTitles">
            <summary>
            Alternative node titles.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Tag">
            <summary>
            The custom tag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.DefaultValues">
            <summary>
            Default node values. This array supports types: bool, int, float, Vector2, Vector3, Vector4, Color, Rectangle, Guid, string, Matrix and byte[].
            </summary>
            <remarks>
            The limit for the node values array is 32 (must match GRAPH_NODE_MAX_VALUES in C++ engine core).
            </remarks>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.DefaultType">
            <summary>
            Default connections type for dependant boxes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.IndependentBoxes">
            <summary>
            Array with independent boxes IDs.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.DependentBoxes">
            <summary>
            Array with dependent boxes IDs.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Elements">
            <summary>
            Array with default elements descriptions.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.TryParseText">
            <summary>
            Tries to parse some text and extract the data from it.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.NodeArchetype.Clone">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.NodeElementArchetype">
            <summary>
            Surface node element archetype description.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.Type">
            <summary>
            The element type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.Position">
            <summary>
            Default element position in node that has default size.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.Size">
            <summary>
            The element size for some types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.Text">
            <summary>
            Custom text value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.Tooltip">
            <summary>
            Control tooltip text.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.Single">
            <summary>
            True if use single connections (for Input element).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.ValueIndex">
            <summary>
            Index of the node value that is connected with that element.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.ValueMin">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.ValueMax">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.BoxID">
            <summary>
            Unique ID of the box in the graph data to link it to this element (Output/Input elements).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.ConnectionsType">
            <summary>
            Default connections type for that element (can be set of types).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.NodeElementArchetype.ActualPositionX">
            <summary>
            Gets the actual element position on the x axis.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.NodeElementArchetype.ActualPositionY">
            <summary>
            Gets the actual element position on the y axis.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.NodeElementArchetype.ActualPosition">
            <summary>
            Gets the actual element position.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.NodeElementArchetype.Factory">
            <summary>
            Node element archetypes factory object. Helps to build surface nodes archetypes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Input(System.Single,System.String,System.Boolean,FlaxEditor.Surface.ConnectionType,System.Int32,System.Int32)">
            <summary>
            Creates new Input box element description.
            </summary>
            <param name="ylevel">The y level.</param>
            <param name="text">The text.</param>
            <param name="single">If true then box can have only one connection, otherwise multiple connections are allowed.</param>
            <param name="type">The type.</param>
            <param name="id">The unique box identifier.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Output(System.Single,System.String,FlaxEditor.Surface.ConnectionType,System.Int32)">
            <summary>
            Creates new Output box element description.
            </summary>
            <param name="ylevel">The y level.</param>
            <param name="text">The text.</param>
            <param name="type">The type.</param>
            <param name="id">The unique box identifier.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Bool(System.Single,System.Single,System.Int32)">
            <summary>
            Creates new Bool value element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Integer(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new Integer value element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="component">The index of the component to edit. For vectors this can be set to modify only single component of it. Eg. for vec2 value component set to 1 will edit only Y component. Default value -1 will be used to edit whole value.</param>
            <param name="valueMin">The minimum value range.</param>
            <param name="valueMax">The maximum value range.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Float(System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Creates new Float value element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="component">The index of the component to edit. For vectors this can be set to modify only single component of it. Eg. for vec2 value component set to 1 will edit only Y component. Default value -1 will be used to edit whole value.</param>
            <param name="valueMin">The minimum value range.</param>
            <param name="valueMax">The maximum value range.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Vector_X(System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Creates new Vector2 value element description to edit X component.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="valueMin">The minimum value range.</param>
            <param name="valueMax">The maximum value range.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Vector_Y(System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Creates new Vector value element description to edit Y component.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space). The actual position is offset by 1 times <see cref="F:FlaxEditor.Surface.Constants.LayoutOffsetY"/> to make it easier to arrange.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="valueMin">The minimum value range.</param>
            <param name="valueMax">The maximum value range.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Vector_Z(System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Creates new Vector value element description to edit Z component.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space). The actual position is offset by 2 times <see cref="F:FlaxEditor.Surface.Constants.LayoutOffsetY"/> to make it easier to arrange.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="valueMin">The minimum value range.</param>
            <param name="valueMax">The maximum value range.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Vector_W(System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Creates new Vector value element description to edit W component.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space). The actual position is offset by 3 times <see cref="F:FlaxEditor.Surface.Constants.LayoutOffsetY"/> to make it easier to arrange.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="valueMin">The minimum value range.</param>
            <param name="valueMax">The maximum value range.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Color(System.Single,System.Single,System.Int32)">
            <summary>
            Creates new Color value element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Asset(System.Single,System.Single,System.Int32,System.Type)">
            <summary>
            Creates new Asset picker element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="type">The allowed assets type to use (including inherited types).</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.ComboBox(System.Single,System.Single,System.Single,System.Int32,System.String[])">
            <summary>
            Creates new Combo Box element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="width">The width of the element.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="values">The set of combo box items to present. May be nul if provided at runtime.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.ComboBox(System.Single,System.Single,System.Int32,System.Int32,System.Type)">
            <summary>
            Creates new Combo Box element description for enum editing.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="width">The width of the element.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="enumType">The enum type to present all it's values. Important: first value should be 0 and so on.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Enum(System.Single,System.Single,System.Int32,System.Int32,System.Type)">
            <summary>
            Creates new Combo Box element description for enum editing.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="width">The width of the element.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="enumType">The enum type to present all it's values.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Text(System.Single,System.Single,System.String,System.Single,System.Single,System.String)">
            <summary>
            Creates new Text element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="text">The text to show.</param>
            <param name="width">The control width.</param>
            <param name="height">The control height.</param>
            <param name="tooltip">The control tooltip text.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.TextBox(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates new TextBox element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="isMultiline">Enable/disable multiline text input support</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.SkeletonBoneIndexSelect(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates new Skeleton Bone Index Select element description for enum editing.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="width">The width of the element.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.SkeletonNodeNameSelect(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates new Skeleton Node Name Select element description for enum editing.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="width">The width of the element.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Box(System.Single,System.Single,System.Int32)">
            <summary>
            Creates new element description for Bounding Box editing.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.NodeElementType">
            <summary>
            Surface node element types
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.Invalid">
            <summary>
            The invalid element.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.Input">
            <summary>
            The input box.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.Output">
            <summary>
            The output box.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.Text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.BoolValue">
            <summary>
            The bool value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.IntegerValue">
            <summary>
            The integer value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.FloatValue">
            <summary>
            The float value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.RotationValue">
            <summary>
            The rotation value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.ColorValue">
            <summary>
            The color picker.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.ComboBox">
            <summary>
            The combo box.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.Asset">
            <summary>
            The asset picker.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.TextBox">
            <summary>
            The text box.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.SkeletonBoneIndexSelect">
            <summary>
            The skeleton bone index selection.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.BoxValue">
            <summary>
            The bounding box value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.EnumValue">
            <summary>
            The enum value (as int).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.SkeletonNodeNameSelect">
            <summary>
            The skeleton node name selection.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.NodeFactory">
            <summary>
            It's responsible for creating new <see cref="T:FlaxEditor.Surface.SurfaceNode"/> objects.
            It contains collection of <see cref="T:FlaxEditor.Surface.GroupArchetype"/> and allows to plug custom node types as well.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFactory.ParameterAttributeTypes">
            <summary>
            The lis of supported attribute types for Visject Surface parameters. Attributes must be marked with Serializable attribute and contain empty constructor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFactory.DefaultGroups">
            <summary>
            The default Visject Node archetype groups collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.NodeFactory.GetArchetype(System.Collections.Generic.List{FlaxEditor.Surface.GroupArchetype},System.UInt16,System.UInt16,FlaxEditor.Surface.GroupArchetype@,FlaxEditor.Surface.NodeArchetype@)">
            <summary>
            Gets the archetypes for the node.
            </summary>
            <param name="groups">The group archetypes.</param>
            <param name="groupID">The group identifier.</param>
            <param name="typeID">The type identifier.</param>
            <param name="gArch">The output group archetype.</param>
            <param name="arch">The output node archetype.</param>
            <returns>True if found it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeFactory.CreateNode(System.Collections.Generic.List{FlaxEditor.Surface.GroupArchetype},System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,System.UInt16,System.UInt16)">
            <summary>
            Creates the node.
            </summary>
            <param name="groups">The group archetypes.</param>
            <param name="id">The node id.</param>
            <param name="context">The context.</param>
            <param name="groupID">The group identifier.</param>
            <param name="typeID">The type identifier.</param>
            <returns>Created node or null if failed.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeFactory.CreateNode(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.GroupArchetype,FlaxEditor.Surface.NodeArchetype)">
            <summary>
            Creates the node.
            </summary>
            <param name="id">The node id.</param>
            <param name="context">The context.</param>
            <param name="groupArchetype">The group archetype.</param>
            <param name="nodeArchetype">The node archetype.</param>
            <returns>Created node or null if failed.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.NodeFlags">
            <summary>
            Custom node archetype flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.None">
            <summary>
            Nothing at all. Nothing but thieves.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.NoCloseButton">
            <summary>
            Don't adds a close button.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.UseDependantBoxes">
            <summary>
            Node should use dependant and independent boxes types.
            TODO: unused UseDependantBoxes flag, remove it
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.NoSpawnViaGUI">
            <summary>
            Node cannot be spawned via GUI interface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.MaterialGraph">
            <summary>
            Node can be used in the material graphs.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.ParticleEmitterGraph">
            <summary>
            Node can be used in the particle emitter graphs.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.NoRemove">
            <summary>
            Disables removing that node from the graph.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.AnimGraph">
            <summary>
            Node can be used in the animation graphs.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.NoMove">
            <summary>
            Disables moving node (by user).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.AllGraphs">
            <summary>
            Node can be used in the all visual graphs.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.ParticleEmitterFunctionSurface">
            <summary>
            The Visject Surface implementation for the particle emitter functions editor.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.ParticleEmitterSurface" />
            <seealso cref="T:FlaxEditor.Surface.Archetypes.Function.IFunctionSurface" />
        </member>
        <member name="M:FlaxEditor.Surface.ParticleEmitterFunctionSurface.#ctor(FlaxEditor.Surface.IVisjectSurfaceOwner,System.Action,FlaxEditor.Undo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ParticleEmitterFunctionSurface.CanUseNodeType(FlaxEditor.Surface.NodeArchetype)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.ParticleEmitterFunctionSurface.FunctionTypes">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.ParticleEmitterSurface">
            <summary>
            The Visject Surface implementation for the particle emitter graph editor.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.VisjectSurface" />
        </member>
        <member name="P:FlaxEditor.Surface.ParticleEmitterSurface.RootNode">
            <summary>
            Gets the root node of the emitter graph.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ParticleEmitterSurface.#ctor(FlaxEditor.Surface.IVisjectSurfaceOwner,System.Action,FlaxEditor.Undo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ParticleEmitterSurface.GetConnectionTypeName(FlaxEditor.Surface.ConnectionType)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ParticleEmitterSurface.ArrangeModulesNodes">
            <summary>
            Arranges the particle modules nodes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ParticleEmitterSurface.CanUseNodeType(FlaxEditor.Surface.NodeArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ParticleEmitterSurface.GetParameterGetterNodeArchetype(System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ParticleEmitterSurface.ValidateDragItem(FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ParticleEmitterSurface.HandleDragDropAssets(System.Collections.Generic.List{FlaxEditor.Content.AssetItem},FlaxEditor.Surface.VisjectSurface.DragDropEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceComment">
            <summary>
            Visject Surface comment control.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceComment._isResizing">
            <summary>
            True if sizing tool is in use.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceComment.Color">
            <summary>
            Gets or sets the color of the comment.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.CanSelect(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.IsSelectionIntersecting(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.UpdateRectangles">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.CalculateNodeSize(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.ContainsPoint(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.StartRenaming">
            <summary>
            Starts the renaming of the comment. Shows the UI for the suer
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceControl">
            <summary>
            Base class for Visject Surface components like nodes or comments. Used to unify various logic parts across different surface elements.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceControl._mousePosition">
            <summary>
            The mouse position in local control space. Updates by auto.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceControl._isSelected">
            <summary>
            The is selected flag for element.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceControl.Context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceControl.Surface">
            <summary>
            The surface.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceControl.IsSelected">
            <summary>
            Gets a value indicating whether this control is selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceControl.MousePosition">
            <summary>
            Gets the mouse position (in local control space).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.#ctor(FlaxEditor.Surface.VisjectSurfaceContext,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.SurfaceControl"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="width">The initial width.</param>
            <param name="height">The initial height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.#ctor(FlaxEditor.Surface.VisjectSurface,FlaxEngine.Rectangle@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.SurfaceControl"/> class.
            </summary>
            <param name="surface">The surface.</param>
            <param name="bounds">The initial bounds.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.CanSelect(FlaxEngine.Vector2@)">
            <summary>
            Determines whether this element can be selected by the mouse at the specified location.
            </summary>
            <param name="location">The mouse location (in surface space).</param>
            <returns><c>true</c> if this instance can be selected by mouse at the specified location; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.IsSelectionIntersecting(FlaxEngine.Rectangle@)">
            <summary>
            Determines whether selection rectangle is intersecting with the surface control area that can be selected.
            </summary>
            <param name="selectionRect">The selection rectangle (in surface space, not the control space).</param>
            <returns><c>true</c> if the selection rectangle is intersecting with the selectable parts of the control ; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnShowSecondaryContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu,FlaxEngine.Vector2)">
            <summary>
            Called when editor is showing secondary context menu. Can be used to inject custom options for node logic.
            </summary>
            <param name="menu">The menu.</param>
            <param name="location">The show location (in control space).</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnSelectionChanged">
            <summary>
            Called after <see cref="P:FlaxEditor.Surface.SurfaceControl.IsSelected"/> changes
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnLoaded">
            <summary>
            Called when control gets loaded and added to surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnSurfaceLoaded">
            <summary>
            Called when surface gets loaded and nodes boxes are connected.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnSpawned">
            <summary>
            Called after adding the control to the surface after user spawn (eg. add comment, add new node, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnDeleted">
            <summary>
            Called on removing the control from the surface after user delete/cut operation (eg. delete comment, cut node, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.UpdateRectangles">
            <summary>
            Updates the cached rectangles on control size change.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.SetScaleInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceMeta">
            <summary>
            Metadata container.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceMeta.Entry">
            <summary>
            Metadata entry
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceMeta.Entry.TypeID">
            <summary>
            The type identifier.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceMeta.Entry.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceMeta.Entries">
            <summary>
            All meta entries
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.GetAttributes(FlaxEngine.GraphParameter)">
            <summary>
            Gets the attributes collection rom the graph parameter.
            </summary>
            <param name="parameter">The graph parameter.</param>
            <returns>The attributes collection.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.GetAttributes">
            <summary>
            Gets the attributes collection.
            </summary>
            <returns>The attributes collection.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.SetAttributes(System.Attribute[])">
            <summary>
            Sets the attributes collection.
            </summary>
            <param name="attributes">The attributes to set.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.Load(System.IO.BinaryReader)">
            <summary>
            Load from the stream
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.Save(System.IO.BinaryWriter)">
            <summary>
            Save to the stream
            </summary>
            <param name="stream">Stream</param>
            <returns>True if cannot save data</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.Release">
            <summary>
            Releases meta data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.GetEntry(System.Int32)">
            <summary>
            Gets the entry.
            </summary>
            <param name="typeID">Entry type ID</param>
            <returns>Entry</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.AddEntry(System.Int32,System.Byte[])">
            <summary>
            Adds new entry.
            </summary>
            <param name="typeID">Type ID</param>
            <param name="data">Bytes to set</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.RemoveEntry(System.Int32)">
            <summary>
            Removes the entry.
            </summary>
            <param name="typeID">Type ID</param>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceNode">
            <summary>
            Visject Surface node control.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceControl" />
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode._isDuringValuesEditing">
            <summary>
            Flag used to discard node values setting during event sending for node UI flushing.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode._headerRect">
            <summary>
            The header rectangle (local space).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode._closeButtonRect">
            <summary>
            The close button rectangle (local space).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode._footerRect">
            <summary>
            The footer rectangle (local space).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode.Archetype">
            <summary>
            The node archetype.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode.GroupArchetype">
            <summary>
            The group archetype.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode.Elements">
            <summary>
            The elements collection.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode.Values">
            <summary>
            The values (node parameters in layout based on <see cref="F:FlaxEditor.Surface.NodeArchetype.DefaultValues"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNode.Title">
            <summary>
            Gets or sets the node title text.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode.ID">
            <summary>
            The identifier of the node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNode.Type">
            <summary>
            Gets the type (packed GroupID (higher 16 bits) and TypeID (lower 16 bits)).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode.Meta">
            <summary>
            The metadata.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.SurfaceNode.ValuesChanged">
            <summary>
            Occurs when node values collection gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.SurfaceNode"/> class.
            </summary>
            <param name="id">The node id.</param>
            <param name="context">The surface context.</param>
            <param name="nodeArch">The node archetype.</param>
            <param name="groupArch">The group archetype.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.CalculateNodeSize(System.Single,System.Single)">
            <summary>
            Calculates the size of the node including header, footer, and margins.
            </summary>
            <param name="width">The node area width.</param>
            <param name="height">The node area height.</param>
            <returns>The node control total size.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.Resize(System.Single,System.Single)">
            <summary>
            Resizes the node area.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.AddElement(FlaxEditor.Surface.NodeElementArchetype)">
            <summary>
            Creates an element from the archetype and adds the element to the node.
            </summary>
            <param name="arch">The element archetype.</param>
            <returns>The created element. Null if the archetype is invalid.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.AddElement(FlaxEditor.Surface.ISurfaceNodeElement)">
            <summary>
            Adds the element to the node.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.RemoveElement(FlaxEditor.Surface.ISurfaceNodeElement,System.Boolean)">
            <summary>
            Removes the element from the node.
            </summary>
            <param name="element">The element.</param>
            <param name="dispose">if set to <c>true</c> dispose control after removing, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.RemoveConnections">
            <summary>
            Removes all connections from and to that node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNode.HasDependentBoxes">
            <summary>
            Gets a value indicating whether this node uses dependent boxes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNode.HasIndependentBoxes">
            <summary>
            Gets a value indicating whether this node uses independent boxes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNode.HasDependentBoxesSetup">
            <summary>
            Gets a value indicating whether this node has dependent boxes with assigned valid types. Otherwise any box has no dependent type assigned.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.UpdateBoxesTypes">
            <summary>
            Updates dependant/independent boxes types.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.GetBox(System.Int32)">
            <summary>
            Tries to get box with given ID.
            </summary>
            <param name="id">The box id.</param>
            <returns>Box or null if cannot find.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.TryGetBox(System.Int32,FlaxEditor.Surface.Elements.Box@)">
            <summary>
            Tries to get box with given ID.
            </summary>
            <param name="id">The box id.</param>
            <param name="result">Box or null if cannot find.</param>
            <returns>True fi box has been found, otherwise false.</returns>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNode.HasBoxesSelection">
            <summary>
            Returns true if any box is selected by the user (one or more).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.SelectAllBoxes">
            <summary>
            Selects all the boxes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.ClearBoxSelection">
            <summary>
            Clears the box selection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.AddBoxToSelection(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Adds the specified box to the selection.
            </summary>
            <param name="box">The box.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.SelectBox(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Selects the specified control.
            </summary>
            <param name="box">The box.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.SelectBoxes(System.Collections.Generic.IEnumerable{FlaxEditor.Surface.Elements.Box})">
            <summary>
            Selects the specified controls collection.
            </summary>
            <param name="boxes">The boxes.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.DeselectBox(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Deselects the specified control.
            </summary>
            <param name="box">The box.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.OnSelectionChanged">
            <summary>
            Called when node gets selected or deselected.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.DepthFirstTraversal">
            <summary>
            Implementation of Depth-First traversal over the graph of surface nodes.
            </summary>
            <returns>The list of nodes as a result of depth-first traversal algorithm execution.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.DrawConnections(FlaxEngine.Vector2@)">
            <summary>
            Draws all the connections between surface objects related to this node.
            </summary>
            <param name="mousePosition">The current mouse position (in surface-space).</param>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNode.ShowTooltip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.OnTestTooltipOverControl(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.CanSelect(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.OnDeleted">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.SetValue(System.Int32,System.Object,System.Boolean)">
            <summary>
            Sets the value of the node parameter.
            </summary>
            <param name="index">The value index.</param>
            <param name="value">The value.</param>
            <param name="graphEdited">True if graph has been edited (nodes structure or parameter value).</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.SetValues(System.Object[],System.Boolean)">
            <summary>
            Sets the values of the node parameters.
            </summary>
            <param name="values">The values.</param>
            <param name="graphEdited">True if graph has been edited (nodes structure or parameter value).</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.OnValuesChanged">
            <summary>
            Called when node values set gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.ConnectionTick(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Updates the given box connection.
            </summary>
            <param name="box">The box.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.UpdateRectangles">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceNodeElementControl">
            <summary>
            Base class for <see cref="T:FlaxEditor.Surface.SurfaceNode"/> element controls. Implements <see cref="T:FlaxEditor.Surface.ISurfaceNodeElement"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNodeElementControl.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNodeElementControl.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNodeElementControl.Surface">
            <summary>
            Gets the surface.
            </summary>
            <value>
            The surface.
            </value>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNodeElementControl.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.SurfaceNodeElementControl"/> class.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="archetype">The element archetype.</param>
            <param name="location">The location.</param>
            <param name="size">The size.</param>
            <param name="autoFocus">if set to <c>true</c> can focus this control.</param>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceParameter">
            <summary>
            Represents parameter in the Surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.DragPrefix">
            <summary>
            The default prefix for drag data used for <see cref="T:FlaxEditor.Surface.SurfaceParameter"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.Type">
            <summary>
            Parameter type
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.ID">
            <summary>
            Parameter unique ID
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.IsPublic">
            <summary>
            True if is exposed outside
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.IsStatic">
            <summary>
            True if cannot edit value
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.IsUIVisible">
            <summary>
            True if can see via UI
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.IsUIEditable">
            <summary>
            True if can edit via UI
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.Meta">
            <summary>
            The metadata.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceParameter.Create(FlaxEngine.GraphParamType)">
            <summary>
            Creates the new parameter of the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceRootControl">
            <summary>
            The surface root control used to navigate around the view (scale and move it).
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceRootControl.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceRootControl.IntersectsContent(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceRootControl.DrawComments">
            <summary>
            Draws the comments. Render them before other controls to prevent foreground override.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceRootControl.DrawChildren">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceStyle">
            <summary>
            Describes GUI style used by the surface.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceStyle.ColorsData">
            <summary>
            Description with the colors used by the surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Connecting">
            <summary>
            The connecting nodes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.ConnectingValid">
            <summary>
            The connecting nodes color (for valid connection).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.ConnectingInvalid">
            <summary>
            The connecting nodes color (for invalid connection).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Impulse">
            <summary>
            The impulse boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Bool">
            <summary>
            The boolean boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Integer">
            <summary>
            The integer boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Float">
            <summary>
            The floating point boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Vector">
            <summary>
            The vector boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.String">
            <summary>
            The string boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Object">
            <summary>
            The object boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Rotation">
            <summary>
            The rotation boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Transform">
            <summary>
            The transform boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Box">
            <summary>
            The box boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.ImpulseSecondary">
            <summary>
            The impulse (secondary) boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Default">
            <summary>
            The default boxes color.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceStyle.IconsData">
            <summary>
            Descriptions for icons used by the surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.IconsData.BoxOpen">
            <summary>
            Icon for boxes without connections.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.IconsData.BoxClose">
            <summary>
            Icon for boxes with connections.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.IconsData.ArrowOpen">
            <summary>
            Icon for impulse boxes without connections.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.IconsData.ArrowClose">
            <summary>
            Icon for impulse boxes with connections.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.Colors">
            <summary>
            The colors.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.Icons">
            <summary>
            The icons.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.Background">
            <summary>
            The background image (tiled).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceStyle.GetConnectionColor(FlaxEditor.Surface.ConnectionType,FlaxEngine.Color@)">
            <summary>
            Gets the color for the connection.
            </summary>
            <param name="type">The connection type.</param>
            <param name="color">The color.</param>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.CreateStyleHandler">
            <summary>
             Function used to create style for the given surface type. Can be overriden to provide some customization via user plugin.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceStyle.CreateDefault(FlaxEditor.Editor)">
            <summary>
            Creates the default style.
            </summary>
            <param name="editor">The editor.</param>
            <returns>Created style.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.TransformCoordinateSystem">
            <summary>
            Vector transformation coordinate systems.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.TransformCoordinateSystem.World">
            <summary>
            The world space. It's absolute world space coordinate system.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.TransformCoordinateSystem.Tangent">
            <summary>
            The tangent space. It's relative to the surface (tangent frame defined by normal, tangent and bitangent vectors).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.TransformCoordinateSystem.View">
            <summary>
            The view space. It's relative to the current rendered viewport orientation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.TransformCoordinateSystem.Local">
            <summary>
            The local space. It's relative to the rendered object (aka object space).
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Undo.AddRemoveNodeAction">
            <summary>
            Add Visject Surface node undo action.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="P:FlaxEditor.Surface.Undo.AddRemoveNodeAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.AddRemoveNodeAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.AddRemoveNodeAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.AddRemoveNodeAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Undo.BoxHandle">
            <summary>
            The helper structure for Surface node box handle.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Undo.BoxHandle.#ctor(System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Undo.BoxHandle"/> struct.
            </summary>
            <param name="nodeId">The node identifier.</param>
            <param name="boxId">The box identifier.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Undo.BoxHandle.#ctor(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Undo.BoxHandle"/> struct.
            </summary>
            <param name="box">The box.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Undo.BoxHandle.Get(FlaxEditor.Surface.VisjectSurfaceContext)">
            <summary>
            Gets the box.
            </summary>
            <param name="context">The Surface context.</param>
            <returns>The restored box.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.Undo.ConnectBoxesAction">
            <summary>
            Edit Visject Surface node boxes connection undo action.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="P:FlaxEditor.Surface.Undo.ConnectBoxesAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.ConnectBoxesAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.ConnectBoxesAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.ConnectBoxesAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Undo.ContextHandle">
            <summary>
            The helper structure for Surface context handle.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Undo.ContextHandle.#ctor(FlaxEditor.Surface.VisjectSurfaceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Undo.ContextHandle"/> struct.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Undo.ContextHandle.Get(FlaxEditor.Surface.VisjectSurface)">
            <summary>
            Gets the context.
            </summary>
            <param name="surface">The Surface.</param>
            <returns>The restored context.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.Undo.EditNodeConnections">
            <summary>
            Edit Visject Surface node boxes connections undo action.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="P:FlaxEditor.Surface.Undo.EditNodeConnections.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.EditNodeConnections.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.EditNodeConnections.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.EditNodeConnections.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Undo.EditNodeValuesAction">
            <summary>
            Edit Visject Surface node values collection undo action.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="P:FlaxEditor.Surface.Undo.EditNodeValuesAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.EditNodeValuesAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.EditNodeValuesAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.EditNodeValuesAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Undo.MoveNodesAction">
            <summary>
            Move Visject Surface nodes undo action.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="P:FlaxEditor.Surface.Undo.MoveNodesAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.MoveNodesAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.MoveNodesAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Undo.MoveNodesAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.IConnectionInstigator">
            <summary>
            The Visject Surface connection creation handler object.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.IConnectionInstigator.ConnectionOrigin">
            <summary>
            Gets the connection origin point (in surface node space).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.IConnectionInstigator.AreConnected(FlaxEditor.Surface.IConnectionInstigator)">
            <summary>
            Determines whether this surface object is connected with the specified other object.
            </summary>
            <param name="other">The other object to check.</param>
            <returns><c>true</c> if connection between given two objects exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.IConnectionInstigator.CanConnectWith(FlaxEditor.Surface.IConnectionInstigator)">
            <summary>
            Determines whether this surface object can be connected with the specified other object.
            </summary>
            <param name="other">The other object to check.</param>
            <returns><c>true</c> if connection can be created; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.IConnectionInstigator.DrawConnectingLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Color@)">
            <summary>
            Draws the connecting line.
            </summary>
            <param name="startPos">The start position.</param>
            <param name="endPos">The end position.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:FlaxEditor.Surface.IConnectionInstigator.Connect(FlaxEditor.Surface.IConnectionInstigator)">
            <summary>
            Created the new connection with the specified other object.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurface">
            <summary>
            Visject Surface control for editing Nodes Graph.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
            <seealso cref="T:FlaxEditor.Surface.IParametersDependantNode" />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CanUseDirectCast(FlaxEditor.Surface.ConnectionType,FlaxEditor.Surface.ConnectionType)">
            <summary>
            Checks if can use direct conversion from one type to another.
            </summary>
            <param name="from">Source type.</param>
            <param name="to">Target type.</param>
            <returns>True if can use direct conversion, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ConnectingStart(FlaxEditor.Surface.IConnectionInstigator)">
            <summary>
            Begins connecting surface objects action.
            </summary>
            <param name="instigator">The connection instigator (eg. start box).</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ConnectingOver(FlaxEditor.Surface.IConnectionInstigator)">
            <summary>
            Callback for surface objects connections instigators to indicate mouse over control event (used to draw preview connections).
            </summary>
            <param name="instigator">The instigator.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ConnectingEnd(FlaxEditor.Surface.IConnectionInstigator)">
            <summary>
            Ends connecting surface objects action.
            </summary>
            <param name="end">The end object (eg. end box).</param>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.ContextStack">
            <summary>
            The surface context stack.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.RootContext">
            <summary>
            Gets the root surface context.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.Context">
            <summary>
            Gets the active surface context.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.ContextChanged">
            <summary>
            Occurs when context gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CreateContext(FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.ISurfaceContext)">
            <summary>
            Creates the Visject surface context for the given surface data source context.
            </summary>
            <param name="parent">The parent context.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OpenContext(FlaxEditor.Surface.ISurfaceContext)">
            <summary>
            Opens the child context of the current context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CloseContext">
            <summary>
            Closes the last opened context (the current one).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.RemoveContext(FlaxEditor.Surface.ISurfaceContext)">
            <summary>
            Removes the context from the surface and any related cached data.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ChangeContext(FlaxEditor.Surface.ISurfaceContext)">
            <summary>
            Changes the current opened context to the given one. Used as a navigation method.
            </summary>
            <param name="context">The target context.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnContextChanged">
            <summary>
            Called when context gets changed. Updates current context and UI. Updates the current context based on the first element in teh stack.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsPrimaryMenuOpened">
            <summary>
            Gets a value indicating whether the primary surface context menu is being opened (eg. user is adding nodes).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.SetPrimaryMenu(FlaxEditor.Surface.ContextMenu.VisjectCM)">
            <summary>
            Sets the primary menu for the Visject nodes spawning. Can be overriden per surface or surface context. Set to null to restore the default menu.
            </summary>
            <param name="menu">The menu to override with (use null if restore the default value).</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CreateDefaultPrimaryMenu">
            <summary>
            Creates the default primary context menu for the surface. Override this to provide the custom implementation.
            </summary>
            <remarks>This method is being called in <see cref="M:FlaxEditor.Surface.VisjectSurface.ShowPrimaryMenu(FlaxEngine.Vector2,System.Boolean,System.String)"/> on first time when need to show the default menu (no overrides specified for the surface context).</remarks>
            <returns>The created menu.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ShowPrimaryMenu(FlaxEngine.Vector2,System.Boolean,System.String)">
            <summary>
            Shows the primary menu.
            </summary>
            <param name="location">The location in the Surface Space.</param>
            <param name="moveSurface">If the surface should be moved to accommodate for the menu.</param>
            <param name="input">The user text input for nodes search.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ShowSecondaryCM(FlaxEngine.Vector2,FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Shows the secondary context menu.
            </summary>
            <param name="location">The location in the Surface Space.</param>
            <param name="controlUnderMouse">The Surface Control that is under the cursor. Used to customize the menu.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnShowSecondaryContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu,FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Called when editor is showing secondary context menu. Can be used to inject custom options for surface logic.
            </summary>
            <param name="controlUnderMouse">The Surface Control that is under the cursor. Used to customize the menu.</param>
            <param name="menu">The menu.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnPrimaryMenuButtonClick(FlaxEditor.Surface.ContextMenu.VisjectCMItem,FlaxEditor.Surface.Elements.Box)">
            <summary>
            Handles Visject CM item click event by spawning the selected item.
            </summary>
            <param name="visjectCmItem">The item.</param>
            <param name="selectedBox">The selected box.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Copy">
            <summary>
            Copies the selected items.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurface.BoxDataModel">
            <summary>
            The box data model.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.BoxDataModel.ID">
            <summary>
            The identifier.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.BoxDataModel.NodeIDs">
            <summary>
            The connected nodes ids.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.BoxDataModel.BoxIDs">
            <summary>
            The connected boxes ids.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurface.NodeDataModel">
            <summary>
            The node data model.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.GroupID">
            <summary>
            The group identifier.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.TypeID">
            <summary>
            The type identifier.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.ID">
            <summary>
            The identifier.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.X">
            <summary>
            The x position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.Y">
            <summary>
            The y position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.Values">
            <summary>
            The values.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.Boxes">
            <summary>
            The boxes.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurface.CommentDataModel">
            <summary>
            Comment data model.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.CommentDataModel.Title">
            <summary>
            The title text.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.CommentDataModel.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.CommentDataModel.Bounds">
            <summary>
            The bounds of the comment (in surface-space).
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurface.DataModel">
            <summary>
            Copied data model.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.DataModel.Nodes">
            <summary>
            The nodes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CanPaste">
            <summary>
            Checks if can paste the nodes data from the clipboard.
            </summary>
            <returns>True if can paste data, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Paste">
            <summary>
            Pastes the copied items.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Cut">
            <summary>
            Cuts the selected items.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Duplicate">
            <summary>
            Duplicates the selected items.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._rootControl">
            <summary>
            The surface control.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._leftMouseDown">
            <summary>
            The left mouse down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._rightMouseDown">
            <summary>
            The right mouse down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._leftMouseDownPos">
            <summary>
            The left mouse down position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._rightMouseDownPos">
            <summary>
            The right mouse down position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._mousePos">
            <summary>
            The mouse position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._mouseMoveAmount">
            <summary>
            The mouse movement amount.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._isMovingSelection">
            <summary>
            The is moving selection flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._movingSelectionViewPos">
            <summary>
            The moving selection view position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._connectionInstigator">
            <summary>
            The connection start.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._lastInstigatorUnderMouse">
            <summary>
            The last connection instigator under mouse.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._cmPrimaryMenu">
            <summary>
            The primary context menu.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._cmStartPos">
            <summary>
            The context menu start position.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.SelectionChanged">
            <summary>
            Occurs when selection gets changed.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.Owner">
            <summary>
            The surface owner.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.Style">
            <summary>
            The style used by the surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.Undo">
            <summary>
            The undo system to use for the history actions recording (optional, can be null).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsEdited">
            <summary>
            Gets a value indicating whether surface is edited.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.SurfaceRoot">
            <summary>
            Gets the current context surface root control (nodes and all other surface elements container).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.ViewPosition">
            <summary>
            Gets or sets the view position (upper left corner of the view) in the surface space.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.ViewCenterPosition">
            <summary>
            Gets or sets the view center position (middle point of the view) in the surface space.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.ViewScale">
            <summary>
            Gets or sets the view scale.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsSelecting">
            <summary>
            Gets a value indicating whether user is selecting nodes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsMovingSelection">
            <summary>
            Gets a value indicating whether user is moving selected nodes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsConnecting">
            <summary>
            Gets a value indicating whether user is connecting nodes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsLeftMouseButtonDown">
            <summary>
            Gets a value indicating whether the left mouse button is down.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsRightMouseButtonDown">
            <summary>
            Gets a value indicating whether the right mouse button is down.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.HasNodesSelection">
            <summary>
            Returns true if any node is selected by the user (one or more).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.SelectedNodes">
            <summary>
            Gets the list of the selected nodes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.SelectedControls">
            <summary>
            Gets the list of the selected controls (comments and nodes).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.Comments">
            <summary>
            Gets the list of the surface comments.
            </summary>
            <remarks>
            Don't call it too often. It does memory allocation and iterates over the surface controls to find comments in the graph.
            </remarks>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.Nodes">
            <summary>
            The current surface context nodes collection. Read-only.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeArchetypes">
            <summary>
            The surface node descriptors collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.#ctor(FlaxEditor.Surface.IVisjectSurfaceOwner,System.Action,FlaxEditor.Undo,FlaxEditor.Surface.SurfaceStyle,System.Collections.Generic.List{FlaxEditor.Surface.GroupArchetype})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.VisjectSurface"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="onSave">The save action called when user wants to save the surface.</param>
            <param name="undo">The undo/redo to use for the history actions recording. Optional, can be null to disable undo support.</param>
            <param name="style">The custom surface style. Use null to create the default style.</param>
            <param name="groups">The custom surface node types. Pass null to use the default nodes set.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetConnectionTypeName(FlaxEditor.Surface.ConnectionType)">
            <summary>
            Gets the display name of the connection type used in the surface.
            </summary>
            <param name="type">The graph connection type.</param>
            <returns>The display name (for UI).</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetCustomNodes">
            <summary>
            Gets the custom nodes group archetype with custom nodes archetypes. May be null if no custom nodes in use.
            </summary>
            <returns>The custom nodes or null if no used.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.AddCustomNodes(System.Collections.Generic.IEnumerable{FlaxEditor.Surface.NodeArchetype})">
            <summary>
            Adds the custom nodes archetypes to the surface (user can spawn them and surface can deserialize).
            </summary>
            <remarks>Custom nodes has to have a node logic typename in DefaultValues[0] and group name in DefaultValues[1].</remarks>
            <param name="archetypes">The archetypes.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.UpdateNavigationBar(FlaxEditor.GUI.NavigationBar,FlaxEditor.GUI.ToolStrip,System.Boolean)">
            <summary>
            Updates the navigation bar of the toolstrip from window that uses this surface. Updates the navigation bar panel buttons to match the current view path.
            </summary>
            <param name="navigationBar">The navigation bar to update.</param>
            <param name="toolStrip">The toolstrip to use as layout reference.</param>
            <param name="hideIfRoot">True if skip showing nav button if the current context is the root location (user has no option to change context).</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CanUseNodeType(FlaxEditor.Surface.NodeArchetype)">
            <summary>
            Determines whether the specified node archetype can be used in the surface.
            </summary>
            <param name="nodeArchetype">The node archetype.</param>
            <returns>True if can use this node archetype, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ShowWholeGraph">
            <summary>
            Shows the whole graph by changing the view scale and the position.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ShowArea(FlaxEngine.Rectangle)">
            <summary>
            Shows the given surface area by changing the view scale and the position.
            </summary>
            <param name="areaRect">The area rectangle.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.MarkAsEdited(System.Boolean)">
            <summary>
            Mark surface as edited.
            </summary>
            <param name="graphEdited">True if graph has been edited (nodes structure or parameter value).</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.SelectAll">
            <summary>
            Selects all the nodes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.AddToSelection(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Adds the specified control to the selection.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Select(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Selects the specified control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Select(System.Collections.Generic.IEnumerable{FlaxEditor.Surface.SurfaceControl})">
            <summary>
            Selects the specified controls collection.
            </summary>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Deselect(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Deselects the specified control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CommentSelection(System.String)">
            <summary>
            Creates the comment around the selected nodes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Delete(System.Collections.Generic.IEnumerable{FlaxEditor.Surface.SurfaceControl})">
            <summary>
            Deletes the specified collection of the controls.
            </summary>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Delete(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Deletes the specified control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Delete">
            <summary>
            Deletes the selected controls.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.FindNode(System.UInt16,System.UInt16)">
            <summary>
            Finds the node of the given type.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="typeId">The type identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.FindNode(System.Int32)">
            <summary>
            Finds the node with the given ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.FindNode(System.UInt32)">
            <summary>
            Finds the node with the given ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetParameterValueType(FlaxEngine.GraphParamType)">
            <summary>
            Gets the type of the parameter (enum to runtime value type).
            </summary>
            <param name="type">The type.</param>
            <returns>The runtime value time.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetValueTypeConnectionType(System.Type)">
            <summary>
            Gets the type of the connection (runtime value type to enum).
            </summary>
            <param name="type">The runtime value type.</param>
            <returns>The connection time.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurface.DragDropEventArgs">
            <summary>
            The custom drag drop event arguments.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Drag.DragEventArgs" />
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.DragDropEventArgs.SurfaceLocation">
            <summary>
            The surface location.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.DragHandlers">
            <summary>
            Drag and drop handlers.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ValidateDragItem(FlaxEditor.Content.AssetItem)">
            <summary>
            Validates the asset items drag operation.
            </summary>
            <param name="assetItem">The asset item.</param>
            <returns>True if can drag that item, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ValidateDragParameter(System.String)">
            <summary>
            Validates the parameter drag operation.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>Tre if can drag that parameter, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.HandleDragDropAssets(System.Collections.Generic.List{FlaxEditor.Content.AssetItem},FlaxEditor.Surface.VisjectSurface.DragDropEventArgs)">
            <summary>
            Handles the drag drop assets action.
            </summary>
            <param name="objects">The objects.</param>
            <param name="args">The drag drop arguments data.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.HandleDragDropParameters(System.Collections.Generic.List{System.String},FlaxEditor.Surface.VisjectSurface.DragDropEventArgs)">
            <summary>
            Handles the drag drop surface parameters action.
            </summary>
            <param name="objects">The objects.</param>
            <param name="args">The drag drop arguments data.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetParameterGetterNodeArchetype(System.UInt16@)">
            <summary>
            Gets the parameter getter node archetype to use.
            </summary>
            <param name="groupId">The group ID.</param>
            <returns>The node archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.DrawBackground">
            <summary>
            Draws the surface background.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.DrawSelection">
            <summary>
            Draws the selection background.
            </summary>
            <remarks>Called only when user is selecting nodes using rectangle tool.</remarks>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.DrawConnections(FlaxEngine.Vector2@)">
            <summary>
            Draws all the connections between surface nodes.
            </summary>
            <param name="mousePosition">The current mouse position (in surface-space).</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.DrawConnectingLine">
            <summary>
            Draws the connecting line.
            </summary>
            <remarks>Called only when user is connecting nodes.</remarks>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.DrawInputBrackets">
            <summary>
            Draws the brackets and connections
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.DrawContents">
            <summary>
            Draws the contents of the surface (nodes, connections, comments, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Draw">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.InputActions">
            <summary>
            The input actions collection to processed during user input.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.CustomMouseDown">
            <summary>
            Occurs when handling custom mouse button down event.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.CustomMouseUp">
            <summary>
            Occurs when handling custom mouse button up event.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.CustomMouseDoubleClick">
            <summary>
            Occurs when handling custom mouse double click event.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.CustomMouseMove">
            <summary>
            Occurs when handling custom mouse move event.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.CustomMouseWheel">
            <summary>
            Occurs when handling custom mouse wheel event.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetNodeUnderMouse">
            <summary>
            Gets the node under the mouse location.
            </summary>
            <returns>The node or null if no intersection.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetControlUnderMouse">
            <summary>
            Gets the control under the mouse location.
            </summary>
            <returns>The control or null if no intersection.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnCharInput(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.Parameters">
            <summary>
            The collection of the surface parameters.
            </summary>
            <remarks>From the root context only.</remarks>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetParameter(System.Guid)">
            <summary>
            Gets the parameter by the given ID.
            </summary>
            <remarks>From the root context only.</remarks>
            <param name="id">The identifier.</param>
            <returns>Found parameter instance or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetParameter(System.String)">
            <summary>
            Gets the parameter by the given name.
            </summary>
            <remarks>From the root context only.</remarks>
            <param name="name">The name.</param>
            <returns>Found parameter instance or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnParamCreated(FlaxEditor.Surface.SurfaceParameter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnParamRenamed(FlaxEditor.Surface.SurfaceParameter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnParamDeleted(FlaxEditor.Surface.SurfaceParameter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Load">
            <summary>
            Loads surface from the bytes.
            </summary>
            <remarks>
            The method calls the <see cref="P:FlaxEditor.Surface.ISurfaceContext.SurfaceData"/> getter to load the surface data bytes.
            </remarks>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Save">
            <summary>
            Saves the surface graph to bytes.
            </summary>
            <remarks>
            The method calls the <see cref="P:FlaxEditor.Surface.ISurfaceContext.SurfaceData"/> setter to assign the result bytes. Sets null value if failed.
            </remarks>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurfaceContext">
            <summary>
            Visject Surface visual representation context. Contains context and deserialized graph data.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurfaceContext.ContextDelegate">
            <summary>
            Visject context delegate type.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurfaceContext.ContextModifiedDelegate">
            <summary>
            Visject context modification delegate type.
            </summary>
            <param name="context">The context.</param>
            <param name="graphEdited">True if graph has been edited (nodes structure or parameter value). Otherwise just UI elements has been modified (node moved, comment resized).</param>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.Parent">
            <summary>
            The parent context. Defines the higher key surface graph context. May be null for the top-level context.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.Children">
            <summary>
            The children of this context (loaded and opened in editor only).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.Context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.RootControl">
            <summary>
            The root control for the GUI. Used to navigate around the view (scale and move it). Contains all surface controls including nodes and comments.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.Nodes">
            <summary>
            The nodes collection. Read-only.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.Parameters">
            <summary>
            The collection of the surface parameters.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurfaceContext.Comments">
            <summary>
            Gets the list of the surface comments.
            </summary>
            <remarks>
            Don't call it too often. It does memory allocation and iterates over the surface controls to find comments in the graph.
            </remarks>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurfaceContext.IsModified">
            <summary>
            Gets a value indicating whether this context is modified (needs saving and flushing with surface data context source).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurfaceContext.Surface">
            <summary>
            Gets the parent Visject surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.CachedSurfaceMeta">
            <summary>
            The surface meta (cached after opening the context, used to store it back into the data container).
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurfaceContext.Saving">
            <summary>
            Occurs when surface starts saving graph to bytes. Can be used to inject or cleanup surface data.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurfaceContext.Saved">
            <summary>
            Occurs when surface ends saving graph to bytes. Can be used to inject or cleanup surface data.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurfaceContext.Loading">
            <summary>
            Occurs when surface starts loading graph from data.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurfaceContext.Loaded">
            <summary>
            Occurs when surface graph gets loaded from data. Can be used to post-process it or perform validation.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurfaceContext.Modified">
            <summary>
            Occurs when surface gets modified (graph edited, node moved, comment resized).
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurfaceContext.ControlSpawned">
            <summary>
            Occurs when node gets added to the surface as spawn operation (eg. add new comment or add new node).
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurfaceContext.ControlDeleted">
            <summary>
            Occurs when node gets removed from the surface as delete/cut operation (eg. remove comment or cut node).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.#ctor(FlaxEditor.Surface.VisjectSurface,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.ISurfaceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.VisjectSurfaceContext"/> class.
            </summary>
            <param name="surface">The Visject surface using this context.</param>
            <param name="parent">The parent context. Defines the higher key surface graph context. May be null for the top-level context.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.#ctor(FlaxEditor.Surface.VisjectSurface,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.ISurfaceContext,FlaxEditor.Surface.SurfaceRootControl)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.VisjectSurfaceContext"/> class.
            </summary>
            <param name="surface">The Visject surface using this context.</param>
            <param name="parent">The parent context. Defines the higher key surface graph context. May be null for the top-level context.</param>
            <param name="context">The context.</param>
            <param name="rootControl">The surface root control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.FindNode(System.UInt16,System.UInt16)">
            <summary>
            Finds the node of the given type.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="typeId">The type identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.FindNode(System.Int32)">
            <summary>
            Finds the node with the given ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.FindNode(System.UInt32)">
            <summary>
            Finds the node with the given ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.GetParameter(System.Guid)">
            <summary>
            Gets the parameter by the given ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Found parameter instance or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.GetParameter(System.String)">
            <summary>
            Gets the parameter by the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>Found parameter instance or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.SpawnComment(FlaxEngine.Rectangle@,System.String,FlaxEngine.Color)">
            <summary>
            Spawns the comment object. Used by the <see cref="M:FlaxEditor.Surface.VisjectSurfaceContext.CreateComment(FlaxEngine.Rectangle@,System.String,FlaxEngine.Color)"/> and loading method. Can be overriden to provide custom comment object implementations.
            </summary>
            <param name="surfaceArea">The surface area to create comment.</param>
            <param name="title">The comment title.</param>
            <param name="color">The comment color.</param>
            <returns>The comment object</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.CreateComment(FlaxEngine.Rectangle@,System.String,FlaxEngine.Color)">
            <summary>
            Creates the comment.
            </summary>
            <param name="surfaceArea">The surface area to create comment.</param>
            <param name="title">The comment title.</param>
            <param name="color">The comment color.</param>
            <returns>The comment object</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.SpawnNode(System.UInt16,System.UInt16,FlaxEngine.Vector2,System.Object[])">
            <summary>
            Spawns the node.
            </summary>
            <param name="groupID">The group archetype ID.</param>
            <param name="typeID">The node archetype ID.</param>
            <param name="location">The location.</param>
            <param name="customValues">The custom values array. Must match node archetype <see cref="F:FlaxEditor.Surface.NodeArchetype.DefaultValues"/> size. Pass null to use default values.</param>
            <returns>Created node.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.SpawnNode(FlaxEditor.Surface.GroupArchetype,FlaxEditor.Surface.NodeArchetype,FlaxEngine.Vector2,System.Object[])">
            <summary>
            Spawns the node.
            </summary>
            <param name="groupArchetype">The group archetype.</param>
            <param name="nodeArchetype">The node archetype.</param>
            <param name="location">The location.</param>
            <param name="customValues">The custom values array. Must match node archetype <see cref="F:FlaxEditor.Surface.NodeArchetype.DefaultValues"/> size. Pass null to use default values.</param>
            <returns>Created node.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.MarkAsModified(System.Boolean)">
            <summary>
            Marks the context as modified and sends the event to the parent context.
            </summary>
            <param name="graphEdited">True if graph has been edited (nodes structure or parameter value). Otherwise just UI elements has been modified (node moved, comment resized).</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.Clear">
            <summary>
            Clears the surface data. Disposed all surface nodes, comments, parameters and more.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.Load">
            <summary>
            Loads the surface from bytes. Clears the surface before and uses context source data as a surface bytes source.
            </summary>
            <remarks>
            Assume this method does not throw exceptions but uses return value as a error code.
            </remarks>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.Save">
            <summary>
            Saves the surface to bytes. Performs also modified child surfaces saving before.
            </summary>
            <remarks>
            Assume this method does not throw exceptions but uses return value as a error code.
            </remarks>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.OnControlSpawned(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Called when control gets added to the surface as spawn operation (eg. add new comment or add new node).
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.OnControlDeleted(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Called when control gets removed from the surface as delete/cut operation (eg. remove comment or cut node).
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.OnControlLoaded(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Called when control gets loaded and should be added to the surface. Handles surface nodes initialization.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.OnNodeLoaded(FlaxEditor.Surface.SurfaceNode)">
            <summary>
            Called when node gets loaded and should be added to the surface. Creates node elements from the archetype.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:FlaxEditor.Surface.MissingNode">
            <summary>
            The missing node. Cached the node group, type and stored values information.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="M:FlaxEditor.Surface.MissingNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,System.UInt16,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.DummyCustomNode">
            <summary>
            The dummy custom node used to help custom surface nodes management (loading and layout preserving on missing type).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.DummyCustomNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.Brush">
            <summary>
            Foliage painting brush.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.Brush._material">
            <summary>
            The cached material instance for the brush usage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.Brush.Size">
            <summary>
            The brush size (in world units). Within this area, the brush will have effect.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Brush.GetBrushMaterial(FlaxEngine.Vector3@,FlaxEngine.Color@,FlaxEngine.GPUTexture)">
            <summary>
            Gets the brush material for the terrain chunk rendering. It must have domain set to Terrain. Setup material parameters within this call.
            </summary>
            <param name="position">The world-space brush position.</param>
            <param name="color">The brush position.</param>
            <param name="sceneDepth">The scene depth buffer (used for manual brush pixels clipping with rendered scene).</param>
            <returns>The ready to render material for terrain chunks overlay on top of the terrain.</returns>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.EditFoliageGizmo">
            <summary>
            Gizmo for editing foliage instances. Managed by the <see cref="T:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.TransformGizmoBase" />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditFoliageGizmo.GizmoMode">
            <summary>
            The parent mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner,FlaxEditor.Tools.Foliage.EditFoliageGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.EditFoliageGizmo"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.EditFoliageGizmo.SelectionCount">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.GetSelectedObject(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.GetSelectedObjectsBounds(FlaxEngine.BoundingBox@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.OnStartTransforming">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.OnApplyTransformation(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.OnEndTransforming">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.OnDuplicate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.Draw(FlaxEngine.RenderContext@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.Pick">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.OnActivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.OnDeactivated">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode">
            <summary>
            Foliage instances editing mode.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.Gizmo">
            <summary>
            The foliage painting gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.SelectionOutline">
            <summary>
            The foliage editing selection outline.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.SelectedFoliage">
            <summary>
            Gets the selected foliage actor (see <see cref="T:FlaxEditor.Modules.SceneEditingModule"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.SelectedInstanceIndex">
            <summary>
            The selected foliage instance index.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.SelectedInstanceIndexChanged">
            <summary>
            Occurs when selected instance index gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.Init(FlaxEditor.Viewport.MainEditorGizmoViewport)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.OnDeactivated">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.EditFoliageSelectionOutline">
            <summary>
            The custom outline for drawing the selected foliage instances outlines.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.SelectionOutline" />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditFoliageSelectionOutline.GizmoMode">
            <summary>
            The parent mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.EditFoliageSelectionOutline.CanRender">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageSelectionOutline.DrawSelectionDepth(FlaxEngine.GPUContext,FlaxEngine.SceneRenderTask,FlaxEngine.GPUTexture)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.EditTab">
            <summary>
            Foliage instances editor tab. Allows to pick and edit a single foliage instance properties.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tabs.Tab" />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.EditTab.ProxyObject">
            <summary>
            The object for foliage settings adjusting via Custom Editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditTab.ProxyObject.Mode">
            <summary>
            The gizmo mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditTab.ProxyObject.Foliage">
            <summary>
            The selected foliage actor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditTab.ProxyObject.InstanceIndex">
            <summary>
            The selected foliage instance index.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditTab.ProxyObject.#ctor(FlaxEditor.Tools.Foliage.EditFoliageGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.EditTab.ProxyObject"/> class.
            </summary>
            <param name="mode">The foliage editing gizmo mode.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.EditTab.ProxyObjectEditor">
            <summary>
            The custom editor for <see cref="T:FlaxEditor.Tools.Foliage.EditTab.ProxyObject"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditTab.ProxyObjectEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditTab.ProxyObjectEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditTab.Tab">
            <summary>
            The parent foliage tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditTab.Mode">
            <summary>
            The related gizmo mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditTab.#ctor(FlaxEditor.Tools.Foliage.FoliageTab,FlaxEditor.Tools.Foliage.EditFoliageGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.EditTab"/> class.
            </summary>
            <param name="tab">The parent tab.</param>
            <param name="mode">The related gizmo mode.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.FoliageTab">
            <summary>
            Foliage editing tab. Supports different modes for foliage editing including spawning, removing, and managing tools.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tabs.Tab" />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTab.Editor">
            <summary>
            The editor instance.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTab.SelectedFoliage">
            <summary>
            The cached selected foliage. It's synchronized with <see cref="F:FlaxEditor.Modules.SceneEditingModule.Selection"/>.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Foliage.FoliageTab.SelectedFoliageChanged">
            <summary>
            Occurs when selected foliage gets changed (to a different value).
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.FoliageTab.SelectedFoliageTypeIndexChangedDelegate">
            <summary>
            Delegate signature for selected foliage index change.
            </summary>
            <param name="previousIndex">The index of the previous foliage type.</param>
            <param name="currentIndex">The index of the current foliage type.</param>
        </member>
        <member name="E:FlaxEditor.Tools.Foliage.FoliageTab.SelectedFoliageTypeIndexChanged">
            <summary>
            Occurs when selected foliage type index gets changed.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Foliage.FoliageTab.SelectedFoliageTypesChanged">
            <summary>
            Occurs when selected foliage actors gets modification for foliage types collection (item added or removed). UI uses it to update the layout without manually tracking the collection.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.FoliageTab.SelectedFoliageTypeIndex">
            <summary>
            Gets or sets the index of the selected foliage type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTab.FoliageTypes">
            <summary>
            The foliage types tab;
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTab.Paint">
            <summary>
            The paint tab;
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTab.Edit">
            <summary>
            The edit tab;
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTab.FoliageTypeModelIdsToPaint">
            <summary>
            The foliage type model asset IDs checked to paint with them by default.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTab.#ctor(FlaxEngine.SpriteHandle,FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.FoliageTab"/> class.
            </summary>
            <param name="icon">The icon.</param>
            <param name="editor">The editor instance.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTab.OnSelected">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTab.UpdateGizmoMode">
            <summary>
            Updates the active viewport gizmo mode based on the current mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTab.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.FoliageTypesTab">
            <summary>
            Foliage types editor tab. Allows to add, remove or modify foliage instance types defined for the current foliage object.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tabs.Tab" />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject">
            <summary>
            The object for foliage type settings adjusting via Custom Editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject.Tab">
            <summary>
            The tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject.Foliage">
            <summary>
            The foliage actor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject.SelectedFoliageTypeIndex">
            <summary>
            The selected foliage instance type index.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject.#ctor(FlaxEditor.Tools.Foliage.FoliageTypesTab)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject"/> class.
            </summary>
            <param name="tab">The tab.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObjectEditor">
            <summary>
            The custom editor for <see cref="T:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObjectEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObjectEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTypesTab.Tab">
            <summary>
            The parent foliage tab.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTypesTab.#ctor(FlaxEditor.Tools.Foliage.FoliageTab)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.FoliageTypesTab"/> class.
            </summary>
            <param name="tab">The parent tab.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTypesTab.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.PaintFoliageGizmo">
            <summary>
            Gizmo for painting with foliage. Managed by the <see cref="T:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.Mode">
            <summary>
            The parent mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.IsPainting">
            <summary>
            Gets a value indicating whether gizmo tool is painting the foliage.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.PaintStarted">
            <summary>
            Occurs when foliage paint has been started.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.PaintEnded">
            <summary>
            Occurs when foliage paint has been ended.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner,FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.PaintFoliageGizmo"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.Draw(FlaxEngine.RenderContext@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.PaintStart(FlaxEngine.Foliage)">
            <summary>
            Called to start foliage painting
            </summary>
            <param name="foliage">The foliage.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.PaintUpdate(System.Single)">
            <summary>
            Called to update foliage painting logic.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.PaintEnd">
            <summary>
            Called to end foliage painting.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode">
            <summary>
            Foliage painting tool mode.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.Gizmo">
            <summary>
            The foliage painting gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.CurrentBrush">
            <summary>
            Gets the current brush.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.CursorPosition">
            <summary>
            The last valid cursor position of the brush (in world space).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.CursorNormal">
            <summary>
            The last valid cursor hit point normal vector of the brush (in world space).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.HasValidHit">
            <summary>
            Flag used to indicate whenever last cursor position of the brush is valid.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.SelectedFoliage">
            <summary>
            Gets the selected foliage actor (see <see cref="T:FlaxEditor.Modules.SceneEditingModule"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.CursorBrushBounds">
            <summary>
            Gets the world bounds of the brush located at the current cursor position (defined by <see cref="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.CursorPosition"/>). Valid only if <see cref="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.HasValidHit"/> is set to true.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.Init(FlaxEditor.Viewport.MainEditorGizmoViewport)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.ClearCursor">
            <summary>
            Clears the cursor location information cached within the gizmo mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.SetCursor(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Sets the cursor location in the world space. Updates the brush location and cached affected chunks.
            </summary>
            <param name="hitPosition">The cursor hit location on the selected foliage.</param>
            <param name="hitNormal">The cursor hit location normal vector fot he surface.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.PaintTab">
            <summary>
            Foliage painting tab. Allows to add or remove foliage instances defined for the current foliage object.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tabs.Tab" />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.PaintTab.ProxyObject">
            <summary>
            The object for foliage painting settings adjusting via Custom Editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.PaintTab.ProxyObject.Foliage">
            <summary>
            The foliage actor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.PaintTab.ProxyObject.SelectedFoliageTypeIndex">
            <summary>
            The selected foliage instance type index.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintTab.ProxyObject.#ctor(FlaxEditor.Tools.Foliage.PaintTab,FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.PaintTab.ProxyObject"/> class.
            </summary>
            <param name="tab">The tab.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.PaintTab.ProxyObjectEditor">
            <summary>
            The custom editor for <see cref="T:FlaxEditor.Tools.Foliage.PaintTab.ProxyObject"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintTab.ProxyObjectEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.PaintTab.Tab">
            <summary>
            The parent foliage tab.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintTab.#ctor(FlaxEditor.Tools.Foliage.FoliageTab,FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.PaintTab"/> class.
            </summary>
            <param name="tab">The parent tab.</param>
            <param name="mode">The gizmo mode.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction">
            <summary>
            The foliage editing action that records before and after states to swap between unmodified and modified foliage data.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.#ctor(FlaxEngine.Foliage)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction"/> class.
            </summary>
            <remarks>Use <see cref="M:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.RecordEnd"/> to finalize foliage data after editing action.</remarks>
            <param name="foliage">The foliage.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.RecordEnd">
            <summary>
            Called when foliage editing ends. Records the `after` state of the actor. Marks foliage actor parent scene edited.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.Undo.EditSelectedInstanceIndexAction">
            <summary>
            The foliage editing action that handles changing selected foliage actor instance index.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditSelectedInstanceIndexAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.Undo.EditSelectedInstanceIndexAction"/> class.
            </summary>
            <param name="before">The selected index before.</param>
            <param name="after">The selected index after.</param>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.Undo.EditSelectedInstanceIndexAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditSelectedInstanceIndexAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditSelectedInstanceIndexAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditSelectedInstanceIndexAction.Undo">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Brushes.Brush">
            <summary>
            Terrain sculpture or paint brush logic descriptor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.Brush._material">
            <summary>
            The cached material instance for the brush usage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.Brush.Size">
            <summary>
            The brush size (in world units). Within this area, the brush will have at least some effect.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Brushes.Brush.GetBrushMaterial(FlaxEngine.Vector3@,FlaxEngine.Color@)">
            <summary>
            Gets the brush material for the terrain chunk rendering. It must have domain set to Terrain. Setup material parameters within this call.
            </summary>
            <param name="position">The world-space brush position.</param>
            <param name="color">The brush position.</param>
            <returns>The ready to render material for terrain chunks overlay on top of the terrain.</returns>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Brushes.Brush.CacheMaterial(System.String)">
            <summary>
            Loads the brush material from the internal location. It's later cached by the object and reused.
            </summary>
            <param name="internalPath">The brush material path (for in-build editor brushes).</param>
            <returns>The brush material instance or null if cannot load or missing.</returns>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Brushes.Brush.Sample(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Samples the brush intensity at the specified position.
            </summary>
            <param name="brushPosition">The brush center position (world-space).</param>
            <param name="samplePosition">The sample position (world-space).</param>
            <returns>The sampled value. Normalized to range 0-1 as an intensity to apply.</returns>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Brushes.CircleBrush">
            <summary>
            Terrain brush that has circle shape and uses radial falloff.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Brushes.Brush" />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.FalloffTypes">
            <summary>
            Circle brush falloff types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.FalloffTypes.Smooth">
            <summary>
            A linear falloff that has been smoothed to round off the sharp edges where the falloff begins and ends.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.FalloffTypes.Linear">
            <summary>
            A sharp linear falloff, without rounded edges.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.FalloffTypes.Spherical">
            <summary>
            A half-ellipsoid-shaped falloff that begins smoothly and ends sharply.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.FalloffTypes.Tip">
            <summary>
            A falloff with an abrupt start and a smooth ellipsoidal end. The opposite of the Sphere falloff.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.Falloff">
            <summary>
            The brush falloff that defines the percentage from the brush's extents where the falloff should begin. Essentially, this describes how hard the brush's edges are. A falloff of 0 means the brush will have full effect throughout with hard edges. A falloff of 1 means the brush will only have full effect at its center, and the effect will be reduced throughout its entire area to the edge.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.FalloffType">
            <summary>
            The brush falloff type. Defines circle brush falloff mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.GetBrushMaterial(FlaxEngine.Vector3@,FlaxEngine.Color@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.Sample(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.CarveTab">
            <summary>
            Terrain carving tab. Supports different modes for terrain editing including: carving, painting and managing tools.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tabs.Tab" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.CarveTab.Editor">
            <summary>
            The editor instance.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.CarveTab.SelectedTerrain">
            <summary>
            The cached selected terrain. It's synchronized with <see cref="F:FlaxEditor.Modules.SceneEditingModule.Selection"/>.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.CarveTab.SelectedTerrainChanged">
            <summary>
            Occurs when selected terrain gets changed (to a different value).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.CarveTab.Sculpt">
            <summary>
            The sculpt tab;
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.CarveTab.Paint">
            <summary>
            The paint tab;
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.CarveTab.Edit">
            <summary>
            The edit tab;
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CarveTab.#ctor(FlaxEngine.SpriteHandle,FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.CarveTab"/> class.
            </summary>
            <param name="icon">The icon.</param>
            <param name="editor">The editor instance.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CarveTab.OnSelected">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CarveTab.UpdateGizmoMode">
            <summary>
            Updates the active viewport gizmo mode based on the current mode.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.CreateTerrainDialog">
            <summary>
            Terrain creator dialog. Allows user to specify initial terrain properties perform proper setup.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.Dialog" />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CreateTerrainDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.CreateTerrainDialog"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CreateTerrainDialog.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CreateTerrainDialog.CanCloseWindow(FlaxEngine.ClosingReason)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CreateTerrainDialog.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.EditTab">
            <summary>
            Carve tab related to terrain editing. Allows to pick a terrain patch and remove it or add new patches. Can be used to modify selected chunk properties.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tabs.Tab" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTab.CarveTab">
            <summary>
            The parent carve tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTab.Gizmo">
            <summary>
            The related edit terrain gizmo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.#ctor(FlaxEditor.Tools.Terrain.CarveTab,FlaxEditor.Tools.Terrain.EditTerrainGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.EditTab"/> class.
            </summary>
            <param name="tab">The parent tab.</param>
            <param name="gizmo">The related gizmo.</param>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.EditTab.DeletePatchAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.DeletePatchAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.DeletePatchAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.DeletePatchAction.Dispose">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.EditTab.EditChunkMaterialAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.EditChunkMaterialAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.EditChunkMaterialAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.EditChunkMaterialAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.EditTerrainGizmo">
            <summary>
            Gizmo for picking terrain chunks and patches. Managed by the <see cref="T:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTerrainGizmo.Mode">
            <summary>
            The parent mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner,FlaxEditor.Tools.Terrain.EditTerrainGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.EditTerrainGizmo"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.Draw(FlaxEngine.RenderContext@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.EditTerrainGizmo.AddPatchAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.AddPatchAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.AddPatchAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.AddPatchAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.Pick">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode">
            <summary>
            Terrain management and editing tool. 
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Modes">
            <summary>
            The terrain properties editing modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Modes.Edit">
            <summary>
            Terrain chunks editing mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Modes.Add">
            <summary>
            Terrain patches adding mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Modes.Remove">
            <summary>
            Terrain patches removing mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Modes.Export">
            <summary>
            Terrain exporting mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Gizmo">
            <summary>
            The terrain editing gizmo.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.SelectedPatchCoord">
            <summary>
            The patch coordinates of the last picked patch.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.SelectedChunkCoord">
            <summary>
            The chunk coordinates (relative to the patch) of the last picked chunk.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.ModeChanged">
            <summary>
            Occurs when mode gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.EditMode">
            <summary>
            The active edit mode.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.SelectedChunkCoordChanged">
            <summary>
            Occurs when selected patch or/and chunk coord gets changed (after picking by user).
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Init(FlaxEditor.Viewport.MainEditorGizmoViewport)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.SetSelectedChunk(FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Sets the selected chunk coordinates.
            </summary>
            <param name="patchCoord">The patch coord.</param>
            <param name="chunkCoord">The chunk coord.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Paint.Mode">
            <summary>
            The base class for terran paint tool modes.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Paint.Mode.Options">
            <summary>
            The options container for the terrain editing apply.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.Options.Invert">
            <summary>
            If checked, modification apply method should be inverted.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.Options.Strength">
            <summary>
            The master strength parameter to apply when editing the terrain.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.Options.DeltaTime">
            <summary>
            The delta time (in seconds) for the terrain modification apply. Used to scale the strength. Adjusted to handle low-FPS.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.Strength">
            <summary>
            The tool strength (normalized to range 0-1). Defines the intensity of the paint operation to make it stronger or mre subtle.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Paint.Mode.SupportsNegativeApply">
            <summary>
            Gets a value indicating whether this mode supports negative apply for terrain modification.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Paint.Mode.ActiveSplatmapIndex">
            <summary>
            Gets the index of the active splatmap texture to modify by the tool. It must be equal or higher than zero bu less than <see cref="F:FlaxEngine.Terrain.MaxSplatmapsCount"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Paint.Mode.Apply(FlaxEditor.Tools.Terrain.Brushes.Brush,FlaxEditor.Tools.Terrain.Paint.Mode.Options@,FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode,FlaxEngine.Terrain)">
            <summary>
            Applies the modification to the terrain.
            </summary>
            <param name="brush">The brush.</param>
            <param name="options">The options.</param>
            <param name="gizmo">The gizmo.</param>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams">
            <summary>
            The mode apply parameters.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.Brush">
            <summary>
            The brush.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.Options">
            <summary>
            The options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.Gizmo">
            <summary>
            The gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.Terrain">
            <summary>
            The terrain.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.ModifiedOffset">
            <summary>
            The modified offset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.ModifiedSize">
            <summary>
            The modified size.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.Strength">
            <summary>
            The final calculated strength of the effect to apply (can be negative for inverted terrain modification if <see cref="P:FlaxEditor.Tools.Terrain.Paint.Mode.SupportsNegativeApply"/> is set).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.SplatmapIndex">
            <summary>
            The splatmap texture index.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.TempBuffer">
            <summary>
            The temporary data buffer (for modified data).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.SourceData">
            <summary>
            The source data buffer.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.HeightmapSize">
            <summary>
            The heightmap size (edge).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.PatchPositionLocal">
            <summary>
            The patch position in terrain local-space.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.TerrainWorld">
            <summary>
            The terrain local-to-world matrix.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Paint.Mode.Apply(FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams@)">
            <summary>
            Applies the modification to the terrain.
            </summary>
            <param name="p">The parameters to use.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode">
            <summary>
            Paint tool mode. Edits terrain splatmap by painting with the single layer on top of the others.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Paint.Mode" />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers">
            <summary>
            The paint layers.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer0">
            <summary>
            The layer 0.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer1">
            <summary>
            The layer 0.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer2">
            <summary>
            The layer 2.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer3">
            <summary>
            The layer 3.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer4">
            <summary>
            The layer 4.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer5">
            <summary>
            The layer 5.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer6">
            <summary>
            The layer 6.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer7">
            <summary>
            The layer 7.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layer">
            <summary>
            The layer to paint with it.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.ActiveSplatmapIndex">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Apply(FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTab">
            <summary>
            Carve tab related to terrain painting. Allows to modify terrain splatmap using brush.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tabs.Tab" />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTab.ProxyObject">
            <summary>
            The object for paint mode settings adjusting via Custom Editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTab.CarveTab">
            <summary>
            The parent carve tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTab.Gizmo">
            <summary>
            The related sculp terrain gizmo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTab.#ctor(FlaxEditor.Tools.Terrain.CarveTab,FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.PaintTab"/> class.
            </summary>
            <param name="tab">The parent tab.</param>
            <param name="gizmo">The related gizmo.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTab.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmo">
            <summary>
            Gizmo for painting terrain. Managed by the <see cref="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.Mode">
            <summary>
            The parent mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.IsPainting">
            <summary>
            Gets a value indicating whether gizmo tool is painting the terrain splatmap.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.PaintStarted">
            <summary>
            Occurs when terrain paint has been started.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.PaintEnded">
            <summary>
            Occurs when terrain paint has been ended.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner,FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmo"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.Draw(FlaxEngine.RenderContext@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.PaintStart(FlaxEngine.Terrain)">
            <summary>
            Called to start terrain painting
            </summary>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.PaintUpdate(System.Single)">
            <summary>
            Called to update terrain painting logic.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.PaintEnd">
            <summary>
            Called to end terrain painting.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.Pick">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode">
            <summary>
            Terrain painting tool mode.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.TerrainLayerNames">
            <summary>
            The terrain layer names.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.Gizmo">
            <summary>
            The terrain painting gizmo.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ModeTypes">
            <summary>
            The tool modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ModeTypes.SingleLayer">
            <summary>
            The single layer mode.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.BrushTypes">
            <summary>
            The brush types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.BrushTypes.CircleBrush">
            <summary>
            The circle brush.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ToolModeChanged">
            <summary>
            Occurs when tool mode gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ToolModeType">
            <summary>
            Gets the current tool mode (enum).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CurrentMode">
            <summary>
            Gets the current tool mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.SingleLayerMode">
            <summary>
            Gets the single layer mode instance.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ToolBrushChanged">
            <summary>
            Occurs when tool brush gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ToolBrushType">
            <summary>
            Gets the current tool brush (enum).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CurrentBrush">
            <summary>
            Gets the current brush.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CircleBrush">
            <summary>
            Gets the circle brush instance.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CursorPosition">
            <summary>
            The last valid cursor position of the brush (in world space).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.HasValidHit">
            <summary>
            Flag used to indicate whenever last cursor position of the brush is valid.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.PatchLocation">
            <summary>
            Describes the terrain patch link.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.PatchLocation.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.PatchesUnderCursor">
            <summary>
            The selected terrain patches collection that are under cursor (affected by the brush).
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ChunkLocation">
            <summary>
            Describes the terrain chunk link.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ChunkLocation.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ChunkLocation.ChunkCoord">
            <summary>
            The chunk coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ChunksUnderCursor">
            <summary>
            The selected terrain chunk collection that are under cursor (affected by the brush).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.SelectedTerrain">
            <summary>
            Gets the selected terrain actor (see <see cref="T:FlaxEditor.Modules.SceneEditingModule"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CursorBrushBounds">
            <summary>
            Gets the world bounds of the brush located at the current cursor position (defined by <see cref="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CursorPosition"/>). Valid only if <see cref="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.HasValidHit"/> is set to true.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.GetSplatmapTempBuffer(System.Int32)">
            <summary>
            Gets the splatmap temporary scratch memory buffer used to modify terrain samples. Allocated memory is unmanaged by GC.
            </summary>
            <param name="size">The minimum buffer size (in bytes).</param>
            <returns>The allocated memory using <see cref="T:System.Runtime.InteropServices.Marshal"/> interface.</returns>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CurrentEditUndoAction">
            <summary>
            Gets the current edit terrain undo system action. Use it to record the data for the undo restoring after terrain editing.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.Init(FlaxEditor.Viewport.MainEditorGizmoViewport)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.OnDeactivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ClearCursor">
            <summary>
            Clears the cursor location information cached within the gizmo mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.SetCursor(FlaxEngine.Vector3@)">
            <summary>
            Sets the cursor location in the world space. Updates the brush location and cached affected chunks.
            </summary>
            <param name="hitPosition">The cursor hit location on the selected terrain.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.FlattenMode">
            <summary>
            Sculpt tool mode that flattens the terrain heightmap area affected by brush to the target value.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Sculpt.Mode" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.FlattenMode.TargetHeight">
            <summary>
            The target terrain height to blend to.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.FlattenMode.Apply(FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.HolesMode">
            <summary>
            Terrain holes creating tool mode edits terrain holes mask by changing area affected by brush.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Sculpt.Mode" />
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Sculpt.HolesMode.SupportsNegativeApply">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Sculpt.HolesMode.EditHoles">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.HolesMode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.Sculpt.HolesMode"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.HolesMode.Apply(FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.Mode">
            <summary>
            The base class for terran sculpt tool modes.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.Mode.Options">
            <summary>
            The options container for the terrain editing apply.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.Options.Invert">
            <summary>
            If checked, modification apply method should be inverted.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.Options.Strength">
            <summary>
            The master strength parameter to apply when editing the terrain.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.Options.DeltaTime">
            <summary>
            The delta time (in seconds) for the terrain modification apply. Used to scale the strength. Adjusted to handle low-FPS.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.Strength">
            <summary>
            The tool strength (normalized to range 0-1). Defines the intensity of the sculpt operation to make it stronger or mre subtle.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Sculpt.Mode.SupportsNegativeApply">
            <summary>
            Gets a value indicating whether this mode supports negative apply for terrain modification.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Sculpt.Mode.EditHoles">
            <summary>
            Gets a value indicating whether this mode modifies the terrain holes mask rather than heightmap.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.Mode.Apply(FlaxEditor.Tools.Terrain.Brushes.Brush,FlaxEditor.Tools.Terrain.Sculpt.Mode.Options@,FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode,FlaxEngine.Terrain)">
            <summary>
            Applies the modification to the terrain.
            </summary>
            <param name="brush">The brush.</param>
            <param name="options">The options.</param>
            <param name="gizmo">The gizmo.</param>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams">
            <summary>
            The mode apply parameters.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.Brush">
            <summary>
            The brush.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.Options">
            <summary>
            The options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.Gizmo">
            <summary>
            The gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.Terrain">
            <summary>
            The terrain.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.ModifiedOffset">
            <summary>
            The modified offset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.ModifiedSize">
            <summary>
            The modified size.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.Strength">
            <summary>
            The final calculated strength of the effect to apply (can be negative for inverted terrain modification if <see cref="P:FlaxEditor.Tools.Terrain.Sculpt.Mode.SupportsNegativeApply"/> is set).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.TempBuffer">
            <summary>
            The temporary data buffer (for modified data). Has size of array of floats that has size of heightmap length.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.SourceHeightMap">
            <summary>
            The source heightmap data buffer. May be null if modified is holes mask.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.SourceHolesMask">
            <summary>
            The source holes mask data buffer. May be null if modified is.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.HeightmapSize">
            <summary>
            The heightmap size (edge).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.PatchPositionLocal">
            <summary>
            The patch position in terrain local-space.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.TerrainWorld">
            <summary>
            The terrain local-to-world matrix.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.Mode.Apply(FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams@)">
            <summary>
            Applies the modification to the terrain.
            </summary>
            <param name="p">The parameters to use.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.NoiseMode">
            <summary>
            Sculpt tool mode that applies the noise to the terrain heightmap area affected by brush.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Sculpt.Mode" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.NoiseMode.NoiseScale">
            <summary>
            The tool noise scale. Adjusts the noise pattern scale.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.NoiseMode.NoiseAmount">
            <summary>
            The tool noise amount scale. Adjusts the noise amplitude scale.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Sculpt.NoiseMode.SupportsNegativeApply">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.NoiseMode.Apply(FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.SculptMode">
            <summary>
            Sculpt tool mode. Edits terrain heightmap by moving area affected by brush up or down.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Sculpt.Mode" />
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Sculpt.SculptMode.SupportsNegativeApply">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.SculptMode.Apply(FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.SmoothMode">
            <summary>
            Sculpt tool mode that smooths the terrain heightmap area affected by brush.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Sculpt.Mode" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.SmoothMode.FilterRadius">
            <summary>
            The tool smoothing radius. Defines the size of smoothing kernel, the higher value the more nearby samples is included into normalized sum. Scaled by the brush size.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.SmoothMode.Apply(FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTab">
            <summary>
            Carve tab related to terrain carving. Allows modifying terrain height and visibility using a brush.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tabs.Tab" />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTab.ProxyObject">
            <summary>
            The object for sculp mode settings adjusting via Custom Editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTab.CarveTab">
            <summary>
            The parent carve tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTab.Gizmo">
            <summary>
            The related sculp terrain gizmo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTab.#ctor(FlaxEditor.Tools.Terrain.CarveTab,FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.SculptTab"/> class.
            </summary>
            <param name="tab">The parent tab.</param>
            <param name="gizmo">The related gizmo.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTab.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmo">
            <summary>
            Gizmo for carving terrain. Managed by the <see cref="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.Mode">
            <summary>
            The parent mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.IsPainting">
            <summary>
            Gets a value indicating whether gizmo tool is painting the terrain heightmap.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.PaintStarted">
            <summary>
            Occurs when terrain paint has been started.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.PaintEnded">
            <summary>
            Occurs when terrain paint has been ended.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner,FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmo"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.Draw(FlaxEngine.RenderContext@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.PaintStart(FlaxEngine.Terrain)">
            <summary>
            Called to start terrain painting
            </summary>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.PaintUpdate(System.Single)">
            <summary>
            Called to update terrain painting logic.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.PaintEnd">
            <summary>
            Called to end terrain painting.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.Pick">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode">
            <summary>
            Terrain carving tool mode.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.Gizmo">
            <summary>
            The terrain carving gizmo.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ModeTypes">
            <summary>
            The tool modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ModeTypes.Sculpt">
            <summary>
            The sculpt mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ModeTypes.Smooth">
            <summary>
            The smooth mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ModeTypes.Flatten">
            <summary>
            The flatten mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ModeTypes.Noise">
            <summary>
            The noise mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ModeTypes.Holes">
            <summary>
            The holes mode.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.BrushTypes">
            <summary>
            The brush types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.BrushTypes.CircleBrush">
            <summary>
            The circle brush.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ToolModeChanged">
            <summary>
            Occurs when tool mode gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ToolModeType">
            <summary>
            Gets the current tool mode (enum).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CurrentMode">
            <summary>
            Gets the current tool mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.SculptMode">
            <summary>
            Gets the sculpt mode instance.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.SmoothMode">
            <summary>
            Gets the smooth mode instance.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ToolBrushChanged">
            <summary>
            Occurs when tool brush gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ToolBrushType">
            <summary>
            Gets the current tool brush (enum).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CurrentBrush">
            <summary>
            Gets the current brush.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CircleBrush">
            <summary>
            Gets the circle brush instance.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CursorPosition">
            <summary>
            The last valid cursor position of the brush (in world space).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.HasValidHit">
            <summary>
            Flag used to indicate whenever last cursor position of the brush is valid.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.PatchLocation">
            <summary>
            Describes the terrain patch link.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.PatchLocation.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.PatchesUnderCursor">
            <summary>
            The selected terrain patches collection that are under cursor (affected by the brush).
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ChunkLocation">
            <summary>
            Describes the terrain chunk link.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ChunkLocation.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ChunkLocation.ChunkCoord">
            <summary>
            The chunk coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ChunksUnderCursor">
            <summary>
            The selected terrain chunk collection that are under cursor (affected by the brush).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.SelectedTerrain">
            <summary>
            Gets the selected terrain actor (see <see cref="T:FlaxEditor.Modules.SceneEditingModule"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CursorBrushBounds">
            <summary>
            Gets the world bounds of the brush located at the current cursor position (defined by <see cref="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CursorPosition"/>). Valid only if <see cref="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.HasValidHit"/> is set to true.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.GetHeightmapTempBuffer(System.Int32)">
            <summary>
            Gets the heightmap temporary scratch memory buffer used to modify terrain samples. Allocated memory is unmanaged by GC.
            </summary>
            <param name="size">The minimum buffer size (in bytes).</param>
            <returns>The allocated memory using <see cref="T:System.Runtime.InteropServices.Marshal"/> interface.</returns>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CurrentEditUndoAction">
            <summary>
            Gets the current edit terrain undo system action. Use it to record the data for the undo restoring after terrain editing.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.Init(FlaxEditor.Viewport.MainEditorGizmoViewport)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.OnDeactivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ClearCursor">
            <summary>
            Clears the cursor location information cached within the gizmo mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.SetCursor(FlaxEngine.Vector3@)">
            <summary>
            Sets the cursor location in the world space. Updates the brush location and cached affected chunks.
            </summary>
            <param name="hitPosition">The cursor hit location on the selected terrain.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainHeightMapAction">
            <summary>
            The terrain heightmap editing action that records before and after states to swap between unmodified and modified terrain data.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
            <seealso cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction" />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainHeightMapAction.#ctor(FlaxEngine.Terrain)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainHeightMapAction"/> class.
            </summary>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Undo.EditTerrainHeightMapAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainHeightMapAction.GetData(FlaxEngine.Int2@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainHeightMapAction.SetData(FlaxEngine.Int2@,System.IntPtr,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainHolesMapAction">
            <summary>
            The terrain holes mask editing action that records before and after states to swap between unmodified and modified terrain data.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
            <seealso cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction" />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainHolesMapAction.#ctor(FlaxEngine.Terrain)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainHolesMapAction"/> class.
            </summary>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Undo.EditTerrainHolesMapAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainHolesMapAction.GetData(FlaxEngine.Int2@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainHolesMapAction.SetData(FlaxEngine.Int2@,System.IntPtr,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction">
            <summary>
            The terrain heightmap or visibility map editing action that records before and after states to swap between unmodified and modified terrain data.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.PatchData">
            <summary>
            The compact data for the terrain patch modification.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.PatchData.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.PatchData.Before">
            <summary>
            The data before (allocated on heap memory or null).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.PatchData.After">
            <summary>
            The data after (allocated on heap memory or null).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.PatchData.Tag">
            <summary>
            The custom tag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction._terrain">
            <summary>
            The terrain (actor Id).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction._heightmapLength">
            <summary>
            The heightmap length (vertex count).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction._heightmapDataSize">
            <summary>
            The heightmap data size (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction._patches">
            <summary>
            The terrain patches
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.HasAnyModification">
            <summary>
            Gets a value indicating whether this action has any modification to the terrain (recorded patches changes).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.Terrain">
            <summary>
            Gets the terrain.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.#ctor(FlaxEngine.Terrain,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction"/> class.
            </summary>
            <remarks>Use <see cref="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.AddPatch(FlaxEngine.Int2@,System.Object)"/> to mark new patches to record and <see cref="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.OnEditingEnd"/> to finalize patches data after editing action.</remarks>
            <param name="terrain">The terrain.</param>
            <param name="stride">The data stride (eg. sizeof(float)).</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.HashPatch(FlaxEngine.Int2@)">
            <summary>
            Checks if the patch at the given coordinates has been already added.
            </summary>
            <param name="patchCoord">The patch coordinates.</param>
            <returns>True if patch has been added, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.AddPatch(FlaxEngine.Int2@,System.Object)">
            <summary>
            Adds the patch to the action and records its current state.
            </summary>
            <param name="patchCoord">The patch coordinates.</param>
            <param name="tag">The custom argument (per patch).</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.OnEditingEnd">
            <summary>
            Called when terrain action editing ends. Record the `after` state of the patches.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.GetData(FlaxEngine.Int2@,System.Object)">
            <summary>
            Gets the patch data.
            </summary>
            <param name="patchCoord">The patch coordinates.</param>
            <param name="tag">The custom argument (per patch).</param>
            <returns>The data buffer (pointer to unmanaged memory).</returns>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.SetData(FlaxEngine.Int2@,System.IntPtr,System.Object)">
            <summary>
            Sets the patch data.
            </summary>
            <param name="patchCoord">The patch coordinates.</param>
            <param name="data">The patch data.</param>
            <param name="tag">The custom argument (per patch).</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainSplatMapAction">
            <summary>
            The terrain splatmap editing action that records before and after states to swap between unmodified and modified terrain data.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
            <seealso cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction" />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainSplatMapAction.#ctor(FlaxEngine.Terrain)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainSplatMapAction"/> class.
            </summary>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Undo.EditTerrainSplatMapAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainSplatMapAction.GetData(FlaxEngine.Int2@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainSplatMapAction.SetData(FlaxEngine.Int2@,System.IntPtr,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.FoliageTools">
            <summary>
            Foliage tools for editor. Allows to spawn and modify foliage instances.
            </summary>
        </member>
        <member name="M:FlaxEditor.FoliageTools.Paint(FlaxEngine.Foliage,System.Int32[],FlaxEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Paints the foliage instances using the given foliage types selection and the brush location.
            </summary>
            <param name="foliage">The foliage actor.</param>
            <param name="foliageTypesIndices">The foliage types indices to use for painting.</param>
            <param name="brushPosition">The brush position.</param>
            <param name="brushRadius">The brush radius.</param>
            <param name="additive">True if paint using additive mode, false if remove foliage instances.</param>
        </member>
        <member name="M:FlaxEditor.FoliageTools.Paint(FlaxEngine.Foliage,System.Int32[],FlaxEngine.Vector3,System.Single)">
            <summary>
            Paints the foliage instances using the given foliage types selection and the brush location.
            </summary>
            <param name="foliage">The foliage actor.</param>
            <param name="foliageTypesIndices">The foliage types indices to use for painting.</param>
            <param name="brushPosition">The brush position.</param>
            <param name="brushRadius">The brush radius.</param>
        </member>
        <member name="M:FlaxEditor.FoliageTools.Remove(FlaxEngine.Foliage,System.Int32[],FlaxEngine.Vector3,System.Single)">
            <summary>
            Removes the foliage instances using the given foliage types selection and the brush location.
            </summary>
            <param name="foliage">The foliage actor.</param>
            <param name="foliageTypesIndices">The foliage types indices to use for painting.</param>
            <param name="brushPosition">The brush position.</param>
            <param name="brushRadius">The brush radius.</param>
        </member>
        <member name="T:FlaxEditor.TerrainTools">
            <summary>
            Terrain* tools for editor. Allows to create and modify terrain.
            </summary>
        </member>
        <member name="M:FlaxEditor.TerrainTools.TryGetPatchCoordToAdd(FlaxEngine.Terrain,FlaxEngine.Ray,FlaxEngine.Int2@)">
            <summary>
            Checks if a given ray hits any of the terrain patches sides to add a new patch there.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="ray">The ray to use for tracing (eg. mouse ray in world space).</param>
            <param name="result">The result patch coordinates (x and z). Valid only when method returns true.</param>
            <returns>True if result is valid, otherwise nothing to add there.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.GenerateTerrain(FlaxEngine.Terrain,FlaxEngine.Int2@,FlaxEngine.Texture,System.Single,FlaxEngine.Texture,FlaxEngine.Texture)">
            <summary>
            Generates the terrain from the input heightmap and splat maps.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="numberOfPatches">The number of patches (X and Z axis).</param>
            <param name="heightmap">The heightmap texture.</param>
            <param name="heightmapScale">The heightmap scale. Applied to adjust the normalized heightmap values into the world units.</param>
            <param name="splatmap1">The custom terrain splat map used as a source of the terrain layers weights. Each channel from RGBA is used as an independent layer weight for terrain layers compositing. It's optional.</param>
            <param name="splatmap2">The custom terrain splat map used as a source of the terrain layers weights. Each channel from RGBA is used as an independent layer weight for terrain layers compositing. It's optional.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.SerializePatch(FlaxEngine.Terrain,FlaxEngine.Int2@)">
            <summary>
            Serializes the terrain chunk data to JSON string.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <returns>The serialized chunk data.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.DeserializePatch(FlaxEngine.Terrain,FlaxEngine.Int2@,System.String)">
            <summary>
            Deserializes the terrain chunk data from the JSON string.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <param name="value">The JSON string with serialized patch data.</param>
        </member>
        <member name="M:FlaxEditor.TerrainTools.InitializePatch(FlaxEngine.Terrain,FlaxEngine.Int2@)">
            <summary>
            Initializes the patch heightmap and collision to the default flat level.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to initialize it.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.ModifyHeightMap(FlaxEngine.Terrain,FlaxEngine.Int2@,System.Single*,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Modifies the terrain patch heightmap with the given samples.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to modify it.</param>
            <param name="samples">The samples. The array length is size.X*size.Y. It has to be type of float.</param>
            <param name="offset">The offset from the first row and column of the heightmap data (offset destination x and z start position).</param>
            <param name="size">The size of the heightmap to modify (x and z). Amount of samples in each direction.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.ModifyHolesMask(FlaxEngine.Terrain,FlaxEngine.Int2@,System.Byte*,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Modifies the terrain patch holes mask with the given samples.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to modify it.</param>
            <param name="samples">The samples. The array length is size.X*size.Y. It has to be type of byte.</param>
            <param name="offset">The offset from the first row and column of the mask data (offset destination x and z start position).</param>
            <param name="size">The size of the mask to modify (x and z). Amount of samples in each direction.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.ModifySplatMap(FlaxEngine.Terrain,FlaxEngine.Int2@,System.Int32,FlaxEngine.Color32*,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Modifies the terrain patch splat map (layers mask) with the given samples.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to modify it.</param>
            <param name="index">The zero-based splatmap texture index.</param>
            <param name="samples">The samples. The array length is size.X*size.Y. It has to be type of <see cref="T:FlaxEngine.Color32"/>.</param>
            <param name="offset">The offset from the first row and column of the splatmap data (offset destination x and z start position).</param>
            <param name="size">The size of the splatmap to modify (x and z). Amount of samples in each direction.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.GetHeightmapData(FlaxEngine.Terrain,FlaxEngine.Int2@)">
            <summary>
            Gets the raw pointer to the heightmap data (cached internally by the c++ core in editor).
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to gather it.</param>
            <returns>The pointer to the array of floats with terrain patch heights data. Null if failed to gather the data.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.GetHolesMaskData(FlaxEngine.Terrain,FlaxEngine.Int2@)">
            <summary>
            Gets the raw pointer to the holes mask data (cached internally by the c++ core in editor).
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to gather it.</param>
            <returns>The pointer to the array of bytes with terrain patch holes mask data. Null if failed to gather the data.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.GetSplatMapData(FlaxEngine.Terrain,FlaxEngine.Int2@,System.Int32)">
            <summary>
            Gets the raw pointer to the splatmap data (cached internally by the c++ core in editor).
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to gather it.</param>
            <param name="index">The zero-based splatmap texture index.</param>
            <returns>The pointer to the array of Color32 with terrain patch packed splatmap data. Null if failed to gather the data.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.ExportTerrain(FlaxEngine.Terrain,System.String)">
            <summary>
            Export terrain's heightmap as a texture.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="outputFolder">The output folder path</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Actions.AddRemoveScript">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> used to add/remove <see cref="T:FlaxEngine.Script"/> from the <see cref="T:FlaxEngine.Actor"/>.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="M:FlaxEditor.Actions.AddRemoveScript.Added(FlaxEngine.Script)">
            <summary>
            Creates a new added script undo action.
            </summary>
            <param name="script">The new script.</param>
            <returns>The action.</returns>
        </member>
        <member name="M:FlaxEditor.Actions.AddRemoveScript.Add(FlaxEngine.Actor,System.Type)">
            <summary>
            Creates a new add script undo action.
            </summary>
            <param name="parentActor">The parent actor.</param>
            <param name="scriptType">The script type.</param>
            <returns>The action.</returns>
        </member>
        <member name="M:FlaxEditor.Actions.AddRemoveScript.Remove(FlaxEngine.Script)">
            <summary>
            Creates a new remove script undo action.
            </summary>
            <param name="script">The script.</param>
            <returns>The action.</returns>
        </member>
        <member name="P:FlaxEditor.Actions.AddRemoveScript.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.AddRemoveScript.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.AddRemoveScript.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.AddRemoveScript.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Actions.BreakPrefabLinkAction">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> used to break/restore <see cref="T:FlaxEngine.Prefab"/> connection for the collection of <see cref="T:FlaxEngine.Actor"/> and <see cref="T:FlaxEngine.Script"/> objects.
            </summary>
            <remarks>
            This action assumes that all objects in the given actor hierarchy are using the same prefab asset.
            </remarks>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="M:FlaxEditor.Actions.BreakPrefabLinkAction.Break(FlaxEngine.Actor)">
            <summary>
            Creates a new undo action that in state for breaking prefab connection.
            </summary>
            <param name="actor">The target actor.</param>
            <returns>The action.</returns>
        </member>
        <member name="M:FlaxEditor.Actions.BreakPrefabLinkAction.Linked(FlaxEngine.Actor)">
            <summary>
            Creates a new undo action that in state for linked prefab connection. Action on perform will undo that.
            </summary>
            <param name="actor">The target actor.</param>
            <returns>The action.</returns>
        </member>
        <member name="P:FlaxEditor.Actions.BreakPrefabLinkAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.BreakPrefabLinkAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.BreakPrefabLinkAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.BreakPrefabLinkAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Actions.ChangeScriptAction">
            <summary>
            Change <see cref="T:FlaxEngine.Script"/> order or enable/disable undo action.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
            <seealso cref="T:FlaxEditor.ISceneEditAction" />
        </member>
        <member name="M:FlaxEditor.Actions.ChangeScriptAction.ChangeOrder(FlaxEngine.Script,System.Int32)">
            <summary>
            Creates new undo action that changes script order in parent actor scripts collection.
            </summary>
            <param name="script">The script to reorder.</param>
            <param name="newOrder">New index.</param>
            <returns>The action (not performed yet).</returns>
        </member>
        <member name="M:FlaxEditor.Actions.ChangeScriptAction.ChangeEnabled(FlaxEngine.Script,System.Boolean)">
            <summary>
            Creates new undo action that enables/disables script.
            </summary>
            <param name="script">The script to enable or disable.</param>
            <param name="newEnabled">New enable state.</param>
            <returns>The action (not performed yet).</returns>
        </member>
        <member name="P:FlaxEditor.Actions.ChangeScriptAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.ChangeScriptAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.ChangeScriptAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.ChangeScriptAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.ChangeScriptAction.MarkSceneEdited(FlaxEditor.Modules.SceneModule)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Actions.DeleteActorsAction">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> used to delete a selection of <see cref="T:FlaxEditor.SceneGraph.ActorNode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="F:FlaxEditor.Actions.DeleteActorsAction._nodeParents">
            <summary>
            The node parents.
            </summary>
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.#ctor(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Actions.DeleteActorsAction"/> class.
            </summary>
            <param name="objects">The objects.</param>
            <param name="isInverted">If set to <c>true</c> action will be inverted - instead of delete it will be create actors.</param>
        </member>
        <member name="P:FlaxEditor.Actions.DeleteActorsAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.Delete">
            <summary>
            Deletes the objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.GetNode(System.Guid)">
            <summary>
            Gets the node.
            </summary>
            <param name="id">The actor id.</param>
            <returns>The scene graph node.</returns>
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.Create">
            <summary>
            Creates the removed objects (from data).
            </summary>
        </member>
        <member name="T:FlaxEditor.Actions.PasteActorsAction">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> used to paste a set of <see cref="T:FlaxEditor.SceneGraph.ActorNode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="F:FlaxEditor.Actions.PasteActorsAction._nodeParents">
            <summary>
            The node parents.
            </summary>
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.#ctor(System.Byte[],System.Guid[],System.Guid@,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Actions.PasteActorsAction"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="objectIds">The object ids.</param>
            <param name="pasteParent">The paste parent object id.</param>
            <param name="name">The action name.</param>
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.LinkBrokenParentReference(FlaxEngine.Actor)">
            <summary>
            Links the broken parent reference (missing parent). By default links the actor to the first scene.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="P:FlaxEditor.Actions.PasteActorsAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.Do(System.Collections.Generic.List{FlaxEditor.SceneGraph.ActorNode}@,System.Collections.Generic.List{FlaxEditor.SceneGraph.ActorNode}@)">
            <summary>
            Performs the paste/duplicate action and outputs created objects nodes.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="nodeParents">The node parents.</param>
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.GetNode(System.Guid)">
            <summary>
            Gets the node.
            </summary>
            <param name="id">The actor id.</param>
            <returns>The scene graph node.</returns>
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.EditorUndo">
            <summary>
            Implementation of <see cref="T:FlaxEditor.Undo"/> customized for the <see cref="T:FlaxEditor.Editor"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Undo" />
        </member>
        <member name="P:FlaxEditor.EditorUndo.Enabled">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.EditorUndo.OnAction(FlaxEditor.IUndoAction)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.EditorUndo.OnUndo(FlaxEditor.IUndoAction)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.EditorUndo.OnRedo(FlaxEditor.IUndoAction)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.EditorUndo.CheckSceneEdited(FlaxEditor.IUndoAction)">
            <summary>
            Checks if the any scene has been edited after performing the given action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:FlaxEditor.ISceneEditAction">
            <summary>
            Interface for undo action that can modify scene data (actors, scripts, etc.)
            </summary>
        </member>
        <member name="M:FlaxEditor.ISceneEditAction.MarkSceneEdited(FlaxEditor.Modules.SceneModule)">
            <summary>
            Marks the scenes edited.
            </summary>
            <param name="sceneModule">The scene module.</param>
        </member>
        <member name="T:FlaxEditor.IUndoAction">
            <summary>
            Interface for <see cref="M:FlaxEditor.IUndoAction.Undo"/> actions.
            </summary>
            <seealso cref="T:FlaxEditor.History.IHistoryAction" />
        </member>
        <member name="M:FlaxEditor.IUndoAction.Do">
            <summary>
            Performs this action.
            </summary>
        </member>
        <member name="M:FlaxEditor.IUndoAction.Undo">
            <summary>
            Undoes this action.
            </summary>
        </member>
        <member name="T:FlaxEditor.MultiUndoAction">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> that contains one or more child actions performed at once. Allows to merge different actions.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="F:FlaxEditor.MultiUndoAction.Actions">
            <summary>
            The child actions.
            </summary>
        </member>
        <member name="M:FlaxEditor.MultiUndoAction.#ctor(FlaxEditor.IUndoAction[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.MultiUndoAction"/> class.
            </summary>
            <param name="actions">The actions to include within this multi action.</param>
        </member>
        <member name="M:FlaxEditor.MultiUndoAction.#ctor(System.Collections.Generic.IEnumerable{FlaxEditor.IUndoAction},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.MultiUndoAction"/> class.
            </summary>
            <param name="actions">The actions to include within this multi action.</param>
            <param name="actionString">The action string.</param>
        </member>
        <member name="P:FlaxEditor.MultiUndoAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.MultiUndoAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.MultiUndoAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.MultiUndoAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SelectionChangeAction">
            <summary>
            Objects selection change action.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="T:FlaxEditor.SelectionChangeAction.DataStorage">
            <summary>
            The undo data.
            </summary>
        </member>
        <member name="F:FlaxEditor.SelectionChangeAction.DataStorage.Before">
            <summary>
            The 'before' selection.
            </summary>
        </member>
        <member name="F:FlaxEditor.SelectionChangeAction.DataStorage.After">
            <summary>
            The 'after' selection.
            </summary>
        </member>
        <member name="M:FlaxEditor.SelectionChangeAction.#ctor(FlaxEditor.SceneGraph.SceneGraphNode[],FlaxEditor.SceneGraph.SceneGraphNode[],System.Action{FlaxEditor.SceneGraph.SceneGraphNode[]})">
            <summary>
            User selection has changed
            </summary>
            <param name="before">Previously selected nodes</param>
            <param name="after">Newly selected nodes</param>
            <param name="callback">Selection change callback</param>
        </member>
        <member name="P:FlaxEditor.SelectionChangeAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SelectionChangeAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SelectionChangeAction.Undo">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.TransformObjectsAction">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> used to transform a selection of <see cref="T:FlaxEditor.SceneGraph.SceneGraphNode"/>.
            The same logic could be achieved using <see cref="T:FlaxEditor.UndoMultiBlock"/> but it would be slower.
            Since we use this kind of action very ofter (for <see cref="T:FlaxEditor.Gizmo.TransformGizmo"/> operations) it's better to provide faster implementation.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="T:FlaxEditor.TransformObjectsAction.DataStorage">
            <summary>
            The undo data.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.Scene">
            <summary>
            The scene of the selected objects.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.Selection">
            <summary>
            The selection pool.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.Before">
            <summary>
            The 'before' state.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.After">
            <summary>
            The 'after' state.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.BeforeBounds">
            <summary>
            The cached bounding box that contains all selected items in 'before' state.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.AfterBounds">
            <summary>
            The cached bounding box that contains all selected items in 'after' state.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.NavigationDirty">
            <summary>
            True if navigation system has been modified during editing the selected objects (navmesh auto-rebuild is required).
            </summary>
        </member>
        <member name="P:FlaxEditor.TransformObjectsAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.TransformObjectsAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.TransformObjectsAction.Undo">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Undo">
            <summary>
            The undo/redo actions recording object.
            </summary>
        </member>
        <member name="T:FlaxEditor.Undo.UndoEventDelegate">
            <summary>
            Undo system event.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Undo.IUndoInternal.End(System.Object)">
            <summary>
            Creates the undo action object on recording end.
            </summary>
            <param name="snapshotInstance">The snapshot object.</param>
            <returns>The undo action. May be null if no changes found.</returns>
        </member>
        <member name="F:FlaxEditor.Undo._snapshots">
            <summary>
            Stack of undo actions for future disposal.
            </summary>
        </member>
        <member name="P:FlaxEditor.Undo.UndoOperationsStack">
            <summary>
            Gets the undo operations stack.
            </summary>
            <value>
            The undo operations stack.
            </value>
        </member>
        <member name="E:FlaxEditor.Undo.UndoDone">
            <summary>
            Occurs when undo operation is done.
            </summary>
        </member>
        <member name="E:FlaxEditor.Undo.RedoDone">
            <summary>
            Occurs when redo operation is done.
            </summary>
        </member>
        <member name="E:FlaxEditor.Undo.ActionDone">
            <summary>
            Occurs when action is done and appended to the <see cref="T:FlaxEditor.Undo"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Undo.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEditor.Undo"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.Undo.CanUndo">
            <summary>
            Gets a value indicating whether can do undo on last performed action.
            </summary>
            <value>
              <c>true</c> if can perform undo; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.Undo.CanRedo">
            <summary>
            Gets a value indicating whether can do redo on last undone action.
            </summary>
            <value>
              <c>true</c> if can perform redo; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.Undo.FirstUndoName">
            <summary>
            Gets the first name of the undo action.
            </summary>
            <value>
            The first name of the undo action.
            </value>
        </member>
        <member name="P:FlaxEditor.Undo.FirstRedoName">
            <summary>
            Gets the first name of the redo action.
            </summary>
            <value>
            The first name of the redo action.
            </value>
        </member>
        <member name="P:FlaxEditor.Undo.Capacity">
            <summary>
            Gets or sets the capacity of the undo history buffers.
            </summary>
        </member>
        <member name="T:FlaxEditor.Undo.UndoInternal">
            <summary>
            Internal class for keeping reference of undo action.
            </summary>
        </member>
        <member name="M:FlaxEditor.Undo.UndoInternal.End(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Undo.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Undo"/> class.
            </summary>
            <param name="historyActionsLimit">The history actions limit.</param>
        </member>
        <member name="M:FlaxEditor.Undo.RecordBegin(System.Object,System.String)">
            <summary>
            Begins recording for undo action.
            </summary>
            <param name="snapshotInstance">Instance of an object to record.</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
        </member>
        <member name="M:FlaxEditor.Undo.RecordEnd(System.Object,FlaxEditor.IUndoAction,FlaxEditor.IUndoAction)">
            <summary>
            Ends recording for undo action.
            </summary>
            <param name="snapshotInstance">Instance of an object to finish recording, if null take last provided.</param>
            <param name="customActionBefore">Custom action to append to the undo block action before recorded modifications apply.</param>
            <param name="customActionAfter">Custom action to append to the undo block action after recorded modifications apply.</param>
        </member>
        <member name="T:FlaxEditor.Undo.UndoMultiInternal">
            <summary>
            Internal class for keeping reference of undo action that modifies collection of objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Undo.UndoMultiInternal.End(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Undo.RecordMultiBegin(System.Object[],System.String)">
            <summary>
            Begins recording for undo action.
            </summary>
            <param name="snapshotInstances">Instances of objects to record.</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
        </member>
        <member name="M:FlaxEditor.Undo.RecordMultiEnd(System.Object[],FlaxEditor.IUndoAction,FlaxEditor.IUndoAction)">
            <summary>
            Ends recording for undo action.
            </summary>
            <param name="snapshotInstance">Instance of an object to finish recording, if null take last provided.</param>
            <param name="customActionBefore">Custom action to append to the undo block action before recorded modifications apply.</param>
            <param name="customActionAfter">Custom action to append to the undo block action after recorded modifications apply.</param>
        </member>
        <member name="M:FlaxEditor.Undo.RecordAction(System.Object,System.String,System.Action)">
            <summary>
            Creates new undo action for provided instance of object.
            </summary>
            <param name="snapshotInstance">Instance of an object to record</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
            <param name="actionsToSave">Action in after witch recording will be finished.</param>
        </member>
        <member name="M:FlaxEditor.Undo.RecordAction``1(``0,System.String,System.Action{``0})">
            <summary>
            Creates new undo action for provided instance of object.
            </summary>
            <param name="snapshotInstance">Instance of an object to record</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
            <param name="actionsToSave">Action in after witch recording will be finished.</param>
        </member>
        <member name="M:FlaxEditor.Undo.RecordAction(System.Object,System.String,System.Action{System.Object})">
            <summary>
            Creates new undo action for provided instance of object.
            </summary>
            <param name="snapshotInstance">Instance of an object to record</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
            <param name="actionsToSave">Action in after witch recording will be finished.</param>
        </member>
        <member name="M:FlaxEditor.Undo.AddAction(FlaxEditor.IUndoAction)">
            <summary>
            Adds the action to the history.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Undo.PerformUndo">
            <summary>
            Undo last recorded action
            </summary>
        </member>
        <member name="M:FlaxEditor.Undo.PerformRedo">
            <summary>
            Redo last undone action
            </summary>
        </member>
        <member name="M:FlaxEditor.Undo.OnAction(FlaxEditor.IUndoAction)">
            <summary>
            Called when <see cref="T:FlaxEditor.Undo"/> performs action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Undo.OnUndo(FlaxEditor.IUndoAction)">
            <summary>
            Called when <see cref="T:FlaxEditor.Undo"/> performs undo action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Undo.OnRedo(FlaxEditor.IUndoAction)">
            <summary>
            Called when <see cref="T:FlaxEditor.Undo"/> performs redo action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Undo.Clear">
            <summary>
            Clears the history.
            </summary>
        </member>
        <member name="M:FlaxEditor.Undo.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneTreeNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneTreeNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneTreeNodeConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.UndoActionBase`1">
            <summary>
            Base class for <see cref="T:FlaxEditor.IUndoAction"/> implementations. Stores undo data serialized and preserves references to the game objects.
            </summary>
            <typeparam name="TData">The type of the data. Must have <see cref="T:System.SerializableAttribute"/>.</typeparam>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="F:FlaxEditor.UndoActionBase`1._data">
            <summary>
            The serialized data (Json text).
            </summary>
        </member>
        <member name="P:FlaxEditor.UndoActionBase`1.Data">
            <summary>
            Gets or sets the serialized undo data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:FlaxEditor.UndoActionBase`1.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.UndoActionBase`1.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.UndoActionBase`1.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.UndoActionBase`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.UndoBlock">
            <summary>
            Helper class to record undo operations in a block with <c>using</c> keyword.
            <example>
            using(new UndoBlock(undo, obj, "Rename"))
            {
                obj.Name = "super name";
            }
            </example>
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:FlaxEditor.UndoBlock.#ctor(FlaxEditor.Undo,System.Object,System.String,FlaxEditor.IUndoAction,FlaxEditor.IUndoAction)">
            <summary>
            Creates new undo object for recording actions with using pattern.
            </summary>
            <param name="undo">The undo/redo object.</param>
            <param name="snapshotInstance">Instance of an object to record.</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
            <param name="customActionBefore">Custom action to append to the undo block action before recorded modifications apply.</param>
            <param name="customActionAfter">Custom action to append to the undo block action after recorded modifications apply.</param>
        </member>
        <member name="M:FlaxEditor.UndoBlock.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.UndoMultiBlock">
            <summary>
            Helper class to record undo operations in a block with <c>using</c> keyword. Records changes for one or more objects.
            </summary>
            <example>
            using(new UndoMultiBlock(undo, objs, "Rename objects"))
            {
            	foreach(var e in objs)
            		e.Name = "super name";
            }
            </example>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:FlaxEditor.UndoMultiBlock.#ctor(FlaxEditor.Undo,System.Collections.Generic.IEnumerable{System.Object},System.String,FlaxEditor.IUndoAction,FlaxEditor.IUndoAction)">
            <summary>
            Creates new undo object for recording actions with using pattern.
            </summary>
            <param name="undo">The undo/redo object.</param>
            <param name="snapshotInstances">Instances of objects to record.</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
            <param name="customActionBefore">Custom action to append to the undo block action before recorded modifications apply.</param>
            <param name="customActionAfter">Custom action to append to the undo block action after recorded modifications apply.</param>
        </member>
        <member name="M:FlaxEditor.UndoMultiBlock.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Utilities.Constants">
            <summary>
            Editor constants and global properties.
            </summary>
        </member>
        <member name="T:FlaxEditor.Utilities.DuplicateScenes">
            <summary>
            Tool helper class used to duplicate loaded scenes (backup them) and restore later. Used for play in-editor functionality.
            </summary>
        </member>
        <member name="P:FlaxEditor.Utilities.DuplicateScenes.HasData">
            <summary>
            Checks if scene data has been gathered.
            </summary>
        </member>
        <member name="P:FlaxEditor.Utilities.DuplicateScenes.WasDirty">
            <summary>
            Gets a value indicating whether any scene was dirty before gathering.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.DuplicateScenes.GatherSceneData">
            <summary>
            Collect loaded scenes data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.DuplicateScenes.CreateScenes">
            <summary>
            Deserialize captured scenes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.DuplicateScenes.DeletedScenes">
            <summary>
            Deletes the creates scenes for the simulation.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.DuplicateScenes.RestoreSceneData">
            <summary>
            Restore captured scene data.
            </summary>
        </member>
        <member name="T:FlaxEditor.Utilities.Extensions">
            <summary>
            Helper methods used by the editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.Extensions.ReflectiveCompare``1(``0,``0)">
            <summary>
            Gets a list of MemberComparison values that represent the fields and/or properties that differ between the two objects.
            </summary>
            <typeparam name="T">Type of object to compare.</typeparam>
            <param name="first">First object to compare.</param>
            <param name="second">Second object to compare.</param>
            <returns>Returns list of <see cref="T:FlaxEditor.Utilities.MemberComparison" /> structs with all different fields and properties.</returns>
        </member>
        <member name="T:FlaxEditor.Utilities.MemberComparison">
            <summary>
            This structure represents the comparison of one member of an object to the corresponding member of another object.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.MemberComparison.MemberPath">
            <summary>
            Members path this Comparison compares.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.MemberComparison.Value1">
            <summary>
            The value of first object respective member
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.MemberComparison.Value2">
            <summary>
            The value of second object respective member
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberComparison.#ctor(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.MemberComparison"/> struct.
            </summary>
            <param name="member">The member.</param>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberComparison.#ctor(FlaxEditor.Utilities.MemberInfoPath,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.MemberComparison"/> struct.
            </summary>
            <param name="memberPath">The member path.</param>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberComparison.SetMemberValue(System.Object,System.Object)">
            <summary>
            Sets the member value. Handles field or property type.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberComparison.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Utilities.MemberInfoPath">
            <summary>
            Helper class used to store path made of <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.Utilities.MemberInfoPath.Entry">
            <summary>
            The path entry.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.MemberInfoPath.Entry.Member">
            <summary>
            The member.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.MemberInfoPath.Entry.Index">
            <summary>
            The collection index or key.
            </summary>
        </member>
        <member name="P:FlaxEditor.Utilities.MemberInfoPath.Entry.Type">
            <summary>
            Gets the member type (field or property type).
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.Entry.#ctor(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.MemberInfoPath.Entry"/> struct.
            </summary>
            <param name="member">The member.</param>
            <param name="index">The collection index or key.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.Entry.GetValue(System.Object)">
            <summary>
            Gets the value. Handles arrays.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.Entry.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.Entry.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.Entry.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.Entry.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.#ctor(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.MemberInfoPath"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="index">The collection index or key.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.#ctor(System.Collections.Generic.Stack{FlaxEditor.Utilities.MemberInfoPath.Entry})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.MemberInfoPath"/> class.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="P:FlaxEditor.Utilities.MemberInfoPath.Path">
            <summary>
            Gets the members path string.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.GetLastMember(System.Object@)">
            <summary>
            Gets the last member (returns it) and the instance (by the ref parameter).
            </summary>
            <param name="instance">The instance. Also contains the result instance for the last member.</param>
            <returns>The last member info.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.GetLastValue(System.Object)">
            <summary>
            Gets the last member value.
            </summary>
            <param name="instance">The top object instance.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Utilities.ObjectSnapshot">
            <summary>
            Helper class to gather object snapshots and compare them using reflection.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.ObjectSnapshot.ObjectType">
            <summary>
            The object type.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.ObjectSnapshot.CaptureSnapshot(System.Object)">
            <summary>
            Captures the snapshot of the object.
            </summary>
            <param name="obj">The object to capture.</param>
            <returns>The object snapshot.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.ObjectSnapshot.Compare(System.Object)">
            <summary>
            Gets a list of MemberComparison values that represent the fields and/or properties
            that differ between the given object and the captured state.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>The collection of modified properties.</returns>
        </member>
        <member name="T:FlaxEditor.Utilities.QueryFilterHelper">
            <summary>
            Helper class to filter items based on a input filter query.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Match(System.String,System.String)">
            <summary>
            Matches the specified text with the filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="text">The text.</param>
            <returns>True if text has one or more matches, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Match(System.String,System.String,FlaxEditor.Utilities.QueryFilterHelper.Range[]@)">
            <summary>
            Matches the specified text with the filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="text">The text.</param>
            <param name="matches">The found matches.</param>
            <returns>True if text has one or more matches, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Utilities.QueryFilterHelper.Range">
            <summary>
            Describes sub range of the text.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.QueryFilterHelper.Range.StartIndex">
            <summary>
            The start index of the range.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.QueryFilterHelper.Range.Length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="P:FlaxEditor.Utilities.QueryFilterHelper.Range.EndIndex">
            <summary>
            The end index of the range.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.QueryFilterHelper.Range"/> struct.
            </summary>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.op_Equality(FlaxEditor.Utilities.QueryFilterHelper.Range,FlaxEditor.Utilities.QueryFilterHelper.Range)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.op_Inequality(FlaxEditor.Utilities.QueryFilterHelper.Range,FlaxEditor.Utilities.QueryFilterHelper.Range)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.Equals(FlaxEditor.Utilities.QueryFilterHelper.Range)">
            <summary>
            Compares this object with the other instance.
            </summary>
            <param name="other">The other object.</param>
            <returns>True if objects are equal.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Utilities.SelectionCache">
            <summary>
            Helper utility object that caches the selection of the editor and can restore it later. Works only for objects of <see cref="T:FlaxEngine.Object"/> type.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.SelectionCache.Cache">
            <summary>
            Caches selection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.SelectionCache.Restore">
            <summary>
            Restores selection.
            </summary>
        </member>
        <member name="T:FlaxEditor.Utilities.ShuntingYard">
            <summary>
            The Shunting-Yard algorithm parsing utilities.
            </summary>
        </member>
        <member name="T:FlaxEditor.Utilities.ShuntingYard.ParsingException">
            <summary>
            The Shunting-Yard parser exception type.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:FlaxEditor.Utilities.ShuntingYard.ParsingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.ShuntingYard.ParsingException"/> class.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="T:FlaxEditor.Utilities.ShuntingYard.TokenType">
            <summary>
            Types of possible tokens used in Shunting-Yard parser.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.ShuntingYard.TokenType.Number">
            <summary>
            The number.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.ShuntingYard.TokenType.Variable">
            <summary>
            The variable.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.ShuntingYard.TokenType.Parenthesis">
            <summary>
            The parenthesis.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.ShuntingYard.TokenType.Operator">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.ShuntingYard.TokenType.WhiteSpace">
            <summary>
            The white space character.
            </summary>
        </member>
        <member name="T:FlaxEditor.Utilities.ShuntingYard.Token">
            <summary>
            Token representation containing its type and value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.ShuntingYard.Token.Type">
            <summary>
            Gets the token type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.ShuntingYard.Token.Value">
            <summary>
            Gets the token value.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.ShuntingYard.Token.#ctor(FlaxEditor.Utilities.ShuntingYard.TokenType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.ShuntingYard.Token"/> struct.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FlaxEditor.Utilities.ShuntingYard.Operator">
            <summary>
            Represents simple mathematical operation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.ShuntingYard.Operators">
            <summary>
            Describe all operators available for parsing.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.ShuntingYard.Variables">
            <summary>
            Describe all predefined variables for parsing.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.ShuntingYard.CompareOperators(System.String,System.String)">
            <summary>
            Compare operators based on precedence: ^ >> * / >> + -
            </summary>
            <param name="oper1">The first operator.</param>
            <param name="oper2">The second operator.</param>
            <returns>The comparision result.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.ShuntingYard.DetermineType(System.Char)">
            <summary>
            Assign a single character to its TokenType.
            </summary>
            <param name="c">The input character.</param>
            <returns>The token type.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.ShuntingYard.Tokenize(System.String)">
            <summary>
            First parsing step - tokenization of a string.
            </summary>
            <param name="text">The input text.</param>
            <returns>The collection of parsed tokens.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.ShuntingYard.OrderTokens(System.Collections.Generic.IEnumerable{FlaxEditor.Utilities.ShuntingYard.Token})">
            <summary>
            Second parsing step - order tokens in reverse polish notation.
            </summary>
            <param name="tokens">The input tokens collection.</param>
            <returns>The collection of the tokens in reverse polish notation order.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.ShuntingYard.EvaluateRPN(System.Collections.Generic.IEnumerable{FlaxEditor.Utilities.ShuntingYard.Token})">
            <summary>
            Third parsing step - evaluate reverse polish notation into single float.
            </summary>
            <param name="tokens">The input token collection.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.ShuntingYard.Parse(System.String)">
            <summary>
            Parses the specified text and performs the Shunting-Yard algorithm execution.
            </summary>
            <param name="text">The input text.</param>
            <returns>The result value.</returns>
        </member>
        <member name="T:FlaxEditor.Utilities.Utils">
            <summary>
            Editor utilities and helper functions.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.Utils.FlaxEngineAssemblyName">
            <summary>
            The name of the Flax Engine C# assembly name.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.FormatBytesCount(System.Int32)">
            <summary>
            Formats the amount of bytes to get a human-readable data size in bytes with abbreviation. Eg. 32 kB
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>The formatted amount of bytes.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.FormatBytesCount(System.UInt64)">
            <summary>
            Formats the amount of bytes to get a human-readable data size in bytes with abbreviation. Eg. 32 kB
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>The formatted amount of bytes.</returns>
        </member>
        <member name="F:FlaxEditor.Utilities.Utils.CurveKeyframesColors">
            <summary>
            The colors for the keyframes used by the curve editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.Utils.CurveTickSteps">
            <summary>
            The time/value axes tick steps for editors with timeline.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.HasInvalidPathChar(System.String)">
            <summary>
            Determines whether the specified path string contains any invalid character.
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if the given string cannot be used as a path because it contains one or more illegal characters; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for the given type (can be value type or reference type).
            </summary>
            <param name="type">The type.</param>
            <returns>The created instance.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetDerivedTypes(System.Reflection.Assembly,System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Gets all the derived types from the given base type (excluding that type) within the given assembly.
            </summary>
            <param name="assembly">The target assembly to check its types.</param>
            <param name="baseType">The base type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetDerivedTypes(System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Gets all the derived types from the given base type (excluding that type) within all the loaded assemblies.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetDerivedTypes(System.Reflection.Assembly,System.Type,System.Collections.Generic.List{System.Type},System.Func{System.Type,System.Boolean})">
            <summary>
            Gets all the derived types from the given base type (excluding that type) within the given assembly.
            </summary>
            <param name="assembly">The target assembly to check its types.</param>
            <param name="baseType">The base type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
            <param name="checkFunc">Additional callback used to check if the given type is valid. Returns true if add type, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetDerivedTypes(System.Type,System.Collections.Generic.List{System.Type},System.Func{System.Type,System.Boolean})">
            <summary>
            Gets all the derived types from the given base type (excluding that type) within all the loaded assemblies.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
            <param name="checkFunc">Additional callback used to check if the given type is valid. Returns true if add type, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetDerivedTypes(System.Type,System.Collections.Generic.List{System.Type},System.Func{System.Type,System.Boolean},System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Gets all the derived types from the given base type (excluding that type) within all the loaded assemblies.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
            <param name="checkFunc">Additional callback used to check if the given type is valid. Returns true if add type, otherwise false.</param>
            <param name="checkAssembly">Additional callback used to check if the given assembly is valid. Returns true if search for types in the given assembly, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetTypesWithAttributeDefined(System.Reflection.Assembly,System.Type,System.Collections.Generic.List{System.Type},System.Func{System.Type,System.Boolean})">
            <summary>
            Gets all the types that have the given attribute defined within the given assembly.
            </summary>
            <param name="assembly">The target assembly to check its types.</param>
            <param name="attributeType">The attribute type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
            <param name="checkFunc">Additional callback used to check if the given type is valid. Returns true if add type, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetTypesWithAttributeDefined(System.Type,System.Collections.Generic.List{System.Type},System.Func{System.Type,System.Boolean},System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Gets all the types that have the given attribute defined within all the loaded assemblies.
            </summary>
            <param name="attributeType">The attribute type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
            <param name="checkFunc">Additional callback used to check if the given type is valid. Returns true if add type, otherwise false.</param>
            <param name="checkAssembly">Additional callback used to check if the given assembly is valid. Returns true if search for types in the given assembly, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetType(System.String)">
            <summary>
            Tries to get the object type from the given full typename. Searches in-build Flax Engine/Editor assemblies and game assemblies.
            </summary>
            <param name="typeName">The full name of the type.</param>
            <returns>The type or null if failed.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.CreateInstance(System.String)">
            <summary>
            Tries to create object instance of the given full typename. Searches in-build Flax Engine/Editor assemblies and game assemblies.
            </summary>
            <param name="typeName">The full name of the type.</param>
            <returns>The created object or null if failed.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.RemoveFileIfExists(System.String)">
            <summary>
            Removes the file if it exists.
            </summary>
            <param name="file">The file path.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.DirectoryCopy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies the directory. Supports subdirectories copy with files override option.
            </summary>
            <param name="srcDirectoryPath">The source directory path.</param>
            <param name="dstDirectoryPath">The destination directory path.</param>
            <param name="copySubDirs">If set to <c>true</c> copy subdirectories.</param>
            <param name="overrideFiles">if set to <c>true</c> override existing files.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.ByteArrayToStructure``1(System.Byte[])">
            <summary>
            Converts the raw bytes into the structure. Supported only for structures with simple types and no GC objects.
            </summary>
            <typeparam name="T">The structure type.</typeparam>
            <param name="bytes">The data bytes.</param>
            <returns>The structure.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.ByteArrayToStructure``1(System.Byte[],``0@)">
            <summary>
            Converts the raw bytes into the structure. Supported only for structures with simple types and no GC objects.
            </summary>
            <typeparam name="T">The structure type.</typeparam>
            <param name="bytes">The data bytes.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.StructureToByteArray``1(``0@)">
            <summary>
            Converts the structure to the raw bytes. Supported only for structures with simple types and no GC objects.
            </summary>
            <typeparam name="T">The structure type.</typeparam>
            <param name="value">The structure value.</param>
            <returns>The bytes array that contains a structure data.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetGraphParameterValueType(FlaxEngine.GraphParamType)">
            <summary>
            Gets the runtime object type of the graph parameter values objects.
            </summary>
            <param name="type">The type.</param>
            <returns>The object type.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.ShowSourceCodeWindow(System.String,System.String)">
            <summary>
            Shows the source code window.
            </summary>
            <param name="source">The source code.</param>
            <param name="title">The window title.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.RayCastWire(FlaxEngine.OrientedBoundingBox@,FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Checks if given ray intersects with the oriented bounding wire box.
            </summary>
            <param name="box">The box.</param>
            <param name="ray">The ray.</param>
            <param name="distance">The result intersection distance.</param>
            <param name="viewPosition">The view position used to scale the wires thickness depending on the wire distance from the view.</param>
            <returns>True ray hits bounds, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.ViewportIconsRenderer">
            <summary>
            Editor viewports icons rendering service.
            </summary>
        </member>
        <member name="M:FlaxEditor.ViewportIconsRenderer.DrawIcons(FlaxEngine.RenderContext@,FlaxEngine.Scene)">
            <summary>
            Draws the icons for the actors in the given scene.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="T:FlaxEditor.Viewport.Cameras.ArcBallCamera">
            <summary>
            Implementation of <see cref="T:FlaxEditor.Viewport.Cameras.ViewportCamera"/> that orbits around the fixed location.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Cameras.ViewportCamera" />
        </member>
        <member name="P:FlaxEditor.Viewport.Cameras.ArcBallCamera.OrbitCenter">
            <summary>
            Gets or sets the orbit center.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Cameras.ArcBallCamera.OrbitRadius">
            <summary>
            Gets or sets the orbit radius.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ArcBallCamera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Cameras.ArcBallCamera"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ArcBallCamera.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Cameras.ArcBallCamera"/> class.
            </summary>
            <param name="orbitCenter">The orbit center.</param>
            <param name="radius">The orbit radius.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ArcBallCamera.SetView(FlaxEngine.Vector3)">
            <summary>
            Sets view direction.
            </summary>
            <param name="direction">The view direction.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ArcBallCamera.SetView(FlaxEngine.Quaternion)">
            <summary>
            Sets view orientation.
            </summary>
            <param name="orientation">The view rotation.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ArcBallCamera.UpdateView(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector2@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Cameras.FPSCamera">
            <summary>
            Implementation of <see cref="T:FlaxEditor.Viewport.Cameras.ViewportCamera"/> that simulated the first-person camera which can fly though the scene.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Cameras.ViewportCamera" />
        </member>
        <member name="P:FlaxEditor.Viewport.Cameras.FPSCamera.IsAnimatingMove">
            <summary>
            Gets a value indicating whether this viewport is animating movement.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Cameras.FPSCamera.TargetPoint">
            <summary>
            The target point location. It's used to orbit around it whe user clicks Alt+LMB.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.SetView(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Sets view.
            </summary>
            <param name="position">The view position.</param>
            <param name="direction">The view direction.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.SetView(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Sets view.
            </summary>
            <param name="position">The view position.</param>
            <param name="orientation">The view rotation.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.MoveViewport(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Start animating viewport movement to the target transformation.
            </summary>
            <param name="position">The target position.</param>
            <param name="orientation">The target orientation.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.MoveViewport(FlaxEngine.Transform)">
            <summary>
            Start animating viewport movement to the target transformation.
            </summary>
            <param name="target">The target transform.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.ShowActor(FlaxEngine.Actor)">
            <summary>
            Moves the viewport to visualize the actor.
            </summary>
            <param name="actor">The actor to preview.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.ShowActors(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode})">
            <summary>
            Moves the viewport to visualize selected actors.
            </summary>
            <param name="actors">The actors to show.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.UpdateView(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector2@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Cameras.IViewportCamera">
            <summary>
            The interface for the editor viewport camera controllers. Handles the input logic updates and the preview rendering viewport.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.IViewportCamera.Update(System.Single)">
            <summary>
            Updates the camera.
            </summary>
            <param name="deltaTime">The delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.IViewportCamera.UpdateView(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector2@,System.Boolean@)">
            <summary>
            Updates the view.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
            <param name="moveDelta">The move delta (scaled).</param>
            <param name="mouseDelta">The mouse delta (scaled).</param>
            <param name="centerMouse">True if center mouse after the update.</param>
        </member>
        <member name="T:FlaxEditor.Viewport.Cameras.ViewportCamera">
            <summary>
            Base class for <see cref="T:FlaxEditor.Viewport.EditorViewport"/> view controllers.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Cameras.IViewportCamera" />
        </member>
        <member name="P:FlaxEditor.Viewport.Cameras.ViewportCamera.Viewport">
            <summary>
            Gets the parent viewport.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ViewportCamera.SerArcBallView(FlaxEngine.BoundingBox,System.Single)">
            <summary>
            Sets view orientation and position to match the arc ball camera style view for the given target object bounds.
            </summary>
            <param name="objectBounds">The target object bounds.</param>
            <param name="marginDistanceScale">The margin distance scale of the orbit radius.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ViewportCamera.SerArcBallView(FlaxEngine.BoundingSphere,System.Single)">
            <summary>
            Sets view orientation and position to match the arc ball camera style view for the given target object bounds.
            </summary>
            <param name="objectBounds">The target object bounds.</param>
            <param name="marginDistanceScale">The margin distance scale of the orbit radius.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ViewportCamera.SerArcBallView(System.Single)">
            <summary>
            Sets view orientation and position to match the arc ball camera style view for the given orbit radius.
            </summary>
            <param name="orbitRadius">The orbit radius.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ViewportCamera.SerArcBallView(FlaxEngine.Quaternion,FlaxEngine.Vector3,System.Single)">
            <summary>
            Sets view orientation and position to match the arc ball camera style view.
            </summary>
            <param name="orientation">The view rotation.</param>
            <param name="orbitCenter">The orbit center location.</param>
            <param name="orbitRadius">The orbit radius.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ViewportCamera.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ViewportCamera.UpdateView(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector2@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.EditorGizmoViewport">
            <summary>
            Viewport with free camera and gizmo tools.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.EditorViewport" />
            <seealso cref="T:FlaxEditor.Gizmo.IGizmoOwner" />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorGizmoViewport.#ctor(FlaxEngine.SceneRenderTask,FlaxEditor.Undo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.EditorGizmoViewport"/> class.
            </summary>
            <param name="task">The task.</param>
            <param name="undo">The undo.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.Gizmos">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.RenderTask">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.ViewFarPlane">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.IsLeftMouseButtonDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.IsRightMouseButtonDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.IsAltKeyDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.IsControlDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.SnapToGround">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.MouseDelta">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.UseSnapping">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.UseDuplicate">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorGizmoViewport.AddUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorGizmoViewport.RemoveUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.EditorViewport">
            <summary>
            Editor viewports base class.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.RenderOutputControl" />
        </member>
        <member name="T:FlaxEditor.Viewport.EditorViewport.Input">
            <summary>
            Gathered input data.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsPanning">
            <summary>
            The is panning state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsRotating">
            <summary>
            The is rotating state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsMoving">
            <summary>
            The is moving state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsZooming">
            <summary>
            The is zooming state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsOrbiting">
            <summary>
            The is orbiting state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsControlDown">
            <summary>
            The is control down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsShiftDown">
            <summary>
            The is shift down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsAltDown">
            <summary>
            The is alt down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsMouseRightDown">
            <summary>
            The is mouse right down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsMouseMiddleDown">
            <summary>
            The is mouse middle down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsMouseLeftDown">
            <summary>
            The is mouse left down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.MouseWheelDelta">
            <summary>
            The mouse wheel delta.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.Input.IsControllingMouse">
            <summary>
            Gets a value indicating whether use is controlling mouse.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.Input.Gather(FlaxEngine.Window,System.Boolean)">
            <summary>
            Gathers input from the specified window.
            </summary>
            <param name="window">The window.</param>
            <param name="useMouse">True if use mouse input, otherwise will skip mouse.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.Input.Clear">
            <summary>
            Clears the data.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.FpsCameraFilteringFrames">
            <summary>
            The FPS camera filtering frames count (how much frames we want to keep in the buffer to calculate the avg. delta currently hardcoded).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport._speedWidget">
            <summary>
            The speed widget button.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport._prevInput">
            <summary>
            The previous input (from the previous update).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport._input">
            <summary>
            The input data (from the current frame).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport._viewMousePos">
            <summary>
            The view mouse position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport._mouseDeltaRight">
            <summary>
            The mouse delta (right button down).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport._mouseDeltaLeft">
            <summary>
            The mouse delta (left button down).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.MouseSpeed">
            <summary>
            Speed of the mouse.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.MouseWheelZoomSpeedFactor">
            <summary>
            Speed of the mouse wheel zooming.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.MovementSpeed">
            <summary>
            Gets or sets the camera movement speed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.MouseDeltaRight">
            <summary>
            Gets the mouse movement delta for the right button (user press and move).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.MouseDeltaLeft">
            <summary>
            Gets the mouse movement delta for the left button (user press and move).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.CamPitchAngles">
            <summary>
            Camera's pitch angle clamp range (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ViewTransform">
            <summary>
            Gets the view transform.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ViewPosition">
            <summary>
            Gets or sets the view position.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ViewOrientation">
            <summary>
            Gets or sets the view orientation.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ViewDirection">
            <summary>
            Gets or sets the view direction vector.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ViewRay">
            <summary>
            Gets or sets the view ray (position and direction).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.Yaw">
            <summary>
            Gets or sets the yaw angle (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.Pitch">
            <summary>
            Gets or sets the pitch angle (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.YawPitch">
            <summary>
            Gets or sets the absolute mouse position (normalized, not in pixels). Yaw is X, Pitch is Y.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.EulerAngles">
            <summary>
            Gets or sets the euler angles (pitch, yaw, roll).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.HasLoadedAssets">
            <summary>
            Gets a value indicating whether this viewport has loaded dependant assets.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.ViewWidgetButtonMenu">
            <summary>
            The 'View' widget button context menu.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.ViewWidgetShowMenu">
            <summary>
            The 'View' widget 'Show' category context menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ViewportCamera">
            <summary>
            Gets or sets the viewport camera controller.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.NearPlane">
            <summary>
            Gets or sets the camera near clipping plane.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.FarPlane">
            <summary>
            Gets or sets the camera far clipping plane.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.FieldOfView">
            <summary>
            Gets or sets the camera field of view (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.OrthographicScale">
            <summary>
            Gets or sets the camera orthographic size scale (if camera uses orthographic mode).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.UseOrthographicProjection">
            <summary>
            Gets or sets the camera orthographic mode (otherwise uses perspective projection).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.InputActions">
            <summary>
            The input actions collection to processed during user input.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.#ctor(FlaxEngine.SceneRenderTask,FlaxEditor.Viewport.Cameras.ViewportCamera,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.EditorViewport"/> class.
            </summary>
            <param name="task">The task.</param>
            <param name="camera">The camera controller.</param>
            <param name="useWidgets">Enable/disable viewport widgets.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ShowFpsCounter">
            <summary>
            Gets or sets a value indicating whether show or hide FPS counter.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.TakeScreenshot(System.String)">
            <summary>
            Takes the screenshot of the current viewport.
            </summary>
            <param name="path">The output file path. Set null to use default value.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.CopyViewData(FlaxEngine.RenderView@)">
            <summary>
            Copies the render view data to <see cref="T:FlaxEngine.RenderView"/> structure.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.GetInput(FlaxEditor.Viewport.EditorViewport.Input@)">
            <summary>
            Gets the input state data.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.CreateProjectionMatrix(FlaxEngine.Matrix@)">
            <summary>
            Creates the projection matrix.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.CreateViewMatrix(FlaxEngine.Matrix@)">
            <summary>
            Creates the view matrix.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.MouseRay">
            <summary>
            Gets the mouse ray.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.ConvertMouseToRay(FlaxEngine.Vector2@)">
            <summary>
            Converts the mouse position to the ray (in world space of the viewport).
            </summary>
            <param name="mousePosition">The mouse position.</param>
            <returns>The result ray.</returns>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnControlMouseBegin(FlaxEngine.Window)">
            <summary>
            Called when mouse control begins.
            </summary>
            <param name="win">The parent window.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnControlMouseEnd(FlaxEngine.Window)">
            <summary>
            Called when mouse control ends.
            </summary>
            <param name="win">The parent window.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnLeftMouseButtonDown">
            <summary>
            Called when left mouse button goes down (on press).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnLeftMouseButtonUp">
            <summary>
            Called when left mouse button goes up (on release).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnRightMouseButtonDown">
            <summary>
            Called when right mouse button goes down (on press).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnRightMouseButtonUp">
            <summary>
            Called when right mouse button goes up (on release).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnMiddleMouseButtonDown">
            <summary>
            Called when middle mouse button goes down (on press).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnMiddleMouseButtonUp">
            <summary>
            Called when middle mouse button goes up (on release).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.UpdateView(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector2@,System.Boolean@)">
            <summary>
            Updates the view.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
            <param name="moveDelta">The move delta (scaled).</param>
            <param name="mouseDelta">The mouse delta (scaled).</param>
            <param name="centerMouse">True if center mouse after the update.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.MainEditorGizmoViewport">
            <summary>
            Main editor gizmo viewport used by the <see cref="T:FlaxEditor.Windows.EditGameWindow"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.EditorGizmoViewport" />
        </member>
        <member name="T:FlaxEditor.Viewport.MainEditorGizmoViewport.DragDropEventArgs">
            <summary>
            The custom drag drop event arguments.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Drag.DragEventArgs" />
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.DragDropEventArgs.Hit">
            <summary>
            The hit.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.DragDropEventArgs.HitLocation">
            <summary>
            The hit location.
            </summary>
        </member>
        <member name="T:FlaxEditor.Viewport.MainEditorGizmoViewport.EditorSpritesRenderer">
            <summary>
            The editor sprites rendering effect.
            </summary>
            <seealso cref="T:FlaxEngine.PostProcessEffect" />
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.EditorSpritesRenderer.Task">
            <summary>
            The rendering task.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.MainEditorGizmoViewport.EditorSpritesRenderer.Order">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.MainEditorGizmoViewport.EditorSpritesRenderer.UseSingleTarget">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.MainEditorGizmoViewport.EditorSpritesRenderer.CanRender">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.EditorSpritesRenderer.Render(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.DragHandlers">
            <summary>
            Drag and drop handlers
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.TransformGizmo">
            <summary>
            The transform gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.Grid">
            <summary>
            The grid gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.SelectionOutline">
            <summary>
            The selection outline postFx.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.EditorPrimitives">
            <summary>
            The editor primitives postFx.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.DrawDebugDraw">
            <summary>
            Gets or sets a value indicating whether draw <see cref="T:FlaxEngine.DebugDraw"/> shapes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.MainEditorGizmoViewport.ShowNavigation">
            <summary>
            Gets or sets a value indicating whether show navigation mesh.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.MainEditorGizmoViewport"/> class.
            </summary>
            <param name="editor">Editor instance.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OverrideSelectionOutline(FlaxEditor.Gizmo.SelectionOutline)">
            <summary>
            Overrides the selection outline effect or restored the default one.
            </summary>
            <param name="customSelectionOutline">The custom selection outline or null if use default one.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.DrawEditorPrimitives(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.ApplyTransform(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode},FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Applies the transform to the collection of scene graph nodes.
            </summary>
            <param name="selection">The selection.</param>
            <param name="translationDelta">The translation delta.</param>
            <param name="rotationDelta">The rotation delta.</param>
            <param name="scaleDelta">The scale delta.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnLeftMouseButtonUp">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.MainEditorGizmoViewport.ActiveMode">
            <summary>
            Gets the active gizmo mode.
            </summary>
        </member>
        <member name="E:FlaxEditor.Viewport.MainEditorGizmoViewport.ActiveModeChanged">
            <summary>
            Occurs when active mode gets changed.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.SculptTerrainGizmo">
            <summary>
            The sculpt terrain gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.PaintTerrainGizmo">
            <summary>
            The paint terrain gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.EditTerrainGizmo">
            <summary>
            The edit terrain gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.PaintFoliageGizmo">
            <summary>
            The paint foliage gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.EditFoliageGizmo">
            <summary>
            The edit foliage gizmo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.AddMode(FlaxEditor.Viewport.Modes.EditorGizmoMode)">
            <summary>
            Adds the mode to the viewport.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.RemoveMode(FlaxEditor.Viewport.Modes.EditorGizmoMode)">
            <summary>
            Removes the mode from the viewport.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.SetActiveMode(FlaxEditor.Viewport.Modes.EditorGizmoMode)">
            <summary>
            Sets the active mode.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.SetActiveMode``1">
            <summary>
            Sets the active mode.
            </summary>
            <typeparam name="T">The mode type.</typeparam>
            <returns>The activated mode.</returns>
        </member>
        <member name="T:FlaxEditor.Viewport.Modes.EditorGizmoMode">
            <summary>
            Editor viewport gizmo mode descriptor. Defines which gizmo tools to show and how to handle scene editing.
            </summary>
            <remarks>
            Only one gizmo mode can be active at the time. It defines the viewport toolset usage.
            </remarks>
        </member>
        <member name="P:FlaxEditor.Viewport.Modes.EditorGizmoMode.Viewport">
            <summary>
            Gets the viewport.
            </summary>
        </member>
        <member name="E:FlaxEditor.Viewport.Modes.EditorGizmoMode.Activated">
            <summary>
            Occurs when mode gets activated.
            </summary>
        </member>
        <member name="E:FlaxEditor.Viewport.Modes.EditorGizmoMode.Deactivated">
            <summary>
            Occurs when mode gets deactivated.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Modes.EditorGizmoMode.Init(FlaxEditor.Viewport.MainEditorGizmoViewport)">
            <summary>
            Initializes the specified mode and links it to the viewport.
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Modes.EditorGizmoMode.Dispose">
            <summary>
            Releases the mode. Called on editor exit or when mode gets removed from the current viewport.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Modes.EditorGizmoMode.OnActivated">
            <summary>
            Called when mode gets activated.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Modes.EditorGizmoMode.OnDeactivated">
            <summary>
            Called when mode gets deactivated.
            </summary>
        </member>
        <member name="T:FlaxEditor.Viewport.Modes.NoGizmoMode">
            <summary>
            The editor gizmo editor mode that does nothing. Can be used to hide other gizmos when using a specific editor tool.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="M:FlaxEditor.Viewport.Modes.NoGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Modes.TransformGizmoMode">
            <summary>
            The default editor mode that uses <see cref="T:FlaxEditor.Gizmo.TransformGizmo"/> for objects transforming.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="M:FlaxEditor.Viewport.Modes.TransformGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.PrefabWindowViewport">
            <summary>
            Editor viewport used by the <see cref="T:FlaxEditor.Windows.Assets.PrefabWindow"/>
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Assets.PrefabWindow" />
            <seealso cref="T:FlaxEditor.Viewport.Previews.PrefabPreview" />
            <seealso cref="T:FlaxEditor.Gizmo.IGizmoOwner" />
        </member>
        <member name="F:FlaxEditor.Viewport.PrefabWindowViewport.TransformGizmo">
            <summary>
            The transform gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.PrefabWindowViewport.SelectionOutline">
            <summary>
            The selection outline postFx.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.PrefabWindowViewport.EditorPrimitives">
            <summary>
            The editor primitives postFx.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.#ctor(FlaxEditor.Windows.Assets.PrefabWindow)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.PrefabWindowViewport"/> class.
            </summary>
            <param name="window">Editor window.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.ShowSelectedActors">
            <summary>
            Moves the viewport to visualize selected actors.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.Gizmos">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.RenderTask">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.ViewFarPlane">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.IsLeftMouseButtonDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.IsRightMouseButtonDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.IsAltKeyDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.IsControlDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.SnapToGround">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.MouseDelta">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.UseSnapping">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.UseDuplicate">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.AddUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.RemoveUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.ApplyTransform(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode},FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Applies the transform to the collection of scene graph nodes.
            </summary>
            <param name="selection">The selection.</param>
            <param name="translationDelta">The translation delta.</param>
            <param name="rotationDelta">The rotation delta.</param>
            <param name="scaleDelta">The scale delta.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnLeftMouseButtonUp">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.DrawEditorPrimitives(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.AnimatedModelPreview">
            <summary>
            Animated model asset preview editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.AssetPreview" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.SkinnedModel">
            <summary>
            Gets or sets the skinned model asset to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.PreviewActor">
            <summary>
            Gets the skinned model actor used to preview selected asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.PlayAnimation">
            <summary>
            Gets or sets a value indicating whether play the animation in editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.ShowNodes">
            <summary>
            Gets or sets a value indicating whether show animated model skeleton nodes debug view.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.ScaleToFit">
            <summary>
            Gets or sets a value indicating whether scale the model to the normalized bounds.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.NodesMask">
            <summary>
            Gets or sets the custom mask for the skeleton nodes. Nodes missing from this list will be skipped during rendering. Works only if <see cref="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.ShowNodes"/> is set to true and the array matches the attached <see cref="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.SkinnedModel"/> nodes hierarchy.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AnimatedModelPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.AnimatedModelPreview"/> class.
            </summary>
            <param name="useWidgets">if set to <c>true</c> use widgets.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AnimatedModelPreview.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AnimatedModelPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.AssetPreview">
            <summary>
            Generic asset preview editor viewport base class.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.EditorViewport" />
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AssetPreview.PreviewLight">
            <summary>
            The preview light. Allows to modify rendering settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AssetPreview.EnvProbe">
            <summary>
            The env probe. Allows to modify rendering settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AssetPreview.Sky">
            <summary>
            The sky. Allows to modify rendering settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AssetPreview.SkyLight">
            <summary>
            The sky light. Allows to modify rendering settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AssetPreview.PostFxVolume">
            <summary>
            Gets the post fx volume. Allows to modify rendering settings.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AssetPreview.ShowDefaultSceneActors">
            <summary>
            Gets or sets a value indicating whether show default scene actors (sky, env probe, skylight, directional light, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AssetPreview.#ctor(System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.AssetPreview"/> class.
            </summary>
            <param name="useWidgets">If set to <c>true</c> use widgets for viewport, otherwise hide them.</param>
            <param name="orbitRadius">The initial orbit radius.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AssetPreview.#ctor(System.Boolean,FlaxEditor.Viewport.Cameras.ViewportCamera)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.AssetPreview"/> class.
            </summary>
            <param name="useWidgets">If set to <c>true</c> use widgets for viewport, otherwise hide them.</param>
            <param name="camera">The camera controller.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AssetPreview.HasLoadedAssets">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AssetPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.AudioClipPreview">
            <summary>
            Audio clip PCM data editor preview.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.AudioClipPreview.DrawModes">
            <summary>
            The audio clip drawing modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AudioClipPreview.DrawModes.Fill">
            <summary>
            Fills the whole control area with the full clip duration.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AudioClipPreview.DrawModes.Single">
            <summary>
            Draws single audio clip. Uses the view scale parameter.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AudioClipPreview.DrawModes.Looped">
            <summary>
            Draws the looped audio clip. Uses the view scale parameter.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AudioClipPreview.Asset">
            <summary>
            Gets or sets the clip to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AudioClipPreview.HasData">
            <summary>
            Gets a value indicating whether audio data has been fetched from the asset (done as an async task). It is required to be valid in order to draw the audio buffer preview.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AudioClipPreview.DrawMode">
            <summary>
            The draw mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AudioClipPreview.ViewScale">
            <summary>
            The view scale parameter. Increase it to zoom in the audio. Usage depends on the current <see cref="F:FlaxEditor.Viewport.Previews.AudioClipPreview.DrawMode"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AudioClipPreview.UnitsPerSecond">
            <summary>
            The audio units per second (on time axis).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AudioClipPreview.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AudioClipPreview.DownloadData">
            <summary>
            Downloads the audio clip raw PCM data. Use it from async thread to prevent blocking,
            </summary>
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.CubeTexturePreview">
            <summary>
            Cube Texture asset preview editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.MaterialPreview" />
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.CubeTexturePreview._previewMaterial">
            <summary>
            The preview material instance used to draw texture.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.CubeTexturePreview.CubeTexture">
            <summary>
            Sets the cube texture to preview.
            </summary>
            <value>
            The cube texture.
            </value>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.CubeTexturePreview.ViewChannels">
            <summary>
            Gets or sets the view channels to show.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.CubeTexturePreview.UsePointSampler">
            <summary>
            Gets or sets a value indicating whether use point sampler when drawing the texture. The default value is false.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.CubeTexturePreview.MipLevel">
            <summary>
            Gets or sets the mip level to show. The default value is -1.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.CubeTexturePreview.#ctor(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.CubeTexturePreview.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.CubeTexturePreview.HasLoadedAssets">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.CubeTexturePreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.IESProfilePreview">
            <summary>
            Preview control for <see cref="T:FlaxEngine.IESProfile"/> asset.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.TexturePreviewBase" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.IESProfilePreview.Asset">
            <summary>
            Gets or sets the asset to preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.IESProfilePreview.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.IESProfilePreview"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.IESProfilePreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.IESProfilePreview.CalculateTextureRect(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.IESProfilePreview.DrawTexture(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.MaterialPreview">
            <summary>
            Material or Material Instance asset preview editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.AssetPreview" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.MaterialPreview.Material">
            <summary>
            Gets or sets the material asset to preview. It can be <see cref="T:FlaxEngine.Material"/> or <see cref="T:FlaxEngine.MaterialInstance"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.MaterialPreview.SelectedModelIndex">
            <summary>
            Gets or sets the selected preview model index.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.MaterialPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.MaterialPreview"/> class.
            </summary>
            <param name="useWidgets">if set to <c>true</c> use widgets.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.MaterialPreview.HasLoadedAssets">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.MaterialPreview.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.MaterialPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.MaterialPreview.FlaxEditor#Surface#ISurfaceContext#SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.MaterialPreview.FlaxEditor#Surface#ISurfaceContext#SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.MaterialPreview.FlaxEditor#Surface#ISurfaceContext#OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.MaterialPreview.FlaxEditor#Surface#IVisjectSurfaceOwner#OnSurfaceEditedChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.MaterialPreview.FlaxEditor#Surface#IVisjectSurfaceOwner#OnSurfaceGraphEdited">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.MaterialPreview.FlaxEditor#Surface#IVisjectSurfaceOwner#OnSurfaceClose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.ModelPreview">
            <summary>
            Model asset preview editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.AssetPreview" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ModelPreview.Model">
            <summary>
            Gets or sets the model asset to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ModelPreview.PreviewActor">
            <summary>
            Gets the model actor used to preview selected asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ModelPreview.ScaleToFit">
            <summary>
            Gets or sets a value indicating whether scale the model to the normalized bounds.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.ModelPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.ModelPreview"/> class.
            </summary>
            <param name="useWidgets">if set to <c>true</c> use widgets.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.ModelPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.ParticleEmitterPreview">
            <summary>
            Particle Emitter asset preview editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.AssetPreview" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ParticleEmitterPreview.Emitter">
            <summary>
            Gets or sets the particle emitter asset to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ParticleEmitterPreview.PlaybackDuration">
            <summary>
            Gets or sets the duration of the emitter playback (in seconds).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.ParticleEmitterPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.ParticleEmitterPreview"/> class.
            </summary>
            <param name="useWidgets">if set to <c>true</c> use widgets.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ParticleEmitterPreview.HasLoadedAssets">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.ParticleEmitterPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.ParticleSystemPreview">
            <summary>
            Particle System asset preview editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.AssetPreview" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ParticleSystemPreview.System">
            <summary>
            Gets or sets the particle system asset to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ParticleSystemPreview.PreviewActor">
            <summary>
            Gets the particle effect actor used to preview selected asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ParticleSystemPreview.PlaySimulation">
            <summary>
            Gets or sets a value indicating whether to play the particles simulation in editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ParticleSystemPreview.ShowBounds">
            <summary>
            Gets or sets a value indicating whether to show particle effect bounding box.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ParticleSystemPreview.ShowOrigin">
            <summary>
            Gets or sets a value indicating whether to show particle effect origin point.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ParticleSystemPreview.ShowParticlesCounter">
            <summary>
            Gets or sets a value indicating whether to show spawned particles counter (for CPU particles only).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.ParticleSystemPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.ParticleSystemPreview"/> class.
            </summary>
            <param name="useWidgets">if set to <c>true</c> use widgets.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.ParticleSystemPreview.FitIntoView(System.Single)">
            <summary>
            Fits the particle system into view (scales the emitter based on the current bounds of the system).
            </summary>
            <param name="targetSize">The target size of the effect.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ParticleSystemPreview.HasLoadedAssets">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.ParticleSystemPreview.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.ParticleSystemPreview.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.ParticleSystemPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.PrefabPreview">
            <summary>
            Prefab asset preview editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.AssetPreview" />
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.PrefabPreview.LoadingPreview">
            <summary>
            The preview that is during prefab instance spawning. Used to link some actors such as UIControl to preview scene and view.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.PrefabPreview.Prefab">
            <summary>
            Gets or sets the prefab asset to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.PrefabPreview.Instance">
            <summary>
            Gets the instance of the prefab spawned for the preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.PrefabPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.PrefabPreview"/> class.
            </summary>
            <param name="useWidgets">if set to <c>true</c> use widgets.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.PrefabPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.TexturePreviewBase">
            <summary>
            Base class for texture previews. Draws a surface in the UI and supports view moving/zooming.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.CenterView">
            <summary>
            Moves the view to the center.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.UpdateTextureRect">
            <summary>
            Updates the texture rectangle.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.CalculateTextureRect(FlaxEngine.Rectangle@)">
            <summary>
            Calculates the texture rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.CalculateTextureRect(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Rectangle@)">
            <summary>
            Calculates the texture rect fr the given texture and the view size.
            </summary>
            <param name="textureSize">Size of the texture.</param>
            <param name="viewSize">Size of the view.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.DrawTexture(FlaxEngine.Rectangle@)">
            <summary>
            Draws the texture.
            </summary>
            <param name="rect">The target texture view rectangle.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.TexturePreviewBase.TextureViewRect">
            <summary>
            Gets the texture view rect (scaled and offseted).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.ChannelFlags">
            <summary>
            Texture channel flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.ChannelFlags.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.ChannelFlags.Red">
            <summary>
            The red channel.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.ChannelFlags.Green">
            <summary>
            The green channel.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.ChannelFlags.Blue">
            <summary>
            The blue channel.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.ChannelFlags.Alpha">
            <summary>
            The alpha channel.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.ChannelFlags.All">
            <summary>
            All texture channels.
            </summary>
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase">
            <summary>
            Base class for texture previews with custom drawing features. Uses in-build postFx material to render a texture.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.TexturePreviewBase" />
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase._previewMaterial">
            <summary>
            The preview material instance used to draw texture.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.ViewChannels">
            <summary>
            Gets or sets the view channels to show.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.UsePointSampler">
            <summary>
            Gets or sets a value indicating whether use point sampler when drawing the texture. The default value is false.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.MipLevel">
            <summary>
            Gets or sets the mip level to show. The default value is -1.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.#ctor(System.Boolean)">
            <inheritdoc />
            <param name="useWidgets">True if show viewport widgets.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.SetTexture(System.Object)">
            <summary>
            Sets the texture to draw (material parameter).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.SimpleTexturePreview">
            <summary>
            Texture preview GUI control. Draws <see cref="T:FlaxEngine.Texture"/> in the UI and supports view moving/zomming.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.TexturePreviewBase" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.SimpleTexturePreview.Asset">
            <summary>
            Gets or sets the asset to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.SimpleTexturePreview.Color">
            <summary>
            Gets or sets the color used to multiply texture colors.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SimpleTexturePreview.CalculateTextureRect(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SimpleTexturePreview.DrawTexture(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.SimpleSpriteAtlasPreview">
            <summary>
            Sprite atlas preview GUI control. Draws <see cref="T:FlaxEngine.SpriteAtlas"/> in the UI and supports view moving/zomming.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.TexturePreviewBase" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.SimpleSpriteAtlasPreview.Asset">
            <summary>
            Gets or sets the asset to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.SimpleSpriteAtlasPreview.Color">
            <summary>
            Gets or sets the color used to multiply texture colors.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SimpleSpriteAtlasPreview.CalculateTextureRect(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SimpleSpriteAtlasPreview.DrawTexture(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.TexturePreview">
            <summary>
            Texture preview GUI control. Draws <see cref="T:FlaxEngine.Texture"/> in the UI and supports view moving/zomming.
            Supports texture channels masking and color transformations.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.TexturePreview.Asset">
            <summary>
            Gets or sets the texture to preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.TexturePreview"/> class.
            </summary>
            <param name="useWidgets">True if show viewport widgets.</param>
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreview.CalculateTextureRect(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreview.DrawTexture(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.SpriteAtlasPreview">
            <summary>
            Sprite atlas preview GUI control. Draws <see cref="T:FlaxEngine.SpriteAtlas"/> in the UI and supports view moving/zomming.
            Supports texture channels masking and color transformations.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.SpriteAtlasPreview.Asset">
            <summary>
            Gets or sets the sprite atlas to preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SpriteAtlasPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.SpriteAtlasPreview"/> class.
            </summary>
            <param name="useWidgets">True if show viewport widgets.</param>
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SpriteAtlasPreview.CalculateTextureRect(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SpriteAtlasPreview.DrawTexture(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Widgets.ViewportWidgetButton">
            <summary>
            Viewport Widget Button class.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="E:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.Toggled">
            <summary>
            Event fired when user toggles checked state.
            </summary>
        </member>
        <member name="E:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.Clicked">
            <summary>
            Event fired when user click the button.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEditor.Viewport.Widgets.ViewportWidgetButton"/> is checked.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.#ctor(System.String,FlaxEngine.SpriteHandle,FlaxEditor.GUI.ContextMenu.ContextMenu,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Widgets.ViewportWidgetButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="icon">The icon.</param>
            <param name="contextMenu">The context menu.</param>
            <param name="autoCheck">if set to <c>true</c> will be automatic checked on mouse click.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Widgets.ViewportWidgetLocation">
            <summary>
            The viewport widget location.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Widgets.ViewportWidgetLocation.UpperLeft">
            <summary>
            The upper left corner of the parent container.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Widgets.ViewportWidgetLocation.UpperRight">
            <summary>
            The upper right corner of the parent container.
            </summary>
        </member>
        <member name="T:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer">
            <summary>
            Viewport Widgets Container control
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.WidgetsMargin">
            <summary>
            The widgets margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.WidgetsHeight">
            <summary>
            The widgets height.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.WidgetsIconSize">
            <summary>
            The widgets icon size.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.WidgetLocation">
            <summary>
            Gets the widget location.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.#ctor(FlaxEditor.Viewport.Widgets.ViewportWidgetLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer"/> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.ArrangeWidgets(FlaxEngine.GUI.ContainerControl)">
            <summary>
            Arranges the widgets of the control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="T:FlaxEditor.ViewportDebugDrawData">
            <summary>
            The custom data container used during collecting draw data for drawing debug visuals of selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.ViewportDebugDrawData" /> class.
            </summary>
            <param name="actorsCapacity">The actors capacity.</param>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.Add(FlaxEngine.Actor)">
            <summary>
            Adds the specified actor to draw it's debug visuals.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.HighlightModel(FlaxEngine.StaticModel)">
            <summary>
            Highlights the model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.HighlightModel(FlaxEngine.StaticModel,System.Int32)">
            <summary>
            Highlights the model entry.
            </summary>
            <param name="model">The model.</param>
            <param name="entryIndex">Index of the entry to highlight.</param>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.HighlightBrushSurface(FlaxEngine.BrushSurface)">
            <summary>
            Highlights the brush surface.
            </summary>
            <param name="surface">The surface.</param>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.OnDraw(FlaxEngine.RenderContext@)">
            <summary>
            Called when task calls <see cref="E:FlaxEngine.SceneRenderTask.CollectDrawCalls" /> event.
            </summary>
            <param name="renderContext">The rendering context.</param>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.Clear">
            <summary>
            Clears this data collector.
            </summary>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.AboutDialog">
            <summary>
            About this product dialog window.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.Dialog" />
        </member>
        <member name="M:FlaxEditor.Windows.AboutDialog.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.AboutDialog.CreateHeader">
            <summary>
            Create header with Flax engine icon and version number
            </summary>
            <returns>Returns icon controller (most top left)</returns>
        </member>
        <member name="M:FlaxEditor.Windows.AboutDialog.CreateFooter(FlaxEngine.GUI.Control)">
            <summary>
            Create footer label
            </summary>
            <param name="topParentControl">Top element that this footer should be put under</param>
        </member>
        <member name="M:FlaxEditor.Windows.AboutDialog.CreateAuthorsLabels(FlaxEngine.GUI.Control)">
            <summary>
            Generates authors labels.
            </summary>
            <param name="topParentControl">The top element that this labels should be put under.</param>
            <returns>The created control</returns>
        </member>
        <member name="M:FlaxEditor.Windows.AboutDialog.GenerateThirdPartyLabels(FlaxEngine.GUI.Control)">
            <summary>
            Generates 3rdParty software and other licenses labels.
            </summary>
            <param name="topParentControl">The top element that this labels should be put under.</param>
            <returns>The created control</returns>
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AnimationGraphFunctionWindow">
            <summary>
            Animation Graph function window allows to view and edit <see cref="T:FlaxEngine.AnimationGraphFunction"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.AnimationGraphFunction" />
            <seealso cref="T:FlaxEditor.Surface.AnimationGraphFunctionSurface" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphFunctionWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AnimationGraphFunctionWindow.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AnimationGraphFunctionWindow.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphFunctionWindow.LoadSurface">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphFunctionWindow.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AnimationGraphWindow">
            <summary>
            Animation Graph window allows to view and edit <see cref="T:FlaxEngine.AnimationGraph"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.AnimationGraph" />
            <seealso cref="T:FlaxEditor.Surface.AnimGraphSurface" />
            <seealso cref="T:FlaxEditor.Viewport.Previews.AnimatedModelPreview" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.AnimationGraphPreview.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.AnimationGraphPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy">
            <summary>
            The graph properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.AnimationGraphWindow)">
            <summary>
            Gathers parameters from the graph.
            </summary>
            <param name="window">The graph window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.OnSave(FlaxEditor.Windows.Assets.AnimationGraphWindow)">
            <summary>
            Saves the properties to the graph.
            </summary>
            <param name="window">The graph window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AnimationGraphWindow.PreviewActor">
            <summary>
            Gets the animated model actor used for the animation preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AnimationGraphWindow.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AnimationGraphWindow.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.LoadSurface">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.SaveSurface">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AnimationWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.Animation"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.Animation" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AnimationWindow.PropertiesProxy">
            <summary>
            The model properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationWindow.PropertiesProxy.ProxyEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AssetEditorWindow">
            <summary>
            Base class for assets editing/viewing windows.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="F:FlaxEditor.Windows.Assets.AssetEditorWindow._item">
            <summary>
            The item.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.AssetEditorWindow._toolstrip">
            <summary>
            The toolstrip.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AssetEditorWindow.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AssetEditorWindow.SerializationTypename">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.UnlinkItem">
            <summary>
            Unlinks the item. Removes reference to it and unbinds all events.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.UpdateToolstrip">
            <summary>
            Updates the toolstrip buttons and other controls. Called after some window events.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AssetEditorWindow.WindowTitleName">
            <summary>
            Gets the name of the window title format text ({0} to insert asset short name).
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.UpdateTitle">
            <summary>
            Updates the window title text.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.Save">
            <summary>
            Tries to save asset changes if it has been edited.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.IsEditingItem(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnClosing(FlaxEngine.ClosingReason)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="E:FlaxEditor.Windows.Assets.AssetEditorWindow.OnEdited">
            <summary>
            Occurs when object gets edited.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AssetEditorWindow.IsEdited">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.MarkAsEdited">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.ClearEditedFlag">
            <summary>
            Clears the edited flag.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnEditedState">
            <summary>
            Action fired when object gets edited.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnEditedStateChanged">
            <summary>
            Action fired when object edited state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnShowContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnItemDispose(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1">
            <summary>
            Generic base class for asset editors.
            </summary>
            <typeparam name="T">Asset type.</typeparam>
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="F:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1._isWaitingForLoaded">
            <summary>
            Flag set to true if window is is waiting for asset to be loaded (to send <see cref="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnAssetLoaded"/> or <see cref="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnAssetLoadFailed"/> events).
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1._asset">
            <summary>
            The asset reference.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.Asset">
            <summary>
            Gets the asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.ReloadAsset">
            <summary>
            Reloads the asset (window will receive <see cref="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnAssetLoaded"/> or <see cref="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnAssetLoadFailed"/> events).
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.LoadAsset">
            <summary>
            Loads the asset.
            </summary>
            <returns>Loaded asset or null if cannot do it.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnAssetLinked">
            <summary>
            Called when asset gets linked and window can setup UI for it.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnAssetLoaded">
            <summary>
            Called when asset gets loaded and window can setup UI for it.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnAssetLoadFailed">
            <summary>
            Called when asset fails to load and window can setup UI for it.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1">
            <summary>
            Generic base class for asset editors that modify cloned asset and update original asset on save.
            </summary>
            <typeparam name="T">Asset type.</typeparam>
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1.OriginalAsset">
            <summary>
            Gets the original asset. Note: <see cref="P:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.Asset"/> is the cloned asset for local editing. Use <see cref="M:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1.SaveToOriginal"/> to apply changes to the original asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1.SaveToOriginal">
            <summary>
            Saves the copy of the asset to the original location. This action cannot be undone!
            </summary>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1.LoadAsset">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AudioClipWindow">
            <summary>
            Audio clip window allows to view and edit <see cref="T:FlaxEngine.AudioClip"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.AudioClip" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AudioClipWindow.PropertiesProxy">
            <summary>
            The AudioClip properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.AudioClipWindow)">
            <summary>
            Gathers parameters from the specified AudioClip.
            </summary>
            <param name="window">The asset window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.PropertiesProxy.PeekState">
            <summary>
            Records the current state to restore it on DiscardChanges.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.PropertiesProxy.Reimport">
            <summary>
            Reimports asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.PropertiesProxy.DiscardChanges">
            <summary>
            On discard changes
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AudioClipWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.CollisionDataWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.CollisionData"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.CollisionData" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.CollisionDataWindow.PropertiesProxy">
            <summary>
            The asset properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.PropertiesProxy.Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.PropertiesProxy.Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.PropertiesProxy.CookData.Create">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.UpdateWiresModel">
            <summary>
            Updates the collision data debug model.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.CollisionDataWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.CubeTextureWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.CubeTexture"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.CubeTexture" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.CubeTextureWindow.PropertiesProxy">
            <summary>
            The texture properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.CubeTextureWindow)">
            <summary>
            Gathers parameters from the specified texture.
            </summary>
            <param name="window">The asset window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.PropertiesProxy.PeekState">
            <summary>
            Records the current state to restore it on DiscardChanges.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.PropertiesProxy.Reimport">
            <summary>
            Reimports asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.PropertiesProxy.DiscardChanges">
            <summary>
            On discard changes
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.CubeTextureWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.FontAssetWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.FontAsset"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.FontAsset" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.FontAssetWindow.PropertiesProxy">
            <summary>
            The font asset properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.FontAssetWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.FontAssetWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.FontAssetWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.FontAssetWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.FontAssetWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.FontAssetWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.GameplayGlobalsWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.GameplayGlobals"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.GameplayGlobals" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.AddRemoveParamAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.AddRemoveParamAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.AddRemoveParamAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.AddRemoveParamAction.Dispose">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.RenameParamAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.RenameParamAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.RenameParamAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.RenameParamAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.VariableValueContainer.Refresh(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.VariableValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.VariableValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.VariableValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.VariableValueContainer.RefreshReferenceValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.Undo">
            <summary>
            Gets the undo for asset editing actions.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.OnPlayBegin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.OnPlayEnd">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.GameplayGlobalsWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.IESProfileWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.IESProfile"/> asset.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.IESProfileWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.IESProfileWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.IESProfileWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.JsonAssetWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.JsonAsset"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.JsonAsset" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.JsonAssetWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.JsonAssetWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.JsonAssetWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.JsonAssetWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.JsonAssetWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.MaterialFunctionWindow">
            <summary>
            Material function window allows to view and edit <see cref="T:FlaxEngine.MaterialFunction"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.MaterialFunction" />
            <seealso cref="T:FlaxEditor.Surface.MaterialFunctionSurface" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialFunctionWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialFunctionWindow.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialFunctionWindow.SurfaceData">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.MaterialInstanceWindow">
            <summary>
            Material window allows to view and edit <see cref="T:FlaxEngine.MaterialInstance"/> asset.
            Note: it uses actual asset to modify so changes are visible live in the game/editor preview.
            </summary>
            <seealso cref="T:FlaxEngine.MaterialInstance" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialInstanceWindow.EditParamOverrideAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.EditParamOverrideAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.EditParamOverrideAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.EditParamOverrideAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy">
            <summary>
            The material properties proxy object.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.Window">
            <summary>
            The window reference. Used to handle some special logic.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.Values">
            <summary>
            The material parameter values collection. Used to record undo changes.
            </summary>
            <remarks>
            Contains only items with raw values excluding Flax Objects.
            </remarks>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.ValuesRef">
            <summary>
            The material parameter values collection. Used to record undo changes.
            </summary>
            <remarks>
            Contains only items with references to Flax Objects identified by ID.
            </remarks>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.MaterialInstanceWindow)">
            <summary>
            Gathers parameters from the specified material.
            </summary>
            <param name="materialWin">The material window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.PeekState">
            <summary>
            Records the current state to restore it on DiscardChanges.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.DiscardChanges">
            <summary>
            On discard changes
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.Assets.MaterialInstanceWindow.ParametersEditor">
            <summary>
            Custom editor for editing material parameters collection.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.ParametersEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialInstanceWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.MaterialWindow">
            <summary>
            Material window allows to view and edit <see cref="T:FlaxEngine.Material"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.Material" />
            <seealso cref="T:FlaxEditor.Surface.MaterialSurface" />
            <seealso cref="T:FlaxEditor.Viewport.Previews.MaterialPreview" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy">
            <summary>
            The material properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.MaterialWindow)">
            <summary>
            Gathers parameters from the specified material.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.OnSave(FlaxEngine.MaterialInfo@)">
            <summary>
            Saves the material properties to the material info structure.
            </summary>
            <param name="info">The material info.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.ShowSourceCode(FlaxEngine.Material)">
            <summary>
            Shows the material source code window.
            </summary>
            <param name="material">The material asset.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.FillMaterialInfo(FlaxEngine.MaterialInfo@)">
            <summary>
            Gets material info from UI.
            </summary>
            <param name="info">Output info.</param>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialWindow.MainNode">
            <summary>
            Gets or sets the main material node.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.OnPropertyEdited">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialWindow.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialWindow.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.LoadSurface">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.SaveSurface">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.SaveToOriginal">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ModelBaseWindow`2">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.ModelBase"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.Model" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelBaseWindow`2.Tab.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelBaseWindow`2.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelBaseWindow`2.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelBaseWindow`2.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelBaseWindow`2.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelBaseWindow`2.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.ModelBaseWindow`2.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelBaseWindow`2.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelBaseWindow`2.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelBaseWindow`2.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ModelWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.Model"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.Model" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.MeshesPropertiesProxy.UpdateEffectsOnUI">
            <summary>
            Updates the highlight/isolate effects on UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.MeshesPropertiesProxy.UpdateMaterialSlotsUI">
            <summary>
            Updates the material slots UI parts. Should be called after material slot rename.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.MeshesPropertiesProxy.SetMaterialSlot(FlaxEngine.Mesh,System.Int32)">
            <summary>
            Sets the material slot index to the mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="newSlotIndex">New index of the material slot to use.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.MeshesPropertiesProxy.SetIsolate(FlaxEngine.Mesh)">
            <summary>
            Sets the material slot to isolate.
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.MeshesPropertiesProxy.SetHighlight(FlaxEngine.Mesh)">
            <summary>
            Sets the material slot index to highlight.
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.MaterialsPropertiesProxy.UpdateMaterialSlotsUI">
            <summary>
            Updates the material slots UI parts. Should be called after material slot rename.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.UVsPropertiesProxy.OnClean">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.UVsPropertiesProxy.ProxyEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.UVsPropertiesProxy.UVsLayoutPreviewControl.DrawChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.ImportPropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.ModelWindow)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.UpdateEffectsOnAsset">
            <summary>
            Updates the highlight/isolate effects on a model asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ParticleEmitterFunctionWindow">
            <summary>
            Particle function window allows to view and edit <see cref="T:FlaxEngine.ParticleEmitterFunction"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.ParticleEmitterFunction" />
            <seealso cref="T:FlaxEditor.Surface.ParticleEmitterFunctionSurface" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterFunctionWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.ParticleEmitterFunctionWindow.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.ParticleEmitterFunctionWindow.SurfaceData">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ParticleEmitterWindow">
            <summary>
            Particle Emitter window allows to view and edit <see cref="T:FlaxEngine.ParticleEmitter"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.ParticleEmitter" />
            <seealso cref="T:FlaxEditor.Surface.ParticleEmitterSurface" />
            <seealso cref="T:FlaxEditor.Viewport.Previews.ParticleEmitterPreview" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ParticleEmitterWindow.PropertiesProxy">
            <summary>
            The properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.ParticleEmitterWindow)">
            <summary>
            Gathers parameters from the specified ParticleEmitter.
            </summary>
            <param name="particleEmitterWin">The ParticleEmitter window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.ShowSourceCode(FlaxEngine.ParticleEmitter)">
            <summary>
            Shows the ParticleEmitter source code window.
            </summary>
            <param name="particleEmitter">The ParticleEmitter asset.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.OnParamRenameUndo(FlaxEditor.Windows.Assets.VisjectSurfaceWindow{FlaxEngine.ParticleEmitter,FlaxEditor.Surface.ParticleEmitterSurface,FlaxEditor.Viewport.Previews.ParticleEmitterPreview}.RenameParamAction)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.OnParamAddUndo(FlaxEditor.Windows.Assets.VisjectSurfaceWindow{FlaxEngine.ParticleEmitter,FlaxEditor.Surface.ParticleEmitterSurface,FlaxEditor.Viewport.Previews.ParticleEmitterPreview}.AddRemoveParamAction)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.OnParamRemoveUndo(FlaxEditor.Windows.Assets.VisjectSurfaceWindow{FlaxEngine.ParticleEmitter,FlaxEditor.Surface.ParticleEmitterSurface,FlaxEditor.Viewport.Previews.ParticleEmitterPreview}.AddRemoveParamAction)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.ParticleEmitterWindow.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.ParticleEmitterWindow.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.LoadSurface">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.SaveSurface">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleEmitterWindow.SaveToOriginal">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ParticleSystemWindow">
            <summary>
            Particle System window allows to view and edit <see cref="T:FlaxEngine.ParticleSystem"/> asset.
            Note: it uses ClonedAssetEditorWindowBase which is creating cloned asset to edit/preview.
            </summary>
            <seealso cref="T:FlaxEngine.ParticleSystem" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ParticleSystemWindow.GeneralProxy">
            <summary>
            The proxy object for editing particle system properties.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ParticleSystemWindow.EmitterTrackProxy">
            <summary>
            The proxy object for editing particle system track properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleSystemWindow.EmitterTrackProxy.EmitterTrackProxyEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ParticleSystemWindow.FolderTrackProxy">
            <summary>
            The proxy object for editing folder track properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.ParticleSystemWindow.Preview">
            <summary>
            Gets the particle system preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.ParticleSystemWindow.Timeline">
            <summary>
            Gets the timeline editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleSystemWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleSystemWindow.RefreshTempAsset">
            <summary>
            Refreshes temporary asset to see changes live when editing the timeline.
            </summary>
            <returns>True if cannot refresh it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleSystemWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleSystemWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleSystemWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleSystemWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleSystemWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.ParticleSystemWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleSystemWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleSystemWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ParticleSystemWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.PrefabWindow">
            <summary>
            Prefab window allows to view and edit <see cref="T:FlaxEngine.Prefab"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.Prefab" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.PrefabWindow.SetRootAction">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> used to change the root actor of the prefab.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.SetRootAction.#ctor(FlaxEditor.Windows.Assets.PrefabWindow,FlaxEngine.Actor,FlaxEngine.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Assets.PrefabWindow.SetRootAction"/> class.
            </summary>
            <param name="window">The window reference.</param>
            <param name="before">The root before.</param>
            <param name="after">The root after.</param>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.SetRootAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.SetRootAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.SetRootAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.SetRootAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.SetRoot">
            <summary>
            Changes the root object of the prefab.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Cut">
            <summary>
            Cuts selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Copy">
            <summary>
            Copies selected objects to system clipboard.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Paste">
            <summary>
            Pastes objects from the system clipboard.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Paste(FlaxEngine.Actor)">
            <summary>
            Pastes the copied objects. Supports undo/redo.
            </summary>
            <param name="pasteTargetActor">The target actor to paste copied data.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Duplicate">
            <summary>
            Duplicates selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomDeleteActorsAction.Delete">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomDeleteActorsAction.GetNode(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomPasteActorsAction.LinkBrokenParentReference(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomPasteActorsAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomPasteActorsAction.GetNode(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomPasteActorsAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Delete">
            <summary>
            Deletes selected objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.Tree">
            <summary>
            Gets the prefab hierarchy tree control.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.Viewport">
            <summary>
            Gets the viewport.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.Undo">
            <summary>
            Gets the undo system used by this window for changes tracking.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.PrefabWindow.Graph">
            <summary>
            The local scene nodes graph used by the prefab editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.LiveReload">
            <summary>
            Gets or sets a value indicating whether use live reloading for the prefab changes (applies prefab changes on modification by auto).
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.LiveReloadTimeout">
            <summary>
            Gets or sets the live reload timeout. It defines the time to apply prefab changes after modification.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnEditedState">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.PrefabWindow.CustomRootNode">
            <summary>
            The custom implementation of the root node for the scene graph.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomRootNode.#ctor(FlaxEditor.Windows.Assets.PrefabWindow)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Assets.PrefabWindow.CustomRootNode"/> class.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomRootNode.Spawn(FlaxEngine.Actor,FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.CustomRootNode.Undo">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.PrefabWindow.PrefabTree">
            <summary>
            The prefab hierarchy tree control.
            </summary>
            <seealso cref="P:FlaxEditor.Windows.Assets.PrefabWindow.Tree" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.PrefabTree.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Assets.PrefabWindow.PrefabTree"/> class.
            </summary>
        </member>
        <member name="E:FlaxEditor.Windows.Assets.PrefabWindow.ContextMenuShow">
            <summary>
            Occurs when prefab hierarchy panel wants to show the context menu. Allows to add custom options. Applies to all prefab windows.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CreateContextMenu">
            <summary>
            Creates the context menu for the current objects selection.
            </summary>
            <returns>The context menu.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.ShowContextMenu(FlaxEngine.GUI.Control,FlaxEngine.Vector2@)">
            <summary>
            Shows the context menu on a given location (in the given control coordinates).
            </summary>
            <param name="parent">The parent control.</param>
            <param name="location">The location (within a given control).</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Spawn(FlaxEngine.Actor)">
            <summary>
            Spawns the specified actor to the prefab (adds actor to root).
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Spawn(System.Type)">
            <summary>
            Spawns the actor of the specified type to the prefab (adds actor to root).
            </summary>
            <param name="type">The actor type.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Spawn(FlaxEngine.Actor,FlaxEngine.Actor)">
            <summary>
            Spawns the specified actor.
            </summary>
            <param name="actor">The actor.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.PrefabWindow.Selection">
            <summary>
            The current selection (readonly).
            </summary>
        </member>
        <member name="E:FlaxEditor.Windows.Assets.PrefabWindow.SelectionChanged">
            <summary>
            Occurs when selection gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnSelectionChanged(FlaxEditor.SceneGraph.SceneGraphNode[])">
            <summary>
            Called when selection gets changed.
            </summary>
            <param name="before">The selection before the change.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Select(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode})">
            <summary>
            Selects the specified nodes collection.
            </summary>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Select(FlaxEditor.SceneGraph.SceneGraphNode,System.Boolean)">
            <summary>
            Selects the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="additive">if set to <c>true</c> will use additive mode, otherwise will clear previous selection.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Deselect(FlaxEditor.SceneGraph.SceneGraphNode)">
            <summary>
            Deselects the specified node.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Deselect">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.Assets.PreviewsCacheWindow">
            <summary>
            Editor window that allows to view <see cref="T:FlaxEditor.PreviewsCache"/> asset.
            </summary>
            <seealso cref="T:FlaxEditor.PreviewsCache" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PreviewsCacheWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PreviewsCacheWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PreviewsCacheWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SceneAnimationWindow">
            <summary>
            Scene Animation window allows to view and edit <see cref="T:FlaxEngine.SceneAnimation"/> asset.
            Note: it uses ClonedAssetEditorWindowBase which is creating cloned asset to edit/preview.
            </summary>
            <seealso cref="T:FlaxEngine.SceneAnimation" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.SceneAnimationWindow.Timeline">
            <summary>
            Gets the timeline editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SceneAnimationWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SceneAnimationWindow.OnSceneUnloading(FlaxEngine.Scene,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SceneAnimationWindow.RefreshTempAsset">
            <summary>
            Refreshes temporary asset to see changes live when editing the timeline.
            </summary>
            <returns>True if cannot refresh it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SceneAnimationWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SceneAnimationWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SceneAnimationWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SceneAnimationWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SceneAnimationWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.SceneAnimationWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SceneAnimationWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SceneAnimationWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SceneAnimationWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SceneAnimationWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SkeletonMaskWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.SkeletonMask"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.SkeletonMask" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SkeletonMaskWindow.PropertiesProxy">
            <summary>
            The asset properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.PropertiesProxy.ProxyEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.PropertiesProxy.ProxyEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.SkeletonMaskWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SkinnedModelWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.SkinnedModel"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.SkinnedModel" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.Preview.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.Preview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.MeshesPropertiesProxy.UpdateEffectsOnUI">
            <summary>
            Updates the highlight/isolate effects on UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.MeshesPropertiesProxy.UpdateMaterialSlotsUI">
            <summary>
            Updates the material slots UI parts. Should be called after material slot rename.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.MeshesPropertiesProxy.SetMaterialSlot(FlaxEngine.SkinnedMesh,System.Int32)">
            <summary>
            Sets the material slot index to the mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="newSlotIndex">New index of the material slot to use.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.MeshesPropertiesProxy.SetIsolate(FlaxEngine.SkinnedMesh)">
            <summary>
            Sets the material slot to isolate.
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.MeshesPropertiesProxy.SetHighlight(FlaxEngine.SkinnedMesh)">
            <summary>
            Sets the material slot index to highlight.
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.MaterialsPropertiesProxy.UpdateMaterialSlotsUI">
            <summary>
            Updates the material slots UI parts. Should be called after material slot rename.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.UVsPropertiesProxy.OnClean">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.UVsPropertiesProxy.ProxyEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.UVsPropertiesProxy.UVsLayoutPreviewControl.DrawChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.ImportPropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.SkinnedModelWindow)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.UpdateEffectsOnAsset">
            <summary>
            Updates the highlight/isolate effects on a model asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SpriteAtlasWindow">
            <summary>
            Sprite Atlas window allows to view and edit <see cref="T:FlaxEngine.SpriteAtlas"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.SpriteAtlas" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SpriteAtlasWindow.AtlasView">
            <summary>
            Atlas view control. Shows sprites.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.SpriteAtlasPreview" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy">
            <summary>
            The texture properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy.UpdateSprites">
            <summary>
            Updates the sprites collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.SpriteAtlasWindow)">
            <summary>
            Gathers parameters from the specified texture.
            </summary>
            <param name="win">The texture window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy.PeekState">
            <summary>
            Records the current state to restore it on DiscardChanges.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy.Reimport">
            <summary>
            Reimports asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy.DiscardChanges">
            <summary>
            On discard changes
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.SpriteAtlasWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.TextureWindow">
            <summary>
            Texture window allows to view and edit <see cref="T:FlaxEngine.Texture"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.Texture" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.TextureWindow.PropertiesProxy">
            <summary>
            The texture properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.TextureWindow)">
            <summary>
            Gathers parameters from the specified texture.
            </summary>
            <param name="window">The asset window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.PropertiesProxy.PeekState">
            <summary>
            Records the current state to restore it on DiscardChanges.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.PropertiesProxy.Reimport">
            <summary>
            Reimports asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.PropertiesProxy.DiscardChanges">
            <summary>
            On discard changes
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.TextureWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2">
            <summary>
            The base class for editor windows that use <see cref="T:FlaxEditor.Surface.VisjectSurface"/> for content editing by graph functions (eg. material functions, particle emitter functions).
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
            <seealso cref="T:FlaxEditor.Surface.IVisjectSurfaceOwner" />
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2._surface">
            <summary>
            The surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2._tmpAssetIsDirty">
            <summary>
            True if temporary asset is dirty, otherwise false.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2._isWaitingForSurfaceLoad">
            <summary>
            True if window is waiting for asset load to load surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2._undo">
            <summary>
            The undo.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.Surface">
            <summary>
            Gets the Visject Surface.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.Undo">
            <summary>
            Gets the undo history context for this window.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.ShowWholeGraph">
            <summary>
            Shows the whole surface graph.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.RefreshTempAsset">
            <summary>
            Refreshes temporary asset to see changes live when editing the surface.
            </summary>
            <returns>True if cannot refresh it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.OnSurfaceEditedChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.OnSurfaceGraphEdited">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.OnSurfaceClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.LoadSurface">
            <summary>
            Loads the surface from the asset. Called during <see cref="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.Update(System.Single)"/> when asset is loaded and surface is missing.
            </summary>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.SaveSurface">
            <summary>
            Saves the surface to the asset. Called during <see cref="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.Update(System.Single)"/> when asset is loaded and surface is missing.
            </summary>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectFunctionSurfaceWindow`2.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3">
            <summary>
            The base class for editor windows that use <see cref="T:FlaxEditor.Surface.VisjectSurface"/> for content editing. 
            Note: it uses ClonedAssetEditorWindowBase which is creating cloned asset to edit/preview.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
            <seealso cref="T:FlaxEditor.Surface.IVisjectSurfaceOwner" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.RenameParamAction">
            <summary>
            The surface parameter rename action for undo.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1" />
            <seealso cref="T:FlaxEditor.Surface.IVisjectSurfaceOwner" />
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.RenameParamAction.Window">
            <summary>
            The window reference.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.RenameParamAction.Index">
            <summary>
            The index of the parameter.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.RenameParamAction.Before">
            <summary>
            The name before.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.RenameParamAction.After">
            <summary>
            The name after.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.RenameParamAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.RenameParamAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.RenameParamAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.RenameParamAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.EditParamAttributesAction">
            <summary>
            The surface parameter attributes edit action for undo.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1" />
            <seealso cref="T:FlaxEditor.Surface.IVisjectSurfaceOwner" />
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.EditParamAttributesAction.Window">
            <summary>
            The window reference.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.EditParamAttributesAction.Index">
            <summary>
            The index of the parameter.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.EditParamAttributesAction.Before">
            <summary>
            The attributes before.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.EditParamAttributesAction.After">
            <summary>
            The attributes after.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.EditParamAttributesAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.EditParamAttributesAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.EditParamAttributesAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.EditParamAttributesAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.AddRemoveParamAction">
            <summary>
            The undo action for adding or removing surface parameter.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1" />
            <seealso cref="T:FlaxEditor.Surface.IVisjectSurfaceOwner" />
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.AddRemoveParamAction.Window">
            <summary>
            The window reference.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.AddRemoveParamAction.IsAdd">
            <summary>
            True if adding, false if removing parameter.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.AddRemoveParamAction.Index">
            <summary>
            The index of the parameter.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.AddRemoveParamAction.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.AddRemoveParamAction.Type">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.AddRemoveParamAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.AddRemoveParamAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.AddRemoveParamAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.AddRemoveParamAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.ParametersEditor">
            <summary>
            Custom editor for editing material parameters collection.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.ParametersEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.ParametersEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3._split1">
            <summary>
            The primary split panel.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3._split2">
            <summary>
            The secondary split panel.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3._preview">
            <summary>
            The asset preview.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3._surface">
            <summary>
            The surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3._propertiesEditor">
            <summary>
            The properties editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3._tmpAssetIsDirty">
            <summary>
            True if temporary asset is dirty, otherwise false.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3._isWaitingForSurfaceLoad">
            <summary>
            True if window is waiting for asset load to load surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3._refreshPropertiesOnLoad">
            <summary>
            True if window is waiting for asset load to refresh properties editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3._paramValueChange">
            <summary>
            True if parameter value has been changed (special path for handling modifying surface parameters in properties editor).
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3._undo">
            <summary>
            The undo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.NewParameterTypes">
            <summary>
            The new parameter types enum type to use. Null to disable adding new parameters. Enum items must have values matching the <see cref="T:FlaxEngine.GraphParamType"/> enum.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.Surface">
            <summary>
            Gets the Visject Surface.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.Preview">
            <summary>
            Gets the asset preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.Undo">
            <summary>
            Gets the undo history context for this window.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.GetParameter(System.Int32)">
            <summary>
            Gets the asset parameter.
            </summary>
            <param name="index">The zero-based parameter index.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.SetParameter(System.Int32,System.Object)">
            <summary>
            Sets the asset parameter.
            </summary>
            <param name="index">The zero-based parameter index.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnPropertyEdited">
            <summary>
            Called when the asset properties proxy object gets edited.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.ShowWholeGraph">
            <summary>
            Shows the whole surface graph.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.RefreshTempAsset">
            <summary>
            Refreshes temporary asset to see changes live when editing the surface.
            </summary>
            <returns>True if cannot refresh it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnSurfaceEditedChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnSurfaceGraphEdited">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnSurfaceClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnParamRenameUndo(FlaxEditor.Windows.Assets.VisjectSurfaceWindow{`0,`1,`2}.RenameParamAction)">
            <summary>
            Called when parameter rename undo action is performed.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnParamAddUndo(FlaxEditor.Windows.Assets.VisjectSurfaceWindow{`0,`1,`2}.AddRemoveParamAction)">
            <summary>
            Called when parameter add undo action is performed.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnParamRemoveUndo(FlaxEditor.Windows.Assets.VisjectSurfaceWindow{`0,`1,`2}.AddRemoveParamAction)">
            <summary>
            Called when parameter remove undo action is performed.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.LoadSurface">
            <summary>
            Loads the surface from the asset. Called during <see cref="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.Update(System.Single)"/> when asset is loaded and surface is missing.
            </summary>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.SaveSurface">
            <summary>
            Saves the surface to the asset. Called during <see cref="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.Update(System.Single)"/> when asset is loaded and surface is missing.
            </summary>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.VisjectSurfaceWindow`3.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.ContentWindow">
            <summary>
            One of the main editor windows used to present workspace content and user scripts.
            Provides various functionalities for asset operations.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="E:FlaxEditor.Windows.ContentWindow.ContextMenuShow">
            <summary>
            Occurs when content window wants to show the context menu for the given content item. Allows to add custom options.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.RefreshViewItemsThumbnails">
            <summary>
            Refreshes thumbnails for all the items in the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.ReimportSelection">
            <summary>
            Reimports the selected assets.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.ExportSelection">
            <summary>
            Exports the selected items.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.ContentWindow.Toolstrip">
            <summary>
            Gets the toolstrip.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.ContentWindow.View">
            <summary>
            Gets the assets view.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.ContentWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Rename(FlaxEditor.Content.ContentItem)">
            <summary>
            Shows popup dialog with UI to rename content item.
            </summary>
            <param name="item">The item to rename.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Rename(FlaxEditor.Content.ContentItem,System.String)">
            <summary>
            Renames the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="newShortName">New name (without extension, just the filename).</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Delete(FlaxEditor.Content.ContentItem)">
            <summary>
            Deletes the specified item. Asks user first and uses some GUI.
            </summary>
            <param name="item">The item to delete.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Delete(System.Collections.Generic.List{FlaxEditor.Content.ContentItem})">
            <summary>
            Deletes the specified items. Asks user first and uses some GUI.
            </summary>
            <param name="items">The items to delete.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Duplicate(FlaxEditor.Content.ContentItem)">
            <summary>
            Clones the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Duplicate(System.Collections.Generic.List{FlaxEditor.Content.ContentItem})">
            <summary>
            Duplicates the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Paste(System.String[])">
            <summary>
            Pastes the specified files.
            </summary>
            <param name="files">The files paths to import.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.NewFolder">
            <summary>
            Stars creating the folder.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.NewItem(FlaxEditor.Content.ContentProxy,System.Object,System.Action{FlaxEditor.Content.ContentItem})">
            <summary>
            Starts creating new item.
            </summary>
            <param name="proxy">The new item proxy.</param>
            <param name="argument">The argument passed to the proxy for the item creation. In most cases it is null.</param>
            <param name="created">The event called when the item is crated by the user. The argument is the new item.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Open(FlaxEditor.Content.ContentItem)">
            <summary>
            Opens the specified content item.
            </summary>
            <param name="item">The content item.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Select(FlaxEngine.Asset)">
            <summary>
            Selects the specified asset in the content view.
            </summary>
            <param name="asset">The asset to select.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Select(FlaxEditor.Content.ContentItem,System.Boolean)">
            <summary>
            Selects the specified item in the content view.
            </summary>
            <param name="item">The item to select.</param>
            <param name="fastScroll">True of scroll to the item quickly without smoothing.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.RefreshView">
            <summary>
            Refreshes the current view items collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.RefreshView(FlaxEditor.Content.ContentTreeNode)">
            <summary>
            Refreshes the view.
            </summary>
            <param name="target">The target location.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnExit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.ContentWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Navigate(FlaxEditor.Content.ContentTreeNode)">
            <summary>
            Navigates to the specified target content location.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.NavigateBackward">
            <summary>
            Navigates backward.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.NavigateForward">
            <summary>
            Navigates forward.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.NavigateUp">
            <summary>
            Navigates directory up.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.NavigationClearHistory">
            <summary>
            Clears the navigation history.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.ContentWindow.SelectedNode">
            <summary>
            Gets the selected tree node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.ContentWindow.CurrentViewFolder">
            <summary>
            Gets the current view folder.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.ShowRoot">
            <summary>
            Shows the root folder.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.ViewDropdown.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.ViewDropdown.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.ClearItemsSearch">
            <summary>
            Clears the items searching query text and filters.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.DebugLogWindow">
            <summary>
            Editor window used to show debug info, warning and error messages. Captures <see cref="T:FlaxEngine.Debug"/> messages.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription">
            <summary>
            Debug log entry description;
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.Level">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.Title">
            <summary>
            The message title.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.Description">
            <summary>
            The message description.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.ContextObject">
            <summary>
            The target object hint id (don't store ref, object may be an actor that can be removed and restored later or sth).
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.LocationFile">
            <summary>
            The location of the issue (file path).
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.LocationLine">
            <summary>
            The location line number (zero or less to not use it);
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntry.DefaultHeight">
            <summary>
            The default height of the entries.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.DebugLogWindow.LogEntry.Info">
            <summary>
            Gets the information text.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.OnGotFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.OnVisibleChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.Copy">
            <summary>
            Copies the entry information to the system clipboard (as text).
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.DebugLogWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.Clear">
            <summary>
            Clears the log.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.Add(FlaxEditor.Windows.DebugLogWindow.LogEntryDescription@)">
            <summary>
            Adds the specified log entry.
            </summary>
            <param name="desc">The log entry description.</param>
        </member>
        <member name="P:FlaxEditor.Windows.DebugLogWindow.Selected">
            <summary>
            Gets or sets the selected entry.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.OnPlayBegin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.DebugLogWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.EditGameWindow">
            <summary>
            Main editor window used to modify scene objects. Provides Gizmos and camera viewport navigation.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.SceneEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.EditGameWindow.CameraPreview">
            <summary>
            Camera preview output control.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.EditGameWindow.CameraPreview.IsPinned">
            <summary>
            Gets or sets a value indicating whether this preview is pinned.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.EditGameWindow.CameraPreview.Camera">
            <summary>
            Gets or sets the camera.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.CameraPreview.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.EditGameWindow.CameraPreview"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.CameraPreview.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.CameraPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Windows.EditGameWindow.Viewport">
            <summary>
            The viewport control.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.EditGameWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="P:FlaxEditor.Windows.EditGameWindow.IsPilotActorActive">
            <summary>
            Gets a value indicating whether actor pilot feature is active and in use.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.EditGameWindow.ActorToPilot">
            <summary>
            Gets the current actor that is during pilot action.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.PilotActor(FlaxEngine.Actor)">
            <summary>
            Moves viewport to the actor and attaches actor to the viewport to pilot it over the scene.
            </summary>
            <param name="actor">The actor to pilot.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.EndPilot">
            <summary>
            Ends the actor piloting mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.ShowSelectedActors">
            <summary>
            Moves the viewport to visualize selected actors.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.UpdateCameraPreview">
            <summary>
            Updates the camera previews.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.HideCameraPreview(FlaxEngine.Camera)">
            <summary>
            Hides the camera preview that uses given camera.
            </summary>
            <param name="camera">The camera to hide.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.HideCameraPreview(FlaxEditor.Windows.EditGameWindow.CameraPreview)">
            <summary>
            Hides the camera preview.
            </summary>
            <param name="preview">The preview to hide.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.HideAllCameraPreviews">
            <summary>
            Hides all the camera previews.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.OnSceneUnloading(FlaxEngine.Scene,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.EditGameWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.EditorOptionsWindow">
            <summary>
            Editor window for changing the options.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.EditorOptionsWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.EditorOptionsWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorOptionsWindow.GatherData">
            <summary>
            Load the editor options data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorOptionsWindow.SaveData">
            <summary>
            Saves the editor options data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorOptionsWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditorOptionsWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.EditorWindow">
            <summary>
             Base class for all windows in Editor.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Docking.DockWindow" />
        </member>
        <member name="F:FlaxEditor.Windows.EditorWindow.Editor">
            <summary>
            Gets the editor object.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.EditorWindow.CanOpenContentFinder">
            <summary>
            Gets a value indicating whether this window can open content finder popup.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.#ctor(FlaxEditor.Editor,System.Boolean,FlaxEngine.GUI.ScrollBars)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.EditorWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
            <param name="hideOnClose">True if hide window on closing, otherwise it will be destroyed.</param>
            <param name="scrollBars">The scroll bars.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.IsEditingItem(FlaxEditor.Content.ContentItem)">
            <summary>
            Determines whether this window is holding reference to the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if window is editing the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneSaving(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene starts saving
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneSaved(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene gets saved
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneSaveError(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene gets saving error
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneLoading(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene starts loading
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneLoaded(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene gets loaded
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneLoadError(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene cannot be loaded
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneUnloading(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene gets unloading
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneUnloaded(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene gets unloaded
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnPlayBegin">
            <summary>
            Called when Editor is entering play mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnPlayEnd">
            <summary>
            Called when Editor leaves the play mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnInit">
            <summary>
            Called when window should be initialized.
            At this point, main window, content database, default editor windows are ready.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnUpdate">
            <summary>
            Called when every engine update.
            Note: <see cref="M:FlaxEngine.GUI.Control.Update(System.Single)"/> may be called at the lower frequency than the engine updates.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnExit">
            <summary>
            Called when editor is being closed and window should perform release data operations.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.GameCookerWindow">
            <summary>
            Editor tool window for building games using <see cref="T:FlaxEditor.GameCooker"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.GameCookerWindow.BuildTabProxy">
            <summary>
            Proxy object for the Build tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.GameCookerWindow.BuildTabProxy.Windows.Arch.x64">
            <summary>
            The x64.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.GameCookerWindow.BuildTabProxy.Windows.Arch.x86">
            <summary>
            The x86.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.GameCookerWindow.BuildTabProxy.Windows.Architecture">
            <summary>
            The architecture.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.GameCookerWindow.BuildTabProxy.UWP.Architecture">
            <summary>
            The architecture.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.PresetsTargetsColumnBase.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.GameCookerWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.BuildAll(FlaxEditor.Content.Settings.BuildPreset)">
            <summary>
            Builds all the targets from the given preset.
            </summary>
            <param name="preset">The preset.</param>
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.Build(FlaxEditor.Content.Settings.BuildTarget)">
            <summary>
            Builds the target.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.GatherData">
            <summary>
            Load the build presets from the settings.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.SaveData">
            <summary>
            Saves the build presets to the settings.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.GameWindow">
            <summary>
            Provides in-editor play mode simulation.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="P:FlaxEditor.Windows.GameWindow.Viewport">
            <summary>
            Gets the viewport.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GameWindow.ShowGUI">
            <summary>
            Gets or sets a value indicating whether show game GUI in the view or keep it hidden.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GameWindow.CenterMouseOnFocus">
            <summary>
            Gets or sets a value indicating whether center mouse position on window focus in play mode. Helps when working with games that lock mouse cursor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GameWindow.FocusOnPlay">
            <summary>
            Gets or sets a value indicating whether auto-focus game window on play mode start.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.GameWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="P:FlaxEditor.Windows.GameWindow.CanOpenContentFinder">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.OnPlayBegin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.OnShowContextMenu(FlaxEditor.GUI.ContextMenu.ContextMenu)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.UnlockMouseInPlay">
            <summary>
            Unlocks the mouse if game window is focused during play mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.TakeScreenshot">
            <summary>
            Takes the screenshot of the current viewport.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.TakeScreenshot(System.String)">
            <summary>
            Takes the screenshot of the current viewport.
            </summary>
            <param name="path">The output file path.</param>
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.OnStartContainsFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.OnEndContainsFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.GraphicsQualityWindow">
            <summary>
            Window used to show and edit current graphics rendering settings via <see cref="T:FlaxEngine.Graphics"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.GraphicsQualityWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.PropertiesWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.GraphicsQualityWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GraphicsQualityWindow.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.OutputLogWindow">
            <summary>
            Editor window used to show engine output logs.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.OutputLogWindow.Entry">
            <summary>
            The single log message entry.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.OutputLogWindow.Entry.Level">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.OutputLogWindow.Entry.Time">
            <summary>
            The log time (in UTC local format).
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.OutputLogWindow.Entry.Message">
            <summary>
            The message contents.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.OutputLogWindow.OutputTextBox">
            <summary>
            The output log textbox.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.RichTextBoxBase" />
        </member>
        <member name="F:FlaxEditor.Windows.OutputLogWindow.OutputTextBox.Window">
            <summary>
            The parent window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.OutputLogWindow.OutputTextBox.DefaultStyle">
            <summary>
            The default text style.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.OutputLogWindow.OutputTextBox.WarningStyle">
            <summary>
            The warning text style.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.OutputLogWindow.OutputTextBox.ErrorStyle">
            <summary>
            The error text style.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.OutputTextBox.OnParseTextBlocks">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.DebugLogWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.Refresh">
            <summary>
            Refreshes the log output.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.Clear">
            <summary>
            Clears the log.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.LoadLogFile">
            <summary>
            Loads the log from the file selected by the user with the file pickup dialog.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.LoadLogFile(System.String)">
            <summary>
            Loads the log file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.OutputLogWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.OutputLogWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.PluginsWindow">
            <summary>
            Editor tool window for plugins management using <see cref="T:FlaxEngine.PluginManager"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.PluginsWindow.PluginEntry">
            <summary>
            Plugin entry control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.Windows.PluginsWindow.PluginEntry.Plugin">
            <summary>
            The plugin.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.PluginsWindow.PluginEntry.Category">
            <summary>
            The category.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.PluginEntry.#ctor(FlaxEngine.Plugin,FlaxEditor.Windows.PluginsWindow.CategoryEntry,FlaxEngine.PluginDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.PluginsWindow.PluginEntry"/> class.
            </summary>
            <param name="plugin">The plugin.</param>
            <param name="category">The category.</param>
            <param name="desc">Plugin description</param>
        </member>
        <member name="F:FlaxEditor.Windows.PluginsWindow.PluginEntry.ClickLabel.DoubleClick">
            <summary>
            The double click event.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.PluginEntry.ClickLabel.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.PluginsWindow.CategoryEntry">
            <summary>
            Plugins category control.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tabs.Tab" />
        </member>
        <member name="F:FlaxEditor.Windows.PluginsWindow.CategoryEntry.Panel">
            <summary>
            The panel for the plugin entries.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.CategoryEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.PluginsWindow.CategoryEntry"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.PluginsWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.GetPluginEntry(FlaxEngine.Plugin)">
            <summary>
            Gets the plugin entry control.
            </summary>
            <param name="plugin">The plugin.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.GetPluginEntry(System.Type)">
            <summary>
            Gets the plugin entry control.
            </summary>
            <param name="pluginType">The plugin type.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.CPU">
            <summary>
            The CPU performance profiling mode.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Profiler.ProfilerMode" />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.CPU.Clear">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.CPU.Update(FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.CPU.UpdateView(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.GPU">
            <summary>
            The GPU performance profiling mode.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Profiler.ProfilerMode" />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.GPU.Clear">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.GPU.Update(FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.GPU.UpdateView(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.Memory">
            <summary>
            The memory profiling mode focused on system memory allocations breakdown.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Profiler.ProfilerMode" />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Memory.Clear">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Memory.Update(FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Memory.UpdateView(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.Overall">
            <summary>
            The general profiling mode with major game performance charts and stats.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Profiler.ProfilerMode" />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Overall.Clear">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Overall.Update(FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Overall.UpdateView(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.ProfilerMode">
            <summary>
            Base class for all profiler modes. Implementation collects profiling events and presents it using dedicated UI.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData">
            <summary>
            The shared data container for the profiler modes. Used to reduce calls to profiler tool backend for the same data across different profiler fronted modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData.Stats">
            <summary>
            The main stats. Gathered by auto by profiler before profiler mode update.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData.GetEventsCPU">
            <summary>
            Gets the collected CPU events by the profiler from local or remote session.
            </summary>
            <returns>Buffer with events per thread.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData.GetEventsGPU">
            <summary>
            Gets the collected GPU events by the profiler from local or remote session.
            </summary>
            <returns>Buffer with rendering events.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData.Begin">
            <summary>
            Begins the data usage. Prepares the container.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData.End">
            <summary>
            Ends the data usage. Cleanups the container.  
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Profiler.ProfilerMode.MaxSamples">
            <summary>
            The maximum amount of samples to collect.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Profiler.ProfilerMode.MinEventTimeMs">
            <summary>
            The minimum event time in ms.
            </summary>
        </member>
        <member name="E:FlaxEditor.Windows.Profiler.ProfilerMode.SelectedSampleChanged">
            <summary>
            Occurs when selected sample gets changed. Profiling window should propagate this change to all charts and view modes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.Update(FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData@)">
            <summary>
            Updates this instance. Called every frame if live recording is enabled.
            </summary>
            <param name="sharedData">The shared data.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.UpdateView(System.Int32,System.Boolean)">
            <summary>
            Updates the mode view. Called after init and on selected frame changed.
            </summary>
            <param name="selectedFrame">The selected frame index.</param>
            <param name="showOnlyLastUpdateEvents">True if show only events that happened during the last engine update (excluding events from fixed update or draw event), otherwise show all collected events.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.OnSelectedSampleChanged(System.Int32)">
            <summary>
            Called when selected sample gets changed.
            </summary>
            <param name="frameIndex">Index of the view frame.</param>
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.ProfilerWindow">
            <summary>
            Editor tool window for profiling games.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.ProfilerWindow.LiveRecording">
            <summary>
            Gets or sets a value indicating whether live events recording is enabled.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.ProfilerWindow.ViewFrameIndex">
            <summary>
            Gets or sets the index of the selected frame to view (note: some view modes may not use it).
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.ProfilerWindow.ShowOnlyLastUpdateEvents">
            <summary>
            Gets or sets a value indicating whether show only last update events and hide events from the other callbacks (e.g. draw or fixed update).
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Profiler.ProfilerWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerWindow.AddMode(FlaxEditor.Windows.Profiler.ProfilerMode)">
            <summary>
            Adds the mode.
            </summary>
            <remarks>
            To remove the mode simply call <see cref="M:FlaxEngine.GUI.Control.Dispose"/> on mode.
            </remarks>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerWindow.Clear">
            <summary>
            Clears data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerWindow.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerWindow.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.SamplesBuffer`1">
            <summary>
            Profiler samples storage buffer. Support recording new frame samples.
            </summary>
            <typeparam name="T">Single sample data type.</typeparam>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Count">
            <summary>
            Gets the amount of samples in the buffer.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Last">
            <summary>
            Gets the last sample value. Check buffer <see cref="P:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Count"/> before calling this property.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Item(System.Int32)">
            <summary>
            Gets or sets the sample value at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The sample value.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SamplesBuffer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Profiler.SamplesBuffer`1"/> class.
            </summary>
            <param name="capacity">The maximum buffer capacity.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Get(System.Int32)">
            <summary>
            Gets the sample at the specified index or the last sample if index is equal to -1.
            </summary>
            <param name="index">The index.</param>
            <returns>The sample value</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Clear">
            <summary>
            Clears this buffer.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Add(`0)">
            <summary>
            Adds the specified sample to the buffer.
            </summary>
            <param name="sample">The sample.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Add(`0@)">
            <summary>
            Adds the specified sample to the buffer.
            </summary>
            <param name="sample">The sample.</param>
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.SingleChart">
            <summary>
            Draws simple chart.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.SingleChart.Title">
            <summary>
            Gets or sets the chart title.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.SingleChart.SelectedSampleIndex">
            <summary>
            Gets the index of the selected sample. Value -1 is used to indicate no selection (using the latest sample).
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.SingleChart.SelectedSample">
            <summary>
            Gets the selected sample value.
            </summary>
        </member>
        <member name="E:FlaxEditor.Windows.Profiler.SingleChart.SelectedSampleChanged">
            <summary>
            Occurs when selected sample gets changed.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Profiler.SingleChart.FormatSample">
            <summary>
            The handler function to format sample value for label text.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Profiler.SingleChart"/> class.
            </summary>
            <param name="maxSamples">The maximum samples to collect.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.Clear">
            <summary>
            Clears all the samples.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.AddSample(System.Single)">
            <summary>
            Adds the sample value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.Timeline">
            <summary>
            Events timeline control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.Timeline.Event">
            <summary>
            Single timeline event control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.Windows.Profiler.Timeline.Event.DefaultHeight">
            <summary>
            The default height of the event.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.Timeline.Event.Name">
            <summary>
            Gets or sets the event name.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Timeline.Event.#ctor(System.Single,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Profiler.Timeline.Event"/> class.
            </summary>
            <param name="x">The x position.</param>
            <param name="depth">The timeline row index (event depth).</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Timeline.Event.OnParentChangedInternal">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Timeline.Event.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.Timeline.TrackLabel">
            <summary>
            Timeline track label
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.Timeline.TrackLabel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Timeline.TrackLabel.Draw">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.Timeline.EventsContainer">
            <summary>
            Gets the events container control. Use it to remove/add events to the timeline.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Timeline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Profiler.Timeline"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.PropertiesWindow">
            <summary>
            Window used to present collection of selected object(s) properties in a grid. Supports Undo/Redo operations.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
            <seealso cref="T:FlaxEditor.Windows.SceneEditorWindow" />
        </member>
        <member name="F:FlaxEditor.Windows.PropertiesWindow.Presenter">
            <summary>
            The editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.PropertiesWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.PropertiesWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="T:FlaxEditor.Windows.SceneEditorWindow">
            <summary>
            Base class for editor windows dedicated to scene editing.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.SceneEditorWindow.#ctor(FlaxEditor.Editor,System.Boolean,FlaxEngine.GUI.ScrollBars)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.SceneEditorWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
            <param name="hideOnClose">True if hide window on closing, otherwise it will be destroyed.</param>
            <param name="scrollBars">The scroll bars.</param>
        </member>
        <member name="T:FlaxEditor.Windows.SceneTreeWindow">
            <summary>
            Windows used to present loaded scenes collection and whole scene graph.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.SceneEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.SceneTreeWindow.ActorsGroup">
            <summary>
            The spawnable actors group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.SceneTreeWindow.ActorsGroup.Name">
            <summary>
            The group name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.SceneTreeWindow.ActorsGroup.Types">
            <summary>
            The types to spawn (name and type).
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.SceneTreeWindow.SpawnActorsGroups">
            <summary>
            The Spawnable actors (groups with single entry are inlined without a child menu)
            </summary>
        </member>
        <member name="E:FlaxEditor.Windows.SceneTreeWindow.ContextMenuShow">
            <summary>
            Occurs when scene tree window wants to show the context menu. Allows to add custom options.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.CreateContextMenu">
            <summary>
            Creates the context menu for the current objects selection and the current Editor state.
            </summary>
            <returns>The context menu.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.ShowContextMenu(FlaxEngine.GUI.Control,FlaxEngine.Vector2@)">
            <summary>
            Shows the context menu on a given location (in the given control coordinates).
            </summary>
            <param name="parent">The parent control.</param>
            <param name="location">The location (within a given control).</param>
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.SceneTreeWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.Search">
            <summary>
            Focuses search box.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.StyleEditorWindow">
            <summary>
            Editor window for UI <see cref="T:FlaxEngine.GUI.Style"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.StyleEditorWindow.#ctor(FlaxEditor.Editor,FlaxEngine.GUI.Style,FlaxEditor.GUI.StyleValueEditor.ValueChangedEvent,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.StyleEditorWindow"/> class.
            </summary>
            <param name="editor"></param>
            <param name="initialValue">The initial value.</param>
            <param name="valueChanged">The changed event.</param>
            <param name="useDynamicEditing">True if allow dynamic value editing (slider-like usage), otherwise will change event only on editing end.</param>
        </member>
        <member name="M:FlaxEditor.Windows.StyleEditorWindow.CreatePreview(FlaxEngine.GUI.Style)">
            <summary>
            Creates a preview
            </summary>
            <param name="style">The style to use for the preview</param>
            <returns>The preview</returns>
        </member>
        <member name="M:FlaxEditor.Windows.StyleEditorWindow.OnEdited">
            <summary>
            Gets called when the style has been edited
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.StyleEditorWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.SpawnTab">
            <summary>
            Objects spawning tab. Supports searching actor types and prefabs for spawning them into the level.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tabs.Tab" />
        </member>
        <member name="M:FlaxEditor.Windows.SpawnTab.Item.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SpawnTab.Item.DoDragDrop">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SpawnTab.Item.OnDestroy">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Windows.SpawnTab.Editor">
            <summary>
            The editor instance.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.SpawnTab.#ctor(FlaxEngine.SpriteHandle,FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.SpawnTab"/> class.
            </summary>
            <param name="icon">The icon.</param>
            <param name="editor">The editor instance.</param>
        </member>
        <member name="T:FlaxEditor.Windows.ToolboxWindow">
            <summary>
            A helper utility window with bunch of tools used during scene editing.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="P:FlaxEditor.Windows.ToolboxWindow.TabsControl">
            <summary>
            Gets the tabs control used by this window. Can be used to add custom toolbox modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.ToolboxWindow.Spawn">
            <summary>
            The items spawning tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.ToolboxWindow.Foliage">
            <summary>
            The foliage spawning tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.ToolboxWindow.Carve">
            <summary>
            The terrain carving tab.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ToolboxWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.ToolboxWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ToolboxWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.BuildOptions">
            <summary>
            Game building options. Used as flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildOptions.None">
            <summary>
            No special options declared.
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildOptions.ShowOutput">
            <summary>
            Shows the output directory folder on building end.
            </summary>
        </member>
        <member name="T:FlaxEngine.BuildPlatform">
            <summary>
            Game build target platform.
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildPlatform.Windows32">
            <summary>
            Windows (32-bit architecture)
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildPlatform.Windows64">
            <summary>
            Windows (64-bit architecture)
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildPlatform.UWPx86">
            <summary>
            Universal Windows Platform (UWP) (x86 architecture)
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildPlatform.UWPx64">
            <summary>
            Universal Windows Platform (UWP) (x64 architecture)
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildPlatform.XboxOne">
            <summary>
            Xbox One
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildPlatform.LinuxX64">
            <summary>
            Linux (64-bit architecture)
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildPlatform.PS4">
            <summary>
            PlayStation 4
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildPlatform.XboxScarlett">
            <summary>
            Xbox Series X.
            </summary>
        </member>
        <member name="T:FlaxEngine.BuildConfiguration">
            <summary>
            Game build configuration modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildConfiguration.Debug">
            <summary>
            Debug configuration. Without optimizations but with full debugging information.
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildConfiguration.Development">
            <summary>
            Development configuration. With basic optimizations and partial debugging data.
            </summary>
        </member>
        <member name="F:FlaxEngine.BuildConfiguration.Release">
            <summary>
            Shipping configuration. With full optimization and no debugging data.
            </summary>
        </member>
        <member name="P:FlaxEngine.Editor.Surface.AttributesEditor.ValuesEditor.Options">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.Editor.Surface.AttributesEditor.Edited">
            <summary>
            The action fired when parameters editing finishes and value gets accepted to be set.
            </summary>
        </member>
        <member name="M:FlaxEngine.Editor.Surface.AttributesEditor.#ctor(System.Attribute[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Editor.Surface.AttributesEditor"/> class.
            </summary>
            <param name="attributes">The attributes to edit.</param>
        </member>
        <member name="M:FlaxEngine.Editor.Surface.AttributesEditor.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Editor.Surface.AttributesEditor.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Editor.Surface.AttributesEditor.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Editor.Surface.AttributesEditor.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.AlphaBlendMode">
            <summary>
            Alpha blending modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.Linear">
            <summary>
            Linear interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.Cubic">
            <summary>
            Cubic-in interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.HermiteCubic">
            <summary>
            Hermite-Cubic.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.Sinusoidal">
            <summary>
            Sinusoidal interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.QuadraticInOut">
            <summary>
            Quadratic in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.CubicInOut">
            <summary>
            Cubic in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.QuarticInOut">
            <summary>
            Quartic in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.QuinticInOut">
            <summary>
            Quintic in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.CircularIn">
            <summary>
            Circular-in interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.CircularOut">
            <summary>
            Circular-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.CircularInOut">
            <summary>
            Circular in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.ExpIn">
            <summary>
            Exponential-in interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.ExpOut">
            <summary>
            Exponential-Out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.ExpInOut">
            <summary>
            Exponential in-out interpolation.
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraph">
            <summary>
            The Animation Graph is used to evaluate a final pose for the animated model for the current frame.
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNodeArchetypeFactoryAttribute">
            <summary>
            The custom attribute that allows to specify the class that contains node archetype getter methods.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNode">
            <summary>
            Base class for all custom nodes. Allows to override it and define own Anim Graph nodes in game scripts or via plugins.
            </summary>
            <remarks>See official documentation to learn more how to use and create custom nodes in Anim Graph.</remarks>
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNode.InitData">
            <summary>
            The initial node data container structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.InitData.Values">
            <summary>
            The node values array. The first item is always the typename of the custom node type, second one is node group name, others are customizable by editor node archetype.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.InitData.BaseModel">
            <summary>
            The skinned model asset that is a base model for the graph (source of the skeleton).
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNode.Context">
            <summary>
            The node evaluation context structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.Graph">
            <summary>
            The graph pointer (unmanaged).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.GraphExecutor">
            <summary>
            The graph executor pointer (unmanaged).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.Node">
            <summary>
            The node pointer (unmanaged).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.NodeId">
            <summary>
            The graph node identifier (unique per graph).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.BoxId">
            <summary>
            The requested box identifier to evaluate its value.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.DeltaTime">
            <summary>
            The absolute time delta since last anim graph update for the current instance (in seconds). Can be used to animate or blend node logic over time.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.CurrentFrameIndex">
            <summary>
            The index of the current update frame. Can be used to detect if custom node hasn't been updated for more than one frame to reinitialize it in some cases.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.BaseModel">
            <summary>
            The skinned model asset that is a base model for the graph (source of the skeleton).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.Instance">
            <summary>
            The instance of the animated model that during update.
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNode.Impulse">
            <summary>
            The animation graph 'impulse' connections data container (the actual transfer is done via pointer as it gives better performance). 
            Container for skeleton nodes transformation hierarchy and any other required data. 
            Unified layout for both local and world transformation spaces.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.NodesCount">
            <summary>
            The nodes array size (elements count).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.Unused">
            <summary>
            The unused field.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.Nodes">
            <summary>
            The skeleton nodes transformation hierarchy nodes. Size always matches the Anim Graph skeleton description (access size from <see cref="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.NodesCount"/>). It's pointer to the unmanaged allocation (read-only).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.RootMotionTranslation">
            <summary>
            The root motion data.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.RootMotionRotation">
            <summary>
            The root motion data.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.Position">
            <summary>
            The animation time position (in seconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.Length">
            <summary>
            The animation length (in seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.Load(FlaxEngine.AnimationGraph.CustomNode.InitData@)">
            <summary>
            Loads the node data from the serialized values and prepares the node to run. In most cases this method is called from the content loading thread (not the main game thread).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.Evaluate(FlaxEngine.AnimationGraph.CustomNode.Context@)">
            <summary>
            Evaluates the node based on inputs and node data.
            </summary>
            <param name="context">The evaluation context.</param>
            <returns>The node value for the given context (node values, output box id, etc.).</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.HasConnection(FlaxEngine.AnimationGraph.CustomNode.Context@,System.Int32)">
            <summary>
            Checks if th box of the given ID has valid connection to get its value.
            </summary>
            <param name="context">The context.</param>
            <param name="boxId">The input box identifier.</param>
            <returns>True if has connection, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.GetInputValue(FlaxEngine.AnimationGraph.CustomNode.Context@,System.Int32)">
            <summary>
            Gets the value of the input box of the given ID. Throws the exception if box has no valid connection.
            </summary>
            <param name="context">The context.</param>
            <param name="boxId">The input box identifier.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.GetOutputImpulseData(FlaxEngine.AnimationGraph.CustomNode.Context@)">
            <summary>
            Gets the data for the output skeleton nodes hierarchy. Each node can have only one cached nodes output. Use this method if your node performs skeleton nodes modifications.
            </summary>
            <param name="context">The context.</param>
            <returns>The impulse data. It contains empty nodes hierarchy allocated per-node. Modify it to adjust output custom skeleton nodes transformations.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.CopyImpulseData(FlaxEngine.AnimationGraph.CustomNode.Impulse*,FlaxEngine.AnimationGraph.CustomNode.Impulse*)">
            <summary>
            Copies the impulse data from the source to the destination container.
            </summary>
            <param name="destination">The destination data.</param>
            <param name="source">The source data.</param>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AnimationGraph"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimationGraph.BaseModel">
            <summary>
            Gets the base model asset used for the animation preview and the skeleton layout source.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.LoadSurface">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <returns>The surface data or empty if failed to load it.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.SaveSurface(System.Byte[])">
            <summary>
            Updates the animation graph surface (save new one, discard cached data, reload asset).
            </summary>
            <param name="data">Stream with graph data.</param>
            <returns>True if cannot save it, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.Curve`1">
            <summary>
            An animation spline represented by a set of keyframes, each representing an endpoint of a Bezier curve. 
            </summary>
            <typeparam name="T">The animated value type.</typeparam>
        </member>
        <member name="T:FlaxEngine.Curve`1.Keyframe">
            <summary>
            A single keyframe that can be injected into Bezier curve.
            </summary>
        </member>
        <member name="F:FlaxEngine.Curve`1.Keyframe.Time">
            <summary>
            The time of the keyframe.
            </summary>
        </member>
        <member name="F:FlaxEngine.Curve`1.Keyframe.Value">
            <summary>
            The value of the curve at keyframe.
            </summary>
        </member>
        <member name="F:FlaxEngine.Curve`1.Keyframe.TangentIn">
            <summary>
            The input tangent (going from the previous key to this one) of the key.
            </summary>
        </member>
        <member name="F:FlaxEngine.Curve`1.Keyframe.TangentOut">
            <summary>
            The output tangent (going from this key to next one) of the key.
            </summary>
        </member>
        <member name="M:FlaxEngine.Curve`1.Keyframe.#ctor(System.Single,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Curve`1.Keyframe"/> struct.
            </summary>
            <param name="time">The time.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.Keyframe.#ctor(System.Single,`0,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Curve`1.Keyframe"/> struct.
            </summary>
            <param name="time">The time.</param>
            <param name="value">The value.</param>
            <param name="tangentIn">The start tangent.</param>
            <param name="tangentOut">The end tangent.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.Keyframe.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.Keyframe.CompareTo(FlaxEngine.Curve{`0}.Keyframe)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.Curve`1.Keyframes">
            <summary>
            The keyframes collection. Can be directly modified but ensure to sort it after editing so keyframes are organized by ascending time value.
            </summary>
        </member>
        <member name="M:FlaxEngine.Curve`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Curve`1"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.Curve`1.#ctor(FlaxEngine.Curve{`0}.Keyframe[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Curve`1"/> class.
            </summary>
            <param name="keyframes">The keyframes.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.#ctor(System.Collections.Generic.IEnumerable{FlaxEngine.Curve{`0}.Keyframe})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Curve`1"/> class.
            </summary>
            <param name="keyframes">The keyframes.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.Evaluate(`0@,System.Single,System.Boolean)">
            <summary>
            Evaluates the animation curve value at the specified time.
            </summary>
            <param name="result">The interpolated value from the curve at provided time.</param>
            <param name="time">The time to evaluate the curve at.</param>
            <param name="loop">If true the curve will loop when it goes past the end or beginning. Otherwise the curve value will be clamped.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.EvaluateKey(FlaxEngine.Curve{`0}.Keyframe@,System.Single,System.Boolean)">
            <summary>
            Evaluates the animation curve key at the specified time.
            </summary>
            <param name="result">The interpolated key from the curve at provided time.</param>
            <param name="time">The time to evaluate the curve at.</param>
            <param name="loop">If true the curve will loop when it goes past the end or beginning. Otherwise the curve value will be clamped.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.Trim(System.Single,System.Single)">
            <summary>
            Trims the curve keyframes to the specified time range.
            </summary>
            <param name="start">The time start.</param>
            <param name="end">The time end.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.TransformTime(System.Single,System.Single)">
            <summary>
            Applies the linear transformation (scale and offset) to the keyframes time values.
            </summary>
            <param name="timeScale">The time scale.</param>
            <param name="timeOffset">The time offset.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.FindKeys(System.Single,System.Int32@,System.Int32@)">
            <summary>
            Returns a pair of keys that can be used for interpolating to field the value at the provided time.
            </summary>
            <param name="time">The time for which to find the relevant keys from. It is expected to be clamped to a valid range within the curve.</param>
            <param name="leftKey">The index of the key to interpolate from.</param>
            <param name="rightKey">The index of the key to interpolate to.</param>
        </member>
        <member name="T:FlaxEngine.AnimGraphParameter">
            <summary>
            Animation graph parameter.
            </summary>
            <seealso cref="T:FlaxEngine.GraphParameter" />
        </member>
        <member name="M:FlaxEngine.AnimGraphParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AnimGraphParameter"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.SceneAnimation">
            <summary>
            Scene animation timeline for animating objects and playing cut-scenes.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneAnimation"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimation.FramesPerSecond">
            <summary>
            The frames amount per second of the timeline animation.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimation.DurationFrames">
            <summary>
            The animation duration (in frames).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimation.Duration">
            <summary>
            Gets the animation duration (in seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimation.LoadTimeline">
            <summary>
            Gets the serialized timeline data.
            </summary>
            <returns>The output timeline data container. Empty if failed to load.</returns>
        </member>
        <member name="M:FlaxEngine.SceneAnimation.SaveTimeline(System.Byte[])">
            <summary>
            Saves the serialized timeline data to the asset.
            </summary>
            <remarks>
            The cannot be used by virtual assets.
            </remarks>
            <param name="data">The timeline data container.</param>
            <returns><c>true</c> failed to save data; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.SceneAnimationPlayer">
            <summary>
            The scene animation playback actor.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimationPlayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneAnimationPlayer"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.Animation">
            <summary>
            The scene animation to play.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.Speed">
            <summary>
            The animation playback speed factor. Scales the timeline update delta time. Can be used to speed up or slow down the sequence.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.StartTime">
            <summary>
            The animation start time. Can be used to skip part of the sequence on begin.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.UseTimeScale">
            <summary>
            Determines whether the scene animation should take into account the global game time scale for simulation updates.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.Loop">
            <summary>
            Determines whether the scene animation should loop when it finishes playing.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.PlayOnStart">
            <summary>
            Determines whether the scene animation should auto play on game start.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.RandomStartTime">
            <summary>
            Determines whether the scene animation should randomize the start time on play begin.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.RestoreStateOnStop">
            <summary>
            Determines whether the scene animation should restore initial state on playback stop. State is cached when animation track starts play after being stopped (not paused).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.IsPlaying">
            <summary>
            Gets the value that determinates whether the scene animation is playing.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.IsPaused">
            <summary>
            Gets the value that determinates whether the scene animation is paused.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.IsStopped">
            <summary>
            Gets the value that determinates whether the scene animation is stopped.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.Time">
            <summary>
            Gets or sets the current animation playback time position (seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimationPlayer.Play">
            <summary>
            Starts playing the animation. Has no effect if animation is already playing.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimationPlayer.Pause">
            <summary>
            Pauses the animation. Has no effect if animation is not playing.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimationPlayer.Stop">
            <summary>
            Stops playing the animation. Has no effect if animation is already stopped.
            </summary>
        </member>
        <member name="T:FlaxEngine.Audio">
            <summary>
            The audio service used for music and sound effects playback.
            </summary>
        </member>
        <member name="E:FlaxEngine.Audio.DevicesChanged">
            <summary>
            The audio devices collection changed event.
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.Devices">
            <summary>
            The all audio devices.
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.ActiveDevice">
            <summary>
            Gets the active device.
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.ActiveDeviceIndex">
            <summary>
            Gets or sets the index of the active device.
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.MasterVolume">
            <summary>
            Gets or sets the master volume applied to all the audio sources (normalized to range 0-1).
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.Volume">
            <summary>
            Gets the actual master volume (including all side effects and mute effectors).
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.DopplerFactor">
            <summary>
            Sets the doppler effect factor. Scale for source and listener velocities. Default is 1.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioClip">
            <summary>
            Audio clip stores audio data in a compressed or uncompressed format using a binary asset. Clips can be provided to audio sources or other audio methods to be played.
            </summary>
            <seealso cref="T:FlaxEngine.BinaryAsset" />
        </member>
        <member name="M:FlaxEngine.AudioClip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AudioClip"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.Format">
            <summary>
            Gets the audio data format.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.Info">
            <summary>
            Gets the audio data info metadata.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.Is3D">
            <summary>
            Returns true if the sound source is three dimensional (volume and pitch varies based on listener distance and velocity).
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.IsStreamable">
            <summary>
            Returns true if the sound is using data streaming.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.IsStreamingTaskActive">
            <summary>
            Returns true if the sound data is during streaming by an async task.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.Length">
            <summary>
            Gets the length of the audio clip (in seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioClip.ExtractData(System.Byte[]@,FlaxEngine.AudioDataInfo@)">
            <summary>
            Extracts the source audio data from the asset storage. Loads the whole asset. The result data is in an asset format.
            </summary>
            <param name="resultData">The result data.</param>
            <param name="resultDataInfo">The result data format header info.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.AudioClip.ExtractDataFloat(System.Single[]@,FlaxEngine.AudioDataInfo@)">
            <summary>
            Extracts the raw audio data (PCM format) from the asset storage and converts it to the normalized float format (in range [-1;1]). Loads the whole asset.
            </summary>
            <param name="resultData">The result data.</param>
            <param name="resultDataInfo">The result data format header info. That output data has 32 bits float data not the signed PCM data.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.AudioClip.ExtractDataRaw(System.Byte[]@,FlaxEngine.AudioDataInfo@)">
            <summary>
            Extracts the raw audio data (PCM format) from the asset storage. Loads the whole asset.
            </summary>
            <param name="resultData">The result data.</param>
            <param name="resultDataInfo">The result data format header info.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.AudioDevice">
            <summary>
            Represents a single audio device.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioDevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AudioDevice"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioDevice.Name">
            <summary>
            The device name.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioListener">
            <summary>
            Represents a listener that hears audio sources. For spatial audio the volume and pitch of played audio is determined by the distance, orientation and velocity differences between the source and the listener.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AudioListener"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioListener.Velocity">
            <summary>
            Gets the velocity of the listener. Determines pitch in relation to AudioListener's position.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioSource">
            <summary>
            Represents a source for emitting audio. Audio can be played spatially (gun shot), or normally (music). Each audio source must have an AudioClip to play - back, and it can also have a position in the case of spatial(3D) audio.
            </summary>
            <remarks>
            Whether or not an audio source is spatial is controlled by the assigned AudioClip.The volume and the pitch of a spatial audio source is controlled by its position and the AudioListener's position/direction/velocity.
            </remarks>
        </member>
        <member name="M:FlaxEngine.AudioSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AudioSource"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Clip">
            <summary>
            The audio clip asset used as a source of the sound.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Velocity">
            <summary>
            Gets the velocity of the source. Determines pitch in relation to AudioListener's position. Only relevant for spatial (3D) sources.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Volume">
            <summary>
            Gets or sets the volume of the audio played from this source, in [0, 1] range.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Pitch">
            <summary>
            Gets or sets the pitch of the played audio. The default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.IsLooping">
            <summary>
            Determines whether the audio clip should loop when it finishes playing.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.PlayOnStart">
            <summary>
            Determines whether the audio clip should auto play on level start.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.MinDistance">
            <summary>
            Gets or sets the minimum distance at which audio attenuation starts. When the listener is closer to the source than this value, audio is heard at full volume. Once farther away the audio starts attenuating.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Attenuation">
            <summary>
            Gets or sets the attenuation that controls how quickly does audio volume drop off as the listener moves further from the source.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.State">
            <summary>
            Gets the the current state of the audio playback (playing/paused/stopped).
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Time">
            <summary>
            Gets or sets the current time of playback. If playback has not yet started, it specifies the time at which playback will start at. The time is in seconds, in range [0, ClipLength].
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Is3D">
            <summary>
            Returns true if the sound source is three dimensional (volume and pitch varies based on listener distance and velocity).
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.UseStreaming">
            <summary>
            Returns true if audio clip is valid, loaded and uses dynamic data streaming.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.IsActuallyPlayingSth">
            <summary>
            Determines whether this audio source started playing audio via audio backend. After audio play it may wait for audio clip data to be loaded or streamed.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioSource.Play">
            <summary>
            Starts playing the currently assigned audio clip.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioSource.Pause">
            <summary>
            Pauses the audio playback.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioSource.Stop">
            <summary>
            Stops audio playback, rewinding it to the start.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioSource.States">
            <summary>
            Valid states in which AudioSource can be in.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioSource.States.Playing">
            <summary>
            The source is currently playing.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioSource.States.Paused">
            <summary>
            The source is currently paused (play will resume from paused point).
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioSource.States.Stopped">
            <summary>
            The source is currently stopped (play will resume from start).
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioFormat">
            <summary>
            Audio data storage format used by the runtime.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioFormat.Raw">
            <summary>
            The raw PCM data.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioFormat.Vorbis">
            <summary>
            The Vorbis data.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioDataInfo">
            <summary>
            Meta-data describing a chunk of audio.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioDataInfo.NumSamples">
            <summary>
            The total number of audio samples in the audio data (includes all channels).
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioDataInfo.SampleRate">
            <summary>
            The number of audio samples per second, per channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioDataInfo.NumChannels">
            <summary>
            The number of channels. Each channel has its own set of samples.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioDataInfo.BitDepth">
            <summary>
            The number of bits per sample.
            </summary>
        </member>
        <member name="T:FlaxEngine.Asset">
            <summary>
            Asset objects base class.
            </summary>
        </member>
        <member name="M:FlaxEngine.Asset.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Asset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Asset"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.ReferencesCount">
            <summary>
            Gets asset's reference count. Asset will be automatically unloaded when this reaches zero.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.Path">
            <summary>
            Gets the path to the asset storage.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.IsLoaded">
            <summary>
            Returns true if asset is loaded, otherwise false.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.LastLoadFailed">
            <summary>
            Returns true if last asset loading failed, otherwise false.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.IsVirtual">
            <summary>
            Determines whether this asset is virtual (generated or temporary, has no storage so it won't be saved).
            </summary>
        </member>
        <member name="M:FlaxEngine.Asset.Reload">
            <summary>
            Reloads the asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.Asset.WaitForLoaded(System.Double)">
            <summary>
            Stops the current thread execution and waits until asset will be loaded (loading will fail, success or be cancelled).
            </summary>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <returns>True if cannot load that asset (failed or has been cancelled), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Asset.GetReferences">
            <summary>
            Gets the asset references. Supported only in Editor.
            </summary>
            <remarks>
            For some asset types (e.g. scene or prefab) it may contain invalid asset ids due to not perfect gather method,
            which is optimized to perform scan very quickly. Before using those ids perform simple validation via Content cache API.
            The result collection contains only 1-level-deep references (only direct ones) and is invalid if asset is not loaded.
            Also the output data may have duplicated asset ids or even invalid ids (Guid.Empty).
            </remarks>
            <returns>The collection of the asset ids referenced by this asset.</returns>
        </member>
        <member name="T:FlaxEngine.AssetInfo">
            <summary>
            Contains short information about an asset.
            </summary>
        </member>
        <member name="F:FlaxEngine.AssetInfo.ID">
            <summary>
            Unique ID.
            </summary>
        </member>
        <member name="F:FlaxEngine.AssetInfo.TypeName">
            <summary>
            The stored data full typename. Used to recognize asset type.
            </summary>
        </member>
        <member name="F:FlaxEngine.AssetInfo.Path">
            <summary>
            Cached path.
            </summary>
        </member>
        <member name="T:FlaxEngine.Animation">
            <summary>
            Asset that contains an animation spline represented by a set of keyframes, each representing an endpoint of a linear curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Animation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Animation"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Animation.Length">
            <summary>
            Gets the length of the animation (in seconds).
            </summary>
        </member>
        <member name="P:FlaxEngine.Animation.Duration">
            <summary>
            Gets the duration of the animation (in frames).
            </summary>
        </member>
        <member name="P:FlaxEngine.Animation.FramesPerSecond">
            <summary>
            Gets the amount of the animation frames per second.
            </summary>
        </member>
        <member name="P:FlaxEngine.Animation.Info">
            <summary>
            Gets the animation clip info.
            </summary>
        </member>
        <member name="T:FlaxEngine.Animation.InfoData">
            <summary>
            Contains basic information about the animation asset contents.
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.InfoData.Length">
            <summary>
            Length of the animation in seconds.
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.InfoData.FramesCount">
            <summary>
            Amount of animation frames (some curve tracks may use less keyframes).
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.InfoData.ChannelsCount">
            <summary>
            Amount of animation channel tracks.
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.InfoData.KeyframesCount">
            <summary>
            The total amount of keyframes in the animation tracks.
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraphFunction">
            <summary>
            Animation Graph function asset that contains reusable part of the anim graph.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraphFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AnimationGraphFunction"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraphFunction.LoadSurface">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <returns>The output surface data, or empty if failed to load.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraphFunction.GetSignature(System.Int32[]@,System.String[]@)">
            <summary>
            Gets the function signature for Visject Surface editor.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraphFunction.SaveSurface(System.Byte[])">
            <summary>
            Updates the anim graph surface (save new one, discards cached data, reloads asset).
            </summary>
            <param name="data">The surface graph data.</param>
            <returns>True if cannot save it, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.CubeTexture">
            <summary>
            Cube texture asset contains 6 images that is usually stored on a GPU as a cube map (one slice per each axis direction).
            </summary>
        </member>
        <member name="M:FlaxEngine.CubeTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.CubeTexture"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.IESProfile">
            <summary>
            Contains IES profile texture used by the lights to simulate real life bulb light emission.
            </summary>
        </member>
        <member name="M:FlaxEngine.IESProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.IESProfile"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.IESProfile.Brightness">
            <summary>
            The light brightness in Lumens, imported from IES profile.
            </summary>
        </member>
        <member name="P:FlaxEngine.IESProfile.TextureMultiplier">
            <summary>
            The multiplier to map texture value to result to integrate over the sphere to 1.
            </summary>
        </member>
        <member name="T:FlaxEngine.Material">
            <summary>
            Material asset that contains shader for rendering models on the GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.Material.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Material"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Material.LoadSurface(System.Boolean)">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <param name="createDefaultIfMissing">True if create default surface if missing.</param>
            <returns>The output surface data, or empty if failed to load.</returns>
        </member>
        <member name="M:FlaxEngine.Material.SaveSurface(System.Byte[],FlaxEngine.MaterialInfo)">
            <summary>
            Updates the material surface (save new one, discard cached data, reload asset).
            </summary>
            <param name="data">The surface graph data.</param>
            <param name="info">The material info structure.</param>
            <returns>True if cannot save it, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.MaterialBase">
            <summary>
            Base class for <see cref="T:FlaxEngine.Material"/> and <see cref="T:FlaxEngine.MaterialInstance"/>.
            </summary>
            <seealso cref="T:FlaxEngine.BinaryAsset" />
        </member>
        <member name="M:FlaxEngine.MaterialBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MaterialBase"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.Parameters">
            <summary>
            Gets the material parameters collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.Info">
            <summary>
            Gets the material info, structure which describes material surface.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialBase.GetParameter(System.String)">
            <summary>
            Gets the material parameter.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialBase.GetParameterValue(System.String)">
            <summary>
            Gets the material parameter value.
            </summary>
            <returns>The parameter value.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialBase.SetParameterValue(System.String,System.Object,System.Boolean)">
            <summary>
            Sets the material parameter value (and sets IsOverride to true).
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The value to set.</param>
            <param name="warnIfMissing">True if warn if parameter is missing, otherwise will do nothing.</param>
        </member>
        <member name="M:FlaxEngine.MaterialBase.CreateVirtualInstance">
            <summary>
            Creates the virtual material instance of this material which allows to override any material parameters.
            </summary>
            <returns>The created virtual material instance asset.</returns>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsSurface">
            <summary>
            Gets a value indicating whether this material is a surface shader (can be used with a normal meshes).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsPostFx">
            <summary>
            Gets a value indicating whether this material is post fx (cannot be used with a normal meshes).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsDecal">
            <summary>
            Gets a value indicating whether this material is decal (cannot be used with a normal meshes).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsGUI">
            <summary>
            Gets a value indicating whether this material is a GUI shader (cannot be used with a normal meshes).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsTerrain">
            <summary>
            Gets a value indicating whether this material is a terrain shader (cannot be used with a normal meshes).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsParticle">
            <summary>
            Gets a value indicating whether this material is a particle shader (cannot be used with a normal meshes).
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialFunction">
            <summary>
            Material function graph asset that contains reusable part of the material graph.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MaterialFunction"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialFunction.LoadSurface">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <returns>The output surface data, or empty if failed to load.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialFunction.GetSignature(System.Int32[]@,System.String[]@)">
            <summary>
            Gets the function signature for Visject Surface editor.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialFunction.SaveSurface(System.Byte[])">
            <summary>
            Updates the material graph surface (save new one, discards cached data, reloads asset).
            </summary>
            <param name="data">The surface graph data.</param>
            <returns>True if cannot save it, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.MaterialInstance">
            <summary>
            Instance of the <seealso cref="T:FlaxEngine.Material" /> with custom set of material parameter values.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MaterialInstance"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialInstance.BaseMaterial">
            <summary>
            Gets or sets the base material. If value gets changed parameters collection is restored to the default values of the new material.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialInstance.Save(System.String)">
            <summary>
            Saves this asset to the file. Supported only in Editor.
            </summary>
            <remarks>If you use saving with the GPU mesh data then the call has to be provided from the thread other than the main game thread.</remarks>
            <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate asset. Must be specified when saving virtual asset.</param>
            <returns>True if cannot save data, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.Model">
            <summary>
            Model asset that contains model object made of meshes which can rendered on the GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.Model.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Model"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Model.LODs">
            <summary>
            Model level of details. The first entry is the highest quality LOD0 followed by more optimized versions.
            </summary>
        </member>
        <member name="P:FlaxEngine.Model.LoadedLODs">
            <summary>
            Gets the amount of loaded model LODs.
            </summary>
        </member>
        <member name="M:FlaxEngine.Model.GetBox(FlaxEngine.Matrix,System.Int32)">
            <summary>
            Gets the model bounding box in custom matrix world space.
            </summary>
            <param name="world">The transformation matrix.</param>
            <param name="lodIndex">The Level Of Detail index.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.Model.GetBox(System.Int32)">
            <summary>
            Gets the model bounding box in local space.
            </summary>
            <param name="lodIndex">The Level Of Detail index.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.Model.Draw(FlaxEngine.RenderContext@,FlaxEngine.MaterialBase,FlaxEngine.Matrix@,FlaxEngine.StaticFlags,System.Boolean)">
            <summary>
            Draws the model.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="material">The material to use for rendering.</param>
            <param name="world">The world transformation of the model.</param>
            <param name="flags">The object static flags.</param>
            <param name="receiveDecals">True if rendered geometry can receive decals, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Model.SetupLODs(System.Int32[])">
            <summary>
            Setups the model LODs collection including meshes creation.
            </summary>
            <param name="meshesCountPerLod">The meshes count per lod array (amount of meshes per LOD).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Model.Save(System.Boolean,System.String)">
            <summary>
            Saves this asset to the file. Supported only in Editor.
            </summary>
            <remarks>If you use saving with the GPU mesh data then the call has to be provided from the thread other than the main game thread.</remarks>
            <param name="withMeshDataFromGpu">True if save also GPU mesh buffers, otherwise will keep data in storage unmodified. Valid only if saving the same asset to the same location and it's loaded.</param>
            <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate asset. Must be specified when saving virtual asset.</param>
            <returns>True if cannot save data, otherwise false.</returns>
        </member>
        <member name="F:FlaxEngine.Model.MaxLODs">
            <summary>
            The maximum amount of levels of detail for the model.
            </summary>
        </member>
        <member name="F:FlaxEngine.Model.MaxMeshes">
            <summary>
            The maximum amount of meshes per model LOD.
            </summary>
        </member>
        <member name="F:FlaxEngine.Model.MaxMaterialSlots">
            <summary>
            The maximum allowed amount of material slots per model resource
            </summary>
        </member>
        <member name="T:FlaxEngine.ModelBase">
            <summary>
            Base class for asset types that can contain a model resource.
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ModelBase"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelBase.MinScreenSize">
            <summary>
            The minimum screen size to draw this model (the bottom limit). Used to cull small models. Set to 0 to disable this feature.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelBase.MaterialSlots">
            <summary>
            The list of material slots.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelBase.MaterialSlotsCount">
            <summary>
            Gets the amount of the material slots used by this model asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelBase.SetupMaterialSlots(System.Int32)">
            <summary>
            Resizes the material slots collection. Updates meshes that were using removed slots.
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelBase.GetSlot(System.String)">
            <summary>
            Gets the material slot by the name.
            </summary>
            <param name="name">The slot name.</param>
            <returns>The material slot with the given name or null if cannot find it (asset may be not loaded yet).</returns>
        </member>
        <member name="T:FlaxEngine.RawDataAsset">
            <summary>
            Raw bytes container asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.RawDataAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RawDataAsset"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.RawDataAsset.Data">
            <summary>
            The bytes array stored in the asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.RawDataAsset.Save(System.String)">
            <summary>
            Saves this asset to the file. Supported only in Editor.
            </summary>
            <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate asset. Must be specified when saving virtual asset.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.Shader">
            <summary>
            The shader asset. Contains a program that runs on the GPU and is able to perform rendering calculation using textures, vertices and other resources.
            </summary>
        </member>
        <member name="M:FlaxEngine.Shader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Shader"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Shader.GPU">
            <summary>
            The GPU shader object (not null).
            </summary>
        </member>
        <member name="T:FlaxEngine.SkeletonMask">
            <summary>
            The skinned model skeleton bones boolean masking data.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkeletonMask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SkeletonMask"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkeletonMask.Skeleton">
            <summary>
            The referenced skinned model skeleton that defines the masked nodes hierarchy.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkeletonMask.MaskedNodes">
            <summary>
            Gets or sets the per-skeleton node mask (by name).
            </summary>
        </member>
        <member name="P:FlaxEngine.SkeletonMask.NodesMask">
            <summary>
            Gets the per-skeleton-node boolean mask (read-only).
            </summary>
        </member>
        <member name="M:FlaxEngine.SkeletonMask.Save(System.String)">
            <summary>
            Saves this asset to the file. Supported only in Editor.
            </summary>
            <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate asset. Must be specified when saving virtual asset.</param>
            <returns>True if cannot save data, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.SkinnedModel">
            <summary>
            Skinned model asset that contains model object made of meshes that can be rendered on the GPU using skeleton bones skinning.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SkinnedModel"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.LODs">
            <summary>
            Model level of details. The first entry is the highest quality LOD0 followed by more optimized versions.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.LoadedLODs">
            <summary>
            Gets the amount of loaded model LODs.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.Nodes">
            <summary>
            Gets the skeleton nodes hierarchy.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.Bones">
            <summary>
            Gets the skeleton bones hierarchy.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.BlendShapes">
            <summary>
            Gets the blend shapes names used by the skinned model meshes (from LOD 0 only).
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.FindNode(System.String)">
            <summary>
            Finds the node with the given name.
            </summary>
            <param name="name">Thr name of the node.</param>
            <returns>The index of the node or -1 if not found.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.FindBone(System.String)">
            <summary>
            Finds the bone with the given name.
            </summary>
            <param name="name">Thr name of the node used by the bone.</param>
            <returns>The index of the bone or -1 if not found.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.FindBone(System.Int32)">
            <summary>
            Finds the bone that is using a given node index.
            </summary>
            <param name="nodeIndex">The index of the node.</param>
            <returns>The index of the bone or -1 if not found.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.GetBox(FlaxEngine.Matrix,System.Int32)">
            <summary>
            Gets the model bounding box in custom matrix world space (rig pose transformed by matrix, not animated).
            </summary>
            <param name="world">The transformation matrix.</param>
            <param name="lodIndex">The Level Of Detail index.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.GetBox(System.Int32)">
            <summary>
            Gets the model bounding box in local space (rig pose, not animated).
            </summary>
            <param name="lodIndex">The Level Of Detail index.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.SetupLODs(System.Int32[])">
            <summary>
            Setups the model LODs collection including meshes creation.
            </summary>
            <param name="meshesCountPerLod">The meshes count per lod array (amount of meshes per LOD).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.SetupSkeleton(FlaxEngine.SkeletonNode[])">
            <summary>
            Setups the skinned model skeleton. Uses the same nodes layout for skeleton bones and calculates the offset matrix by auto.
            </summary>
            <param name="nodes">The nodes hierarchy. The first node must be a root one (with parent index equal -1).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.SetupSkeleton(FlaxEngine.SkeletonNode[],FlaxEngine.SkeletonBone[],System.Boolean)">
            <summary>
            Setups the skinned model skeleton.
            </summary>
            <param name="nodes">The nodes hierarchy. The first node must be a root one (with parent index equal -1).</param>
            <param name="bones">The bones hierarchy.</param>
            <param name="autoCalculateOffsetMatrix">If true then the OffsetMatrix for each bone will be auto-calculated by the engine, otherwise the provided values will be used.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.Save(System.Boolean,System.String)">
            <summary>
            Saves this asset to the file. Supported only in Editor.
            </summary>
            <remarks>If you use saving with the GPU mesh data then the call has to be provided from the thread other than the main game thread.</remarks>
            <param name="withMeshDataFromGpu">True if save also GPU mesh buffers, otherwise will keep data in storage unmodified. Valid only if saving the same asset to the same location and it's loaded.</param>
            <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate asset. Must be specified when saving virtual asset.</param>
            <returns>True if cannot save data, otherwise false.</returns>
        </member>
        <member name="F:FlaxEngine.SkinnedModel.MaxBones">
            <summary>
            The maximum allowed amount of skeleton bones to be used with skinned model.
            </summary>
        </member>
        <member name="T:FlaxEngine.Texture">
            <summary>
            Texture asset contains an image that is usually stored on a GPU and is used during rendering graphics.
            </summary>
        </member>
        <member name="M:FlaxEngine.Texture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Texture"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Texture.IsNormalMap">
            <summary>
            Returns true if texture is a normal map.
            </summary>
        </member>
        <member name="M:FlaxEngine.Texture.Save(System.String)">
            <summary>
            Saves this asset to the file. Supported only in Editor.
            </summary>
            <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate asset. Must be specified when saving virtual asset.</param>
            <returns>True if cannot save data, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Texture.LoadFile(System.String,System.Boolean)">
            <summary>
            Loads the texture from the image file. Supported file formats depend on a runtime platform. All platform support loading PNG, BMP, TGA, HDR and JPEG files.
            </summary>
            <remarks>Valid only for virtual assets.</remarks>
            <param name="path">The source image file path.</param>
            <param name="generateMips">True if generate mipmaps for the imported texture.</param>
            <returns>True if fails, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Texture.FromFile(System.String,System.Boolean)">
            <summary>
            Loads the texture from the image file and creates the virtual texture asset for it. Supported file formats depend on a runtime platform. All platform support loading PNG, BMP, TGA, HDR and JPEG files.
            </summary>
            <param name="path">The source image file path.</param>
            <param name="generateMips">True if generate mipmaps for the imported texture.</param>
            <returns>The loaded texture (virtual asset) or null if fails.</returns>
        </member>
        <member name="T:FlaxEngine.BinaryAsset">
            <summary>
            Base class for all binary assets.
            </summary>
            <seealso cref="T:FlaxEngine.Asset" />
        </member>
        <member name="M:FlaxEngine.BinaryAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BinaryAsset"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.BinaryAsset.ImportPath">
            <summary>
            Gets the imported file path from the asset metadata (can be empty if not available).
            </summary>
        </member>
        <member name="M:FlaxEngine.BinaryAsset.Reimport">
            <summary>
            Reimports asset from the source file.
            </summary>
        </member>
        <member name="T:FlaxEngine.Content">
            <summary>
            Loads and manages assets.
            </summary>
        </member>
        <member name="E:FlaxEngine.Content.AssetDisposing">
            <summary>
            Occurs when asset is being disposed and will be unloaded (by force). All references to it should be released.
            </summary>
        </member>
        <member name="E:FlaxEngine.Content.AssetReloading">
            <summary>
            Occurs when asset is being reloaded and will be unloaded (by force) to be loaded again (e.g. after reimport). Always called from the main thread.
            </summary>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync``1(System.Guid)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="id">Asset unique ID.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync(System.Guid)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="id">Asset unique ID.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync``1(System.String)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="path">Path to the asset.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync(System.String)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="path">Path to the asset.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsyncInternal``1(System.String)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="internalPath">Internal path to the asset. Relative to the Engine startup folder.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsyncInternal(System.String)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="internalPath">Internal path to the asset. Relative to the Engine startup folder.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.Load(System.Guid,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async. The current thread execution is blocked until asset is loaded.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="id">Asset unique ID.</param>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.Load(System.String,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async. The current thread execution is blocked until asset is loaded.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="path">Path to the asset.</param>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadInternal(System.String,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="internalPath">Internal path to the asset. Relative to the Engine startup folder.</param>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.Load``1(System.Guid,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="id">Asset unique ID.</param>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.Load``1(System.String,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="path">Path to the asset.</param>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadInternal``1(System.String,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="internalPath">Internal path to the asset. Relative to the Engine startup folder and without an asset file extension.</param>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.CreateVirtualAsset``1">
            <summary>
            Creates temporary and virtual asset of the given type.
            Virtual assets have limited usage but allow to use custom assets data at runtime.
            Virtual assets are temporary and exist until application exit.
            </summary>
            <typeparam name="T">Type of the asset to create. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if created, null otherwise. See log for error message if need to.</returns>
        </member>
        <member name="P:FlaxEngine.Content.AssetCount">
            <summary>
            Gets amount of the assets (in memory).
            </summary>
        </member>
        <member name="P:FlaxEngine.Content.Assets">
            <summary>
            Gets the assets (loaded or during load).
            </summary>
        </member>
        <member name="M:FlaxEngine.Content.GetAssetInfo(System.Guid,FlaxEngine.AssetInfo@)">
            <summary>
            Finds the asset info by id.
            </summary>
            <param name="id">The asset id.</param>
            <param name="info">The output asset info. Filled with valid values only if method returns true.</param>
            <returns>True if found any asset, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Content.GetAssetInfo(System.String,FlaxEngine.AssetInfo@)">
            <summary>
            Finds the asset info by path.
            </summary>
            <param name="path">The asset path.</param>
            <param name="info">The output asset info. Filled with valid values only if method returns true.</param>
            <returns>True if found any asset, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Content.GetAllAssetsByType(System.Type)">
            <summary>
            Finds all the asset IDs by type (exact type, without inheritance checks). Uses asset registry.
            </summary>
            <param name="type">The asset type.</param>
            <returns>The list of asset IDs that match the given type.</returns>
        </member>
        <member name="M:FlaxEngine.Content.CreateTemporaryAssetPath">
            <summary>
            Generates temporary asset path.
            </summary>
            <returns>Asset path for a temporary usage.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync(System.Guid,System.Type)">
            <summary>
            Loads asset and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="id">Asset unique ID</param>
            <param name="type">The asset type. If loaded object has different type (excluding types derived from the given) the loading fails.</param>
            <returns>Loaded asset or null if cannot</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync(System.String,System.Type)">
            <summary>
            Loads asset and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="path">The path of the asset (absolute or relative to the current workspace directory).</param>
            <param name="type">The asset type. If loaded object has different type (excluding types derived from the given) the loading fails.</param>
            <returns>Loaded asset or null if cannot</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsyncInternal(System.String,System.Type)">
            <summary>
            Loads internal engine asset and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="internalPath">The path of the asset relative to the engine internal content (excluding the extension).</param>
            <param name="type">The asset type. If loaded object has different type (excluding types derived from the given) the loading fails.</param>
            <returns>The loaded asset or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.Content.GetAsset(System.String)">
            <summary>
            Finds the asset with at given path. Checks all loaded assets.
            </summary>
            <param name="path">The path.</param>
            <returns>The found asset or null if not loaded.</returns>
        </member>
        <member name="M:FlaxEngine.Content.GetAsset(System.Guid)">
            <summary>
            Finds the asset with given ID. Checks all loaded assets.
            </summary>
            <param name="id">The id.</param>
            <returns>The found asset or null if not loaded.</returns>
        </member>
        <member name="M:FlaxEngine.Content.DeleteAsset(FlaxEngine.Asset)">
            <summary>
            Deletes the specified asset.
            </summary>
            <param name="asset">The asset.</param>
        </member>
        <member name="M:FlaxEngine.Content.DeleteAsset(System.String)">
            <summary>
            Deletes the asset at the specified path.
            </summary>
            <param name="path">The asset path.</param>
        </member>
        <member name="M:FlaxEngine.Content.RenameAsset(System.String,System.String)">
            <summary>
            Renames the asset.
            </summary>
            <param name="oldPath">The old asset path.</param>
            <param name="newPath">The new asset path.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Content.UnloadAsset(FlaxEngine.Asset)">
            <summary>
            Unloads the specified asset.
            </summary>
            <param name="asset">The asset.</param>
        </member>
        <member name="M:FlaxEngine.Content.CreateVirtualAsset(System.Type)">
            <summary>
            Creates temporary and virtual asset of thr given type.
            </summary>
            <param name="type">The asset type klass.</param>
            <returns>Created asset or null if failed.</returns>
        </member>
        <member name="T:FlaxEngine.JsonAsset">
            <summary>
            Generic type of Json-format asset. It provides the managed representation of this resource data so it can be accessed via C# API.
            </summary>
            <seealso cref="T:FlaxEngine.JsonAssetBase" />
        </member>
        <member name="M:FlaxEngine.JsonAsset.CreateInstance``1">
            <summary>
            Creates the serialized object instance from the json asset data.
            </summary>
            <returns>The created object or null.</returns>
        </member>
        <member name="M:FlaxEngine.JsonAsset.CreateInstance">
            <summary>
            Creates the serialized object instance from the json asset data.
            </summary>
            <returns>The created object or null.</returns>
        </member>
        <member name="M:FlaxEngine.JsonAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.JsonAsset"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.JsonAssetBase">
            <summary>
            Base class for all Json-format assets.
            </summary>
            <seealso cref="T:FlaxEngine.Asset" />
        </member>
        <member name="M:FlaxEngine.JsonAssetBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.JsonAssetBase"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.JsonAssetBase.DataTypeName">
            <summary>
            The data type name from the header. Allows to recognize the data type.
            </summary>
        </member>
        <member name="P:FlaxEngine.JsonAssetBase.DataEngineBuild">
            <summary>
            The serialized data engine build number. Can be used to convert/upgrade data between different formats across different engine versions.
            </summary>
        </member>
        <member name="P:FlaxEngine.JsonAssetBase.Data">
            <summary>
            The Json data (as string).
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1">
            <summary>
            Creates new structure array like, with fast front and back insertion.
            <para>Every overflow of this buffer removes last item form other side of insertion</para>
            </summary>
            <remarks>This collection is NOT thread-safe.</remarks>
            <typeparam name="T">Type of items inserted into buffer</typeparam>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs">
            <summary>
            Arguments for new item added event
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs.Index">
            <summary>
            Gets Index of new element in buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs.Item">
            <summary>
            Gets added item
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs">
            <summary>
            Arguments for item removed event
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs.WasFrontItem">
            <summary>
            Gets if item removed was item from front of the buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs.Item">
            <summary>
            Gets removed item
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs"/> class.
            </summary>
            <param name="wasFrontItem">if set to <c>true</c> [was front item].</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs">
            <summary>
            Arguments for item being replaced because of buffer was overflown with data
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs.WasFrontItem">
            <summary>
            Gets if item removed was item from front of the buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs.Item">
            <summary>
            Gets overflown item
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs"/> class.
            </summary>
            <param name="wasFrontItem">if set to <c>true</c> [was front item].</param>
            <param name="item">The item.</param>
        </member>
        <member name="E:FlaxEngine.Collections.CircularBuffer`1.OnItemRemoved">
            <summary>
            Executes an action when item is removed
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventHandler">
            <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventHandler" />
        </member>
        <member name="E:FlaxEngine.Collections.CircularBuffer`1.OnItemAdded">
            <summary>
            Executes an action when item is added
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventHandler">
            <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventHandler" />
        </member>
        <member name="E:FlaxEngine.Collections.CircularBuffer`1.OnItemOverflown">
            <summary>
            Executes an action when item is removed because of overflow in buffer
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventHandler">
            <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventHandler" />
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.Count">
            <summary>
            Amount of items currently in buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.Capacity">
            <summary>
            Current capacity of internal buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.IsEmpty">
            <summary>
            Returns true if there are no items in structure, or false if there are
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.IsFull">
            <summary>
            Returns true if buffer is filled with whole of its capacity with items
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Creates new instance of object with given capacity, copies given array as a framework
            </summary>
            <param name="buffer">Buffer to insert into</param>
            <param name="frontItem">First index of an item in provided buffer</param>
            <param name="backItem">Last index on an item in provided buffer</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Creates new instance of object with given capacity
            </summary>
            <param name="capacity">Capacity of internal structure</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.#ctor(System.Int32,`0[],System.Int32)">
            <summary>
            Creates new instance of object with given capacity and adds array of items to internal buffer
            </summary>
            <param name="capacity">Capacity of internal structure</param>
            <param name="items">Items to input</param>
            <param name="arrayIndex">Index of items to input at in internal buffer</param>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.Item(System.Int32)">
            <summary>
            Gets or sets item from list at given index.
            <remarks>All items are in order of input regardless of overflow that may occur</remarks>
            </summary>
            <param name="index">Index to item required</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.PushFront(`0)">
            <summary>
            Adds item to the front of the buffer
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.PushBack(`0)">
            <summary>
            Adds item to the back of the buffer
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.Front">
            <summary>
            Gets top first element form collection
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.Back">
            <summary>
            Gets bottom first element form collection
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.PopFront">
            <summary>
            Removes first item from the front of the buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.PopBack">
            <summary>
            Removes first item from the back of the buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.ToArray">
            <summary>
            Copies the buffer contents to an array, according to the logical
            contents of the buffer (i.e. independent of the internal
            order/contents)
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.CopyTo(`0[],System.Int32)">
            <summary>
            CopyTo copies a collection into an Array, starting at a particular index into the array.
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.Clear">
            <summary>
            Clears buffer and remains capacity
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.Clear(System.Int32)">
            <summary>
            Clears buffer and changes its capacity.
            </summary>
            <param name="newCapacity">The new capacity of the buffer.</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.DecreaseBackIndex">
            <summary>
            Decrease index of _backItem and warp it round if fall below 0
            <para>Move _frontItem back index if they've met</para>
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.DecreaseFrontIndex">
            <summary>
            Decrease index of _frontItem and warp it round if fall below 0
            <para>Move _backItem back index if they've met</para>
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.IncreaseBackIndex">
            <summary>
            Increases index of _backItem and warp it round if exceded capacity
            <para>Move _frontItem forward index if they've met</para>
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.IncreaseFrontIndex">
            <summary>
            Increases index of _frontItem and warp it round if exceded capacity
            <para>Move _backItem forward index if they've met</para>
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.IOrderedDictionary`2">
            <summary>
            Interface for a dictionary object that allows rapid hash lookups using keys, but also maintains the key insertion order so that values can be retrieved by key index.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="P:FlaxEngine.Collections.IOrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:FlaxEngine.Collections.IOrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="P:FlaxEngine.Collections.IOrderedDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.IOrderedDictionary`2.Keys">
            <summary>
            Gets the collection of the keys.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.IOrderedDictionary`2.Values">
            <summary>
            Gets the collection of the values.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the collection.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.IndexOf(`0)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="key">The object to locate in the current dictionary. The element to locate can be null for reference types.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains the specified value.
            </summary>
            <param name="value">The value to check.</param>
            <returns><c>true</c> if the dictionary contains the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.ContainsValue(`1,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Determines whether the dictionary contains the specified value.
            </summary>
            <param name="value">The value to check.</param>
            <param name="comparer">The equality comparer.</param>
            <returns><c>true</c> if the dictionary contains the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the specified key.
            </summary>
            <param name="key">The key to check.</param>
            <returns><c>true</c> if the dictionary contains the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the collection.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original collection.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns><see langword="true" /> if the object that implements collection contains an element with the specified key; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.GetValue(`0)">
            <summary>
            Gets the value by the key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the 0 by the key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The key-value pair.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.SetItem(System.Int32,`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FlaxEngine.Collections.OrderedDictionary`2">
            <summary>
            A dictionary object that allows rapid hash lookups using keys, but also maintains the key insertion order so that values can be retrieved by key index.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key associated with the value to get or set.</param>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The index of the value to get or set.</param>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.
            </summary>
            <returns>The number of elements contained in the T:System.Collections.ICollection.</returns>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys in the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection" /> object containing the keys in the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> object.
            </returns>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection" /> object containing the values in the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> object.
            </returns>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Comparer">
            <summary>
            The keys equality comparer.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.#ctor">
            <summary>
            A dictionary object that allows rapid hash lookups using keys, but also
            maintains the key insertion order so that values can be retrieved by
            key index.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <inheritdoc cref="T:FlaxEngine.Collections.OrderedDictionary`2" />
            </summary>
            <remarks>Allows custom comparer for items</remarks>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.#ctor(FlaxEngine.Collections.IOrderedDictionary{`0,`1})">
            <summary>
            <inheritdoc cref="T:FlaxEngine.Collections.OrderedDictionary`2" />
            </summary>
            <remarks>Copy constructor</remarks>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.#ctor(FlaxEngine.Collections.IOrderedDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <inheritdoc cref="T:FlaxEngine.Collections.OrderedDictionary`2" />
            </summary>
            <remarks>Copy constructor with custom items comparer</remarks>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.Add(`0,`1)">
            <summary>Adds an element with the specified key and value into the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.Clear">
            <summary>
            Clears the contents of the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> instance.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Performs additional custom processes before inserting a new element into the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> instance.
            </summary>
            <param name="index">The index.</param>
            <param name="key">The key of the element to insert.</param>
            <param name="value">The value of the element to insert.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.IndexOf(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.
            </summary>
            <param name="key">The object to locate in the current dictionary. The element to locate can be null for reference types.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains a specific value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</param>
            <returns>True if the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains an element with the specified value; otherwise, false.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.ContainsValue(`1,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Determines whether the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains a specific value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</param>
            <param name="comparer">The custom <see cref="T:System.Collections.IEqualityComparer" /> for this search</param>
            <returns>True if the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains an element with the specified value; otherwise, false.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</param>
            <returns>True if the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.GetItem(System.Int32)">
            <summary>
            Gets item at given index.
            </summary>
            <param name="index">Requested key at index</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the index specified does not refer to a KeyValuePair in this object
            </exception>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SetItem(System.Int32,`1)">
            <summary>
            Sets the value at the index specified.
            </summary>
            <param name="index">The index of the value desired</param>
            <param name="value">The value to set</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the index specified does not refer to a KeyValuePair in this object
            </exception>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.Remove(`0)">
            <summary>
            Performs additional custom processes before removing an element from the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> instance.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.GetValue(`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key associated with the value to get.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value associated with the specified key.
            </summary>
            <param name="key">The key associated with the value to set.</param>
            <param name="value">The the value to set.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get value at specified key.
            </summary>
            <param name="key">The key associated with the value to find.</param>
            <param name="value">Found value.</param>
            <returns>true if value existed, false if not</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SortKeys">
            <summary>
            Sorts the keys.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SortKeys(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the keys.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SortKeys(System.Comparison{`0})">
            <summary>
            Sorts the keys.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SortValues">
            <summary>
            Sorts the values.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SortValues(System.Collections.Generic.IComparer{`1})">
            <summary>
            Sorts the values.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SortValues(System.Comparison{`1})">
            <summary>
            Sorts the values.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:FlaxEngine.Collections.ComparerInternal`1.#ctor(System.Comparison{`0})">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Collections.ComparerInternal`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Collections.DictionaryEnumerator`2">
            <summary>
            The enumerator implementation for dictionary
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:System.Collections.IDictionaryEnumerator" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:FlaxEngine.Collections.DictionaryEnumerator`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Collections.DictionaryEnumerator`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collections.DictionaryEnumerator`2"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.Collections.DictionaryEnumerator`2.Reset">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Collections.DictionaryEnumerator`2.MoveNext">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Collections.DictionaryEnumerator`2.Entry">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Collections.DictionaryEnumerator`2.Key">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Collections.DictionaryEnumerator`2.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Collections.DictionaryEnumerator`2.Current">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GameWindowMode">
            <summary>
            Specifies the display mode of a game window.
            </summary>
        </member>
        <member name="F:FlaxEngine.GameWindowMode.Windowed">
            <summary>
            The window has borders and does not take up the full screen.
            </summary>
        </member>
        <member name="F:FlaxEngine.GameWindowMode.Fullscreen">
            <summary>
            The window takes up the full screen exclusively.
            </summary>
        </member>
        <member name="F:FlaxEngine.GameWindowMode.Borderless">
            <summary>
            The window behaves like in Windowed mode but has no borders.
            </summary>
        </member>
        <member name="F:FlaxEngine.GameWindowMode.FullscreenBorderless">
            <summary>
            Same as in Borderless, but is of the size of the screen.
            </summary>
        </member>
        <member name="T:FlaxEngine.LogType">
            <summary>
            The log message types.
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Info">
            <summary>
            The information log message.
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Warning">
            <summary>
            The warning message.
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Error">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Fatal">
            <summary>
            The fatal error.
            </summary>
        </member>
        <member name="T:FlaxEngine.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box in three dimensional space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingBox.Empty">
            <summary>
            A <see cref="T:FlaxEngine.BoundingBox"/> which represents an empty space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingBox.Zero">
            <summary>
            A <see cref="T:FlaxEngine.BoundingBox"/> which is located in point (0, 0, 0) and has size equal (0, 0, 0).
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingBox.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:FlaxEngine.BoundingBox.Center">
            <summary>
            Gets or sets the center point location.
            </summary>
            <value>
            The center.
            </value>
        </member>
        <member name="F:FlaxEngine.BoundingBox.Minimum">
            <summary>
            The minimum point of the box.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingBox.Maximum">
            <summary>
            The maximum point of the box.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoundingBox.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoundingBox" /> struct.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
        </member>
        <member name="M:FlaxEngine.BoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.GetCorners(FlaxEngine.Vector3[])">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.Vector3)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.BoundingBox)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.BoundingSphere)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.FromPoints(FlaxEngine.Vector3[],FlaxEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points" /> is <c>null</c>.</exception>
        </member>
        <member name="M:FlaxEngine.BoundingBox.FromPoints(FlaxEngine.Vector3[])">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <returns>The newly constructed bounding box.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points" /> is <c>null</c>.</exception>
        </member>
        <member name="M:FlaxEngine.BoundingBox.FromSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:FlaxEngine.BoundingBox.FromSphere(FlaxEngine.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Merge(FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Merge(FlaxEngine.BoundingBox,FlaxEngine.BoundingBox)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Transform(FlaxEngine.BoundingBox,FlaxEngine.Matrix)">
            <summary>
            Transforms bounding box using the given transformation matrix.
            </summary>
            <param name="box">The bounding box to transform.</param>
            <param name="transform">The transformation matrix.</param>
            <returns>The result of the transformation.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Transform(FlaxEngine.BoundingBox@,FlaxEngine.Matrix@,FlaxEngine.BoundingBox@)">
            <summary>
            Transforms bounding box using the given transformation matrix.
            </summary>
            <param name="box">The bounding box to transform.</param>
            <param name="transform">The transformation matrix.</param>
            <param name="result">The result of the transformation.</param>
        </member>
        <member name="M:FlaxEngine.BoundingBox.op_Multiply(FlaxEngine.BoundingBox,FlaxEngine.Matrix)">
            <summary>
            Transforms bounding box using the given transformation matrix.
            </summary>
            <param name="box">The bounding box to transform.</param>
            <param name="transform">The transformation matrix.</param>
            <returns>The result of the transformation.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.op_Equality(FlaxEngine.BoundingBox,FlaxEngine.BoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.op_Inequality(FlaxEngine.BoundingBox,FlaxEngine.BoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Equals(FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Equals(FlaxEngine.BoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.BoundingFrustum">
            <summary>
            Defines a frustum which can be used in frustum culling, zoom to Extents (zoom to fit) operations,
            (matrix, frustum, camera) interchange, and many kind of intersection testing.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Matrix">
            <summary>
            Gets or sets the Matrix that describes this bounding frustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Near">
            <summary>
            Gets the near plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Far">
            <summary>
            Gets the far plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Left">
            <summary>
            Gets the left plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Right">
            <summary>
            Gets the right plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Top">
            <summary>
            Gets the top plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Bottom">
            <summary>
            Gets the bottom plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.#ctor(FlaxEngine.Matrix)">
            <summary>
            Creates a new instance of BoundingFrustum.
            </summary>
            <param name="matrix">Combined matrix that usually takes view × projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Equals(FlaxEngine.BoundingFrustum@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.BoundingFrustum" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.BoundingFrustum" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.BoundingFrustum" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Equals(FlaxEngine.BoundingFrustum)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.BoundingFrustum" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.BoundingFrustum" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.BoundingFrustum" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.op_Equality(FlaxEngine.BoundingFrustum,FlaxEngine.BoundingFrustum)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.op_Inequality(FlaxEngine.BoundingFrustum,FlaxEngine.BoundingFrustum)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetPlane(System.Int32)">
            <summary>
            Returns one of the 6 planes related to this frustum.
            </summary>
            <param name="index">Plane index where 0 fro Left, 1 for Right, 2 for Top, 3 for Bottom, 4 for Near, 5 for Far</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.FromCamera(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new frustum relaying on perspective camera parameters
            </summary>
            <param name="cameraPos">The camera pos.</param>
            <param name="lookDir">The look dir.</param>
            <param name="upDir">Up dir.</param>
            <param name="fov">The fov.</param>
            <param name="znear">The znear.</param>
            <param name="zfar">The zfar.</param>
            <param name="aspect">The aspect.</param>
            <returns>The bounding frustum calculated from perspective camera</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetCorners">
            <summary>
            Returns the 8 corners of the frustum, element0 is Near1 (near right down corner)
            , element1 is Near2 (near right top corner)
            , element2 is Near3 (near Left top corner)
            , element3 is Near4 (near Left down corner)
            , element4 is Far1 (far right down corner)
            , element5 is Far2 (far right top corner)
            , element6 is Far3 (far left top corner)
            , element7 is Far4 (far left down corner)
            </summary>
            <returns>The 8 corners of the frustum</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetCorners(FlaxEngine.Vector3[])">
            <summary>
            Returns the 8 corners of the frustum, element0 is Near1 (near right down corner)
            , element1 is Near2 (near right top corner)
            , element2 is Near3 (near Left top corner)
            , element3 is Near4 (near Left down corner)
            , element4 is Far1 (far right down corner)
            , element5 is Far2 (far right top corner)
            , element6 is Far3 (far left top corner)
            , element7 is Far4 (far left down corner)
            </summary>
            <returns>The 8 corners of the frustum</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.Vector3@)">
            <summary>
            Checks whether a point lay inside, intersects or lay outside the frustum.
            </summary>
            <param name="point">The point.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.Vector3)">
            <summary>
            Checks whether a point lay inside, intersects or lay outside the frustum.
            </summary>
            <param name="point">The point.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.Vector3[])">
            <summary>
            Checks whether a group of points lay totally inside the frustum (Contains), or lay partially inside the frustum
            (Intersects), or lay outside the frustum (Disjoint).
            </summary>
            <param name="points">The points.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.Vector3[],FlaxEngine.ContainmentType@)">
            <summary>
            Checks whether a group of points lay totally inside the frustum (Contains), or lay partially inside the frustum
            (Intersects), or lay outside the frustum (Disjoint).
            </summary>
            <param name="points">The points.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingBox@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingBox)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingBox@,FlaxEngine.ContainmentType@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingSphere)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingSphere@,FlaxEngine.ContainmentType@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingFrustum@)">
            <summary>
            Determines the intersection relationship between the frustum and another bounding frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingFrustum)">
            <summary>
            Determines the intersection relationship between the frustum and another bounding frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingFrustum@,System.Boolean@)">
            <summary>
            Determines the intersection relationship between the frustum and another bounding frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingSphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.BoundingSphere@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingSphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">Set to <c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.BoundingBox@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <param name="result"><c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.Plane@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>Plane intersection type.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.Plane@,FlaxEngine.PlaneIntersectionType@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">Plane intersection type.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetWidthAtDepth(System.Single)">
            <summary>
            Get the width of the frustum at specified depth.
            </summary>
            <param name="depth">the depth at which to calculate frustum width.</param>
            <returns>With of the frustum at the specified depth</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetHeightAtDepth(System.Single)">
            <summary>
            Get the height of the frustum at specified depth.
            </summary>
            <param name="depth">the depth at which to calculate frustum height.</param>
            <returns>Height of the frustum at the specified depth</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.Ray@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.Ray@,System.Nullable{System.Single}@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param>
            <param name="inDistance">
            The distance at which the ray enters the frustum if there is an intersection and the ray
            starts outside the frustum.
            </param>
            <param name="outDistance">The distance at which the ray exits the frustum if there is an intersection.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetZoomToExtentsShiftDistance(FlaxEngine.Vector3[])">
            <summary>
            Get the distance which when added to camera position along the lookat direction will do the effect of zoom to extents
            (zoom to fit) operation,
            so all the passed points will fit in the current view.
            if the returned value is positive, the camera will move toward the lookat direction (ZoomIn).
            if the returned value is negative, the camera will move in the reverse direction of the lookat direction (ZoomOut).
            </summary>
            <param name="points">The points.</param>
            <returns>The zoom to fit distance</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetZoomToExtentsShiftDistance(FlaxEngine.BoundingBox@)">
            <summary>
            Get the distance which when added to camera position along the lookat direction will do the effect of zoom to extents
            (zoom to fit) operation,
            so all the passed points will fit in the current view.
            if the returned value is positive, the camera will move toward the lookat direction (ZoomIn).
            if the returned value is negative, the camera will move in the reverse direction of the lookat direction (ZoomOut).
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>The zoom to fit distance</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetZoomToExtentsShiftVector(FlaxEngine.Vector3[])">
            <summary>
            Get the vector shift which when added to camera position will do the effect of zoom to extents (zoom to fit)
            operation,
            so all the passed points will fit in the current view.
            </summary>
            <param name="points">The points.</param>
            <returns>The zoom to fit vector</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetZoomToExtentsShiftVector(FlaxEngine.BoundingBox@)">
            <summary>
            Get the vector shift which when added to camera position will do the effect of zoom to extents (zoom to fit)
            operation,
            so all the passed points will fit in the current view.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>The zoom to fit vector</returns>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.IsOrthographic">
            <summary>
            Indicate whether the current BoundingFrustum is Orthographic.
            </summary>
            <value>
            <c>true</c> if the current BoundingFrustum is Orthographic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:FlaxEngine.BoundingSphere">
            <summary>
            Represents a bounding sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingSphere.Empty">
            <summary>
            A <see cref="T:FlaxEngine.BoundingSphere"/> which represents an empty space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingSphere.Center">
            <summary>
            The center of the sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingSphere.Radius">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoundingBox" /> struct.
            </summary>
            <param name="center">The center of the sphere in three dimensional space.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Contains(FlaxEngine.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Contains(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether the current objects contains a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Contains(FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Contains(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromPoints(FlaxEngine.Vector3[],System.Int32,System.Int32,FlaxEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="start">The start index from points array to start compute the bounding sphere.</param>
            <param name="count">The count of points to process to compute the bounding sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
            <exception cref="T:System.ArgumentNullException">points</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            start
            or
            count
            </exception>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromPoints(FlaxEngine.Vector3[],FlaxEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromPoints(FlaxEngine.Vector3[])">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromBox(FlaxEngine.BoundingBox@,FlaxEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <param name="result">When the method completes, the newly constructed bounding sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromBox(FlaxEngine.BoundingBox)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Merge(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that is the as large as the total combined area of the two specified
            spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Merge(FlaxEngine.BoundingSphere,FlaxEngine.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that is the as large as the total combined area of the two specified
            spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.op_Equality(FlaxEngine.BoundingSphere,FlaxEngine.BoundingSphere)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.op_Inequality(FlaxEngine.BoundingSphere,FlaxEngine.BoundingSphere)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Equals(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Equals(FlaxEngine.BoundingSphere)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.ContainmentType">
            <summary>
            Describes how one bounding volume contains another.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContainmentType.Disjoint">
            <summary>
            The two bounding volumes don't intersect at all.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContainmentType.Contains">
            <summary>
            One bounding volume completely contains another.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContainmentType.Intersects">
            <summary>
            The two bounding volumes overlap.
            </summary>
        </member>
        <member name="T:FlaxEngine.PlaneIntersectionType">
            <summary>
            Describes the result of an intersection with a plane in three dimensions.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlaneIntersectionType.Back">
            <summary>
            The object is behind the plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlaneIntersectionType.Front">
            <summary>
            The object is in front of the plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlaneIntersectionType.Intersecting">
            <summary>
            The object is intersecting the plane.
            </summary>
        </member>
        <member name="T:FlaxEngine.CollisionsHelper">
            <summary>
            Contains static methods to help in determining intersections, containment, etc.
            </summary>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointPointLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines the closest point between a point and a line.
            </summary>
            <param name="point">The point to test.</param>
            <param name="p0">The line first point.</param>
            <param name="p1">The line second point.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointPointTriangle(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a point and a triangle.
            </summary>
            <param name="point">The point to test.</param>
            <param name="vertex1">The first vertex to test.</param>
            <param name="vertex2">The second vertex to test.</param>
            <param name="vertex3">The third vertex to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointPlanePoint(FlaxEngine.Plane@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.Plane" /> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointBoxPoint(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.BoundingBox" /> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointRectanglePoint(FlaxEngine.Rectangle@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.Rectangle" /> and a point.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointSpherePoint(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.BoundingSphere" /> and a point.
            </summary>
            <param name="sphere"></param>
            <param name="point">The point to test.</param>
            <param name="result">
            When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="F:FlaxEngine.Vector3.Zero" />.
            </param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointSphereSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.BoundingSphere" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <param name="result">
            When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="F:FlaxEngine.Vector3.Zero" />.
            </param>
            <remarks>
            If the two spheres are overlapping, but not directly on top of each other, the closest point
            is the 'closest' point of intersection. This can also be considered is the deepest point of
            intersection.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistancePlanePoint(FlaxEngine.Plane@,FlaxEngine.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.Plane" /> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistanceBoxPoint(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.BoundingBox" /> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistanceBoxBox(FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.BoundingBox" /> and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistanceSpherePoint(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.BoundingSphere" /> and a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistanceSphereSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.BoundingSphere" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsPoint(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a point.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsRay(FlaxEngine.Ray@,FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray1">The first ray to test.</param>
            <param name="ray2">The second ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersect.</returns>
            <remarks>
            This method performs a ray vs ray intersection test based on the following formula
            from Goldman.
            <code>s = det([o_2 - o_1, d_2, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            <code>t = det([o_2 - o_1, d_1, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            Where o_1 is the position of the first ray, o_2 is the position of the second ray,
            d_1 is the normalized direction of the first ray, d_2 is the normalized direction
            of the second ray, det denotes the determinant of a matrix, x denotes the cross
            product, [ ] denotes a matrix, and || || denotes the length or magnitude of a vector.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsPlane(FlaxEngine.Ray@,FlaxEngine.Plane@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsPlane(FlaxEngine.Ray@,FlaxEngine.Plane@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsTriangle(FlaxEngine.Ray@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            This method tests if the ray intersects either the front or back of the triangle.
            If the ray is parallel to the triangle's plane, no intersection is assumed to have
            happened. If the intersection of the ray and the triangle is behind the origin of
            the ray, no intersection is assumed to have happened. In both cases of assumptions,
            this method returns false.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsTriangle(FlaxEngine.Ray@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsBox(FlaxEngine.Ray@,FlaxEngine.BoundingBox@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsBox(FlaxEngine.Ray@,FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsSphere(FlaxEngine.Ray@,FlaxEngine.BoundingSphere@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsSphere(FlaxEngine.Ray@,FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsPoint(FlaxEngine.Plane@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsPlane(FlaxEngine.Plane@,FlaxEngine.Plane@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsPlane(FlaxEngine.Plane@,FlaxEngine.Plane@,FlaxEngine.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <param name="line">
            When the method completes, contains the line of intersection
            as a <see cref="T:FlaxEngine.Ray" />, or a zero ray if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            Although a ray is set to have an origin, the ray returned by this method is really
            a line in three dimensions which has no real origin. The ray is considered valid when
            both the positive direction is used and when the negative direction is used.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsTriangle(FlaxEngine.Plane@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a triangle.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsBox(FlaxEngine.Plane@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsSphere(FlaxEngine.Plane@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxIntersectsBox(FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.BoundingBox" /> and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxIntersectsSphere(FlaxEngine.BoundingBox@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.BoundingBox" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereIntersectsTriangle(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.BoundingSphere" /> and a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereIntersectsSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.BoundingSphere" /> and a
            <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere1">First sphere to test.</param>
            <param name="sphere2">Second sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxContainsPoint(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingBox" /> contains a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxContainsBox(FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingBox" /> contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxContainsSphere(FlaxEngine.BoundingBox@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingBox" /> contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereContainsPoint(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingSphere" /> contains a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereContainsTriangle(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingSphere" /> contains a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereContainsBox(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingSphere" /> contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereContainsSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingSphere" /> contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.LineIntersectsLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines whether a line intersects with the other line.
            </summary>
            <param name="l1p1">The first line point 0.</param>
            <param name="l1p2">The first line point 1.</param>
            <param name="l2p1">The second line point 0.</param>
            <param name="l2p2">The second line point 1.</param>
            <returns>True if line intersects with the other line</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.LineIntersectsRect(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <summary>
            Determines whether a line intersects with the rectangle.
            </summary>
            <param name="p1">The line point 0.</param>
            <param name="p2">The line point 1.</param>
            <param name="rect">The rectangle.</param>
            <returns>True if line intersects with the rectangle</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.IsPointInTriangle(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines whether the given 2D point is inside the specified triangle.
            </summary>
            <param name="point">The point to check.</param>
            <param name="a">The first vertex of the triangle.</param>
            <param name="b">The second vertex of the triangle.</param>
            <param name="c">The third vertex of the triangle.</param>
            <returns><c>true</c> if point is inside the triangle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.Color">
            <summary>
            Representation of RGBA colors.
            </summary>
            <summary>
            List of predefined <see cref="T:FlaxEngine.Color"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Color" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.R">
            <summary>
            Red component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.G">
            <summary>
            Green component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.B">
            <summary>
            Blue component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.A">
            <summary>
            Alpha component of the color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Color.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the red, green, blue, and alpha components, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="P:FlaxEngine.Color.MinColorComponent">
            <summary>
            Returns the minimum color component value: Min(r,g,b).
            </summary>
        </member>
        <member name="P:FlaxEngine.Color.MaxColorComponent">
            <summary>
            Returns the maximum color component value: Max(r,g,b).
            </summary>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Single)">
            <summary>
            Constructs a new Color with given r,g,b,a component.
            </summary>
            <param name="rgba">RGBA component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Color with given r,g,b,a components (values in range [0;1]).
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new Color with given r,g,b,a components (values in range [0;255]).
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new Color with given r,g,b,a components (values in range [0;255]).
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Color with given r,g,b components and sets alpha to 1.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Color"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, blue, and alpha components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:FlaxEngine.Color.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Color.Equals(FlaxEngine.Color@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Color" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Color" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Color" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Color.FromRGB(System.UInt32,System.Single)">
            <summary>
            Creates <see cref="T:FlaxEngine.Color"/> from the RGB value and separate alpha channel.
            </summary>
            <param name="rgb">The packed RGB value.</param>
            <param name="a">The alpha channel value.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToHexString">
            <summary>
            Gets the color value as the hexadecimal string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Color.ParseHex(System.String)">
            <summary>
            Creates <see cref="T:FlaxEngine.Color"/> from the hexadecimal string.
            </summary>
            <param name="hexString">The hexadecimal string.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.TryParseHex(System.String,FlaxEngine.Color@)">
            <summary>
            Creates <see cref="T:FlaxEngine.Color"/> from the hexadecimal string.
            </summary>
            <param name="hexString">The hexadecimal string.</param>
            <param name="value">Output value.</param>
            <returns>True if value has benn parsed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Color.FromBgra(System.Int32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.FromBgra(System.UInt32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToBgra">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToBgra(System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToRgba">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToVector4">
            <summary>
            Converts the color into a four component vector.
            </summary>
            <returns>A four component vector containing all four color components.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A four-element array containing the components of the color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToSRgb">
            <summary>
            Converts this color from linear space to sRGB space.
            </summary>
            <returns>A color3 in sRGB space.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToLinear">
            <summary>
            Converts this color from sRGB space to linear space.
            </summary>
            <returns>A Color in linear space.</returns>
        </member>
        <member name="M:FlaxEngine.Color.FromHSV(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates RGB color from Hue[0-360], Saturation[0-1] and Value[0-1].
            </summary>
            <param name="hue">The hue angle in degrees [0-360].</param>
            <param name="saturation">The saturation normalized [0-1].</param>
            <param name="value">The value normalized [0-1].</param>
            <param name="alpha">The alpha value. Default is 1.</param>
            <returns>The RGB color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.FromHSV(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates RGB color from Hue[0-360], Saturation[0-1] and Value[0-1] paked to XYZ vector.
            </summary>
            <param name="hsv">The HSV color.</param>
            <param name="alpha">The alpha value. Default is 1.</param>
            <returns>The RGB color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.Lerp(FlaxEngine.Color,FlaxEngine.Color,System.Single)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a">Color a</param>
            <param name="b">Color b</param>
            <param name="t">Float for combining a and b</param>
        </member>
        <member name="M:FlaxEngine.Color.Lerp(FlaxEngine.Color@,FlaxEngine.Color@,System.Single,FlaxEngine.Color@)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a">Color a</param>
            <param name="b">Color b</param>
            <param name="t">Float for combining a and b</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Color.op_Addition(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Adds two colors.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Division(FlaxEngine.Color,System.Single)">
            <summary>
            Divides color by the scale factor.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The division factor.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Equality(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Compares two colors.
            </summary>
            <param name="lhs">The left.</param>
            <param name="rhs">The right.</param>
            <returns>True if colors are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Inequality(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Compares two colors.
            </summary>
            <param name="lhs">The left.</param>
            <param name="rhs">The right.</param>
            <returns>True if colors are not equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Implicit(FlaxEngine.Color)~FlaxEngine.Vector3">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Color"/> to <see cref="T:FlaxEngine.Vector3"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Implicit(FlaxEngine.Color)~FlaxEngine.Vector4">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Color"/> to <see cref="T:FlaxEngine.Vector4"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Implicit(FlaxEngine.Vector4)~FlaxEngine.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Vector4"/> to <see cref="T:FlaxEngine.Color"/>.
            </summary>
            <param name="v">The vector.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Implicit(FlaxEngine.Vector3)~FlaxEngine.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Color"/>.
            </summary>
            <param name="v">The vector.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Multiply(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Multiplies color components by the other color components.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Multiply(FlaxEngine.Color,System.Single)">
            <summary>
            Multiplies color components by the scale factor.
            </summary>
            <param name="a">The color.</param>
            <param name="b">The scale.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Multiply(System.Single,FlaxEngine.Color)">
            <summary>
            Multiplies color components by the scale factor.
            </summary>
            <param name="b">The scale.</param>
            <param name="a">The color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Subtraction(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Subtracts one color from the another.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.RGBMultiplied(System.Single)">
            <summary>
            Returns the color with RGB channels multiplied by the given scale factor. The alpha channel remains the same.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <returns>The modified color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.RGBMultiplied(FlaxEngine.Color)">
            <summary>
            Returns the color with RGB channels multiplied by the given color. The alpha channel remains the same.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <returns>The modified color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.AlphaMultiplied(System.Single)">
            <summary>
            Returns the color with alpha channel multiplied by the given color. The RGB channels remain the same.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <returns>The modified color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToHSV">
            <summary>
            Converts the color to HSV color space (returned as vector).
            </summary>
            <returns>The HSV color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.RGBToHSV(FlaxEngine.Color,System.Single@,System.Single@,System.Single@)">
            <summary>
            Convert color from the RGB color space to HSV color space.
            </summary>
            <param name="rgbColor">Color of the RGB.</param>
            <param name="h">The output Hue.</param>
            <param name="s">The output Saturation.</param>
            <param name="v">The output Value.</param>
        </member>
        <member name="M:FlaxEngine.Color.AdjustContrast(FlaxEngine.Color@,System.Single,FlaxEngine.Color@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:FlaxEngine.Color.AdjustContrast(FlaxEngine.Color,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.AdjustSaturation(FlaxEngine.Color@,System.Single,FlaxEngine.Color@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:FlaxEngine.Color.AdjustSaturation(FlaxEngine.Color,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.PremultiplyAlpha(FlaxEngine.Color)">
            <summary>
            Premultiplies the color components by the alpha value.
            </summary>
            <param name="value">The color to premultiply.</param>
            <returns>A color with premultiplied alpha.</returns>
        </member>
        <member name="M:FlaxEngine.Color.Max(FlaxEngine.Color@,FlaxEngine.Color@,FlaxEngine.Color@)">
            <summary>
            Returns a color containing the largest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">
            When the method completes, contains an new color composed of the largest components of the source colors.
            </param>
        </member>
        <member name="M:FlaxEngine.Color.Max(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Returns a color containing the largest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:FlaxEngine.Color.Min(FlaxEngine.Color@,FlaxEngine.Color@,FlaxEngine.Color@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">
            When the method completes, contains an new color composed of the smallest components of the source colors.
            </param>
        </member>
        <member name="M:FlaxEngine.Color.Min(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:FlaxEngine.Color.Clamp(FlaxEngine.Color@,FlaxEngine.Color@,FlaxEngine.Color@,FlaxEngine.Color@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Color.Clamp(FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToString">
            <summary>
            Returns a nicely formatted string of this color.
            </summary>
        </member>
        <member name="M:FlaxEngine.Color.ToString(System.String)">
            <summary>
            Returns a nicely formatted string of this color.
            </summary>
            <param name="format"></param>
        </member>
        <member name="F:FlaxEngine.Color.Zero">
            <summary>
            Zero color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Transparent">
            <summary>
            Transparent color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.AliceBlue">
            <summary>
            AliceBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.AntiqueWhite">
            <summary>
            AntiqueWhite color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Aqua">
            <summary>
            Aqua color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Aquamarine">
            <summary>
            Aquamarine color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Azure">
            <summary>
            Azure color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Beige">
            <summary>
            Beige color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Bisque">
            <summary>
            Bisque color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.BlanchedAlmond">
            <summary>
            BlanchedAlmond color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Blue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.BlueViolet">
            <summary>
            BlueViolet color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Brown">
            <summary>
            Brown color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.BurlyWood">
            <summary>
            BurlyWood color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.CadetBlue">
            <summary>
            CadetBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Chartreuse">
            <summary>
            Chartreuse color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Chocolate">
            <summary>
            Chocolate color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Coral">
            <summary>
            Coral color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.CornflowerBlue">
            <summary>
            CornflowerBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Cornsilk">
            <summary>
            Cornsilk color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Crimson">
            <summary>
            Crimson color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Cyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkBlue">
            <summary>
            DarkBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkCyan">
            <summary>
            DarkCyan color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkGoldenrod">
            <summary>
            DarkGoldenrod color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkGray">
            <summary>
            DarkGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkGreen">
            <summary>
            DarkGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkKhaki">
            <summary>
            DarkKhaki color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkMagenta">
            <summary>
            DarkMagenta color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkOliveGreen">
            <summary>
            DarkOliveGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkOrange">
            <summary>
            DarkOrange color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkOrchid">
            <summary>
            DarkOrchid color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkRed">
            <summary>
            DarkRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkSalmon">
            <summary>
            DarkSalmon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkSeaGreen">
            <summary>
            DarkSeaGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkSlateBlue">
            <summary>
            DarkSlateBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkSlateGray">
            <summary>
            DarkSlateGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkTurquoise">
            <summary>
            DarkTurquoise color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkViolet">
            <summary>
            DarkViolet color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DeepPink">
            <summary>
            DeepPink color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DeepSkyBlue">
            <summary>
            DeepSkyBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DimGray">
            <summary>
            DimGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DodgerBlue">
            <summary>
            DodgerBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Firebrick">
            <summary>
            Firebrick color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.FloralWhite">
            <summary>
            FloralWhite color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.ForestGreen">
            <summary>
            ForestGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Fuchsia">
            <summary>
            Fuchsia color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Gainsboro">
            <summary>
            Gainsboro color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.GhostWhite">
            <summary>
            GhostWhite color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Gold">
            <summary>
            Gold color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Goldenrod">
            <summary>
            Goldenrod color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Gray">
            <summary>
            Gray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Green">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.GreenYellow">
            <summary>
            GreenYellow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Honeydew">
            <summary>
            Honeydew color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.HotPink">
            <summary>
            HotPink color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.IndianRed">
            <summary>
            IndianRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Indigo">
            <summary>
            Indigo color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Ivory">
            <summary>
            Ivory color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Khaki">
            <summary>
            Khaki color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Lavender">
            <summary>
            Lavender color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LavenderBlush">
            <summary>
            LavenderBlush color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LawnGreen">
            <summary>
            LawnGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LemonChiffon">
            <summary>
            LemonChiffon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightBlue">
            <summary>
            LightBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightCoral">
            <summary>
            LightCoral color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightCyan">
            <summary>
            LightCyan color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightGray">
            <summary>
            LightGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightGreen">
            <summary>
            LightGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightPink">
            <summary>
            LightPink color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSalmon">
            <summary>
            LightSalmon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSeaGreen">
            <summary>
            LightSeaGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSkyBlue">
            <summary>
            LightSkyBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSlateGray">
            <summary>
            LightSlateGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSteelBlue">
            <summary>
            LightSteelBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightYellow">
            <summary>
            LightYellow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Lime">
            <summary>
            Lime color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LimeGreen">
            <summary>
            LimeGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Linen">
            <summary>
            Linen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Magenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Maroon">
            <summary>
            Maroon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumAquamarine">
            <summary>
            MediumAquamarine color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumBlue">
            <summary>
            MediumBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumOrchid">
            <summary>
            MediumOrchid color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumPurple">
            <summary>
            MediumPurple color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumSeaGreen">
            <summary>
            MediumSeaGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumSlateBlue">
            <summary>
            MediumSlateBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumSpringGreen">
            <summary>
            MediumSpringGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumTurquoise">
            <summary>
            MediumTurquoise color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumVioletRed">
            <summary>
            MediumVioletRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MidnightBlue">
            <summary>
            MidnightBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MintCream">
            <summary>
            MintCream color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MistyRose">
            <summary>
            MistyRose color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Moccasin">
            <summary>
            Moccasin color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.NavajoWhite">
            <summary>
            NavajoWhite color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Navy">
            <summary>
            Navy color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.OldLace">
            <summary>
            OldLace color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Olive">
            <summary>
            Olive color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.OliveDrab">
            <summary>
            OliveDrab color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Orange">
            <summary>
            Orange color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.OrangeRed">
            <summary>
            OrangeRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Orchid">
            <summary>
            Orchid color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PaleGoldenrod">
            <summary>
            PaleGoldenrod color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PaleGreen">
            <summary>
            PaleGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PaleTurquoise">
            <summary>
            PaleTurquoise color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PaleVioletRed">
            <summary>
            PaleVioletRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PapayaWhip">
            <summary>
            PapayaWhip color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PeachPuff">
            <summary>
            PeachPuff color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Peru">
            <summary>
            Peru color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Pink">
            <summary>
            Pink color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Plum">
            <summary>
            Plum color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PowderBlue">
            <summary>
            PowderBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Purple">
            <summary>
            Purple color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Red">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.RosyBrown">
            <summary>
            RosyBrown color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.RoyalBlue">
            <summary>
            RoyalBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SaddleBrown">
            <summary>
            SaddleBrown color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Salmon">
            <summary>
            Salmon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SandyBrown">
            <summary>
            SandyBrown color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SeaGreen">
            <summary>
            SeaGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SeaShell">
            <summary>
            SeaShell color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Sienna">
            <summary>
            Sienna color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Silver">
            <summary>
            Silver color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SkyBlue">
            <summary>
            SkyBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SlateBlue">
            <summary>
            SlateBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SlateGray">
            <summary>
            SlateGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Snow">
            <summary>
            Snow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SpringGreen">
            <summary>
            SpringGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SteelBlue">
            <summary>
            SteelBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Tan">
            <summary>
            Tan color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Teal">
            <summary>
            Teal color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Thistle">
            <summary>
            Thistle color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Tomato">
            <summary>
            Tomato color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Turquoise">
            <summary>
            Turquoise color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Violet">
            <summary>
            Violet color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Wheat">
            <summary>
            Wheat color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.White">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.WhiteSmoke">
            <summary>
            WhiteSmoke color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Yellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.YellowGreen">
            <summary>
            YellowGreen color.
            </summary>
        </member>
        <member name="T:FlaxEngine.Color32">
            <summary>
            Representation of RGBA colors in 32 bit format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Color32" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.Transparent">
            <summary>
            The transparent color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.Black">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.White">
            <summary>
            The white color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.R">
            <summary>
            Red component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.G">
            <summary>
            Green component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.B">
            <summary>
            Blue component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.A">
            <summary>
            Alpha component of the color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Color32.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the red, green, blue, and alpha components, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:FlaxEngine.Color32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new Color32 with given r, g, b, a components.
            </summary>
            <param name="r">The red component value.</param>
            <param name="g">The green component value.</param>
            <param name="b">The blue component value.</param>
            <param name="a">The alpha component value.</param>
        </member>
        <member name="M:FlaxEngine.Color32.Lerp(FlaxEngine.Color32,FlaxEngine.Color32,System.Single)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a">Color a</param>
            <param name="b">Color b</param>
            <param name="t">Float for combining a and b</param>
        </member>
        <member name="M:FlaxEngine.Color32.Lerp(FlaxEngine.Color32@,FlaxEngine.Color32@,System.Single,FlaxEngine.Color32@)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a">Color a</param>
            <param name="b">Color b</param>
            <param name="t">Float for combining a and b</param>
            <param name="result">Result</param>
        </member>
        <member name="M:FlaxEngine.Color32.op_Addition(FlaxEngine.Color32,FlaxEngine.Color32)">
            <summary>
            Adds two colors.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Division(FlaxEngine.Color32,System.Single)">
            <summary>
            Divides color by the scale factor.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The division factor.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Multiply(FlaxEngine.Color32,FlaxEngine.Color32)">
            <summary>
            Multiplies color components by the other color components.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Multiply(FlaxEngine.Color32,System.Single)">
            <summary>
            Multiplies color components by the scale factor.
            </summary>
            <param name="a">The color.</param>
            <param name="b">The scale.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Multiply(System.Single,FlaxEngine.Color32)">
            <summary>
            Multiplies color components by the scale factor.
            </summary>
            <param name="b">The scale.</param>
            <param name="a">The color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Subtraction(FlaxEngine.Color32,FlaxEngine.Color32)">
            <summary>
            Subtracts one color from the another.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Implicit(FlaxEngine.Color)~FlaxEngine.Color32">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Color"/> to <see cref="T:FlaxEngine.Color32"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Implicit(FlaxEngine.Color32)~FlaxEngine.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Color32"/> to <see cref="T:FlaxEngine.Color"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Explicit(FlaxEngine.Color32)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Color32"/> to <see cref="T:FlaxEngine.Vector4"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color32.ToString">
            <summary>
            Returns a nicely formatted string of this color.
            </summary>
        </member>
        <member name="M:FlaxEngine.Color32.ToString(System.String)">
            <summary>
            Returns a nicely formatted string of this color.
            </summary>
            <param name="format"></param>
        </member>
        <member name="T:FlaxEngine.ColorHSV">
            <summary>
            Represents a color in the form of Hue, Saturation, Value, Alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorHSV.H">
            <summary>
            The Hue of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorHSV.S">
            <summary>
            The Saturation of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorHSV.V">
            <summary>
            The Value of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorHSV.A">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:FlaxEngine.ColorHSV.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ColorHSV"/> struct.
            </summary>
            <param name="h">The hue.</param>
            <param name="s">The saturation.</param>
            <param name="v">The value.</param>
            <param name="a">The alpha.</param>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToColor">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.FromColor(FlaxEngine.Color)">
            <summary>
            Converts the color into a HSV color.
            </summary>
            <param name="color">The color.</param>
            <returns>A HSV color</returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.Equals(FlaxEngine.ColorHSV)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEngine.ColorHSV.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEngine.ColorHSV.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:FlaxEngine.FloatR10G10B10A2">
            <summary>
            Packed vector, layout: R:10 bytes, G:10 bytes, B:10 bytes, A:2 bytes, all values are stored as floats in range [0;1]
            </summary>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR10G10B10A2" /> structure.
            </summary>
            <param name="x">The floating point value that should be stored in R component (10 bit format).</param>
            <param name="y">The floating point value that should be stored in G component (10 bit format).</param>
            <param name="z">The floating point value that should be stored in B component (10 bit format).</param>
            <param name="w">The floating point value that should be stored in A component (2 bit format).</param>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR10G10B10A2" /> structure.
            </summary>
            <param name="value">The floating point value that should be stored in 10 bit format.</param>
            <param name="w">The floating point value that should be stored in alpha component (2 bit format).</param>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.#ctor(FlaxEngine.Vector4)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR10G10B10A2" /> structure.
            </summary>
            <param name = "value">The floating point value that should be stored in 10 bit format.</param>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.RawValue">
            <summary>
            Gets or sets the raw 32 bit value used to back this vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.R">
            <summary>
            Gets the R component.
            </summary>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.G">
            <summary>
            Gets the G component.
            </summary>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.B">
            <summary>
            Gets the B component.
            </summary>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.A">
            <summary>
            Gets the A component.
            </summary>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.op_Explicit(FlaxEngine.Vector4)~FlaxEngine.FloatR10G10B10A2">
            <summary>
            Performs an explicit conversion from <see cref = "T:FlaxEngine.Vector4" /> to <see cref = "T:FlaxEngine.FloatR10G10B10A2" />.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.op_Implicit(FlaxEngine.FloatR10G10B10A2)~FlaxEngine.Vector4">
            <summary>
            Performs an implicit conversion from <see cref = "T:FlaxEngine.FloatR10G10B10A2" /> to <see cref = "T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.op_Equality(FlaxEngine.FloatR10G10B10A2,FlaxEngine.FloatR10G10B10A2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.op_Inequality(FlaxEngine.FloatR10G10B10A2,FlaxEngine.FloatR10G10B10A2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.Equals(FlaxEngine.FloatR10G10B10A2@,FlaxEngine.FloatR10G10B10A2@)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns><c>true</c> if <paramref name = "value1" /> is the same instance as <paramref name = "value2" /> or if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.Equals(FlaxEngine.FloatR10G10B10A2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name = "other">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.ToVector3">
            <summary>
            Unpacks vector to Vector3.
            </summary>
            <returns>Vector3 value</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.ToVector4">
            <summary>
            Unpacks vector to Vector4.
            </summary>
            <returns>Vector4 value</returns>
        </member>
        <member name="T:FlaxEngine.FloatR11G11B10">
            <summary>
            Packed vector, layout: R:11 bytes, G:11 bytes, B:10 bytes.
            The 3D vector is packed into 32 bits as follows: a 5-bit biased exponent
            and 6-bit mantissa for x component, a 5-bit biased exponent and
            6-bit mantissa for y component, a 5-bit biased exponent and a 5-bit
            mantissa for z. The z component is stored in the most significant bits
            and the x component in the least significant bits. No sign bits so
            all partial-precision numbers are positive.
            (Z10Y11X11): [32] ZZZZZzzz zzzYYYYY yyyyyyXX XXXxxxxx [0]
            </summary>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR11G11B10" /> structure.
            </summary>
            <param name="x">The floating point value that should be stored in R component (11 bits format).</param>
            <param name="y">The floating point value that should be stored in G component (11 bits format).</param>
            <param name="z">The floating point value that should be stored in B component (10 bits format).</param>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.#ctor(FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR11G11B10" /> structure.
            </summary>
            <param name="value">The floating point value that should be stored in compressed format.</param>
        </member>
        <member name="P:FlaxEngine.FloatR11G11B10.RawValue">
            <summary>
            Gets or sets the raw 32 bit value used to back this vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.op_Explicit(FlaxEngine.Vector3)~FlaxEngine.FloatR11G11B10">
            <summary>
            Performs an explicit conversion from <see cref = "T:FlaxEngine.Vector4" /> to <see cref = "T:FlaxEngine.FloatR11G11B10" />.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.op_Implicit(FlaxEngine.FloatR11G11B10)~FlaxEngine.Vector3">
            <summary>
            Performs an implicit conversion from <see cref = "T:FlaxEngine.FloatR11G11B10" /> to <see cref = "T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.op_Equality(FlaxEngine.FloatR11G11B10,FlaxEngine.FloatR11G11B10)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.op_Inequality(FlaxEngine.FloatR11G11B10,FlaxEngine.FloatR11G11B10)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.Equals(FlaxEngine.FloatR11G11B10@,FlaxEngine.FloatR11G11B10@)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
              <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
              if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.Equals(FlaxEngine.FloatR11G11B10)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.ToVector3">
            <summary>
            Unpacks vector to Vector3.
            </summary>
            <returns>Vector3 value</returns>
        </member>
        <member name="T:FlaxEngine.Half">
            <summary>
            A half precision (16 bit) floating point value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.PrecisionDigits">
            <summary>
              Number of decimal digits of precision.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MantissaBits">
            <summary>
              Number of bits in the mantissa.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MaximumDecimalExponent">
            <summary>
              Maximum decimal exponent.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MaximumBinaryExponent">
            <summary>
              Maximum binary exponent.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MinimumDecimalExponent">
            <summary>
              Minimum decimal exponent.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MinimumBinaryExponent">
            <summary>
              Minimum binary exponent.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.ExponentRadix">
            <summary>
              Exponent radix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.AdditionRounding">
            <summary>
              Additional rounding.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.Epsilon">
            <summary>
              Smallest such that 1.0 + epsilon != 1.0
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MaxValue">
            <summary>
              Maximum value of the number.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MinValue">
            <summary>
              Minimum value of the number.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Half"/> whose value is 0.0f.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.One">
            <summary>
            A <see cref="T:FlaxEngine.Half"/> whose value is 1.0f.
            </summary>
        </member>
        <member name="M:FlaxEngine.Half.#ctor(System.Single)">
            <summary>
              Initializes a new instance of the <see cref = "T:FlaxEngine.Half" /> structure.
            </summary>
            <param name = "value">The floating point value that should be stored in 16 bit format.</param>
        </member>
        <member name="P:FlaxEngine.Half.RawValue">
            <summary>
              Gets or sets the raw 16 bit value used to back this half-float.
            </summary>
        </member>
        <member name="M:FlaxEngine.Half.ConvertToFloat(FlaxEngine.Half[])">
            <summary>
              Converts an array of half precision values into full precision values.
            </summary>
            <param name = "values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:FlaxEngine.Half.ConvertToHalf(System.Single[])">
            <summary>
              Converts an array of full precision values into half precision values.
            </summary>
            <param name = "values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:FlaxEngine.Half.op_Explicit(System.Single)~FlaxEngine.Half">
            <summary>
              Performs an explicit conversion from <see cref = "T:System.Single" /> to <see cref = "T:FlaxEngine.Half" />.
            </summary>
            <param name = "value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.Half.op_Implicit(FlaxEngine.Half)~System.Single">
            <summary>
              Performs an implicit conversion from <see cref = "T:FlaxEngine.Half" /> to <see cref = "T:System.Single" />.
            </summary>
            <param name = "value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.Half.op_Equality(FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
              Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns>
              <c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half.op_Inequality(FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
              Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns>
              <c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half.ToString">
            <summary>
              Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Half.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.Half.Equals(FlaxEngine.Half@,FlaxEngine.Half@)">
            <summary>
              Determines whether the specified object instances are considered equal.
            </summary>
            <param name = "value1" />
            <param name = "value2" />
            <returns>
              <c>true</c> if <paramref name = "value1" /> is the same instance as <paramref name = "value2" /> or 
              if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half.Equals(FlaxEngine.Half)">
            <summary>
              Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name = "other">Object to make the comparison with.</param>
            <returns>
              <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half.Equals(System.Object)">
            <summary>
              Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name = "obj">Object to make the comparison with.</param>
            <returns>
              <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:FlaxEngine.Half2">
            <summary>
            Defines a two component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half2.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half2.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="M:FlaxEngine.Half2.#ctor(FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half2" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:FlaxEngine.Half2.#ctor(FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half2" /> structure.
            </summary>
            <param name="value">The value to set for both the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Half2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half2" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:FlaxEngine.Half2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half2" /> structure.
            </summary>
            <param name="value">The value to set for both the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Half2.op_Equality(FlaxEngine.Half2,FlaxEngine.Half2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.op_Inequality(FlaxEngine.Half2,FlaxEngine.Half2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.Equals(FlaxEngine.Half2@,FlaxEngine.Half2@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.Equals(FlaxEngine.Half2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.op_Explicit(FlaxEngine.Vector2)~FlaxEngine.Half2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.op_Explicit(FlaxEngine.Half2)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:FlaxEngine.Half3">
            <summary>
            Defines a three component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half3.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half3.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half3.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="M:FlaxEngine.Half3.#ctor(FlaxEngine.Half,FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half3" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:FlaxEngine.Half3.#ctor(FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half3" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, and Z components.</param>
        </member>
        <member name="M:FlaxEngine.Half3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half3" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:FlaxEngine.Half3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half3" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, and Z components.</param>
        </member>
        <member name="M:FlaxEngine.Half3.op_Equality(FlaxEngine.Half3,FlaxEngine.Half3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.op_Inequality(FlaxEngine.Half3,FlaxEngine.Half3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.Equals(FlaxEngine.Half3@,FlaxEngine.Half3@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.Equals(FlaxEngine.Half3)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.op_Explicit(FlaxEngine.Vector3)~FlaxEngine.Half3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.op_Explicit(FlaxEngine.Half3)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:FlaxEngine.Half4">
            <summary>
            Defines a four component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half4.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half4.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half4.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half4.W">
            <summary>
            Gets or sets the W component of the vector.
            </summary>
            <value>The W component of the vector.</value>
        </member>
        <member name="M:FlaxEngine.Half4.#ctor(FlaxEngine.Half,FlaxEngine.Half,FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half4" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:FlaxEngine.Half4.#ctor(FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half4" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, Z, and W components.</param>
        </member>
        <member name="M:FlaxEngine.Half4.op_Equality(FlaxEngine.Half4,FlaxEngine.Half4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.op_Inequality(FlaxEngine.Half4,FlaxEngine.Half4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.Equals(FlaxEngine.Half4@,FlaxEngine.Half4@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.Equals(FlaxEngine.Half4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.op_Explicit(FlaxEngine.Vector4)~FlaxEngine.Half4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector4"/> to <see cref="T:FlaxEngine.Half4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.op_Explicit(FlaxEngine.Half4)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector4"/> to <see cref="T:FlaxEngine.Half4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:FlaxEngine.HalfUtils">
            <summary>
            Helper class to perform Half/Float conversion.
            Code extract from paper : www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf by Jeroen van der Zijp
            </summary>
        </member>
        <member name="M:FlaxEngine.HalfUtils.Unpack(System.UInt16)">
            <summary>
            Unpacks the specified half value.
            </summary>
            <param name="h">The half value.</param>
            <returns>The float value</returns>
        </member>
        <member name="M:FlaxEngine.HalfUtils.Pack(System.Single)">
            <summary>
            Packs the specified float value.
            </summary>
            <param name="f">The float value.</param>
            <returns>The half value</returns>
        </member>
        <member name="T:FlaxEngine.Int2">
            <summary>
            Represents a two dimensional mathematical vector (signed integers).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Int2" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Int2" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Int2" /> (1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Int2" /> (0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.One">
            <summary>
            A <see cref="T:FlaxEngine.Int2" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Int2" /> with all components equal to <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Int2" /> with all components equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(FlaxEngine.Int3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(FlaxEngine.Int4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X and Y components of the vector. This must be an array with two
            elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than two
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Int2.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0, 1].
            </exception>
        </member>
        <member name="P:FlaxEngine.Int2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Int2.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Int2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Int2.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Add(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Add(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Add(FlaxEngine.Int2@,System.Int32@,FlaxEngine.Int2@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Add(FlaxEngine.Int2,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(FlaxEngine.Int2@,System.Int32@,FlaxEngine.Int2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(FlaxEngine.Int2,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(System.Int32@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(System.Int32,FlaxEngine.Int2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2@,System.Int32,FlaxEngine.Int2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Divide(FlaxEngine.Int2@,System.Int32,FlaxEngine.Int2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Divide(FlaxEngine.Int2,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Divide(System.Int32,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Divide(System.Int32,FlaxEngine.Int2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Negate(FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Negate(FlaxEngine.Int2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Clamp(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Clamp(FlaxEngine.Int2,FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Distance(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:FlaxEngine.Int2.DistanceSquared(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Int32@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.Distance(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Int2.DistanceSquared(FlaxEngine.Int2,FlaxEngine.Int2)" /> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.DistanceSquared(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Int32@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.DistanceSquared(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.Dot(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Int32@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Dot(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Max(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int2.Max(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Min(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int2.Min(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Abs(FlaxEngine.Int2)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Addition(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Multiply(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_UnaryPlus(FlaxEngine.Int2)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Subtraction(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_UnaryNegation(FlaxEngine.Int2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Multiply(System.Int32,FlaxEngine.Int2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Multiply(FlaxEngine.Int2,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Division(FlaxEngine.Int2,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Division(System.Int32,FlaxEngine.Int2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Division(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Modulus(FlaxEngine.Int2,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Modulus(System.Single,FlaxEngine.Int2)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Modulus(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Addition(FlaxEngine.Int2,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Addition(System.Int32,FlaxEngine.Int2)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Subtraction(FlaxEngine.Int2,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Subtraction(System.Int32,FlaxEngine.Int2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Equality(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Inequality(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Int3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Int3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Int4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Int4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.Equals(FlaxEngine.Int2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int2" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int2" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int2" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.Equals(FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int2"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.Int2.Equals(FlaxEngine.Int2)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int2" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int2" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int2" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Int3">
            <summary>
            Represents a three dimensional mathematical vector (signed integers).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Int3" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Int3" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Int3" /> (1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Int3" /> (0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.UnitZ">
            <summary>
            The Z unit <see cref="T:FlaxEngine.Int3" /> (0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.One">
            <summary>
            A <see cref="T:FlaxEngine.Int3" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Int3" /> with all components equal to <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Int3" /> with all components equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(FlaxEngine.Int2,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(FlaxEngine.Int4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y and Z components.</param>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X, Y, and Z components of the vector. This must be an array with three
            elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than three elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Int3.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for
            the Z component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0, 2].
            </exception>
        </member>
        <member name="P:FlaxEngine.Int3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Int3.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Int3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Int3.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Add(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Add(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Add(FlaxEngine.Int3@,System.Int32@,FlaxEngine.Int3@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Add(FlaxEngine.Int3,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(FlaxEngine.Int3@,System.Int32@,FlaxEngine.Int3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(FlaxEngine.Int3,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(System.Int32@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(System.Int32,FlaxEngine.Int3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3@,System.Int32,FlaxEngine.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to Multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Divides a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector (per component).</param>
            <param name="result">When the method completes, contains the divided vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Divies a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector (per component).</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(FlaxEngine.Int3@,System.Int32,FlaxEngine.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(FlaxEngine.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(System.Int32,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(System.Int32,FlaxEngine.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Negate(FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Negate(FlaxEngine.Int3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Clamp(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Clamp(FlaxEngine.Int3,FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Distance(FlaxEngine.Int3@,FlaxEngine.Int3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:FlaxEngine.Int3.DistanceSquared(FlaxEngine.Int3@,FlaxEngine.Int3@,System.Int32@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.Distance(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Int3.DistanceSquared(FlaxEngine.Int3,FlaxEngine.Int3)" /> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.DistanceSquared(FlaxEngine.Int3@,FlaxEngine.Int3@,System.Int32@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.DistanceSquared(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.Distance2D(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors in the XZ plane.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Distance2D(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the distance between two vectors in the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors in the XZ plane.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Distance2DSquared(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Int32@)">
            <summary>
            Calculates the squared distance between two vectors in the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors in the XZ plane.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Distance2DSquared(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the squared distance between two vectors in the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors in the XZ plane.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Max(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int3.Max(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Min(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int3.Min(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Abs(FlaxEngine.Int3)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Addition(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Multiply(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_UnaryPlus(FlaxEngine.Int3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Subtraction(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_UnaryNegation(FlaxEngine.Int3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Multiply(System.Int32,FlaxEngine.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Multiply(FlaxEngine.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Division(FlaxEngine.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Division(System.Int32,FlaxEngine.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Division(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Modulus(FlaxEngine.Int3,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Modulus(System.Single,FlaxEngine.Int3)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Modulus(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Addition(FlaxEngine.Int3,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Addition(System.Int32,FlaxEngine.Int3)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Subtraction(FlaxEngine.Int3,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with added scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Subtraction(System.Int32,FlaxEngine.Int3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Equality(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Inequality(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Int2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Int2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Int4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Int4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.Equals(FlaxEngine.Int3@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int3" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.Equals(FlaxEngine.Int3)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int3" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Int4">
            <summary>
            Represents a four dimensional mathematical vector (signed integers).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Int4" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Int4" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Int4" /> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Int4" /> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.UnitZ">
            <summary>
            The Z unit <see cref="T:FlaxEngine.Int4" /> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.UnitW">
            <summary>
            The W unit <see cref="T:FlaxEngine.Int4" /> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.One">
            <summary>
            A <see cref="T:FlaxEngine.Int4" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Int4" /> with all components equal to <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Int4" /> with all components equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(FlaxEngine.Int3,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(FlaxEngine.Int2,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than four elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Int4.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.IsOne">
            <summary>
            Gets a value indicting whether this vector is one
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z
            component, and 3 for the W component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            3].
            </exception>
        </member>
        <member name="M:FlaxEngine.Int4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Add(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Add(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Add(FlaxEngine.Int4@,System.Int32@,FlaxEngine.Int4@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Add(FlaxEngine.Int4,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(FlaxEngine.Int4@,System.Int32@,FlaxEngine.Int4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(FlaxEngine.Int4,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(System.Int32@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(System.Int32,FlaxEngine.Int4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4@,System.Int32,FlaxEngine.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Divide(FlaxEngine.Int4@,System.Int32,FlaxEngine.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Divide(FlaxEngine.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Divide(System.Int32,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Divide(System.Int32,FlaxEngine.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Negate(FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Negate(FlaxEngine.Int4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Clamp(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Clamp(FlaxEngine.Int4,FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Max(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int4.Max(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Min(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int4.Min(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Abs(FlaxEngine.Int4)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Addition(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Multiply(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_UnaryPlus(FlaxEngine.Int4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Subtraction(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_UnaryNegation(FlaxEngine.Int4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Multiply(System.Int32,FlaxEngine.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Multiply(FlaxEngine.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Division(FlaxEngine.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Division(System.Int32,FlaxEngine.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Division(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Modulus(FlaxEngine.Int4,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Modulus(System.Single,FlaxEngine.Int4)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Modulus(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Addition(FlaxEngine.Int4,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Addition(System.Int32,FlaxEngine.Int4)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Subtraction(FlaxEngine.Int4,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Subtraction(System.Int32,FlaxEngine.Int4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Equality(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Inequality(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Int2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Int2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Int3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Int3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.Equals(FlaxEngine.Int4@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int4" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.Equals(FlaxEngine.Int4)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int4" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Mathf">
            <summary>
            A collection of common math functions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.Epsilon">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.Pi">
            <summary>
            A value specifying the approximation of π which is 180 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.TwoPi">
            <summary>
            A value specifying the approximation of 2π which is 360 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.PiOverTwo">
            <summary>
            A value specifying the approximation of π/2 which is 90 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.PiOverFour">
            <summary>
            A value specifying the approximation of π/4 which is 45 degrees.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.Abs(System.Single)">
            <summary>
            Returns the absolute value of f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Abs(System.Int32)">
            <summary>
            Returns the absolute value of value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Acos(System.Single)">
            <summary>
            Returns the arc-cosine of f - the angle in radians whose cosine is f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Approximately(System.Single,System.Single)">
            <summary>
            Compares two floating point values if they are similar.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Asin(System.Single)">
            <summary>
            Returns the arc-sine of f - the angle in radians whose sine is f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Atan(System.Single)">
            <summary>
            Returns the arc-tangent of f - the angle in radians whose tangent is f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Atan2(System.Single,System.Single)">
            <summary>
            Returns the angle in radians whose Tan is y/x.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Ceil(System.Single)">
            <summary>
            Returns the smallest integer greater to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.CeilToInt(System.Single)">
            <summary>
            Returns the smallest integer greater to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Saturate(System.Single)">
            <summary>
            Clamps value between 0 and 1 and returns value.
            </summary>
            <param name="value">Value to clamp</param>
            <returns>Result value</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Cos(System.Single)">
            <summary>
            Returns the cosine of angle f in radians.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.DeltaAngle(System.Single,System.Single)">
            <summary>
            Calculates the shortest difference between two given angles given in degrees.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Exp(System.Single)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="power"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Floor(System.Single)">
            <summary>
            Returns the largest integer smaller to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.FloorToInt(System.Single)">
            <summary>
            Returns the largest integer smaller to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Remap(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Remaps the specified value from the specified range to another.
            </summary>
            <param name="value">The value to remap.</param>
            <param name="fromMin">The source range minimum.</param>
            <param name="fromMax">The source range maximum.</param>
            <param name="toMin">The destination range minimum.</param>
            <param name="toMax">The destination range maximum.</param>
            <returns>The remapped value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the linear parameter t that produces the interpolation value within the range [a, b].
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="value"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.LerpAngle(System.Single,System.Single,System.Single)">
            <summary>
            Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Log(System.Single,System.Single)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="f"></param>
            <param name="p"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Log(System.Single)">
            <summary>
            Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Log10(System.Single)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Single,System.Single)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Double,System.Double)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Int64,System.Int64)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.UInt64,System.UInt64)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Single[])">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Int32,System.Int32)">
            <summary>
            Returns the largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Int32[])">
            <summary>
            Returns the largest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Single,System.Single)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Double,System.Double)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Int64,System.Int64)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.UInt64,System.UInt64)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Single[])">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Int32,System.Int32)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Int32[])">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>
            Moves a value current towards target.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The value to move towards.</param>
            <param name="maxDelta">The maximum change that should be applied to the value.</param>
        </member>
        <member name="M:FlaxEngine.Mathf.MoveTowardsAngle(System.Single,System.Single,System.Single)">
            <summary>
            Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDelta"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.PingPong(System.Single,System.Single)">
            <summary>
            PingPongs the value t, so that it is never larger than length and never smaller than 0.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Pow(System.Single,System.Single)">
            <summary>
            Returns f raised to power p.
            </summary>
            <param name="f"></param>
            <param name="p"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Repeat(System.Single,System.Single)">
            <summary>
            Loops the value t, so that it is never larger than length and never smaller than 0.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Round(System.Single)">
            <summary>
            Returns f rounded to the nearest integer.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.RoundToInt(System.Single)">
            <summary>
            Returns f rounded to the nearest integer.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Sign(System.Single)">
            <summary>
            Returns the sign of f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Sin(System.Single)">
            <summary>
            Returns the sine of angle f in radians.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single)">
            <summary>
            Gradually changes a value towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The target value.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single)">
            <summary>
            Gradually changes a value towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The target value.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            Gradually changes a value towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The target value.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="deltaTime">The delta time (in seconds) since last update.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single)">
            <summary>
            Gradually changes an angle towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current angle.</param>
            <param name="target">The target angle.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single)">
            <summary>
            Gradually changes an angle towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current angle.</param>
            <param name="target">The target angle.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            Gradually changes an angle towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current angle.</param>
            <param name="target">The target angle.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="deltaTime">The delta time (in seconds) since last update.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between min and max with smoothing at the limits.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="t"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.CubicInterp(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a cubic interpolation.
            </summary>
            <param name="p0">The first point.</param>
            <param name="t0">The tangent direction at first point.</param>
            <param name="p1">The second point.</param>
            <param name="t1">The tangent direction at second point.</param>
            <param name="alpha">The distance along the spline.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpEaseIn(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Interpolate between A and B, applying an ease in function. Exponent controls the degree of the curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpEaseOut(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Interpolate between A and B, applying an ease out function. Exponent controls the degree of the curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpEaseInOut(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Interpolate between A and B, applying an ease in/out function. Exponent controls the degree of the curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpSinIn(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a sinusoidal in function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpSinOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a sinusoidal out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpSinInOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a sinusoidal in/out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpExpoIn(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying an exponential in function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpExpoOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying an exponential out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpExpoInOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying an exponential in/out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpCircularIn(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a circular in function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpCircularOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a circular out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpCircularInOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a circular in/out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.Map(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Maps the specified value from the given range into another.
            </summary>
            <param name="value">The value to map from range [fromMin; fromMax].</param>
            <param name="fromMin">The source range minimum value.</param>
            <param name="fromMax">The source range maximum value.</param>
            <param name="toMin">The destination range minimum value.</param>
            <param name="toMax">The destination range maximum value.</param>
            <returns>The mapped value in range [toMin; toMax].</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsPowerOfTwo(System.Int32)">
            <summary>
            Determines whether the specified x is pow of 2.
            </summary>
            <param name="x">The x.</param>
            <returns><c>true</c> if the specified x is pow2; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.NextPowerOfTwo(System.Int32)">
            <summary>
            Get the next power of two for a size.
            </summary>
            <param name="size">The size.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.NextPowerOfTwo(System.Single)">
            <summary>
            Get the next power of two for a size.
            </summary>
            <param name="size">The size.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SRgbToLinear(System.Single)">
            <summary>
            Converts a float value from sRGB to linear.
            </summary>
            <param name="sRgbValue">The sRGB value.</param>
            <returns>A linear value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.LinearToSRgb(System.Single)">
            <summary>
            Converts a float value from linear to sRGB.
            </summary>
            <param name="linearValue">The linear value.</param>
            <returns>The encoded sRGB value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Sqrt(System.Single)">
            <summary>
            Returns square root of f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Square(System.Int32)">
            <summary>
            Returns square of the given value.
            </summary>
            <param name="f">The value.</param>
            <returns>The value * value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Square(System.Double)">
            <summary>
            Returns square of the given value.
            </summary>
            <param name="f">The value.</param>
            <returns>The value * value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Square(System.Single)">
            <summary>
            Returns square of the given value.
            </summary>
            <param name="f">The value.</param>
            <returns>The value * value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Tan(System.Single)">
            <summary>
            Returns the tangent of angle f in radians.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.NearEqual(System.Single,System.Single)">
            <summary>
            Checks if a and b are almost equals, taking into account the magnitude of floating point numbers (unlike
            <see cref="M:FlaxEngine.Mathf.WithinEpsilon(System.Single,System.Single,System.Single)" /> method). See Remarks.
            See remarks.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <returns><c>true</c> if a almost equal to b, <c>false</c> otherwise</returns>
            <remarks>
            The code is using the technique described by Bruce Dawson in
            <a href="http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">
              Comparing
              Floating point numbers 2012 edition
            </a>
            .
            </remarks>
        </member>
        <member name="M:FlaxEngine.Mathf.NearEqual(System.Double,System.Double)">
            <summary>
            Checks if a and b are almost equals, taking into account the magnitude of floating point numbers .
            See remarks.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <returns><c>true</c> if a almost equal to b, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsZero(System.Single)">
            <summary>
            Determines whether the specified value is close to zero (0.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to zero (0.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsOne(System.Single)">
            <summary>
            Determines whether the specified value is close to one (1.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to one (1.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.WithinEpsilon(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a - b are almost equals within a float epsilon.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <param name="epsilon">Epsilon value</param>
            <returns><c>true</c> if a almost equal to b within a float epsilon, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsInRange(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the specified value is in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
              <c>true</c> if the specified value is in a given range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsNotInRange(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the specified value is NOT in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
              <c>true</c> if the specified value is NOT in a given range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the specified value is in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
              <c>true</c> if the specified value is in a given range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsNotInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the specified value is NOT in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
              <c>true</c> if the specified value is NOT in a given range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:FlaxEngine.Mathf.RevolutionsToDegrees">
            <summary>
            Converts revolutions to degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RevolutionsToRadians">
            <summary>
            Converts revolutions to radians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RevolutionsToGradians">
            <summary>
            Converts revolutions to gradians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.DegreesToRevolutions">
            <summary>
            Converts degrees to revolutions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.DegreesToRadians">
            <summary>
            Converts degrees to radians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RadiansToRevolutions">
            <summary>
            Converts radians to revolutions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RadiansToGradians">
            <summary>
            Converts radians to gradians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.GradiansToRevolutions">
            <summary>
            Converts gradians to revolutions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.GradiansToDegrees">
            <summary>
            Converts gradians to degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.GradiansToRadians">
            <summary>
            Converts gradians to radians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RadiansToDegrees">
            <summary>
            Converts radians to degrees.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.UnwindRadians(System.Single)">
            <summary>
            Given a heading which may be outside the +/- PI range, 'unwind' it back into that range.
            </summary>
            <param name="angle">Angle in radians to unwind.</param>
            <returns>Valid angle in radians.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.UnwindDegrees(System.Single)">
            <summary>
            Utility to ensure angle is between +/- 180 degrees by unwinding
            </summary>
            <param name="angle">Angle in degrees to unwind.</param>
            <returns>Valid angle in degrees.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Lerp(System.Int32,System.Int32,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Lerp(System.Byte,System.Byte,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothStep(System.Single)">
            <summary>
            Performs smooth (cubic Hermite) interpolation between 0 and 1.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Smoothstep
            </remarks>
            <param name="amount">Value between 0 and 1 indicating interpolation amount.</param>
        </member>
        <member name="M:FlaxEngine.Mathf.SmootherStep(System.Single)">
            <summary>
            Performs a smooth(er) interpolation between 0 and 1 with 1st and 2nd order derivatives of zero at endpoints.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Smoothstep
            </remarks>
            <param name="amount">Value between 0 and 1 indicating interpolation amount.</param>
        </member>
        <member name="M:FlaxEngine.Mathf.Mod(System.Single,System.Single)">
            <summary>
            Calculates the modulo of the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="modulo">The modulo.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Mod2PI(System.Single)">
            <summary>
            Calculates the modulo 2*PI of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Wrap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps the specified value into a range [min, max]
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
            <exception cref="T:System.ArgumentException">Is thrown when <paramref name="min" /> is greater than <paramref name="max" />.</exception>
        </member>
        <member name="M:FlaxEngine.Mathf.Wrap(System.Single,System.Single,System.Single)">
            <summary>
            Wraps the specified value into a range [min, max]
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
            <exception cref="T:System.ArgumentException">Is thrown when <paramref name="min" /> is greater than <paramref name="max" />.</exception>
        </member>
        <member name="M:FlaxEngine.Mathf.Gauss(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gauss function.
            http://en.wikipedia.org/wiki/Gaussian_function#Two-dimensional_Gaussian_function
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="centerX">Center X.</param>
            <param name="centerY">Center Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of Gaussian function.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Gauss(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gauss function.
            http://en.wikipedia.org/wiki/Gaussian_function#Two-dimensional_Gaussian_function
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="centerX">Center X.</param>
            <param name="centerY">Center Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of Gaussian function.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpolateAlphaBlend(System.Single,FlaxEngine.AlphaBlendMode)">
            <summary>
            Converts the input alpha value from a linear 0-1 value into the output alpha described by blend mode.
            </summary>
            <param name="alpha">The alpha (normalized to 0-1).</param>
            <param name="mode">The mode.</param>
            <returns>The output alpha (normalized to 0-1).</returns>
        </member>
        <member name="T:FlaxEngine.Matrix">
            <summary>
            Represents a 4x4 mathematical matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Matrix" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Matrix" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.Identity">
            <summary>
            The identity <see cref="T:FlaxEngine.Matrix" />.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M11">
            <summary>
            Value at row 1 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M12">
            <summary>
            Value at row 1 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M13">
            <summary>
            Value at row 1 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M14">
            <summary>
            Value at row 1 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M21">
            <summary>
            Value at row 2 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M22">
            <summary>
            Value at row 2 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M23">
            <summary>
            Value at row 2 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M24">
            <summary>
            Value at row 2 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M31">
            <summary>
            Value at row 3 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M32">
            <summary>
            Value at row 3 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M33">
            <summary>
            Value at row 3 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M34">
            <summary>
            Value at row 3 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M41">
            <summary>
            Value at row 4 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M42">
            <summary>
            Value at row 4 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M43">
            <summary>
            Value at row 4 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M44">
            <summary>
            Value at row 4 column 4 of the matrix.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Up">
            <summary>
            Gets or sets the up <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is M21, M22, and M23.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Down">
            <summary>
            Gets or sets the down <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is -M21, -M22, and -M23.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Right">
            <summary>
            Gets or sets the right <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is M11, M12, and M13.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Left">
            <summary>
            Gets or sets the left <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is -M11, -M12, and -M13.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Forward">
            <summary>
            Gets or sets the forward <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is -M31, -M32, and -M33.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Backward">
            <summary>
            Gets or sets the backward <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is M31, M32, and M33.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix" /> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the matrix.</param>
            <param name="M12">The value to assign at row 1 column 2 of the matrix.</param>
            <param name="M13">The value to assign at row 1 column 3 of the matrix.</param>
            <param name="M14">The value to assign at row 1 column 4 of the matrix.</param>
            <param name="M21">The value to assign at row 2 column 1 of the matrix.</param>
            <param name="M22">The value to assign at row 2 column 2 of the matrix.</param>
            <param name="M23">The value to assign at row 2 column 3 of the matrix.</param>
            <param name="M24">The value to assign at row 2 column 4 of the matrix.</param>
            <param name="M31">The value to assign at row 3 column 1 of the matrix.</param>
            <param name="M32">The value to assign at row 3 column 2 of the matrix.</param>
            <param name="M33">The value to assign at row 3 column 3 of the matrix.</param>
            <param name="M34">The value to assign at row 3 column 4 of the matrix.</param>
            <param name="M41">The value to assign at row 4 column 1 of the matrix.</param>
            <param name="M42">The value to assign at row 4 column 2 of the matrix.</param>
            <param name="M43">The value to assign at row 4 column 3 of the matrix.</param>
            <param name="M44">The value to assign at row 4 column 4 of the matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix" /> struct.
            </summary>
            <param name="values">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than sixteen
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Matrix.Row1">
            <summary>
            Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Row2">
            <summary>
            Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Row3">
            <summary>
            Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Row4">
            <summary>
            Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Column1">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Column2">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Column3">
            <summary>
            Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Column4">
            <summary>
            Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.TranslationVector">
            <summary>
            Gets or sets the translation of the matrix; that is M41, M42, and M43.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.ScaleVector">
            <summary>
            Gets or sets the scale of the matrix; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
            <value>
            <c>true</c> if this instance is an identity matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            15].
            </exception>
        </member>
        <member name="P:FlaxEngine.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="row" /> or
            <paramref name="column" />is out of the range [0, 3].
            </exception>
        </member>
        <member name="M:FlaxEngine.Matrix.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Invert">
            <summary>
            Inverts the matrix.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthogonalize">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <remarks>
            <para>
              Orthogonalization is the process of making all rows orthogonal to each other. This
              means that any given row in the matrix will be orthogonal to any other given row in the
              matrix.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthonormalize">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <remarks>
            <para>
              Orthonormalization is the process of making all rows and columns orthogonal to each
              other and making all rows and columns of unit length. This means that any given row will
              be orthogonal to any other given row and any given column will be orthogonal to any other
              given column. Any given row will not be orthogonal to any given column. Every row and every
              column will be of unit length.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.DecomposeQR(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Decomposes a matrix into an orthonormalized matrix Q and a right triangular matrix R.
            </summary>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
            <param name="R">When the method completes, contains the right triangular matrix of the decomposition.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.DecomposeLQ(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Decomposes a matrix into a lower triangular matrix L and an orthonormalized matrix Q.
            </summary>
            <param name="L">When the method completes, contains the lower triangular matrix of the decomposition.</param>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Decompose(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.DecomposeUniformScale(System.Single@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Decomposes a uniform scale matrix into a scale, rotation, and translation.
            A uniform scale matrix has the same scale in every axis.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose only an SRT transformation matrix that has the same scale in every axis.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the matrix.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns in the matrix.
            </summary>
            <param name="firstColumn">The first column to exchange. This is an index of the column starting at zero.</param>
            <param name="secondColumn">The second column to exchange. This is an index of the column starting at zero.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.ToArray">
            <summary>
            Creates an array containing the elements of the matrix.
            </summary>
            <returns>A sixteen-element array containing the components of the matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Add(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Add(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Subtract(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Subtract(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Multiply(FlaxEngine.Matrix@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Multiply(FlaxEngine.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Multiply(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Multiply(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Divide(FlaxEngine.Matrix@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Divide(FlaxEngine.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Divide(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Divide(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Exponent(FlaxEngine.Matrix@,System.Int32,FlaxEngine.Matrix@)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <param name="result">When the method completes, contains the exponential matrix.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent" /> is negative.</exception>
        </member>
        <member name="M:FlaxEngine.Matrix.Exponent(FlaxEngine.Matrix,System.Int32)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <returns>The exponential matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent" /> is negative.</exception>
        </member>
        <member name="M:FlaxEngine.Matrix.Negate(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Negate(FlaxEngine.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Lerp(FlaxEngine.Matrix@,FlaxEngine.Matrix@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matrices.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Lerp(FlaxEngine.Matrix,FlaxEngine.Matrix,System.Single)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.SmoothStep(FlaxEngine.Matrix@,FlaxEngine.Matrix@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.SmoothStep(FlaxEngine.Matrix,FlaxEngine.Matrix,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Transpose(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.TransposeByRef(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Transpose(FlaxEngine.Matrix)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <returns>The transpose of the specified matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Invert(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Invert(FlaxEngine.Matrix)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <returns>The inverse of the specified matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthogonalize(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized matrix.</param>
            <remarks>
            <para>
              Orthogonalization is the process of making all rows orthogonal to each other. This
              means that any given row in the matrix will be orthogonal to any other given row in the
              matrix.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthogonalize(FlaxEngine.Matrix)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <returns>The orthogonalized matrix.</returns>
            <remarks>
            <para>
              Orthogonalization is the process of making all rows orthogonal to each other. This
              means that any given row in the matrix will be orthogonal to any other given row in the
              matrix.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthonormalize(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized matrix.</param>
            <remarks>
            <para>
              Orthonormalization is the process of making all rows and columns orthogonal to each
              other and making all rows and columns of unit length. This means that any given row will
              be orthogonal to any other given row and any given column will be orthogonal to any other
              given column. Any given row will not be orthogonal to any given column. Every row and every
              column will be of unit length.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthonormalize(FlaxEngine.Matrix)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <returns>The orthonormalized matrix.</returns>
            <remarks>
            <para>
              Orthonormalization is the process of making all rows and columns orthogonal to each
              other and making all rows and columns of unit length. This means that any given row will
              be orthogonal to any other given row and any given column will be orthogonal to any other
              given column. Any given row will not be orthogonal to any given column. Every row and every
              column will be of unit length.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.UpperTriangularForm(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Brings the matrix into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular matrix.</param>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.UpperTriangularForm(FlaxEngine.Matrix)">
            <summary>
            Brings the matrix into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <returns>The upper triangular matrix.</returns>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.LowerTriangularForm(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Brings the matrix into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular matrix.</param>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.LowerTriangularForm(FlaxEngine.Matrix)">
            <summary>
            Brings the matrix into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <returns>The lower triangular matrix.</returns>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.RowEchelonForm(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Brings the matrix into row echelon form using elementary row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RowEchelonForm(FlaxEngine.Matrix)">
            <summary>
            Brings the matrix into row echelon form using elementary row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ReducedRowEchelonForm(FlaxEngine.Matrix@,FlaxEngine.Vector4@,FlaxEngine.Matrix@,FlaxEngine.Vector4@)">
            <summary>
            Brings the matrix into reduced row echelon form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into reduced row echelon form.</param>
            <param name="augment">The fifth column of the matrix.</param>
            <param name="result">When the method completes, contains the resultant matrix after the operation.</param>
            <param name="augmentResult">When the method completes, contains the resultant fifth column of the matrix.</param>
            <remarks>
            <para>
              The fifth column is often called the augmented part of the matrix. This is because the fifth
              column is really just an extension of the matrix so that there is a place to put all of the
              non-zero components after the operation is complete.
            </para>
            <para>
              Often times the resultant matrix will the identity matrix or a matrix similar to the identity
              matrix. Sometimes, however, that is not possible and numbers other than zero and one may appear.
            </para>
            <para>
              This method can be used to solve systems of linear equations. Upon completion of this method,
              the <paramref name="augmentResult" /> will contain the solution for the system. It is up to the user
              to analyze both the input and the result to determine if a solution really exists.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Billboard(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Billboard(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.LookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.LookAt(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Ortho(System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Ortho(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.OrthoOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.OrthoOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Perspective(System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.PerspectiveFov(System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.PerspectiveFov(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.PerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.PerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(FlaxEngine.Vector3)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(System.Single)">
            <summary>
            Creates a matrix that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationX(System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationX(System.Single)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationY(System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationY(System.Single)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationZ(System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationZ(System.Single)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationAxis(FlaxEngine.Vector3@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationAxis(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationQuaternion(FlaxEngine.Quaternion@,FlaxEngine.Matrix@)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <param name="result">The created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationQuaternion(FlaxEngine.Quaternion)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Translation(FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Translation(FlaxEngine.Vector3)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Translation(System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Skew(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a skew/shear matrix by means of a translation vector, a rotation vector, and a rotation angle.
            shearing is performed in the direction of translation vector, where translation vector and rotation vector define the
            shearing plane.
            The effect is such that the skewed rotation vector has the specified angle with rotation itself.
            </summary>
            <param name="angle">The rotation angle.</param>
            <param name="rotationVec">The rotation vector</param>
            <param name="transVec">The translation vector</param>
            <param name="matrix">Contains the created skew/shear matrix. </param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation(System.Single,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation(System.Single,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation(System.Single,FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation(System.Single,FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation2D(System.Single,System.Single,FlaxEngine.Vector2@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation2D(System.Single,System.Single,FlaxEngine.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation2D(System.Single,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation2D(System.Single,FlaxEngine.Vector2,System.Single,FlaxEngine.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation(FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Creates a matrix that contains both the X, Y and Z rotation, as well as scaling and translation.
            </summary>
            <param name="translation">The translation.</param>
            <param name="rotation">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="scaling">The scaling.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that contains both the X, Y and Z rotation, as well as scaling and translation.
            </summary>
            <param name="translation">The translation.</param>
            <param name="rotation">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="scaling">The scaling.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation(FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation2D(FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation2D(FlaxEngine.Vector2,System.Single,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single,FlaxEngine.Vector2)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.CreateWorld(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates the world matrix from the specified parameters
            </summary>
            <param name="position">The position of the object. This value is used in translation operations.</param>
            <param name="forward">The forward direction of the object.</param>
            <param name="up">The upward direction of the object; usually [0, 1, 0].</param>
            <returns>The created world matrix of given transformation world</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.CreateWorld(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates the world matrix from the specified parameters
            </summary>
            <param name="position">The position of the object. This value is used in translation operations.</param>
            <param name="forward">The forward direction of the object.</param>
            <param name="up">The upward direction of the object; usually [0, 1, 0].</param>
            <param name="result">>When the method completes, contains the created world matrix of given transformation world.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.CreateFromAxisAngle(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates a new matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the vector.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.CreateFromAxisAngle(FlaxEngine.Vector3@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a new matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the vector.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Addition(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_UnaryPlus(FlaxEngine.Matrix)">
            <summary>
            Assert a matrix (return it unchanged).
            </summary>
            <param name="value">The matrix to assert (unchanged).</param>
            <returns>The asserted (unchanged) matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Subtraction(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_UnaryNegation(FlaxEngine.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Multiply(System.Single,FlaxEngine.Matrix)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="right">The matrix to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Multiply(FlaxEngine.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Multiply(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Division(FlaxEngine.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Division(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Divides two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Equality(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Inequality(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Equals(FlaxEngine.Matrix@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Equals(FlaxEngine.Matrix)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Matrix2x2">
            <summary>
            Represents a 2x2 Matrix (contains only scale and rotation in 2D).
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Matrix2x2"/> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Matrix2x2"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.Identity">
            <summary>
            The identity <see cref="T:FlaxEngine.Matrix2x2"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.M11">
            <summary>
            Value at row 1 column 1 of the Matrix2x2.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.M12">
            <summary>
            Value at row 1 column 2 of the Matrix2x2.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.M21">
            <summary>
            Value at row 2 column 1 of the Matrix2x2.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.M22">
            <summary>
            Value at row 2 column 2 of the Matrix2x2.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix2x2"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix2x2"/> struct.
            </summary>
            <param name="m11">The value to assign at row 1 column 1 of the Matrix2x2.</param>
            <param name="m12">The value to assign at row 1 column 2 of the Matrix2x2.</param>
            <param name="m21">The value to assign at row 2 column 1 of the Matrix2x2.</param>
            <param name="m22">The value to assign at row 2 column 2 of the Matrix2x2.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix2x2"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the Matrix2x2. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Row1">
            <summary>
            Gets or sets the first row in the Matrix2x2; that is M11, M12
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Row2">
            <summary>
            Gets or sets the second row in the Matrix2x2; that is M21, M22
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Column1">
            <summary>
            Gets or sets the first column in the Matrix2x2; that is M11, M21
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Column2">
            <summary>
            Gets or sets the second column in the Matrix2x2; that is M12, M22
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.ScaleVector">
            <summary>
            Gets or sets the scale of the Matrix2x2; that is M11, M22.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity Matrix2x2.
            </summary>
            <value>
            <c>true</c> if this instance is an identity Matrix2x2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix2x2 component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix2x2 component, depending on the index.</value>
            <param name="row">The row of the Matrix2x2 to access.</param>
            <param name="column">The column of the Matrix2x2 to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 1].</exception>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Determinant">
            <summary>
            Calculates the determinant of the Matrix2x2.
            </summary>
            <returns>The determinant of the Matrix2x2.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.InverseDeterminant">
            <summary>
            Calculates inverse of the determinant of the Matrix2x2.
            </summary>
            <returns>The inverse determinant of the Matrix2x2.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToArray">
            <summary>
            Creates an array containing the elements of the Matrix2x2.
            </summary>
            <returns>A 4-element array containing the components of the Matrix2x2.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Scale(System.Single,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the uniform scale matrix.
            </summary>
            <param name="scale">The scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Scale(System.Single,System.Single,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the scale matrix.
            </summary>
            <param name="scaleX">The scale x.</param>
            <param name="scaleY">The scale y.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Scale(FlaxEngine.Vector2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the scale matrix.
            </summary>
            <param name="scale">The scale vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Shear(FlaxEngine.Vector2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the shear matrix. Represented by:
            [1 Y]
            [X 1]
            </summary>
            <param name="shearAngles">The shear angles.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Rotation(System.Single,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the rotation matrix.
            </summary>
            <param name="rotationRadians">The rotation angle (in radians).</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Transform(FlaxEngine.Vector2@,FlaxEngine.Matrix2x2@,FlaxEngine.Vector2@)">
            <summary>
            Transforms the specified vector by the given matrix.
            </summary>
            <param name="vector">The vector.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Multiply(FlaxEngine.Matrix2x2@,FlaxEngine.Matrix2x2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix2x2 to multiply.</param>
            <param name="right">The second Matrix2x2 to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Invert(FlaxEngine.Matrix2x2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Calculates the inverse of the specified Matrix2x2.
            </summary>
            <param name="value">The Matrix2x2 whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified Matrix2x2.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Equality(FlaxEngine.Matrix2x2,FlaxEngine.Matrix2x2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Inequality(FlaxEngine.Matrix2x2,FlaxEngine.Matrix2x2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Explicit(FlaxEngine.Matrix2x2)~FlaxEngine.Matrix">
            <summary>
            Convert the 2x2 Matrix to a 4x4 Matrix.
            </summary>
            <returns>A 4x4 Matrix with zero translation and M44=1</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Explicit(FlaxEngine.Matrix)~FlaxEngine.Matrix2x2">
            <summary>
            Convert the 4x4 Matrix to a 3x3 Matrix.
            </summary>
            <returns>A 2x2 Matrix</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Explicit(FlaxEngine.Matrix2x2)~FlaxEngine.Matrix3x3">
            <summary>
            Convert the 2x2 Matrix to a 4x4 Matrix.
            </summary>
            <returns>A 3x3 Matrix with zero translation and M44=1</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Explicit(FlaxEngine.Matrix3x3)~FlaxEngine.Matrix2x2">
            <summary>
            Convert the 3x3 Matrix to a 2x2 Matrix.
            </summary>
            <returns>A 2x2 Matrix</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Equals(FlaxEngine.Matrix2x2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix2x2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix2x2"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix2x2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Equals(FlaxEngine.Matrix2x2)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix2x2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix2x2"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix2x2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Equals(FlaxEngine.Matrix2x2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix2x2"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Matrix3x3">
            <summary>
            Represents a 3x3 Matrix ( contains only Scale and Rotation ).
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Matrix3x3"/> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Matrix3x3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.Identity">
            <summary>
            The identity <see cref="T:FlaxEngine.Matrix3x3"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M11">
            <summary>
            Value at row 1 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M12">
            <summary>
            Value at row 1 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M13">
            <summary>
            Value at row 1 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M21">
            <summary>
            Value at row 2 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M22">
            <summary>
            Value at row 2 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M23">
            <summary>
            Value at row 2 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M31">
            <summary>
            Value at row 3 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M32">
            <summary>
            Value at row 3 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M33">
            <summary>
            Value at row 3 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix3x3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix3x3"/> struct.
            </summary>
            <param name="m11">The value to assign at row 1 column 1 of the Matrix3x3.</param>
            <param name="m12">The value to assign at row 1 column 2 of the Matrix3x3.</param>
            <param name="m13">The value to assign at row 1 column 3 of the Matrix3x3.</param>
            <param name="m21">The value to assign at row 2 column 1 of the Matrix3x3.</param>
            <param name="m22">The value to assign at row 2 column 2 of the Matrix3x3.</param>
            <param name="m23">The value to assign at row 2 column 3 of the Matrix3x3.</param>
            <param name="m31">The value to assign at row 3 column 1 of the Matrix3x3.</param>
            <param name="m32">The value to assign at row 3 column 2 of the Matrix3x3.</param>
            <param name="m33">The value to assign at row 3 column 3 of the Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix3x3"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the Matrix3x3. This must be an array with nine elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than nine elements.</exception>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Row1">
            <summary>
            Gets or sets the first row in the Matrix3x3; that is M11, M12, M13
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Row2">
            <summary>
            Gets or sets the second row in the Matrix3x3; that is M21, M22, M23
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Row3">
            <summary>
            Gets or sets the third row in the Matrix3x3; that is M31, M32, M33
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Column1">
            <summary>
            Gets or sets the first column in the Matrix3x3; that is M11, M21, M31
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Column2">
            <summary>
            Gets or sets the second column in the Matrix3x3; that is M12, M22, M32
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Column3">
            <summary>
            Gets or sets the third column in the Matrix3x3; that is M13, M23, M33
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.ScaleVector">
            <summary>
            Gets or sets the scale of the Matrix3x3; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity Matrix3x3.
            </summary>
            <value>
            <c>true</c> if this instance is an identity Matrix3x3; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix3x3 component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix3x3 component, depending on the index.</value>
            <param name="row">The row of the Matrix3x3 to access.</param>
            <param name="column">The column of the Matrix3x3 to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Determinant">
            <summary>
            Calculates the determinant of the Matrix3x3.
            </summary>
            <returns>The determinant of the Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Invert">
            <summary>
            Inverts the Matrix3x3.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transpose">
            <summary>
            Transposes the Matrix3x3.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthogonalize">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthonormalize">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.DecomposeQR(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Decomposes a Matrix3x3 into an orthonormalized Matrix3x3 q and a right triangular Matrix3x3 r.
            </summary>
            <param name="q">When the method completes, contains the orthonormalized Matrix3x3 of the decomposition.</param>
            <param name="r">When the method completes, contains the right triangular Matrix3x3 of the decomposition.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.DecomposeLQ(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Decomposes a Matrix3x3 into a lower triangular Matrix3x3 l and an orthonormalized Matrix3x3 q.
            </summary>
            <param name="l">When the method completes, contains the lower triangular Matrix3x3 of the decomposition.</param>
            <param name="q">When the method completes, contains the orthonormalized Matrix3x3 of the decomposition.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Decompose(FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Decomposes a Matrix3x3 into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed Matrix3x3.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed Matrix3x3.</param>
            <remarks>
            This method is designed to decompose an SRT transformation Matrix3x3 only.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.DecomposeUniformScale(System.Single@,FlaxEngine.Quaternion@)">
            <summary>
            Decomposes a uniform scale matrix into a scale, rotation, and translation.
            A uniform scale matrix has the same scale in every axis.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose only an SRT transformation matrix that has the same scale in every axis.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the Matrix3x3.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns in the Matrix3x3.
            </summary>
            <param name="firstColumn">The first column to exchange. This is an index of the column starting at zero.</param>
            <param name="secondColumn">The second column to exchange. This is an index of the column starting at zero.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToArray">
            <summary>
            Creates an array containing the elements of the Matrix3x3.
            </summary>
            <returns>A 9-element array containing the components of the Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Add(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Add(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Subtract(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Subtract(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Multiply(FlaxEngine.Matrix3x3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Multiply(FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Multiply(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Multiply(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Divide(FlaxEngine.Matrix3x3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Divide(FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Divide(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Divide(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Exponent(FlaxEngine.Matrix3x3@,System.Int32,FlaxEngine.Matrix3x3@)">
            <summary>
            Performs the exponential operation on a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to perform the operation on.</param>
            <param name="exponent">The exponent to raise the Matrix3x3 to.</param>
            <param name="result">When the method completes, contains the exponential Matrix3x3.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Exponent(FlaxEngine.Matrix3x3,System.Int32)">
            <summary>
            Performs the exponential operation on a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to perform the operation on.</param>
            <param name="exponent">The exponent to raise the Matrix3x3 to.</param>
            <returns>The exponential Matrix3x3.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Negate(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to be negated.</param>
            <param name="result">When the method completes, contains the negated Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Negate(FlaxEngine.Matrix3x3)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to be negated.</param>
            <returns>The negated Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Lerp(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matrices.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Lerp(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.SmoothStep(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.SmoothStep(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transpose(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.TransposeByRef(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transpose(FlaxEngine.Matrix3x3)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <returns>The transpose of the specified Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Invert(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Calculates the inverse of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Invert(FlaxEngine.Matrix3x3)">
            <summary>
            Calculates the inverse of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose inverse is to be calculated.</param>
            <returns>The inverse of the specified Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthogonalize(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized Matrix3x3.</param>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthogonalize(FlaxEngine.Matrix3x3)">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthogonalize.</param>
            <returns>The orthogonalized Matrix3x3.</returns>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthonormalize(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized Matrix3x3.</param>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthonormalize(FlaxEngine.Matrix3x3)">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthonormalize.</param>
            <returns>The orthonormalized Matrix3x3.</returns>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.UpperTriangularForm(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular Matrix3x3.</param>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.UpperTriangularForm(FlaxEngine.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into upper triangular form.</param>
            <returns>The upper triangular Matrix3x3.</returns>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.LowerTriangularForm(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular Matrix3x3.</param>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.LowerTriangularForm(FlaxEngine.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into lower triangular form.</param>
            <returns>The lower triangular Matrix3x3.</returns>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RowEchelonForm(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into row echelon form using elementary row operations;
            </summary>
            <param name="value">The Matrix3x3 to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RowEchelonForm(FlaxEngine.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into row echelon form using elementary row operations;
            </summary>
            <param name="value">The Matrix3x3 to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Billboard(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Billboard(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.LookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a left-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.LookAt(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(FlaxEngine.Vector3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(FlaxEngine.Vector3)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(System.Single,System.Single,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(System.Single)">
            <summary>
            Creates a Matrix3x3 that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Shear(FlaxEngine.Vector2@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates the 2D shear matrix. Represented by:
            [1 Y 0]
            [X 1 0]
            [0 0 1]
            </summary>
            <param name="shearAngles">The shear angles (in degrees).</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationX(System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationX(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationY(System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationY(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationZ(System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationZ(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationAxis(FlaxEngine.Vector3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationAxis(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationQuaternion(FlaxEngine.Quaternion@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a rotation Matrix3x3 from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the Matrix3x3.</param>
            <param name="result">The created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationQuaternion(FlaxEngine.Quaternion)">
            <summary>
            Creates a rotation Matrix3x3 from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the Matrix3x3.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationYawPitchRoll(System.Single,System.Single,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Translation2D(FlaxEngine.Vector2@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates 2D translation matrix.
            </summary>
            <param name="translation">The translation vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Translation2D(FlaxEngine.Vector2)">
            <summary>
            Creates 2D translation matrix.
            </summary>
            <param name="translation">The translation vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Translation2D(System.Single,System.Single)">
            <summary>
            Creates 2D translation matrix.
            </summary>
            <param name="x">The translation vector X.</param>
            <param name="y">The translation vector Y.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transform2D(FlaxEngine.Vector2@,FlaxEngine.Matrix3x3@,FlaxEngine.Vector2@)">
            <summary>
            Transforms given vector by the matrix (in 2D).
            </summary>
            <param name="vector">The vector.</param>
            <param name="transform">The transform.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transform2D(FlaxEngine.Vector2,FlaxEngine.Matrix3x3)">
            <summary>
            Transforms given vector by the matrix (in 2D).
            </summary>
            <param name="vector">The vector.</param>
            <param name="transform">The transform.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Addition(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_UnaryPlus(FlaxEngine.Matrix3x3)">
            <summary>
            Assert a Matrix3x3 (return it unchanged).
            </summary>
            <param name="value">The Matrix3x3 to assert (unchanged).</param>
            <returns>The asserted (unchanged) Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Subtraction(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_UnaryNegation(FlaxEngine.Matrix3x3)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to negate.</param>
            <returns>The negated Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Multiply(System.Single,FlaxEngine.Matrix3x3)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="right">The Matrix3x3 to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Multiply(FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Multiply(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Division(FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Division(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Divides two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Equality(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Inequality(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Explicit(FlaxEngine.Matrix3x3)~FlaxEngine.Matrix">
            <summary>
            Convert the 3x3 Matrix to a 4x4 Matrix.
            </summary>
            <returns>A 4x4 Matrix with zero translation and M44=1</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Explicit(FlaxEngine.Matrix)~FlaxEngine.Matrix3x3">
            <summary>
            Convert the 4x4 Matrix to a 3x3 Matrix.
            </summary>
            <returns>A 3x3 Matrix</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Equals(FlaxEngine.Matrix3x3@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix3x3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix3x3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix3x3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Equals(FlaxEngine.Matrix3x3)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix3x3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix3x3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix3x3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Equals(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix3x3"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.OrientedBoundingBox">
            <summary>
            OrientedBoundingBox (OBB) is a rectangular block, much like an AABB (BoundingBox) but with an arbitrary orientation.
            </summary>
        </member>
        <member name="F:FlaxEngine.OrientedBoundingBox.Extents">
            <summary>
            Half lengths of the box along each axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.OrientedBoundingBox.Transformation">
            <summary>
            The matrix which aligns and scales the box, and its translation vector represents the center of the box.
            </summary>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.#ctor(FlaxEngine.BoundingBox)">
            <summary>
            Creates an <see cref="T:FlaxEngine.OrientedBoundingBox" /> from a BoundingBox.
            </summary>
            <param name="bb">The BoundingBox to create from.</param>
            <remarks>
            Initially, the OBB is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.#ctor(FlaxEngine.Vector3,FlaxEngine.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.OrientedBoundingBox"/> struct.
            </summary>
            <param name="extents">The half lengths of the box along each axis.</param>
            <param name="transformation">The matrix which aligns and scales the box, and its translation vector represents the center of the box.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates an <see cref="T:FlaxEngine.OrientedBoundingBox" /> which contained between two minimum and maximum points.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
            <remarks>
            Initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.#ctor(FlaxEngine.Vector3[])">
            <summary>
            Creates an <see cref="T:FlaxEngine.OrientedBoundingBox" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <remarks>
            This method is not for computing the best tight-fitting OrientedBoundingBox.
            And initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetCorners(FlaxEngine.Vector3[])">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <param name="corners">An array of points representing the eight corners of the bounding box.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetCorners(FlaxEngine.Vector3*)">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <param name="corners">An array of points representing the eight corners of the bounding box.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetCorners(System.Collections.Generic.List{FlaxEngine.Vector3})">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <param name="corners">An collection to add the corners of the bounding box.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Transform(FlaxEngine.Matrix@)">
            <summary>
            Transforms this box using a transformation matrix.
            </summary>
            <param name="mat">The transformation matrix.</param>
            <remarks>
            While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which
            scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection
            accuracy.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Transform(FlaxEngine.Matrix)">
            <summary>
            Transforms this box using a transformation matrix.
            </summary>
            <param name="mat">The transformation matrix.</param>
            <remarks>
            While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which
            scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection
            accuracy.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Scale(FlaxEngine.Vector3@)">
            <summary>
            Scales the <see cref="T:FlaxEngine.OrientedBoundingBox" /> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Scale(FlaxEngine.Vector3)">
            <summary>
            Scales the <see cref="T:FlaxEngine.OrientedBoundingBox" /> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Scale(System.Single)">
            <summary>
            Scales the <see cref="T:FlaxEngine.OrientedBoundingBox" /> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Translate(FlaxEngine.Vector3@)">
            <summary>
            Translates the <see cref="T:FlaxEngine.OrientedBoundingBox" /> to a new position using a translation vector;
            </summary>
            <param name="translation">the translation vector.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Translate(FlaxEngine.Vector3)">
            <summary>
            Translates the <see cref="T:FlaxEngine.OrientedBoundingBox" /> to a new position using a translation vector;
            </summary>
            <param name="translation">the translation vector.</param>
        </member>
        <member name="P:FlaxEngine.OrientedBoundingBox.Size">
            <summary>
            The size of the <see cref="T:FlaxEngine.OrientedBoundingBox" /> if no scaling is applied to the transformation matrix.
            </summary>
            <remarks>
            The property will return the actual size even if the scaling is applied using Scale method,
            but if the scaling is applied to transformation matrix, use GetSize Function instead.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetSize">
            <summary>
            Returns the size of the <see cref="T:FlaxEngine.OrientedBoundingBox" /> taking into consideration the scaling applied to the
            transformation matrix.
            </summary>
            <returns>The size of the consideration</returns>
            <remarks>
            This method is computationally expensive, so if no scale is applied to the transformation matrix
            use <see cref="P:FlaxEngine.OrientedBoundingBox.Size" /> property instead.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetSizeSquared">
            <summary>
            Returns the square size of the <see cref="T:FlaxEngine.OrientedBoundingBox" /> taking into consideration the scaling applied to
            the transformation matrix.
            </summary>
            <returns>The size of the consideration</returns>
        </member>
        <member name="P:FlaxEngine.OrientedBoundingBox.Center">
            <summary>
            Returns the center of the <see cref="T:FlaxEngine.OrientedBoundingBox" />.
            </summary>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.Vector3@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.OrientedBoundingBox" /> contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.Vector3)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.OrientedBoundingBox" /> contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.Vector3[])">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.OrientedBoundingBox" /> contains an array of points>.
            </summary>
            <param name="points">The points array to test.</param>
            <returns>The type of containment.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.BoundingSphere,System.Boolean)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.OrientedBoundingBox" /> contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="ignoreScale">
            Optimize the check operation by assuming that <see cref="T:FlaxEngine.OrientedBoundingBox" /> has no
            scaling applied
            </param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            This method is not designed for <see cref="T:FlaxEngine.OrientedBoundingBox" /> which has a non-uniform scaling applied to its
            transformation matrix.
            But any type of scaling applied using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.OrientedBoundingBox@)">
            <summary>
            Check the intersection between two <see cref="T:FlaxEngine.OrientedBoundingBox" />
            </summary>
            <param name="obb">The OrientedBoundingBox to test.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for both <see cref="T:FlaxEngine.OrientedBoundingBox" /> must not have any scaling applied
            to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ContainsLine(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Check the intersection between an <see cref="T:FlaxEngine.OrientedBoundingBox" /> and a line defined by two points
            </summary>
            <param name="L1">The first point in the line.</param>
            <param name="L2">The second point in the line.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for the <see cref="T:FlaxEngine.OrientedBoundingBox" /> must not have any scaling applied
            to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.BoundingBox@)">
            <summary>
            Check the intersection between an <see cref="T:FlaxEngine.OrientedBoundingBox" /> and <see cref="T:FlaxEngine.BoundingBox" />
            </summary>
            <param name="box">The BoundingBox to test.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for the <see cref="T:FlaxEngine.OrientedBoundingBox" /> must not have any scaling applied
            to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.OrientedBoundingBox" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.OrientedBoundingBox" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">
            When the method completes, contains the distance of intersection from the ray start,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.OrientedBoundingBox" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetBoundingBox">
            <summary>
            Get the axis-aligned <see cref="T:FlaxEngine.BoundingBox" /> which contains all <see cref="T:FlaxEngine.OrientedBoundingBox" /> corners.
            </summary>
            <returns>The axis-aligned BoundingBox of this OrientedBoundingBox.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetBoxToBoxMatrix(FlaxEngine.OrientedBoundingBox@,FlaxEngine.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Calculates the matrix required to transfer any point from one <see cref="T:FlaxEngine.OrientedBoundingBox" /> local coordinates to
            another.
            </summary>
            <param name="A">The source OrientedBoundingBox.</param>
            <param name="B">The target OrientedBoundingBox.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation
            matrix of the OrientedBoundingBox.
            </param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Merge(FlaxEngine.OrientedBoundingBox@,FlaxEngine.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge an OrientedBoundingBox B into another OrientedBoundingBox A, by expanding A to contain B and keeping A
            orientation.
            </summary>
            <param name="A">The <see cref="T:FlaxEngine.OrientedBoundingBox" /> to merge into it.</param>
            <param name="B">The <see cref="T:FlaxEngine.OrientedBoundingBox" /> to be merged</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation
            matrix of the OrientedBoundingBox.
            </param>
            <remarks>
            Unlike merging axis aligned boxes, The operation is not interchangeable, because it keeps A orientation and merge B
            into it.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.MergeInto(FlaxEngine.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge this OrientedBoundingBox into another OrientedBoundingBox, keeping the other OrientedBoundingBox orientation.
            </summary>
            <param name="OBB">The other <see cref="T:FlaxEngine.OrientedBoundingBox" /> to merge into.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation
            matrix of the OrientedBoundingBox.
            </param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Add(FlaxEngine.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge another OrientedBoundingBox into this OrientedBoundingBox.
            </summary>
            <param name="OBB">The other <see cref="T:FlaxEngine.OrientedBoundingBox" /> to merge into this OrientedBoundingBox.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation
            matrix of the OrientedBoundingBox.
            </param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Equals(FlaxEngine.OrientedBoundingBox@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Equals(FlaxEngine.OrientedBoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.op_Multiply(FlaxEngine.OrientedBoundingBox,FlaxEngine.Matrix)">
            <summary>
            Transforms bounding box using the given transformation matrix.
            </summary>
            <param name="box">The bounding box to transform.</param>
            <param name="transform">The transformation matrix.</param>
            <returns>The result of the transformation.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.op_Equality(FlaxEngine.OrientedBoundingBox,FlaxEngine.OrientedBoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.op_Inequality(FlaxEngine.OrientedBoundingBox,FlaxEngine.OrientedBoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:FlaxEngine.Plane">
            <summary>
            Represents a plane in three dimensional space.
            </summary>
        </member>
        <member name="F:FlaxEngine.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.Plane.D">
            <summary>
            The distance of the plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="a">The X component of the normal.</param>
            <param name="b">The Y component of the normal.</param>
            <param name="c">The Z component of the normal.</param>
            <param name="d">The distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> class.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal vector to the plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="value">The normal of the plane.</param>
            <param name="d">The distance of the plane along its normal from the origin</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="values">
            The values to assign to the A, B, C, and D components of the plane. This must be an array with
            four elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than four
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Plane.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, C, or D component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C
            component, and 3 for the D component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            3].
            </exception>
        </member>
        <member name="M:FlaxEngine.Plane.Normalize">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
        </member>
        <member name="M:FlaxEngine.Plane.ToArray">
            <summary>
            Creates an array containing the elements of the plane.
            </summary>
            <returns>A four-element array containing the components of the plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Plane@,FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="line">
            When the method completes, contains the line of intersection
            as a <see cref="T:FlaxEngine.Ray" />, or a zero ray if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Reflection(FlaxEngine.Matrix@)">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <param name="result">When the method completes, contains the reflection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Reflection">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <returns>The reflection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Shadow(FlaxEngine.Vector4@,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that flattens geometry into a shadow from this the plane onto which to project the geometry as a
            shadow.
            This plane  is assumed to be normalized
            </summary>
            <param name="light">
            The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.
            </param>
            <param name="result">When the method completes, contains the shadow matrix.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Shadow(FlaxEngine.Vector4)">
            <summary>
            Creates a matrix that flattens geometry into a shadow from this the plane onto which to project the geometry as a
            shadow.
            This plane  is assumed to be normalized
            </summary>
            <param name="light">
            The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.
            </param>
            <returns>The shadow matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Reflection(FlaxEngine.Matrix3x3@)">
            <summary>
            Builds a Matrix3x3 that can be used to reflect vectors about a plane for which the reflection occurs.
            This plane is assumed to be normalized
            </summary>
            <param name="result">When the method completes, contains the reflection Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Reflection3x3">
            <summary>
            Builds a Matrix3x3 that can be used to reflect vectors about a plane for which the reflection occurs.
            This plane is assumed to be normalized
            </summary>
            <returns>The reflection Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Shadow(FlaxEngine.Vector4@,FlaxEngine.Plane@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that flattens geometry into a shadow.
            </summary>
            <param name="light">
            The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.
            </param>
            <param name="plane">
            The plane onto which to project the geometry as a shadow. This parameter is assumed to be
            normalized.
            </param>
            <param name="result">When the method completes, contains the shadow Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Shadow(FlaxEngine.Vector4,FlaxEngine.Plane)">
            <summary>
            Creates a Matrix3x3 that flattens geometry into a shadow.
            </summary>
            <param name="light">
            The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.
            </param>
            <param name="plane">
            The plane onto which to project the geometry as a shadow. This parameter is assumed to be
            normalized.
            </param>
            <returns>The shadow Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Multiply(FlaxEngine.Plane@,System.Single,FlaxEngine.Plane@)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Multiply(FlaxEngine.Plane,System.Single)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Dot(FlaxEngine.Plane@,FlaxEngine.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified plane and vector.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Dot(FlaxEngine.Plane,FlaxEngine.Vector4)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified plane and vector.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.DotCoordinate(FlaxEngine.Plane@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">
            When the method completes, contains the dot product of a specified vector and the normal of the
            Plane plus the distance value of the plane.
            </param>
        </member>
        <member name="M:FlaxEngine.Plane.DotCoordinate(FlaxEngine.Plane,FlaxEngine.Vector3)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.DotNormal(FlaxEngine.Plane@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">
            When the method completes, contains the dot product of the specified vector and the normal of the
            plane.
            </param>
        </member>
        <member name="M:FlaxEngine.Plane.DotNormal(FlaxEngine.Plane,FlaxEngine.Vector3)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified vector and the normal of the plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Normalize(FlaxEngine.Plane@,FlaxEngine.Plane@)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <param name="result">When the method completes, contains the normalized plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Normalize(FlaxEngine.Plane)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <returns>The normalized plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane@,FlaxEngine.Quaternion@,FlaxEngine.Plane@)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane,FlaxEngine.Quaternion)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane[],FlaxEngine.Quaternion@)">
            <summary>
            Transforms an array of normalized planes by a quaternion rotation.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes" /> is <c>null</c>.</exception>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane@,FlaxEngine.Matrix@,FlaxEngine.Plane@)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane,FlaxEngine.Matrix)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <returns>When the method completes, contains the transformed plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane[],FlaxEngine.Matrix@)">
            <summary>
            Transforms an array of normalized planes by a matrix.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="transformation">The transformation matrix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes" /> is <c>null</c>.</exception>
        </member>
        <member name="M:FlaxEngine.Plane.op_Multiply(System.Single,FlaxEngine.Plane)">
            <summary>
            Scales a plane by the given value.
            </summary>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="plane">The plane to scale.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.op_Multiply(FlaxEngine.Plane,System.Single)">
            <summary>
            Scales a plane by the given value.
            </summary>
            <param name="plane">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.op_Equality(FlaxEngine.Plane,FlaxEngine.Plane)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.op_Inequality(FlaxEngine.Plane,FlaxEngine.Plane)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.Equals(FlaxEngine.Plane@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.Equals(FlaxEngine.Plane)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Quaternion">
            <summary>
            Represents a four dimensional mathematical quaternion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Quaternion" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Quaternion" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.One">
            <summary>
            A <see cref="T:FlaxEngine.Quaternion" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.Identity">
            <summary>
            The identity <see cref="T:FlaxEngine.Quaternion" /> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.X">
            <summary>
            The X component of the quaternion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.Y">
            <summary>
            The Y component of the quaternion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.Z">
            <summary>
            The Z component of the quaternion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.W">
            <summary>
            The W component of the quaternion.
            </summary>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(FlaxEngine.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the components.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the quaternion.</param>
            <param name="y">Initial value for the Y component of the quaternion.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X, Y, Z, and W components of the quaternion. This must be an array
            with four elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than four
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Quaternion.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is equivalent to the identity quaternion.
            </summary>
            <value>
            <c>true</c> if this instance is an identity quaternion; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.Quaternion.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Quaternion.EulerAngles">
            <summary>
            The rotation as Euler angles in degrees.
            The x, y, and z angles represent a rotation z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
            Angles order (xyz): pitch, yaw and roll.
            </summary>
        </member>
        <member name="P:FlaxEngine.Quaternion.Angle">
            <summary>
            Gets the angle of the quaternion.
            </summary>
            <value>The quaternion's angle.</value>
        </member>
        <member name="P:FlaxEngine.Quaternion.Axis">
            <summary>
            Gets the axis components of the quaternion.
            </summary>
            <value>The axis components of the quaternion.</value>
        </member>
        <member name="P:FlaxEngine.Quaternion.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z
            component, and 3 for the W component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0, 3].
            </exception>
        </member>
        <member name="M:FlaxEngine.Quaternion.Conjugate">
            <summary>
            Conjugates the quaternion.
            </summary>
        </member>
        <member name="M:FlaxEngine.Quaternion.Invert">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
        </member>
        <member name="P:FlaxEngine.Quaternion.Length">
            <summary>
            Calculates the length of the quaternion.
            </summary>
            <returns>The length of the quaternion.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Quaternion.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Quaternion.LengthSquared">
            <summary>
            Calculates the squared length of the quaternion.
            </summary>
            <returns>The squared length of the quaternion.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Quaternion.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Quaternion.Normalize">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToArray">
            <summary>
            Creates an array containing the elements of the quaternion.
            </summary>
            <returns>A four-element array containing the components of the quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Add(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <param name="result">When the method completes, contains the sum of the two quaternions.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Add(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Subtract(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two quaternions.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Subtract(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Multiply(FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <param name="result">When the method completes, contains the scaled quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Multiply(FlaxEngine.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Multiply(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <param name="result">When the method completes, contains the multiplied quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Multiply(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Negate(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <param name="result">When the method completes, contains a quaternion facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Negate(FlaxEngine.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Barycentric(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <param name="result">
            When the method completes, contains a new <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian
            coordinates of the specified point.
            </param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Barycentric(FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <returns>A new <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Conjugate(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <param name="result">When the method completes, contains the conjugated quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Conjugate(FlaxEngine.Quaternion)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <returns>The conjugated quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Dot(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Dot(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.AngleBetween(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Calculates the angle between two quaternions.
            </summary>
            <param name="a">First source quaternion.</param>
            <param name="b">Second source quaternion.</param>
            <returns>Returns the angle in degrees between two rotations a and b.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Exponential(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <param name="result">When the method completes, contains the exponentiated quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Exponential(FlaxEngine.Quaternion)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <returns>The exponentiated quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Invert(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <param name="result">When the method completes, contains the conjugated and renormalized quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Invert(FlaxEngine.Quaternion)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <returns>The conjugated and renormalized quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Lerp(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Performs a linear interpolation between two quaternions.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two quaternions.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Quaternion.Lerp(FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single)">
            <summary>
            Performs a linear interpolation between two quaternion.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Quaternion.Logarithm(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <param name="result">When the method completes, contains the natural logarithm of the quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Logarithm(FlaxEngine.Quaternion)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <returns>The natural logarithm of the quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Normalize(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <param name="result">When the method completes, contains the normalized quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Normalize(FlaxEngine.Quaternion)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationAxis(FlaxEngine.Vector3@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation (in radians).</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationAxis(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation (in radians).</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationMatrix(FlaxEngine.Matrix@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationMatrix(FlaxEngine.Matrix3x3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookAt(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationLookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationLookAt(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookRotation(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a rotation with the specified forward and upwards directions.
            </summary>
            <param name="forward">The forward direction. Direction to orient towards.</param>
            <param name="up">Up direction. Constrains y axis orientation to a plane this vector lies on. This rule might be broken if forward and up direction are nearly parallel.</param>
            <returns>The calculated quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookRotation(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a rotation with the specified forward and upwards directions.
            </summary>
            <param name="forward">The forward direction. Direction to orient towards.</param>
            <param name="up">The up direction. Constrains y axis orientation to a plane this vector lies on. This rule might be broken if forward and up direction are nearly parallel.</param>
            <param name="result">The calculated quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Billboard(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Billboard(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationMatrix(FlaxEngine.Matrix)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationX(System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationX(System.Single)">
            <summary>
            Creates a quaternion that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <returns>The created rotation quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationY(System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationY(System.Single)">
            <summary>
            Creates a quaternion that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <returns>The created rotation quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationZ(System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationZ(System.Single)">
            <summary>
            Creates a quaternion that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <returns>The created rotation quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Euler(FlaxEngine.Vector3)">
            <summary>
            Creates a quaternion given a pitch, yaw and roll values.
            Angles are in degrees.
            </summary>
            <param name="eulerAngles">The pitch, yaw and roll angles of rotation.</param>
            <returns>When the method completes, contains the newly created quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Euler(FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a pitch, yaw and roll values.
            Angles are in degrees.
            </summary>
            <param name="eulerAngles">The pitch, yaw and roll angles of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Euler(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion given a pitch, yaw and roll values.
            Angles are in degrees.
            </summary>
            <param name="x">The pitch of rotation (in degrees).</param>
            <param name="y">The yaw of rotation (in degrees).</param>
            <param name="z">The roll of rotation (in degrees).</param>
            <returns>When the method completes, contains the newly created quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Euler(System.Single,System.Single,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a pitch, yaw and roll values.
            Angles are in degrees.
            </summary>
            <param name="x">The pitch of rotation (in degrees).</param>
            <param name="y">The yaw of rotation (in degrees).</param>
            <param name="z">The roll of rotation (in degrees).</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            Angles are in radians. Use <see cref="F:FlaxEngine.Mathf.RadiansToDegrees"/> to convert degrees to radians.
            </summary>
            <param name="yaw">The yaw of rotation (in radians).</param>
            <param name="pitch">The pitch of rotation (in radians).</param>
            <param name="roll">The roll of rotation (in radians).</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            Angles are in radians.
            </summary>
            <param name="yaw">The yaw of rotation (in radians).</param>
            <param name="pitch">The pitch of rotation (in radians).</param>
            <param name="roll">The roll of rotation (in radians).</param>
            <returns>The newly created quaternion (in radians).</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Slerp(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the spherical linear interpolation of the two quaternions.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Slerp(FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Squad(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <param name="result">When the method completes, contains the spherical quadrangle interpolation of the quaternions.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Squad(FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <returns>The spherical quadrangle interpolation of the quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.SquadSetup(FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Sets up control points for spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <returns>An array of three quaternions that represent control points for spherical quadrangle interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Addition(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Subtraction(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_UnaryNegation(FlaxEngine.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Multiply(System.Single,FlaxEngine.Quaternion)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Multiply(FlaxEngine.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Multiply(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Equality(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Inequality(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Equals(FlaxEngine.Quaternion@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Quaternion" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Quaternion" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Quaternion" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Equals(FlaxEngine.Quaternion)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Quaternion" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Quaternion" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Quaternion" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Ray">
            <summary>
            Represents a three dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="F:FlaxEngine.Ray.Position">
            <summary>
            The position in three dimensional space where the ray starts.
            </summary>
        </member>
        <member name="F:FlaxEngine.Ray.Direction">
            <summary>
            The normalized direction in which the ray points.
            </summary>
        </member>
        <member name="M:FlaxEngine.Ray.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Ray" /> struct.
            </summary>
            <param name="position">The position in three dimensional space of the origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
        </member>
        <member name="M:FlaxEngine.Ray.GetPoint(System.Single)">
            <summary>
            Gets a point at distance long ray.
            </summary>
            <param name="distance">The distance from ray origin.</param>
            <returns>The calculated point.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Plane@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Plane@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingBox@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingSphere@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.GetPickRay(System.Single,System.Single,FlaxEngine.Viewport@,FlaxEngine.Matrix@)">
            <summary>
            Calculates a world space ray from 2d screen coordinates.
            </summary>
            <param name="x">The X coordinate on 2d screen.</param>
            <param name="y">The Y coordinate on 2d screen.</param>
            <param name="viewport">The screen viewport.</param>
            <param name="vp">The View*Projection matrix.</param>
            <returns>The resulting ray.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.op_Equality(FlaxEngine.Ray,FlaxEngine.Ray)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.op_Inequality(FlaxEngine.Ray,FlaxEngine.Ray)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.Equals(FlaxEngine.Ray@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.Equals(FlaxEngine.Ray)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Rectangle">
            <summary>
            Describes rectangle in 2D space defines by location of its upper-left corner and the size.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rectangle.Empty">
            <summary>
            A <see cref="T:FlaxEngine.Rectangle"/> which represents an empty space.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rectangle.Location">
            <summary>
            Rectangle location (coordinates of the upper-left corner)
            </summary>
        </member>
        <member name="F:FlaxEngine.Rectangle.Size">
            <summary>
            Rectangle size
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.X">
            <summary>
            Gets or sets X coordinate of the left edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Y">
            <summary>
            Gets or sets Y coordinate of the left edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Width">
            <summary>
            Gets or sets width of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Height">
            <summary>
            Gets or sets height of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Top">
            <summary>
            Gets Y coordinate of the top edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Bottom">
            <summary>
            Gets Y coordinate of the bottom edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Left">
            <summary>
            Gets X coordinate of the left edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Right">
            <summary>
            Gets X coordinate of the right edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.UpperLeft">
            <summary>
            Gets position of the upper left corner of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.UpperRight">
            <summary>
            Gets position of the upper right corner of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.BottomRight">
            <summary>
            Gets position of the bottom right corner of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.BottomLeft">
            <summary>
            Gets position of the bottom left corner of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Center">
            <summary>
            Gets center position of the rectangle
            </summary>
        </member>
        <member name="M:FlaxEngine.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Init
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.#ctor(FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Init
            </summary>
            <param name="location">Location of the upper left corner</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.#ctor(System.Single,System.Single,FlaxEngine.Vector2)">
            <summary>
            Init
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="size">Size</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Init
            </summary>
            <param name="location">Location of the upper left corner</param>
            <param name="size">Size</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.Contains(FlaxEngine.Vector2)">
            <summary>
            Checks if rectangle contains given point
            </summary>
            <param name="location">Point location to check</param>
            <returns>True if point is inside rectangle's area</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Contains(FlaxEngine.Vector2@)">
            <summary>
            Checks if rectangle contains given point
            </summary>
            <param name="location">Point location to check</param>
            <returns>True if point is inside rectangle's area</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Contains(FlaxEngine.Rectangle)">
            <summary>
            Determines whether this rectangle entirely contains a specified rectangle
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <returns>True if this rectangle entirely contains the specified rectangle, or false if not</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Contains(FlaxEngine.Rectangle@)">
            <summary>
            Determines whether this rectangle entirely contains a specified rectangle
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <returns>True if this rectangle entirely contains the specified rectangle, or false if not</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Intersects(FlaxEngine.Rectangle)">
            <summary>
            Determines whether a specified rectangle intersects with this rectangle
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <returns>True if the specified rectangle intersects with this one, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Intersects(FlaxEngine.Rectangle@)">
            <summary>
            Determines whether a specified rectangle intersects with this rectangle
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <returns>True if the specified rectangle intersects with this one, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Offset(System.Single,System.Single)">
            <summary>
            Offset rectangle position
            </summary>
            <param name="x">X coordinate offset</param>
            <param name="y">Y coordinate offset</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.Offset(FlaxEngine.Vector2)">
            <summary>
            Offset rectangle position
            </summary>
            <param name="offset">X and Y coordinate offset</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.MakeOffsetted(System.Single,System.Single)">
            <summary>
            Make offseted rectangle
            </summary>
            <param name="x">X coordinate offset</param>
            <param name="y">Y coordinate offset</param>
            <returns>Offseted rectangle</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.MakeOffsetted(FlaxEngine.Vector2)">
            <summary>
            Make offseted rectangle
            </summary>
            <param name="offset">X and Y coordinate offset</param>
            <returns>Offseted rectangle</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Expand(System.Single)">
            <summary>
            Expand rectangle area in all directions by given amount
            </summary>
            <param name="toExpand">Amount of units to expand a rectangle</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.MakeExpanded(System.Single)">
            <summary>
            Make expanded rectangle area in all directions by given amount
            </summary>
            <param name="toExpand">Amount of units to expand a rectangle</param>
            <returns>Expanded rectangle</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Scale(System.Single)">
            <summary>
            Scale rectangle area in all directions by given amount
            </summary>
            <param name="scale">Scale value to expand a rectangle</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.MakeScaled(System.Single)">
            <summary>
            Make scaled rectangle area in all directions by given amount
            </summary>
            <param name="scale">Scale value to expand a rectangle</param>
            <returns>Scaled rectangle</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Union(FlaxEngine.Rectangle,FlaxEngine.Rectangle)">
            <summary>
            Calculates a rectangle that contains the union of a and b rectangles
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>Rectangle that contains both a and b rectangles</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Union(FlaxEngine.Rectangle@,FlaxEngine.Rectangle@,FlaxEngine.Rectangle@)">
            <summary>
            Calculates a rectangle that contains the union of a and b rectangles
            </summary>
            <param name="a">First rectangle</param>
            <param name="b">Second rectangle</param>
            <param name="result">When the method completes, contains the rectangle that both a and b rectangles.</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.Shared(FlaxEngine.Rectangle,FlaxEngine.Rectangle)">
            <summary>
            Calculates a rectangle that contains the shared part of a and b rectangles.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>Rectangle that contains shared part of a and b rectangles.</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Shared(FlaxEngine.Rectangle@,FlaxEngine.Rectangle@,FlaxEngine.Rectangle@)">
            <summary>
            Calculates a rectangle that contains the shared part of a and b rectangles.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <param name="result">When the method completes, contains the rectangle that shared part of a and b rectangles.</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.FromPoints(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Creates rectangle from two points.
            </summary>
            <param name="p1">First point</param>
            <param name="p2">Second point</param>
            <returns>Rectangle that contains both p1 and p2</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.FromPoints(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <summary>
            Creates rectangle from two points.
            </summary>
            <param name="p1">First point</param>
            <param name="p2">Second point</param>
            <returns>Rectangle that contains both p1 and p2</returns>
            <param name="result">When the method completes, contains the rectangle that contains both p1 and p2 points.</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Addition(FlaxEngine.Rectangle,FlaxEngine.Vector2)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="offset">The offset.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Subtraction(FlaxEngine.Rectangle,FlaxEngine.Vector2)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="offset">The offset.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Multiply(FlaxEngine.Rectangle,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="scale">The scale.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Equality(FlaxEngine.Rectangle,FlaxEngine.Rectangle)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Inequality(FlaxEngine.Rectangle,FlaxEngine.Rectangle)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Equals(FlaxEngine.Rectangle@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Rectangle" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Rectangle" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Rectangle" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Equals(FlaxEngine.Rectangle)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rectangle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rectangle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rectangle.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.SphericalHarmonics`1">
            <summary>
            A representation of a sphere of values via Spherical Harmonics (SH).
            </summary>
            <typeparam name="TDataType">The type of data contained by the sphere</typeparam>
        </member>
        <member name="F:FlaxEngine.SphericalHarmonics`1.MaximumOrder">
            <summary>
            The maximum order supported.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphericalHarmonics`1.Order">
            <summary>
            The order of calculation of the spherical harmonic.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphericalHarmonics`1.Coefficients">
            <summary>
            Get the coefficients defining the spherical harmonics (the spherical coordinates x{l,m} multiplying the spherical base Y{l,m}).
            </summary>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics`1.#ctor">
            <summary>
            Creates a null spherical harmonics (for serialization).
            </summary>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics`1.#ctor(System.Int32)">
            <summary>
            The desired order to
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics`1.Evaluate(FlaxEngine.Vector3)">
            <summary>
            Evaluate the value of the spherical harmonics in the provided direction.
            </summary>
            <param name="direction">The direction</param>
            <returns>The value of the spherical harmonics in the direction</returns>
        </member>
        <member name="P:FlaxEngine.SphericalHarmonics`1.Item(System.Int32,System.Int32)">
            <summary>
            Returns the coefficient x{l,m} of the spherical harmonics (the {l,m} spherical coordinate corresponding to the spherical base Y{l,m}).
            </summary>
            <param name="l">the l index of the coefficient</param>
            <param name="m">the m index of the coefficient</param>
            <returns>the value of the coefficient</returns>
        </member>
        <member name="T:FlaxEngine.SphericalHarmonics">
            <summary>
            A spherical harmonics representation of a cubemap.
            </summary>
        </member>
        <member name="F:FlaxEngine.SphericalHarmonics.BaseCoefficients">
            <summary>
            Base coefficients for SH.
            </summary>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics.#ctor(System.Int32)">
            <summary>
            Create a new instance of Spherical Harmonics of provided order.
            </summary>
            <param name="order">The order of the harmonics</param>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics.Evaluate(FlaxEngine.Vector3)">
            <summary>
            Evaluates the color for the specified direction.
            </summary>
            <param name="direction">The direction to evaluate.</param>
            <returns>The color computed for this direction.</returns>
        </member>
        <member name="T:FlaxEngine.Transform">
            <summary>
            Represents a three dimensional mathematical transformation.
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Transform" /> type, in bytes
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.Identity">
            <summary>
            A identity <see cref="T:FlaxEngine.Transform" /> with all default values
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.Translation">
            <summary>
            Translation vector of the transform
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.Orientation">
            <summary>
            Rotation of the transform
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.Scale">
            <summary>
            Scale vector of the transform
            </summary>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Vector3)">
            <summary>
            Init
            </summary>
            <param name="position">Position in 3D space</param>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Init
            </summary>
            <param name="position">Position in 3D space</param>
            <param name="rotation">Rotation in 3D space</param>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Init
            </summary>
            <param name="position">Position in 3D space</param>
            <param name="rotation">Rotation in 3D space</param>
            <param name="scale">Transform scale</param>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Matrix)">
            <summary>
            Creates a new Transform from a matrix
            </summary>
            <param name="transform">World matrix</param>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Matrix@)">
            <summary>
            Creates a new Transform from a matrix
            </summary>
            <param name="transform">World matrix</param>
        </member>
        <member name="P:FlaxEngine.Transform.IsIdentity">
            <summary>
            Gets a value indicting whether this transform is identity
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Forward">
            <summary>
            Gets the forward vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Backward">
            <summary>
            Gets the backward vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Up">
            <summary>
            Gets the up vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Down">
            <summary>
            Gets the down vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Left">
            <summary>
            Gets the left vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Right">
            <summary>
            Gets the right vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Transform.GetRotation">
            <summary>
            Gets rotation matrix (from Orientation).
            </summary>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:FlaxEngine.Transform.GetRotation(FlaxEngine.Matrix@)">
            <summary>
            Gets rotation matrix (from Orientation).
            </summary>
            <param name="result">Matrix to set</param>
        </member>
        <member name="M:FlaxEngine.Transform.SetRotation(FlaxEngine.Matrix)">
            <summary>
            Sets rotation matrix (from Orientation).
            </summary>
            <param name="value">Rotation matrix</param>
        </member>
        <member name="M:FlaxEngine.Transform.SetRotation(FlaxEngine.Matrix@)">
            <summary>
            Sets rotation matrix (from Orientation).
            </summary>
            <param name="value">Rotation matrix</param>
        </member>
        <member name="M:FlaxEngine.Transform.GetWorld">
            <summary>
            Gets world matrix that describes transformation as a 4 by 4 matrix.
            </summary>
            <returns>World matrix</returns>
        </member>
        <member name="M:FlaxEngine.Transform.GetWorld(FlaxEngine.Matrix@)">
            <summary>
            Gets world matrix that describes transformation as a 4 by 4 matrix.
            </summary>
            <param name="result">World matrix</param>
        </member>
        <member name="M:FlaxEngine.Transform.LocalToWorld(FlaxEngine.Transform)">
            <summary>
            Perform transformation of the given transform in local space
            </summary>
            <param name="other">Local space transform</param>
            <returns>World space transform</returns>
        </member>
        <member name="M:FlaxEngine.Transform.LocalToWorld(FlaxEngine.Vector3)">
            <summary>
            Perform transformation of the given point in local space
            </summary>
            <param name="point">Local space point</param>
            <returns>World space point</returns>
        </member>
        <member name="M:FlaxEngine.Transform.LocalToWorld(FlaxEngine.Vector3[],FlaxEngine.Vector3[])">
            <summary>
            Perform transformation of the given points in local space
            </summary>
            <param name="points">Local space points</param>
            <param name="result">World space points</param>
        </member>
        <member name="M:FlaxEngine.Transform.WorldToLocal(FlaxEngine.Transform)">
            <summary>
            Perform transformation of the given transform in world space
            </summary>
            <param name="other">World space transform</param>
            <returns>Local space transform</returns>
        </member>
        <member name="M:FlaxEngine.Transform.WorldToLocal(FlaxEngine.Vector3)">
            <summary>
            Perform transformation of the given point in world space
            </summary>
            <param name="point">World space point</param>
            <returns>Local space point</returns>
        </member>
        <member name="M:FlaxEngine.Transform.WorldToLocal(FlaxEngine.Vector3[],FlaxEngine.Vector3[])">
            <summary>
            Perform transformation of the given points in world space
            </summary>
            <param name="points">World space points</param>
            <param name="result">Local space points</param>
        </member>
        <member name="M:FlaxEngine.Transform.TransformDirection(FlaxEngine.Vector3)">
            <summary>
            Transforms the direction vector from the local space to the world space.
            </summary>
            <remarks>
            This operation is not affected by scale or position of the transform. The returned vector has the same length as direction.
            Use <see cref="M:FlaxEngine.Transform.TransformPoint(FlaxEngine.Vector3)"/> for the conversion if the vector represents a position rather than a direction.
            </remarks>
            <param name="direction">The direction.</param>
            <returns>The transformed direction vector.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.TransformPoint(FlaxEngine.Vector3)">
            <summary>
            Transforms the position from the local space to the world space.
            </summary>
            <remarks>
            Use <see cref="M:FlaxEngine.Transform.TransformDirection(FlaxEngine.Vector3)"/> for the conversion if the vector represents a direction rather than a position.
            </remarks>
            <param name="position">The position.</param>
            <returns>The transformed position.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.Lerp(FlaxEngine.Transform,FlaxEngine.Transform,System.Single)">
            <summary>
            Performs a linear interpolation between two transformations.
            </summary>
            <param name="start">Start transformation.</param>
            <param name="end">End transformation.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two transformations.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Transform.Lerp(FlaxEngine.Transform@,FlaxEngine.Transform@,System.Single,FlaxEngine.Transform@)">
            <summary>
            Performs a linear interpolation between two transformations.
            </summary>
            <param name="start">Start transformation.</param>
            <param name="end">End transformation.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two transformations.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Transform.op_Equality(FlaxEngine.Transform,FlaxEngine.Transform)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.op_Inequality(FlaxEngine.Transform,FlaxEngine.Transform)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.Equals(FlaxEngine.Transform@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Transform" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Transform" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Transform" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.Equals(FlaxEngine.Transform)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Transform" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Transform" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Transform" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.TypeConverters.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.QuaternionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.QuaternionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.QuaternionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Vector2">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Vector2" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Vector2" /> (1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Vector2" /> (0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Half">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all of its components set to half.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.One">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all components equal to <see cref="F:System.Single.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all components equal to <see cref="F:System.Single.MaxValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(FlaxEngine.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X and Y components of the vector. This must be an array with two
            elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than two
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Vector2.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            1].
            </exception>
        </member>
        <member name="P:FlaxEngine.Vector2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Vector2.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Vector2.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Add(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Add(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Add(FlaxEngine.Vector2@,System.Single@,FlaxEngine.Vector2@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Add(FlaxEngine.Vector2,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(FlaxEngine.Vector2@,System.Single@,FlaxEngine.Vector2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(FlaxEngine.Vector2,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(System.Single@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(System.Single,FlaxEngine.Vector2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Divide(FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Divide(FlaxEngine.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Divide(System.Single,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Divide(System.Single,FlaxEngine.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Negate(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Negate(FlaxEngine.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Barycentric(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Barycentric(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <returns>A new <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Clamp(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Clamp(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Saturate">
            <summary>
            Saturates this instance in the range [0,1]
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.TriangleArea(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the area of the triangle.
            </summary>
            <param name="v0">The first triangle vertex.</param>
            <param name="v1">The second triangle vertex.</param>
            <param name="v2">The third triangle vertex.</param>
            <returns>The triangle area.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Distance(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Distance(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2,FlaxEngine.Vector2)" /> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Distance(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.NearEqual(FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Tests whether one vector is near another vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.NearEqual(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single)">
            <summary>
            Tests whether one vector is near another vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Dot(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Dot(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Dot(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Cross(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Cross(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Cross(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Normalize(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Normalize(FlaxEngine.Vector2)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Round(FlaxEngine.Vector2)">
            <summary>
            Returns the vector with components rounded to the nearest integer.
            </summary>
            <param name="v">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Ceil(FlaxEngine.Vector2)">
            <summary>
            Returns the vector with components containing the smallest integer greater to or equal to the original value.
            </summary>
            <param name="v">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Mod(FlaxEngine.Vector2)">
            <summary>
            Breaks the components of the vector into an integral and a fractional part. Returns vector made of fractional parts.
            </summary>
            <param name="v">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Lerp(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Lerp(FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Lerp(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Lerp(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.SmoothStep(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.SmoothStep(FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Hermite(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Hermite(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Perpendicular(FlaxEngine.Vector2)">
            <summary>
            Calculates the 2D vector perpendicular to the given 2D vector. The result is always rotated 90-degrees in a counter-clockwise direction for a 2D coordinate system where the positive Y axis goes up.
            </summary>
            <param name="inDirection">The input direction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Perpendicular(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the 2D vector perpendicular to the given 2D vector. The result is always rotated 90-degrees in a counter-clockwise direction for a 2D coordinate system where the positive Y axis goes up.
            </summary>
            <param name="inDirection">The in direction.</param>
            <param name="result">When the method completes, contains the result of the calculation.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.CatmullRom(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.CatmullRom(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Max(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Vector2.Max(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Min(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Vector2.Min(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Abs(FlaxEngine.Vector2)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Reflect(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>
            Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Reflect(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>
            Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Orthogonalize(FlaxEngine.Vector2[],FlaxEngine.Vector2[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>
              Orthogonalization is the process of making all vectors orthogonal to each other. This
              means that any given vector in the list will be orthogonal to any other given vector in the
              list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector2.Orthonormalize(FlaxEngine.Vector2[],FlaxEngine.Vector2[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>
              Orthonormalization is the process of making all vectors orthogonal to each
              other and making all vectors of unit length. This means that any given vector will
              be orthogonal to any other given vector in the list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2@,FlaxEngine.Quaternion@,FlaxEngine.Vector2@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2,FlaxEngine.Quaternion)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2[],FlaxEngine.Quaternion@,FlaxEngine.Vector2[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2@,FlaxEngine.Matrix@,FlaxEngine.Vector4@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2,FlaxEngine.Matrix)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2[],FlaxEngine.Matrix@,FlaxEngine.Vector4[])">
            <summary>
            Transforms an array of 2D vectors by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformCoordinate(FlaxEngine.Vector2@,FlaxEngine.Matrix@,FlaxEngine.Vector2@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformCoordinate(FlaxEngine.Vector2,FlaxEngine.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformCoordinate(FlaxEngine.Vector2[],FlaxEngine.Matrix@,FlaxEngine.Vector2[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of coordinate vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformNormal(FlaxEngine.Vector2@,FlaxEngine.Matrix@,FlaxEngine.Vector2@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformNormal(FlaxEngine.Vector2,FlaxEngine.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformNormal(FlaxEngine.Vector2[],FlaxEngine.Matrix@,FlaxEngine.Vector2[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Addition(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Multiply(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_UnaryPlus(FlaxEngine.Vector2)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Subtraction(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_UnaryNegation(FlaxEngine.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Multiply(System.Single,FlaxEngine.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Multiply(FlaxEngine.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Division(FlaxEngine.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Division(System.Single,FlaxEngine.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Division(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Modulus(FlaxEngine.Vector2,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Modulus(System.Single,FlaxEngine.Vector2)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Modulus(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Addition(FlaxEngine.Vector2,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Addition(System.Single,FlaxEngine.Vector2)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Subtraction(FlaxEngine.Vector2,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Subtraction(System.Single,FlaxEngine.Vector2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Equality(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Inequality(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Explicit(FlaxEngine.Vector2)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector2" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Explicit(FlaxEngine.Vector2)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector2" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Equals(FlaxEngine.Vector2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector2" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector2" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector2" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Equals(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector2"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.Equals(FlaxEngine.Vector2)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector2" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector2" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector2" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Vector3">
            <summary>
            Represents a three dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Vector3" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Vector3" /> (1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Vector3" /> (0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.UnitZ">
            <summary>
            The Z unit <see cref="T:FlaxEngine.Vector3" /> (0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.One">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Half">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all of its components set to half.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Up">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating up (0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Down">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating down (0, -1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Left">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating left (-1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Right">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating right (1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Forward">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating forward in a left-handed coordinate system (0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Backward">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating backward in a left-handed coordinate system (0, 0, -1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all components equal to <see cref="F:System.Single.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all components equal to <see cref="F:System.Single.MaxValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(FlaxEngine.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(FlaxEngine.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y and Z components.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X, Y, and Z components of the vector. This must be an array with three
            elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than three
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Vector3.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.Normalized">
            <summary>
            Gets the normalized vector. Returned vector has length equal 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.IsOne">
            <summary>
            Gets a value indicting whether this vector is one
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for
            the Z component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            2].
            </exception>
        </member>
        <member name="P:FlaxEngine.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Vector3.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Vector3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Vector3.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.Negate">
            <summary>
            Reverses the direction of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.UnwindEuler">
            <summary>
            When this vector contains Euler angles (degrees), ensure that angles are between +/-180
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Add(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Add(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Add(FlaxEngine.Vector3@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Add(FlaxEngine.Vector3,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(FlaxEngine.Vector3@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(FlaxEngine.Vector3,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(System.Single@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(System.Single,FlaxEngine.Vector3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to Multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Divides a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector (per component).</param>
            <param name="result">When the method completes, contains the divided vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Divies a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector (per component).</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(FlaxEngine.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(System.Single,FlaxEngine.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Negate(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Negate(FlaxEngine.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Barycentric(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <param name="result">When the method completes, contains the 3D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Barycentric(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <returns>A new <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Clamp(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Clamp(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Cross(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains he cross product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Cross(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Distance(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Distance(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Distance(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3,FlaxEngine.Vector3)" /> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceXY(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors on the XY plane (ignoring Z).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors in the XY plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceXYSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors on the XY plane (ignoring Z).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors in the XY plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceXZ(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors on the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors in the XY plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceXZSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors on the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors in the XY plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceYZ(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors on the YZ plane (ignoring X).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors in the YZ plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceYZSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors on the YZ plane (ignoring X).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors in the YZ plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.NearEqual(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Tests whether one vector is near another vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.NearEqual(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single)">
            <summary>
            Tests whether one vector is near another vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Dot(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Dot(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Dot(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Normalize(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Normalize(FlaxEngine.Vector3)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Lerp(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Lerp(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.SmoothStep(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.SmoothStep(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Hermite(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Hermite(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.CatmullRom(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.CatmullRom(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Max(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Vector3.Max(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Min(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Vector3.Min(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Abs(FlaxEngine.Vector3)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Project(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Projects a vector onto another vector.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="onNormal">The projection normal vector.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ProjectOnPlane(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Projects a vector onto a plane defined by a normal orthogonal to the plane.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="planeNormal">The plane normal vector.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Angle(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the angle (in degrees) between <paramref name="from"/> and <paramref name="to"/>. This is always the smallest value.
            </summary>
            <param name="from">The first vector.</param>
            <param name="to">The second vector.</param>
            <returns>The angle (in degrees).</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Project(FlaxEngine.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in screen space.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Project(FlaxEngine.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in screen space.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Unproject(FlaxEngine.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Projects a 3D vector from screen space into object space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in object space.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Unproject(FlaxEngine.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix)">
            <summary>
            Projects a 3D vector from screen space into object space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in object space.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Reflect(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>
            Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Reflect(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>
            Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Orthogonalize(FlaxEngine.Vector3[],FlaxEngine.Vector3[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>
              Orthogonalization is the process of making all vectors orthogonal to each other. This
              means that any given vector in the list will be orthogonal to any other given vector in the
              list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector3.Orthonormalize(FlaxEngine.Vector3[],FlaxEngine.Vector3[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>
              Orthonormalization is the process of making all vectors orthogonal to each
              other and making all vectors of unit length. This means that any given vector will
              be orthogonal to any other given vector in the list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector3" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector3" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3[],FlaxEngine.Quaternion@,FlaxEngine.Vector3[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3@,FlaxEngine.Matrix3x3@,FlaxEngine.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix3x3"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix3x3"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector3"/>.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3,FlaxEngine.Matrix3x3)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix3x3"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix3x3"/>.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector3"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector3" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector4@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3,FlaxEngine.Matrix)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3[],FlaxEngine.Matrix@,FlaxEngine.Vector4[])">
            <summary>
            Transforms an array of 3D vectors by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformCoordinate(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformCoordinate(FlaxEngine.Vector3,FlaxEngine.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformCoordinate(FlaxEngine.Vector3[],FlaxEngine.Matrix@,FlaxEngine.Vector3[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of coordinate vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformNormal(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformNormal(FlaxEngine.Vector3,FlaxEngine.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformNormal(FlaxEngine.Vector3[],FlaxEngine.Matrix@,FlaxEngine.Vector3[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Addition(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Multiply(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_UnaryPlus(FlaxEngine.Vector3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Subtraction(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_UnaryNegation(FlaxEngine.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Multiply(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Transforms a vector by the given rotation.
            </summary>
            <param name="vector">The vector to transform.</param>
            <param name="rotation">The quaternion.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Multiply(System.Single,FlaxEngine.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Multiply(FlaxEngine.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Division(FlaxEngine.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Division(System.Single,FlaxEngine.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Division(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Modulus(FlaxEngine.Vector3,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Modulus(System.Single,FlaxEngine.Vector3)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Modulus(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Addition(FlaxEngine.Vector3,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Addition(System.Single,FlaxEngine.Vector3)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Subtraction(FlaxEngine.Vector3,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with added scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Subtraction(System.Single,FlaxEngine.Vector3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Equality(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Inequality(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Explicit(FlaxEngine.Vector3)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Explicit(FlaxEngine.Vector3)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Equals(FlaxEngine.Vector3@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector3" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Equals(FlaxEngine.Vector3)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector3" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Vector4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Vector4" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Vector4" /> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Vector4" /> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.UnitZ">
            <summary>
            The Z unit <see cref="T:FlaxEngine.Vector4" /> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.UnitW">
            <summary>
            The W unit <see cref="T:FlaxEngine.Vector4" /> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Half">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all of its components set to half.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.One">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all components equal to <see cref="F:System.Single.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all components equal to <see cref="F:System.Single.MaxValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X, Y, Z, and W components of the vector. This must be an array with
            four elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than four
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Vector4.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.IsOne">
            <summary>
            Gets a value indicting whether this vector is one
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z
            component, and 3 for the W component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            3].
            </exception>
        </member>
        <member name="P:FlaxEngine.Vector4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Vector4.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Vector4.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Vector4.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Add(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Add(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Add(FlaxEngine.Vector4@,System.Single@,FlaxEngine.Vector4@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Add(FlaxEngine.Vector4,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(FlaxEngine.Vector4@,System.Single@,FlaxEngine.Vector4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(FlaxEngine.Vector4,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(System.Single@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(System.Single,FlaxEngine.Vector4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Divide(FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Divide(FlaxEngine.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Divide(System.Single,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Divide(System.Single,FlaxEngine.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Negate(FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Negate(FlaxEngine.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Barycentric(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Barycentric(FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <returns>A new <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Clamp(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Clamp(FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Distance(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:FlaxEngine.Vector4.DistanceSquared(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.Distance(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Vector4.DistanceSquared(FlaxEngine.Vector4,FlaxEngine.Vector4)" /> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.DistanceSquared(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.DistanceSquared(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.NearEqual(FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Tests whether one vector is near another vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.NearEqual(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single)">
            <summary>
            Tests whether one vector is near another vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Dot(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Dot(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Normalize(FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Normalize(FlaxEngine.Vector4)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Lerp(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.Lerp(FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.SmoothStep(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.SmoothStep(FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Hermite(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Hermite(FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.CatmullRom(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.CatmullRom(FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Max(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Vector4.Max(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Min(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Vector4.Min(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Abs(FlaxEngine.Vector4)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Orthogonalize(FlaxEngine.Vector4[],FlaxEngine.Vector4[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>
              Orthogonalization is the process of making all vectors orthogonal to each other. This
              means that any given vector in the list will be orthogonal to any other given vector in the
              list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector4.Orthonormalize(FlaxEngine.Vector4[],FlaxEngine.Vector4[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>
              Orthonormalization is the process of making all vectors orthogonal to each
              other and making all vectors of unit length. This means that any given vector will
              be orthogonal to any other given vector in the list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4@,FlaxEngine.Quaternion@,FlaxEngine.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4,FlaxEngine.Quaternion)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4[],FlaxEngine.Quaternion@,FlaxEngine.Vector4[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4@,FlaxEngine.Matrix@,FlaxEngine.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4,FlaxEngine.Matrix)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4[],FlaxEngine.Matrix@,FlaxEngine.Vector4[])">
            <summary>
            Transforms an array of 4D vectors by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Addition(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Multiply(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_UnaryPlus(FlaxEngine.Vector4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Subtraction(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_UnaryNegation(FlaxEngine.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Multiply(System.Single,FlaxEngine.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Multiply(FlaxEngine.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Division(FlaxEngine.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Division(System.Single,FlaxEngine.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Division(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Modulus(FlaxEngine.Vector4,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Modulus(System.Single,FlaxEngine.Vector4)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Modulus(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Addition(FlaxEngine.Vector4,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Addition(System.Single,FlaxEngine.Vector4)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Subtraction(FlaxEngine.Vector4,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Subtraction(System.Single,FlaxEngine.Vector4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Equality(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Inequality(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Explicit(FlaxEngine.Vector4)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector4" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Explicit(FlaxEngine.Vector4)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector4" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Equals(FlaxEngine.Vector4@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Equals(FlaxEngine.Vector4)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Viewport">
            <summary>
            Defines the viewport dimensions using float coordinates for (X,Y,Width,Height).
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.X">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.Y">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.Width">
            <summary>
            Width dimension of the viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.Height">
            <summary>
            Height dimension of the viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.MinDepth">
            <summary>
            Gets or sets the minimum depth of the clip volume.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the clip volume.
            </summary>
        </member>
        <member name="M:FlaxEngine.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Viewport"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:FlaxEngine.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Viewport"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
            <param name="minDepth">The minimum depth of the clip volume.</param>
            <param name="maxDepth">The maximum depth of the clip volume.</param>
        </member>
        <member name="M:FlaxEngine.Viewport.#ctor(FlaxEngine.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Viewport"/> struct.
            </summary>
            <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
        </member>
        <member name="M:FlaxEngine.Viewport.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Viewport"/> struct.
            </summary>
            <param name="location">The location of the upper-left corner of the viewport in pixels.</param>
            <param name="size">The size of the viewport in pixels.</param>
        </member>
        <member name="P:FlaxEngine.Viewport.Bounds">
            <summary>
            Gets the size of the viewport.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:FlaxEngine.Viewport.Size">
            <summary>
            Gets or sets the size of the viewport (width and height).
            </summary>
        </member>
        <member name="M:FlaxEngine.Viewport.Equals(FlaxEngine.Viewport@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Viewport"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Viewport"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Viewport"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Equals(FlaxEngine.Viewport)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Viewport"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Viewport"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Viewport"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Viewport.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FlaxEngine.Viewport.op_Equality(FlaxEngine.Viewport,FlaxEngine.Viewport)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.op_Inequality(FlaxEngine.Viewport,FlaxEngine.Viewport)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Project(FlaxEngine.Vector3,FlaxEngine.Matrix,FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Project(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="matrix">A combined WorldViewProjection matrix.</param>
            <param name="vector">The projected vector.</param>
        </member>
        <member name="M:FlaxEngine.Viewport.Unproject(FlaxEngine.Vector3,FlaxEngine.Matrix,FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The unprojected Vector.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Unproject(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="matrix">An inverted combined WorldViewProjection matrix.</param>
            <param name="vector">The unprojected vector.</param>
        </member>
        <member name="P:FlaxEngine.Viewport.AspectRatio">
            <summary>
            Gets the aspect ratio used by the viewport.
            </summary>
            <value>The aspect ratio.</value>
        </member>
        <member name="T:FlaxEngine.Assertions.Assert">
            <summary>
            The Assert class contains assertion methods for setting invariants in the code.
            </summary>
        </member>
        <member name="F:FlaxEngine.Assertions.Assert.RaiseExceptions">
            <summary>
            Should an exception be thrown on a failure.
            </summary>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single)">
            <summary>
            Asserts that the values are approximately equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            Note: Every time you call the method with tolerance specified, a new instance of Assertions.Comparers.FloatComparer
            is created. For performance reasons you might want to instance your own comparer and pass it to the AreEqual method.
            If the tolerance is not specifies, a default comparer is used and the issue does not occur.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the values are approximately equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            Note: Every time you call the method with tolerance specified, a new instance of Assertions.Comparers.FloatComparer
            is created. For performance reasons you might want to instance your own comparer and pass it to the AreEqual method.
            If the tolerance is not specifies, a default comparer is used and the issue does not occur.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that the values are approximately equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            Note: Every time you call the method with tolerance specified, a new instance of Assertions.Comparers.FloatComparer
            is created. For performance reasons you might want to instance your own comparer and pass it to the AreEqual method.
            If the tolerance is not specifies, a default comparer is used and the issue does not occur.
            </summary>
            <param name="tolerance">Tolerance of approximation.</param>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the values are approximately equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            Note: Every time you call the method with tolerance specified, a new instance of Assertions.Comparers.FloatComparer
            is created. For performance reasons you might want to instance your own comparer and pass it to the AreEqual method.
            If the tolerance is not specifies, a default comparer is used and the issue does not occur.
            </summary>
            <param name="tolerance">Tolerance of approximation.</param>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreEqual``1(``0,``0)">
            <summary>
            Asserts that the values are approximately equal.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreEqual``1(``0,``0,System.String)">
            <summary>
            Asserts that the values are approximately equal.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreEqual``1(``0,``0,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Asserts that the values are approximately equal.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="message">The error message.</param>
            <param name="comparer">The equality comparer.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreEqual(FlaxEngine.Object,FlaxEngine.Object,System.String)">
            <summary>
            Asserts that the values are approximately equal.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single)">
            <summary>
            Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            </summary>
            <param name="tolerance">Tolerance of approximation.</param>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            </summary>
            <param name="tolerance">Tolerance of approximation.</param>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.IsFalse(System.Boolean)">
            <summary>
            Asserts that the condition is false.
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Asserts that the condition is false.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.IsTrue(System.Boolean)">
            <summary>
            Asserts that the condition is true.
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Asserts that the condition is true.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.ExceptionExpected(System.Type,System.Action,System.String)">
            <summary>
            Expect action to fail
            </summary>
            <param name="exceptionType">Type of exception to expect</param>
            <param name="action">Action to expect</param>
            <param name="message">User custom message to display</param>
        </member>
        <member name="T:FlaxEngine.Assertions.AssertionException">
            <summary>
            An exception that is thrown on a failure. To enable this feature <see cref="F:FlaxEngine.Assertions.Assert.RaiseExceptions"/> needs to be set to true.
            </summary>
        </member>
        <member name="P:FlaxEngine.Assertions.AssertionException.Message">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Assertions.AssertionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Assertions.AssertionException"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.Assertions.AssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Assertions.AssertionException"/> class.
            </summary>
            <param name="userMessage">The user message.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.AssertionException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Assertions.AssertionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="userMessage">The user message.</param>
        </member>
        <member name="T:FlaxEngine.Assertions.FloatComparer">
            <summary>
            A float comparer used by Assertions.Assert performing approximate comparison.
            </summary>
        </member>
        <member name="F:FlaxEngine.Assertions.FloatComparer.Epsilon">
            <summary>
            Default epsilon used by the comparer.
            </summary>
        </member>
        <member name="F:FlaxEngine.Assertions.FloatComparer.ComparerWithDefaultTolerance">
            <summary>
            Default instance of a comparer class with default error epsilon and absolute error check.
            </summary>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.#ctor">
            <summary>
            Creates an instance of the comparer.
            </summary>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the comparer.
            </summary>
            <param name="relative">
            Should a relative check be used when comparing values? By default, an absolute check will be
            used.
            </param>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.#ctor(System.Single)">
            <summary>
            Creates an instance of the comparer.
            </summary>
            <param name="error">Allowed comparison error. By default, the FloatComparer.Epsilon is used.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.#ctor(System.Single,System.Boolean)">
            <summary>
            Creates an instance of the comparer.
            </summary>
            <param name="relative">
            Should a relative check be used when comparing values? By default, an absolute check will be
            used.
            </param>
            <param name="error">Allowed comparison error. By default, the FloatComparer.Epsilon is used.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Performs equality check with absolute error check.
            </summary>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="error">Comparison error.</param>
            <returns>
            Result of the comparison.
            </returns>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.AreEqualRelative(System.Single,System.Single,System.Single)">
            <summary>
            Performs equality check with relative error check.
            </summary>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="error">Comparison error.</param>
            <returns>Result of the comparison.</returns>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.Equals(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.GetHashCode(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.DebugDraw">
            <summary>
            The debug shapes rendering service. Not available in final game. For use only in the editor.
            </summary>
        </member>
        <member name="M:FlaxEngine.DebugDraw.Draw(FlaxEngine.RenderContext@,FlaxEngine.GPUTextureView,FlaxEngine.GPUTextureView,System.Boolean)">
            <summary>
            Draws the collected debug shapes to the output.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="target">The rendering output surface handle.</param>
            <param name="depthBuffer">The custom depth texture used for depth test. Can be MSAA. Must match target surface size.</param>
            <param name="enableDepthTest">True if perform manual depth test with scene depth buffer when rendering the primitives. Uses custom shader and the scene depth buffer.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawActors(System.IntPtr,System.Int32)">
            <summary>
            Draws the debug shapes for the given collection of selected actors and other scene actors debug shapes.
            </summary>
            <param name="selectedActors">The list of actors to draw.</param>
            <param name="selectedActorsCount">The size of the list of actors.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawLine(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the line.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawLines(FlaxEngine.Vector3[],FlaxEngine.Matrix,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the lines. Line positions are located one after another (e.g. l0.start, l0.end, l1.start, l1.end,...).
            </summary>
            <param name="lines">The list of vertices for lines (must have multiple of 2 elements).</param>
            <param name="transform">The custom matrix used to transform all line vertices.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawCircle(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the circle.
            </summary>
            <param name="position">The center position.</param>
            <param name="normal">The normal vector direction.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireTriangle(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe triangle.
            </summary>
            <param name="v0">The first triangle vertex.</param>
            <param name="v1">The second triangle vertex.</param>
            <param name="v2">The third triangle vertex.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawTriangle(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the triangle.
            </summary>
            <param name="v0">The first triangle vertex.</param>
            <param name="v1">The second triangle vertex.</param>
            <param name="v2">The third triangle vertex.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawTriangles(FlaxEngine.Vector3[],FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the triangles.
            </summary>
            <param name="vertices">The triangle vertices list (must have multiple of 3 elements).</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawTriangles(FlaxEngine.Vector3[],System.Int32[],FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the triangles using the given index buffer.
            </summary>
            <param name="vertices">The triangle vertices list.</param>
            <param name="indices">The triangle indices list (must have multiple of 3 elements).</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireBox(FlaxEngine.BoundingBox,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe box.
            </summary>
            <param name="box">The box.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireFrustum(FlaxEngine.BoundingFrustum,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireBox(FlaxEngine.OrientedBoundingBox,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe box.
            </summary>
            <param name="box">The box.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireSphere(FlaxEngine.BoundingSphere,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawSphere(FlaxEngine.BoundingSphere,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireTube(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe tube.
            </summary>
            <param name="position">The center position.</param>
            <param name="orientation">The orientation.</param>
            <param name="radius">The radius.</param>
            <param name="length">The length.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireCylinder(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe cylinder.
            </summary>
            <param name="position">The center position.</param>
            <param name="orientation">The orientation.</param>
            <param name="radius">The radius.</param>
            <param name="height">The height.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireArrow(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe arrow.
            </summary>
            <param name="position">The arrow origin position.</param>
            <param name="orientation">The orientation (defines the arrow direction).</param>
            <param name="scale">The arrow scale (used to adjust the arrow size).</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawBox(FlaxEngine.BoundingBox,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the box.
            </summary>
            <param name="box">The box.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawBox(FlaxEngine.OrientedBoundingBox,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the box.
            </summary>
            <param name="box">The box.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="T:FlaxEngine.Debug">
            <summary>
            Class containing methods to ease debugging while developing a game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Debug.Logger">
            <summary>
            Get default debug logger.
            </summary>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,FlaxEngine.Object)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,System.Object)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,System.String)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="message">String to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,System.Object,FlaxEngine.Object)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,System.String,FlaxEngine.Object)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="message">String to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.AssertFormat(System.Boolean,System.String,System.Object[])">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.AssertFormat(System.Boolean,FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Write(FlaxEngine.LogType,System.String)">
            <summary>
            Logs the raw message to the log.
            </summary>
            <param name="logType">Type of the log message. Not: fatal will stop the engine. Error may show a message popup.</param>
            <param name="message">The message contents.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Log(System.Object)">
            <summary>
            Logs message to the Flax Console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Log(System.Object,FlaxEngine.Object)">
            <summary>
            Logs message to the Flax Console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogAssertion(System.Object)">
            <summary>
            A variant of Debug.Info that logs an assertion message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogAssertion(System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Debug.Info that logs an assertion message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogAssertionFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted assertion message to the Flax console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogAssertionFormat(FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted assertion message to the Flax console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogError(System.Object)">
            <summary>
            A variant of Debug.Info that logs an error message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogError(System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Debug.Info that logs an error message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted error message to the Flax console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogErrorFormat(FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted error message to the Flax console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogException(System.Exception)">
            <summary>
            A variant of Debug.Info that logs an error message to the console.
            </summary>
            <param name="exception">Runtime Exception.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogException(System.Exception,FlaxEngine.Object)">
            <summary>
            A variant of Debug.Info that logs an error message to the console.
            </summary>
            <param name="context">Object to which the message applies.</param>
            <param name="exception">Runtime Exception.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message to the Flax Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogFormat(FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted message to the Flax Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogWarning(System.Object)">
            <summary>
            A variant of Debug.Info that logs a warning message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogWarning(System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Debug.Info that logs a warning message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogWarningFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted warning message to the Flax Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogWarningFormat(FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted warning message to the Flax Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="E:FlaxEngine.DebugLogHandler.SendLog">
            <summary>
            Occurs on sending a log message.
            </summary>
        </member>
        <member name="E:FlaxEngine.DebugLogHandler.SendExceptionLog">
            <summary>
            Occurs on sending a log message.
            </summary>
        </member>
        <member name="M:FlaxEngine.DebugLogHandler.LogWrite(FlaxEngine.LogType,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.DebugLogHandler.LogException(System.Exception,FlaxEngine.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.DebugLogHandler.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Engine">
            <summary>
            The main engine class.
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.StartupTime">
            <summary>
            The engine start time (local time).
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.HasFocus">
            <summary>
            True if app has focus (one of the windows is being focused).
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.FrameCount">
            <summary>
            Gets the current frame count since the start of the game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.FramesPerSecond">
            <summary>
            Gets the amount of frames rendered during last second known as Frames Per Second. User scripts updates or fixed updates for physics may run at a different frequency than scene rendering. Use this property to get an accurate amount of frames rendered during the last second.
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.CommandLine">
            <summary>
            Gets the application command line arguments.
            </summary>
        </member>
        <member name="M:FlaxEngine.Engine.RequestExit(System.Int32)">
            <summary>
            Requests normal engine exit.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:FlaxEngine.Engine.GetCustomSettings(System.String)">
            <summary>
            Gets the custom game settings asset referenced by the given key.
            </summary>
            <param name="key">The settings key.</param>
            <returns>The returned asset. Returns null if key is invalid, cannot load asset or data is missing.</returns>
        </member>
        <member name="T:FlaxEngine.FlaxException">
            <summary>
            Flax exception object.
            </summary>
            <seealso cref="T:System.SystemException" />
        </member>
        <member name="M:FlaxEngine.FlaxException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FlaxException"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.FlaxException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FlaxException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:FlaxEngine.FlaxException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FlaxException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:FlaxEngine.GameplayGlobals">
            <summary>
            The global gameplay variables container asset that can be accessed across whole project.
            </summary>
        </member>
        <member name="M:FlaxEngine.GameplayGlobals.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GameplayGlobals"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GameplayGlobals.Values">
            <summary>
            Gets or sets the values (run-time).
            </summary>
        </member>
        <member name="P:FlaxEngine.GameplayGlobals.DefaultValues">
            <summary>
            Gets or sets the default values (edit-time).
            </summary>
        </member>
        <member name="M:FlaxEngine.GameplayGlobals.GetValue(System.String)">
            <summary>
            Gets the value of the global variable (it must be added first).
            </summary>
            <param name="name">The variable name.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.GameplayGlobals.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the global variable (it must be added first).
            </summary>
            <param name="name">The variable name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.GameplayGlobals.ResetValues">
            <summary>
            Resets the variables values to default values.
            </summary>
        </member>
        <member name="M:FlaxEngine.GameplayGlobals.Save(System.String)">
            <summary>
            Saves this asset to the file. Supported only in Editor.
            </summary>
            <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate asset. Must be specified when saving virtual asset.</param>
            <returns>True if cannot save data, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.Globals">
            <summary>
            Global engine variables container.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.StartupFolder">
            <summary>
            Main engine directory path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.TemporaryFolder">
            <summary>
            Temporary folder path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ProjectFolder">
            <summary>
            Directory that contains project
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ProductLocalFolder">
            <summary>
            The product local data directory.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.BinariesFolder">
            <summary>
            The game executable files location.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ProjectCacheFolder">
            <summary>
            Project specific cache folder path (editor-only).
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.EngineContentFolder">
            <summary>
            Engine content directory path (editor-only).
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ProjectSourceFolder">
            <summary>
            Game source code directory path (editor-only).
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ProjectContentFolder">
            <summary>
            Project content directory path
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.MonoPath">
            <summary>
            Mono library folder path
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.MainThreadID">
            <summary>
            Main Engine thread id
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.EngineVersion">
            <summary>
            The full engine version.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.EngineBuildNumber">
            <summary>
            The engine build version.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ProductName">
            <summary>
            The short name of the product (can be `Flax Editor` or name of the game e.g. `My Space Shooter`).
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.CompanyName">
            <summary>
            The company name (short name used for app data directory).
            </summary>
        </member>
        <member name="T:FlaxEngine.IDrawable">
            <summary>
            Draw method within this interface is used for <see cref="T:FlaxEngine.Render2D"/>.CallDrawing single DrawCall
            <remarks>Each frame new Queue is sent to GPU from this CPU bound method</remarks>
            </summary>
            <seealso cref="M:FlaxEngine.Render2D.CallDrawing(FlaxEngine.IDrawable,FlaxEngine.GPUContext,FlaxEngine.GPUTexture)"/>
            <seealso cref="M:FlaxEngine.PostProcessEffect.Render(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)"/>
        </member>
        <member name="M:FlaxEngine.IDrawable.Draw">
            <summary>
            Render2D drawing methods should be used within this method during render phase to be visible. 
            </summary>
        </member>
        <member name="T:FlaxEngine.LogDelegate">
            <summary>
            Info message delegate.
            </summary>
            <param name="level">The log level.</param>
            <param name="msg">The message.</param>
            <param name="obj">The object.</param>
            <param name="stackTrace">The stack trace.</param>
        </member>
        <member name="T:FlaxEngine.LogExceptionDelegate">
            <summary>
            Info exception delegate.
            </summary>
            <param name="exception">The exception.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="T:FlaxEngine.ILogger">
            <summary>
            Logger interface.
            </summary>
        </member>
        <member name="P:FlaxEngine.ILogger.FilterLogType">
            <summary>
            <para>To selective enable debug log message.</para>
            </summary>
        </member>
        <member name="P:FlaxEngine.ILogger.LogEnabled">
            <summary>
            <para>To runtime toggle debug logging [ON/OFF].</para>
            </summary>
        </member>
        <member name="P:FlaxEngine.ILogger.LogHandler">
            <summary>
            <para>Set Logger.ILogHandler.</para>
            </summary>
        </member>
        <member name="M:FlaxEngine.ILogger.IsLogTypeAllowed(FlaxEngine.LogType)">
            <summary>
            <para>Check logging is enabled based on the LogType.</para>
            </summary>
            <param name="logType"></param>
            <returns>
            <para>Return true in case logs of LogType will be logged otherwise returns false.</para>
            </returns>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,System.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,System.Object,FlaxEngine.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,System.String,System.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
            <param name="tag"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,System.String,System.Object,FlaxEngine.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
            <param name="context"></param>
            <param name="tag"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(System.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(System.String,System.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="message"></param>
            <param name="tag"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="message"></param>
            <param name="context"></param>
            <param name="tag"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogError(System.String,System.Object)">
            <summary>
            <para>A variant of ILogger.Info that logs an error message.</para>
            </summary>
            <param name="tag"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogError(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            <para>A variant of ILogger.Info that logs an error message.</para>
            </summary>
            <param name="tag"></param>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogException(System.Exception)">
            <summary>
            <para>A variant of ILogger.Info that logs an exception message.</para>
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogFormat(FlaxEngine.LogType,System.String,System.Object[])">
            <summary>
            <para>Logs a formatted message.</para>
            </summary>
            <param name="logType"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogWarning(System.String,System.Object)">
            <summary>
            <para>A variant of Logger.Info that logs an warning message.</para>
            </summary>
            <param name="tag"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogWarning(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            <para>A variant of Logger.Info that logs an warning message.</para>
            </summary>
            <param name="tag"></param>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogException(System.Exception,FlaxEngine.Object)">
            <summary>
            <para>A variant of ILogHandler.LogFormat that logs an exception message.</para>
            </summary>
            <param name="exception">Runtime Exception.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String)">
            <summary>
            <para>Logs a formatted message.</para>
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="T:FlaxEngine.ILogHandler">
            <summary>
            Logs handler.
            </summary>
        </member>
        <member name="E:FlaxEngine.ILogHandler.SendLog">
            <summary>
            Occurs on sending a log message.
            </summary>
        </member>
        <member name="E:FlaxEngine.ILogHandler.SendExceptionLog">
            <summary>
            Occurs on sending a exception log message.
            </summary>
        </member>
        <member name="M:FlaxEngine.ILogHandler.LogWrite(FlaxEngine.LogType,System.String)">
            <summary>
            Logs the raw message to the log.
            </summary>
            <param name="logType">Type of the log message. Not: fatal will stop the engine. Error may show a message popup.</param>
            <param name="message">The message contents.</param>
        </member>
        <member name="M:FlaxEngine.ILogHandler.LogException(System.Exception,FlaxEngine.Object)">
            <summary>
            <para>A variant of ILogHandler.LogFormat that logs an exception message.</para>
            </summary>
            <param name="exception">Runtime Exception.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.ILogHandler.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String)">
            <summary>
            <para>Logs a formatted message.</para>
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="T:FlaxEngine.InputAxis">
            <summary>
            Virtual input axis binding. Helps with listening for a selected axis input.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxis.Name">
            <summary>
            The name of the axis to use. See <see cref="P:FlaxEngine.Input.AxisMappings"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.InputAxis.Value">
            <summary>
            Gets the current axis value.
            </summary>
        </member>
        <member name="P:FlaxEngine.InputAxis.ValueRaw">
            <summary>
            Gets the current axis raw value.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputAxis"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputAxis.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputAxis"/> class.
            </summary>
            <param name="name">The axis name.</param>
        </member>
        <member name="T:FlaxEngine.InputEvent">
            <summary>
            Virtual input action binding. Helps with listening for a selected input event.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputEvent.Name">
            <summary>
            The name of the action to use. See <see cref="P:FlaxEngine.Input.ActionMappings"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.InputEvent.Active">
            <summary>
            Returns true if the event has been triggered during the current frame (e.g. user pressed a key). Use <see cref="E:FlaxEngine.InputEvent.Triggered"/> to catch events without active waiting.
            </summary>
        </member>
        <member name="E:FlaxEngine.InputEvent.Triggered">
            <summary>
            Occurs when event is triggered (e.g. user pressed a key). Called before scripts update.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputEvent"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputEvent"/> class.
            </summary>
            <param name="name">The action name.</param>
        </member>
        <member name="M:FlaxEngine.InputEvent.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:FlaxEngine.InputEvent"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputEvent.Dispose">
            <summary>
            Releases this object.
            </summary>
        </member>
        <member name="T:FlaxEngine.ISceneObject">
            <summary>
            Interface for scene objects that unifies various properties used across actors and scripts.
            </summary>
        </member>
        <member name="P:FlaxEngine.ISceneObject.Scene">
            <summary>
            Gets the scene object which contains this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.ISceneObject.HasPrefabLink">
            <summary>
            Gets a value indicating whether this object has a valid linkage to the prefab asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.ISceneObject.PrefabID">
            <summary>
            Gets the prefab asset ID. Empty if no prefab link exists.
            </summary>
        </member>
        <member name="P:FlaxEngine.ISceneObject.PrefabObjectID">
            <summary>
            Gets the ID of the object within a object that is used for synchronization with this object. Empty if no prefab link exists.
            </summary>
        </member>
        <member name="M:FlaxEngine.ISceneObject.BreakPrefabLink">
            <summary>
            Breaks the prefab linkage for this object (including all children).
            </summary>
        </member>
        <member name="T:FlaxEngine.ITransformable">
            <summary>
            Interface for objects that can be transformed.
            </summary>
        </member>
        <member name="P:FlaxEngine.ITransformable.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="T:FlaxEngine.Logger">
            <summary>
            Initializes a new instance of the Logger.
            </summary>
        </member>
        <member name="M:FlaxEngine.Logger.#ctor(FlaxEngine.ILogHandler)">
            <summary>
            Create a custom Logger.
            </summary>
            <param name="logHandler">Pass in default log handler or custom log handler.</param>
        </member>
        <member name="P:FlaxEngine.Logger.FilterLogType">
            <summary>
            To selective enable debug log message.
            </summary>
        </member>
        <member name="P:FlaxEngine.Logger.LogEnabled">
            <summary>
            To runtime toggle debug logging [ON/OFF].
            </summary>
        </member>
        <member name="P:FlaxEngine.Logger.LogHandler">
            <summary>
            Set  Logger.ILogHandler.
            </summary>
        </member>
        <member name="M:FlaxEngine.Logger.IsLogTypeAllowed(FlaxEngine.LogType)">
            <summary>
            Check logging is enabled based on the LogType.
            </summary>
            <param name="logType">The type of the log message.</param>
            <returns>Returns true in case logs of LogType will be logged otherwise returns false.</returns>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.Object,FlaxEngine.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.String,System.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.String,System.Object,FlaxEngine.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(System.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(System.String,System.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogError(System.String,System.Object)">
            <summary>
            A variant of Logger.Info that logs an error message.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogError(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Logger.Info that logs an error message.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogException(System.Exception)">
            <summary>
            A variant of Logger.Info that logs an exception message.
            </summary>
            <param name="exception">Runtime Exception.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogException(System.Exception,FlaxEngine.Object)">
            <summary>
            A variant of Logger.Info that logs an exception message.
            </summary>
            <param name="exception">Runtime Exception.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Logger.LogFormat(FlaxEngine.LogType,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.String,System.Object[])">
            <summary>
            Logs a formatted message.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted message.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogWarning(System.String,System.Object)">
            <summary>
            A variant of Logger.Info that logs an warning message.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogWarning(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Logger.Info that logs an warning message.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="T:FlaxEngine.PhysicalMaterial">
            <summary>
            Physical materials are used to define the response of a physical object when interacting dynamically with the world.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.Friction">
            <summary>
            The friction value of surface, controls how easily things can slide on this surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.FrictionCombineMode">
            <summary>
            The friction combine mode, controls how friction is computed for multiple materials.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.OverrideFrictionCombineMode">
            <summary>
            If set we will use the FrictionCombineMode of this material, instead of the FrictionCombineMode found in the Physics settings. 
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.Restitution">
            <summary>
            The restitution or 'bounciness' of this surface, between 0 (no bounce) and 1 (outgoing velocity is same as incoming).
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.RestitutionCombineMode">
            <summary>
            The restitution combine mode, controls how restitution is computed for multiple materials.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.OverrideRestitutionCombineMode">
            <summary>
            If set we will use the RestitutionCombineMode of this material, instead of the RestitutionCombineMode found in the Physics settings.
            </summary>
        </member>
        <member name="T:FlaxEngine.PostProcessEffect">
            <summary>
            Custom postFx which can modify final image by processing it with material based filters.
            The base class for all post process effects used by the graphics pipeline.
            Allows to extend frame rendering logic and apply custom effects such as outline, night vision, contrast etc.
            </summary>
            <remarks>
            Override this class and implement custom post fx logic.
            Use <b>MainRenderTask.Instance.CustomPostFx.Add(myPostFx)</b> to attach your script to rendering.
            Or add script to camera.
            </remarks>
        </member>
        <member name="P:FlaxEngine.PostProcessEffect.CanRender">
            <summary>
            Gets a value indicating whether this effect can be rendered.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostProcessEffect.UseSingleTarget">
            <summary>
            Gets a value indicating whether use a single render target as both input and output. Use this if your effect doesn't need to copy the input buffer to the output but can render directly to the single texture. Can be used to optimize game performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostProcessEffect.Location">
            <summary>
            Gets the effect rendering location within rendering pipeline.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostProcessEffect.Order">
            <summary>
            Gets the effect rendering order. Registered post effects are sorted before rendering (from the lowest order to the highest order).
            </summary>
        </member>
        <member name="M:FlaxEngine.PostProcessEffect.Render(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <summary>
            Performs custom postFx rendering.
            </summary>
            <param name="context">The GPU commands context.</param>
            <param name="renderContext">The rendering context.</param>
            <param name="input">The input texture.</param>
            <param name="output">The output texture.</param>
        </member>
        <member name="T:FlaxEngine.SceneReference">
            <summary>
            Represents the reference to the scene asset. Stores the unique ID of the scene to reference. Can be used to load the selected scene.
            </summary>
        </member>
        <member name="F:FlaxEngine.SceneReference.ID">
            <summary>
            The identifier of the scene asset (and the scene object).
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneReference.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneReference"/> class.
            </summary>
            <param name="id">The identifier of the scene asset.</param>
        </member>
        <member name="T:FlaxEngine.Screen">
            <summary>
            Helper class to access display information.
            </summary>
        </member>
        <member name="P:FlaxEngine.Screen.IsFullscreen">
            <summary>
            Gets or sets the fullscreen mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.Screen.Size">
            <summary>
            Gets or sets the window size.
            </summary>
        </member>
        <member name="P:FlaxEngine.Screen.CursorVisible">
            <summary>
            Gets or sets the cursor visible flag.
            </summary>
        </member>
        <member name="P:FlaxEngine.Screen.CursorLock">
            <summary>
            Gets or sets the cursor lock mode.
            </summary>
        </member>
        <member name="T:FlaxEngine.Time">
            <summary>
            Game ticking and timing system.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.StartupTime">
            <summary>
            The time at which the game started (UTC local).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.UpdateFPS">
            <summary>
            The target amount of the game logic updates per second (script updates frequency).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.PhysicsFPS">
            <summary>
            The target amount of the physics simulation updates per second (also fixed updates frequency).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.DrawFPS">
            <summary>
            The target amount of the frames rendered per second (actual game FPS).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.TimeScale">
            <summary>
            The game time scale factor. Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.GamePaused">
            <summary>
            Gets or sets the value indicating whenever game logic is paused (physics, script updates, etc.).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.DeltaTime">
            <summary>
            Gets time in seconds it took to complete the last frame, <see cref="P:FlaxEngine.Time.TimeScale"/> dependent.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.GameTime">
            <summary>
            Gets time at the beginning of this frame. This is the time in seconds since the start of the game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.UnscaledDeltaTime">
            <summary>
            Gets timeScale-independent time in seconds it took to complete the last frame.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.UnscaledGameTime">
            <summary>
            Gets timeScale-independent time at the beginning of this frame. This is the time in seconds since the start of the game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.TimeSinceStartup">
            <summary>
            Gets the time since startup in seconds (unscaled).
            </summary>
        </member>
        <member name="T:FlaxEngine.Foliage">
            <summary>
            Represents a foliage actor that contains a set of instanced meshes.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
        </member>
        <member name="M:FlaxEngine.Foliage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Foliage"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Foliage.FoliageTypes">
            <summary>
            The foliage instances types used by the current foliage actor. It's read-only.
            </summary>
        </member>
        <member name="P:FlaxEngine.Foliage.InstancesCount">
            <summary>
            Gets the total amount of the instanced of foliage.
            </summary>
        </member>
        <member name="P:FlaxEngine.Foliage.FoliageTypesCount">
            <summary>
            Gets the total amount of the types of foliage.
            </summary>
        </member>
        <member name="P:FlaxEngine.Foliage.GlobalDensityScale">
            <summary>
            Gets or sets the global density scale for all foliage instances. The default value is 1. Use values from range 0-1. Lower values decrease amount of foliage instances in-game. Use it to tweak game performance for slower devices.
            </summary>
        </member>
        <member name="M:FlaxEngine.Foliage.GetInstance(System.Int32)">
            <summary>
            Gets the foliage instance by index.
            </summary>
            <param name="index">The zero-based index of the foliage instance.</param>
            <returns>The foliage instance data.</returns>
        </member>
        <member name="M:FlaxEngine.Foliage.GetFoliageType(System.Int32)">
            <summary>
            Gets the foliage type.
            </summary>
            <param name="index">The zero-based index of the foliage type.</param>
            <returns>The foliage type.</returns>
        </member>
        <member name="M:FlaxEngine.Foliage.AddFoliageType(FlaxEngine.Model)">
            <summary>
            Adds the type of the foliage.
            </summary>
            <param name="model">The model to assign. It cannot be null nor already used by the other instance type (it must be unique within the given foliage actor).</param>
        </member>
        <member name="M:FlaxEngine.Foliage.RemoveFoliageType(System.Int32)">
            <summary>
            Removes the foliage instance type and all foliage instances using this type.
            </summary>
            <param name="index">The zero-based index of the foliage instance type.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.GetFoliageTypeInstancesCount(System.Int32)">
            <summary>
            Gets the total amount of the instanced that use the given foliage type.
            </summary>
            <param name="index">The zero-based index of the foliage type.</param>
            <returns>The foliage type instances count.</returns>
        </member>
        <member name="M:FlaxEngine.Foliage.AddInstance(FlaxEngine.FoliageInstance@)">
            <summary>
            Adds the new foliage instance. Ensure to always call <see cref="M:FlaxEngine.Foliage.RebuildClusters"/> after editing foliage to sync cached data (call it once after editing one or more instances).
            </summary>
            <remarks>Input instance bounds, instance random and world matrix are ignored (recalculated).</remarks>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.RemoveInstance(System.Int32)">
            <summary>
            Removes the foliage instance. Ensure to always call <see cref="M:FlaxEngine.Foliage.RebuildClusters"/> after editing foliage to sync cached data (call it once after editing one or more instances).
            </summary>
            <param name="index">The zero-based index of the instance to remove.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.SetInstanceTransform(System.Int32,FlaxEngine.Transform@)">
            <summary>
            Sets the foliage instance transformation. Ensure to always call <see cref="M:FlaxEngine.Foliage.RebuildClusters"/> after editing foliage to sync cached data (call it once after editing one or more instances).
            </summary>
            <param name="index">The zero-based index of the foliage instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.RebuildClusters">
            <summary>
            Rebuilds the foliage clusters used as internal acceleration structures (quad tree).
            </summary>
        </member>
        <member name="M:FlaxEngine.Foliage.UpdateCullDistance">
            <summary>
            Updates the cull distance for all foliage instances and for created clusters.
            </summary>
        </member>
        <member name="M:FlaxEngine.Foliage.Intersects(FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@,System.Int32@)">
            <summary>
            Determines if there is an intersection between the current object or any it's child and a ray.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <param name="instanceIndex">When the method completes, contains zero-based index of the foliage instance that is the closest to the ray.</param>
            <returns>True whether the two objects intersected, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.FoliageInstance">
            <summary>
            Foliage instanced mesh instance. Packed data with very little of logic. Managed by the foliage chunks and foliage actor itself.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageInstance.Transform">
            <summary>
            The local-space transformation of the mesh relative to the foliage actor.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageInstance.World">
            <summary>
            The cached world transformation matrix of this instance.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageInstance.Type">
            <summary>
            The foliage type index. Foliage types are hold in foliage actor and shared by instances using the same model.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageInstance.Random">
            <summary>
            The per-instance random value from range [0;1].
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageInstance.Bounds">
            <summary>
            The cached instance bounds (in world space).
            </summary>
        </member>
        <member name="T:FlaxEngine.FoliageScalingModes">
            <summary>
            The foliage instances scaling modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageScalingModes.Uniform">
            <summary>
            The uniform scaling. All axes are scaled the same.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageScalingModes.Free">
            <summary>
            The free scaling. Each axis can have custom scale.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageScalingModes.LockXZ">
            <summary>
            The lock XZ plane axis. Axes X and Z are constrained to-gather and axis Y is free.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageScalingModes.LockXY">
            <summary>
            The lock XY plane axis. Axes X and Y are constrained to-gather and axis Z is free.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageScalingModes.LockYZ">
            <summary>
            The lock YZ plane axis. Axes Y and Z are constrained to-gather and axis X is free.
            </summary>
        </member>
        <member name="T:FlaxEngine.FoliageType">
            <summary>
            Foliage mesh instances type descriptor. Defines the shared properties of the spawned mesh instances.
            </summary>
        </member>
        <member name="M:FlaxEngine.FoliageType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FoliageType"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.Foliage">
            <summary>
            The parent foliage actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.Index">
            <summary>
            The foliage type index.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.Model">
            <summary>
            The model to draw by the instances.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.CullDistance">
            <summary>
            The per-instance cull distance.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.CullDistanceRandomRange">
            <summary>
            The per-instance cull distance randomization range (randomized per instance and added to master CullDistance value).
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.DrawModes">
            <summary>
            The draw passes to use for rendering this foliage type.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.ShadowsMode">
            <summary>
            The shadows casting mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintDensity">
            <summary>
            The foliage instances density defined in instances count per 1000x1000 units area.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintRadius">
            <summary>
            The minimum radius between foliage instances.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintGroundSlopeAngleMin">
            <summary>
            The minimum ground slope angle to paint foliage on it (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintGroundSlopeAngleMax">
            <summary>
            The maximum ground slope angle to paint foliage on it (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintScaling">
            <summary>
            The scaling mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintScaleMin">
            <summary>
            The scale minimum values per axis.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintScaleMax">
            <summary>
            The scale maximum values per axis.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PlacementOffsetY">
            <summary>
            The per-instance random offset range on axis Y.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PlacementRandomPitchAngle">
            <summary>
            The random pitch angle range (uniform in both ways around normal vector).
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PlacementRandomRollAngle">
            <summary>
            The random roll angle range (uniform in both ways around normal vector).
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.DensityScalingScale">
            <summary>
            The density scaling scale applied to the global scale for the foliage instances of this type. Can be used to boost or reduce density scaling effect on this foliage type. Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.ReceiveDecals">
            <summary>
            Determines whenever this meshes can receive decals.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.UseDensityScaling">
            <summary>
            Flag used to determinate whenever use global foliage density scaling for instances of this foliage type.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PlacementAlignToNormal">
            <summary>
            If checked, instances will be aligned to normal of the placed surface.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PlacementRandomYaw">
            <summary>
            If checked, instances will use randomized yaw when placed. Random yaw uses will rotation range over the Y axis.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.Materials">
            <summary>
            Gets or sets the foliage instance type materials buffer (overrides).
            </summary>
        </member>
        <member name="T:FlaxEngine.RendererType">
            <summary>
            Graphics rendering backend system types.
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.Unknown">
            <summary>
            Unknown type
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.DirectX10">
            <summary>
            DirectX 10
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.DirectX10_1">
            <summary>
            DirectX 10.1
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.DirectX11">
            <summary>
            DirectX 11
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.DirectX12">
            <summary>
            DirectX 12
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.OpenGL4_1">
            <summary>
            OpenGL 4.1
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.OpenGL4_4">
            <summary>
            OpenGL 4.4
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.OpenGLES3">
            <summary>
            OpenGL ES 3
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.OpenGLES3_1">
            <summary>
            OpenGL ES 3.1
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.Null">
            <summary>
            Null backend
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.Vulkan">
            <summary>
            Vulkan
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.PS4">
            <summary>
            PlayStation 4
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.MAX">
            <summary>
            The count of items in the RendererType enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.ShaderProfile">
            <summary>
            Shader profile types define the version and type of the shading language used by the graphics backend.
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.DirectX_SM4">
            <summary>
            DirectX (Shader Model 4 compatible)
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.DirectX_SM5">
            <summary>
            DirectX (Shader Model 5 compatible)
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.GLSL_410">
            <summary>
            GLSL 410
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.GLSL_440">
            <summary>
            GLSL 440
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.Vulkan_SM5">
            <summary>
            Vulkan (Shader Model 5 compatible)
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.PS4">
            <summary>
            PlayStation 4
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.DirectX_SM6">
            <summary>
            DirectX (Shader Model 6 compatible)
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.MAX">
            <summary>
            The count of items in the ShaderProfile enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.FeatureLevel">
            <summary>
            Graphics feature levels indicates what level of support can be relied upon.
            They are named after the graphics API to indicate the minimum level of the features set to support.
            Feature levels are ordered from the lowest to the most high-end so feature level enum can be used to switch between feature levels (e.g. don't use geometry shader if not supported).
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.ES2">
            <summary>
            The features set defined by the core capabilities of OpenGL ES2.
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.ES3">
            <summary>
            The features set defined by the core capabilities of OpenGL ES3.
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.ES3_1">
            <summary>
            The features set defined by the core capabilities of OpenGL ES3.1.
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.SM4">
            <summary>
            The features set defined by the core capabilities of DirectX 10 Shader Model 4.
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.SM5">
            <summary>
            The features set defined by the core capabilities of DirectX 11 Shader Model 5.
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.SM6">
            <summary>
            The features set defined by the core capabilities of DirectX 12 Shader Model 6.
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.MAX">
            <summary>
            The count of items in the FeatureLevel enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.MSAALevel">
            <summary>
            Multisample count level.
            </summary>
        </member>
        <member name="F:FlaxEngine.MSAALevel.None">
            <summary>
            Disabled multisampling.
            </summary>
        </member>
        <member name="F:FlaxEngine.MSAALevel.X2">
            <summary>
            Two samples per pixel.
            </summary>
        </member>
        <member name="F:FlaxEngine.MSAALevel.X4">
            <summary>
            Four samples per pixel.
            </summary>
        </member>
        <member name="F:FlaxEngine.MSAALevel.X8">
            <summary>
            Eight samples per pixel.
            </summary>
        </member>
        <member name="T:FlaxEngine.ShadowsCastingMode">
            <summary>
            Shadows casting modes by visual elements.
            </summary>
        </member>
        <member name="F:FlaxEngine.ShadowsCastingMode.None">
            <summary>
            Never render shadows.
            </summary>
        </member>
        <member name="F:FlaxEngine.ShadowsCastingMode.StaticOnly">
            <summary>
            Render shadows only in static views (env probes, lightmaps, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.ShadowsCastingMode.DynamicOnly">
            <summary>
            Render shadows only in dynamic views (game, editor, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.ShadowsCastingMode.All">
            <summary>
            Always render shadows.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUResourceUsage">
            <summary>
            Identifies expected GPU resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the GPU.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUResourceUsage.Default">
            <summary>
            A resource that requires read and write access by the GPU.
            This is likely to be the most common usage choice.
            Memory will be used on device only, so fast access from the device is preferred.
            It usually means device-local GPU (video) memory.
            </summary>
            <remarks>
            Usage:
            - Resources written and read by device, e.g. images used as render targets.
            - Resources transferred from host once (immutable) or infrequently and read by
              device multiple times, e.g. textures to be sampled, vertex buffers, constant
              buffers, and majority of other types of resources used on GPU.
            </remarks>
        </member>
        <member name="F:FlaxEngine.GPUResourceUsage.Dynamic">
            <summary>
            A resource that is accessible by both the GPU (read only) and the CPU (write only).
            A dynamic resource is a good choice for a resource that will be updated by the CPU at least once per frame.
            Dynamic buffers or textures are usually used to upload data to GPU and use it within a single frame.
            </summary>
            <remarks>
            Usage:
            - Resources written frequently by CPU (dynamic), read by device.
              E.g. textures, vertex buffers, uniform buffers updated every frame or every draw call.
            </remarks>
        </member>
        <member name="F:FlaxEngine.GPUResourceUsage.StagingUpload">
            <summary>
            A resource that supports data transfer (copy) from the CPU to the GPU.
            It usually means CPU (system) memory. Resources created in this pool may still be accessible to the device, but access to them can be slow.
            </summary>
            <remarks>
            Usage:
            - Staging copy of resources used as transfer source.
            </remarks>
        </member>
        <member name="F:FlaxEngine.GPUResourceUsage.StagingReadback">
            <summary>
            A resource that supports data transfer (copy) from the GPU to the CPU.
            </summary>
            <remarks>
            Usage:
            - Resources written by device, read by host - results of some computations, e.g. screen capture, average scene luminance for HDR tone mapping.
            - Any resources read or accessed randomly on host, e.g. CPU-side copy of vertex buffer used as source of transfer, but also used for collision detection.
            </remarks>
        </member>
        <member name="T:FlaxEngine.GPUResourceMapMode">
            <summary>
            Describes how a mapped GPU resource will be accessed.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUResourceMapMode.Read">
            <summary>
            The resource is mapped for reading.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUResourceMapMode.Write">
            <summary>
            The resource is mapped for writing.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUResourceMapMode.ReadWrite">
            <summary>
            The resource is mapped for reading and writing.
            </summary>
        </member>
        <member name="T:FlaxEngine.PrimitiveTopologyType">
            <summary>
            Primitives types.
            </summary>
        </member>
        <member name="F:FlaxEngine.PrimitiveTopologyType.Undefined">
            <summary>
            Unknown topology.
            </summary>
        </member>
        <member name="F:FlaxEngine.PrimitiveTopologyType.Point">
            <summary>
            Points list.
            </summary>
        </member>
        <member name="F:FlaxEngine.PrimitiveTopologyType.Line">
            <summary>
            Line list.
            </summary>
        </member>
        <member name="F:FlaxEngine.PrimitiveTopologyType.Triangle">
            <summary>
            Triangle list.
            </summary>
        </member>
        <member name="T:FlaxEngine.CullMode">
            <summary>
            Primitives culling mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.CullMode.Normal">
            <summary>
            Cull back-facing primitives only.
            </summary>
        </member>
        <member name="F:FlaxEngine.CullMode.Inverted">
            <summary>
            Cull front-facing primitives only.
            </summary>
        </member>
        <member name="F:FlaxEngine.CullMode.TwoSided">
            <summary>
            Disable face culling.
            </summary>
        </member>
        <member name="T:FlaxEngine.BlendingMode">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.AlphaToCoverageEnable">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.BlendEnable">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.SrcBlend">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.DestBlend">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.BlendOp">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.SrcBlendAlpha">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.DestBlendAlpha">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.BlendOpAlpha">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.RenderTargetWriteMask">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="P:FlaxEngine.BlendingMode.Opaque">
            <summary>
            Gets the opaque rendering (default). No blending is being performed.
            </summary>
        </member>
        <member name="P:FlaxEngine.BlendingMode.Additive">
            <summary>
            Gets the additive rendering. Adds the color and the alpha channel. Source color is multiplied by the alpha.
            </summary>
        </member>
        <member name="P:FlaxEngine.BlendingMode.AlphaBlend">
            <summary>
            Gets the alpha blending.
            </summary>
        </member>
        <member name="P:FlaxEngine.BlendingMode.Add">
            <summary>
            Gets the additive blending with pre-multiplied color.
            </summary>
        </member>
        <member name="P:FlaxEngine.BlendingMode.Multiply">
            <summary>
            Gets the multiply blending (multiply output color with texture color).
            </summary>
        </member>
        <member name="T:FlaxEngine.BlendingMode.Blend">
            <summary>
            Blending mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.Zero">
            <summary>
            The blend factor is (0, 0, 0, 0). No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.One">
            <summary>
            The blend factor is (1, 1, 1, 1). No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.SrcColor">
            <summary>
            The blend factor is (Rs, Gs, Bs, As), that is color data (RGB) from a pixel shader. No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.InvSrcColor">
            <summary>
            The blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As), that is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.SrcAlpha">
            <summary>
            The blend factor is (As, As, As, As), that is alpha data (A) from a pixel shader. No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.InvSrcAlpha">
            <summary>
            The blend factor is ( 1 - As, 1 - As, 1 - As, 1 - As), that is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.DestAlpha">
            <summary>
            The blend factor is (Ad Ad Ad Ad), that is alpha data from a render target. No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.InvDestAlpha">
            <summary>
            The blend factor is (1 - Ad 1 - Ad 1 - Ad 1 - Ad), that is alpha data from a render target. The pre-blend operation inverts the data, generating 1 - A.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.DestColor">
            <summary>
            The blend factor is (Rd, Gd, Bd, Ad), that is color data from a render target. No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.InvDestColor">
            <summary>
            The blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad), that is color data from a render target. The pre-blend operation inverts the data, generating 1 - RGB.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.SrcAlphaSat">
            <summary>
            The blend factor is (f, f, f, 1); where f = min(As, 1 - Ad). The pre-blend operation clamps the data to 1 or less.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.BlendFactor">
            <summary>
            The blend factor is the blend factor set with GPUContext::SetBlendFactor. No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.BlendInvFactor">
            <summary>
            The blend factor is the blend factor set with GPUContext::SetBlendFactor. The pre-blend operation inverts the blend factor, generating 1 - blend_factor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.Src1Color">
            <summary>
            The blend factor is data sources both as color data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.InvSrc1Color">
            <summary>
            The blend factor is data sources both as color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This blend factor supports dual-source color blending.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.Src1Alpha">
            <summary>
            The blend factor is data sources as alpha data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.InvSrc1Alpha">
            <summary>
            The blend factor is data sources as alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This blend factor supports dual-source color blending.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.MAX">
            <summary>
            The count of items in the Blend enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.BlendingMode.Operation">
            <summary>
            Blending operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Operation.Add">
            <summary>
            Add source 1 and source 2.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Operation.Subtract">
            <summary>
            Subtract source 1 from source 2.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Operation.RevSubtract">
            <summary>
            Subtract source 2 from source 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Operation.Min">
            <summary>
            Find the minimum of source 1 and source 2.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Operation.Max">
            <summary>
            Find the maximum of source 1 and source 2.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Operation.MAX">
            <summary>
            The count of items in the Operation enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.BlendingMode.ColorWrite">
            <summary>
            Render target write mask
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.Red">
            <summary>
            Allow data to be stored in the red component.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.Green">
            <summary>
            Allow data to be stored in the green component.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.Blue">
            <summary>
            Allow data to be stored in the blue component.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.Alpha">
            <summary>
            Allow data to be stored in the alpha component.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.All">
            <summary>
            Allow data to be stored in all components.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.RG">
            <summary>
            Allow data to be stored in red and green components.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.RGB">
            <summary>
            Allow data to be stored in red, green and blue components.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.RGBA">
            <summary>
            Allow data to be stored in all components.
            </summary>
        </member>
        <member name="T:FlaxEngine.ComparisonFunc">
            <summary>
            Comparison function modes
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.Never">
            <summary>
            Never pass the comparison.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.Less">
            <summary>
            If the source data is less than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.Equal">
            <summary>
            If the source data is equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.LessEqual">
            <summary>
            If the source data is less than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.Greater">
            <summary>
            If the source data is greater than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.NotEqual">
            <summary>
            If the source data is not equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.GreaterEqual">
            <summary>
            If the source data is greater than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.Always">
            <summary>
            Always pass the comparison.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.MAX">
            <summary>
            The count of items in the ComparisonFunc enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.Quality">
            <summary>
            Rendering quality levels.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.Low">
            <summary>
            The low quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.Medium">
            <summary>
            The medium quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.High">
            <summary>
            The high quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.Ultra">
            <summary>
            The ultra, mega, fantastic quality!
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.MAX">
            <summary>
            The count of items in the Quality enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialPostFxLocation">
            <summary>
            Post Fx material rendering locations.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.AfterPostProcessingPass">
            <summary>
            The after post processing pass using LDR input frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.BeforePostProcessingPass">
            <summary>
            The before post processing pass using HDR input frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.BeforeForwardPass">
            <summary>
            The before forward pass but after GBuffer with HDR input frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.AfterCustomPostEffects">
            <summary>
            The after custom post effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.BeforeReflectionsPass">
            <summary>
            The 'before' Reflections pass. After the Light pass. Can be used to implement a custom light types that accumulate lighting to the light buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.AfterAntiAliasingPass">
            <summary>
            The 'after' AA filter pass. Rendering is done to the output backbuffer.
            </summary>
        </member>
        <member name="T:FlaxEngine.PostProcessEffectLocation">
            <summary>
            The Post Process effect rendering location within the rendering pipeline.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessEffectLocation.Default">
            <summary>
            The default location after the in-build PostFx pass (bloom, color grading, etc.) but before anti-aliasing effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessEffectLocation.BeforePostProcessingPass">
             <summary>
            The 'before' in-build PostFx pass (bloom, color grading, etc.). After Forward Pass (transparency) and fog effects.
             </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessEffectLocation.BeforeForwardPass">
            <summary>
            The 'before' Forward pass (transparency) and fog effects. After the Light pass and Reflections pass.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessEffectLocation.BeforeReflectionsPass">
            <summary>
            The 'before' Reflections pass. After the Light pass. Can be used to implement a custom light types that accumulate lighting to the light buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessEffectLocation.AfterAntiAliasingPass">
            <summary>
            The 'after' AA filter pass. Rendering is done to the output backbuffer.
            </summary>
        </member>
        <member name="T:FlaxEngine.DrawPass">
            <summary>
            The objects drawing pass types. Used as a flags for objects drawing masking.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.Depth">
            <summary>
            The hardware depth rendering to the depth buffer (used for shadow maps rendering).
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.GBuffer">
            <summary>
            The base pass rendering to the GBuffer (for opaque materials).
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.Forward">
            <summary>
            The forward pass rendering (for transparent materials).
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.Distortion">
            <summary>
            The transparent objects distortion vectors rendering (with blending).
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.MotionVectors">
            <summary>
            The motion vectors (velocity) rendering pass (for movable objects).
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.Default">
            <summary>
            The default set of draw passes for the scene objects.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.All">
            <summary>
            The all draw passes combined into a single mask.
            </summary>
        </member>
        <member name="T:FlaxEngine.ViewMode">
            <summary>
            Describes frame rendering modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Default">
            <summary>
            Full rendering
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.NoPostFx">
            <summary>
            Without post-process pass
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Diffuse">
            <summary>
            Draw Diffuse
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Normals">
            <summary>
            Draw Normals
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Emissive">
            <summary>
            Draw Emissive
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Depth">
            <summary>
            Draw Depth
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.AmbientOcclusion">
            <summary>
            Draw Ambient Occlusion
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Metalness">
            <summary>
            Draw Material's Metalness
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Roughness">
            <summary>
            Draw Material's Roughness
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Specular">
            <summary>
            Draw Material's Specular
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.SpecularColor">
            <summary>
            Draw Material's Specular Color
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.ShadingModel">
            <summary>
            Draw Shading Model
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.LightBuffer">
            <summary>
            Draw Lights buffer
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Reflections">
            <summary>
            Draw reflections buffer
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Wireframe">
            <summary>
            Draw scene objects in wireframe mode
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.MotionVectors">
            <summary>
            Draw motion vectors debug view
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.SubsurfaceColor">
            <summary>
            Draw materials subsurface color debug view
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Unlit">
            <summary>
            Draw materials colors with ambient occlusion
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.LightmapUVsDensity">
            <summary>
            Draw meshes lightmaps coordinates density
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.VertexColors">
            <summary>
            Draw meshes vertex colors
            </summary>
        </member>
        <member name="T:FlaxEngine.ViewFlags">
            <summary>
            Frame rendering flags used to switch between graphics features.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.DebugDraw">
            <summary>
            Shows/hides the debug shapes rendered using Debug Draw.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.EditorSprites">
            <summary>
            Shows/hides Editor sprites
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.Reflections">
            <summary>
            Shows/hides reflections
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.SSR">
            <summary>
            Shows/hides Screen Space Reflections
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.AO">
            <summary>
            Shows/hides Ambient Occlusion effect
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.GI">
            <summary>
            Shows/hides Global Illumination effect
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.DirectionalLights">
            <summary>
            Shows/hides directional lights
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.PointLights">
            <summary>
            Shows/hides point lights
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.SpotLights">
            <summary>
            Shows/hides spot lights
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.SkyLights">
            <summary>
            Shows/hides sky lights
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.Shadows">
            <summary>
            Shows/hides shadows
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.SpecularLight">
            <summary>
            Shows/hides specular light rendering
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.AntiAliasing">
            <summary>
            Shows/hides Anti-Aliasing
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.CustomPostProcess">
            <summary>
            Shows/hides custom Post-Process effects
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.Bloom">
            <summary>
            Shows/hides bloom effect
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.ToneMapping">
            <summary>
            Shows/hides tone mapping effect
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.EyeAdaptation">
            <summary>
            Shows/hides eye adaptation effect
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.CameraArtifacts">
            <summary>
            Shows/hides camera artifacts
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.LensFlares">
            <summary>
            Shows/hides lens flares
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.Decals">
            <summary>
            Shows/hides deferred decals.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.DepthOfField">
            <summary>
            Shows/hides depth of field effect
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.PhysicsDebug">
            <summary>
            Shows/hides physics debug shapes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.Fog">
            <summary>
            Shows/hides fogging effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.MotionBlur">
            <summary>
            Shows/hides the motion blur effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.DefaultGame">
            <summary>
            Default flags for Game.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.DefaultEditor">
            <summary>
            Default flags for Editor.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.DefaultAssetPreview">
            <summary>
            Default flags for materials/models previews generating.
            </summary>
        </member>
        <member name="T:FlaxEngine.TessellationMethod">
            <summary>
            Describes the different tessellation methods supported by the graphics system.
            </summary>
        </member>
        <member name="F:FlaxEngine.TessellationMethod.None">
            <summary>
            No tessellation.
            </summary>
        </member>
        <member name="F:FlaxEngine.TessellationMethod.Flat">
            <summary>
            Flat tessellation. Also known as dicing tessellation.
            </summary>
        </member>
        <member name="F:FlaxEngine.TessellationMethod.PointNormal">
            <summary>
            Point normal tessellation.
            </summary>
        </member>
        <member name="F:FlaxEngine.TessellationMethod.Phong">
            <summary>
            Geometric version of Phong normal interpolation, not applied on normals but on the vertex positions.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUAdapter">
            <summary>
            Interface for GPU device adapter.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUAdapter"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUAdapter.VendorId">
            <summary>
            Gets the GPU vendor identifier.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUAdapter.Description">
            <summary>
            Gets a string that contains the adapter description. Used for presentation to the user.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUAdapter.IsAMD">
            <summary>
            Returns true if adapter's vendor is AMD.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUAdapter.IsIntel">
            <summary>
            Returns true if adapter's vendor is Intel.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUAdapter.IsNVIDIA">
            <summary>
            Returns true if adapter's vendor is Nvidia.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUAdapter.IsMicrosoft">
            <summary>
            Returns true if adapter's vendor is Microsoft.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUBufferView">
            <summary>
            Defines a view for the <see cref="T:FlaxEngine.GPUBuffer"/>. Used to bind buffer to the shaders (for input as shader resource or for input/output as unordered access).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUBufferView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUBufferView"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUBuffer">
            <summary>
            All-in-one GPU buffer class. This class is able to create index buffers, vertex buffers, structured buffer and argument buffers.
            </summary>
            <seealso cref="T:FlaxEngine.GPUResource" />
        </member>
        <member name="M:FlaxEngine.GPUBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUBuffer"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.IsAllocated">
            <summary>
            Gets a value indicating whether this buffer has been allocated.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.Size">
            <summary>
            Gets buffer size in bytes.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.Stride">
            <summary>
            Gets buffer stride in bytes.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.Format">
            <summary>
            Gets buffer data format (if used).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.ElementsCount">
            <summary>
            Gets buffer elements count (size divided by the stride).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.IsStaging">
            <summary>
            Checks if buffer is a staging buffer (supports CPU readback).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.IsDynamic">
            <summary>
            Checks if buffer is a staging buffer (supports CPU readback).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.IsShaderResource">
            <summary>
            Gets a value indicating whether this buffer is a shader resource.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.IsUnorderedAccess">
            <summary>
            Gets a value indicating whether this buffer is a unordered access.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.Description">
            <summary>
            Gets buffer description structure.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.View">
            <summary>
            Gets the view for the whole buffer.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.Init(FlaxEngine.GPUBufferDescription@)">
            <summary>
            Creates new buffer.
            </summary>
            <param name="desc">The buffer description.</param>
            <returns>True if cannot create buffer, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.Resize(System.UInt32)">
            <summary>
            Tries to resize the buffer (warning: contents will be lost).
            </summary>
            <param name="newSize">The new size (in bytes).</param>
            <returns>True if cannot resize buffer, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.DownloadData(System.Byte[]@)">
            <summary>
            Stops current thread execution to gather buffer data from the GPU. Cannot be called from main thread if the buffer is not a dynamic nor staging readback.
            </summary>
            <param name="result">The result data.</param>
            <returns>True if cannot download data, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.GetData(System.Byte[]@)">
            <summary>
            Gets the buffer data via map/memcpy/unmap sequence. Always supported for dynamic and staging readback buffers (other types support depends on graphics backend implementation).
            </summary>
            <param name="output">The output data container.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.SetData(System.IntPtr,System.UInt32)">
            <summary>
            Sets the buffer data via map/memcpy/unmap sequence. Always supported for dynamic buffers (other types support depends on graphics backend implementation).
            </summary>
            <param name="data">The source data to upload.</param>
            <param name="size">The size of data (in bytes).</param>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.Map(FlaxEngine.GPUResourceMapMode)">
            <summary>
            Gets a CPU pointer to the resource by mapping its contents. Denies the GPU access to that resource.
            </summary>
            <param name="mode">The map operation mode.</param>
            <returns>The pointer ot the mapped CPU buffer with resource data or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.Unmap">
            <summary>
            Invalidates the mapped pointer to a resource and restores the GPU's access to that resource.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUBufferDescription">
            <summary>
            A common description for all GPU buffers.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBufferDescription.GetElementsCount">
            <summary>
            Gets the number elements in the buffer.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBufferDescription.IsShaderResource">
            <summary>
            Gets a value indicating whether this instance is a shader resource.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBufferDescription.IsUnorderedAccess">
            <summary>
            Gets a value indicating whether this instance is a unordered access.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Clear">
            <summary>
            Clears description.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Buffer(System.UInt32,FlaxEngine.GPUBufferFlags,FlaxEngine.PixelFormat,System.IntPtr,System.UInt32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates the buffer description.
            </summary>
            <param name="size">The size (in bytes).</param>
            <param name="flags">The flags.</param>
            <param name="format">The format.</param>
            <param name="initData">The initial data.</param>
            <param name="stride">The stride.</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Buffer(System.Int32,FlaxEngine.GPUBufferFlags,FlaxEngine.PixelFormat,System.IntPtr,System.Int32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates the buffer description.
            </summary>
            <param name="size">The size (in bytes).</param>
            <param name="flags">The flags.</param>
            <param name="format">The format.</param>
            <param name="initData">The initial data.</param>
            <param name="stride">The stride.</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Typed(System.Int32,FlaxEngine.PixelFormat,System.Boolean,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates typed buffer description.
            </summary>
            <param name="count">The elements count.</param>
            <param name="viewFormat">The view format.</param>
            <param name="isUnorderedAccess">True if use UAV, otherwise false.</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
            <remarks>
            Example in HLSL: Buffer&lt;float4&gt;.
            </remarks>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Typed(System.IntPtr,System.Int32,FlaxEngine.PixelFormat,System.Boolean,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates typed buffer description.
            </summary>
            <param name="data">The data.</param>
            <param name="count">The elements count.</param>
            <param name="viewFormat">The view format.</param>
            <param name="isUnorderedAccess">True if use UAV, otherwise false.</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
            <remarks>
            Example in HLSL: Buffer&lt;float4&gt;.
            </remarks>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Vertex(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Creates vertex buffer description.
            </summary>
            <param name="elementStride">The element stride.</param>
            <param name="elementsCount">The elements count.</param>
            <param name="data">The data.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Vertex(System.Int32,System.Int32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates vertex buffer description.
            </summary>
            <param name="elementStride">The element stride.</param>
            <param name="elementsCount">The elements count.</param>
            <param name="usage">The usage mode.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Vertex(System.Int32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates vertex buffer description.
            </summary>
            <param name="size">The size (in bytes).</param>
            <param name="usage">The usage mode.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Index(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Creates index buffer description.
            </summary>
            <param name="elementStride">The element stride.</param>
            <param name="elementsCount">The elements count.</param>
            <param name="data">The data.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Index(System.Int32,System.Int32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates index buffer description.
            </summary>
            <param name="elementStride">The element stride.</param>
            <param name="elementsCount">The elements count.</param>
            <param name="usage">The usage mode.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Structured(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates structured buffer description.
            </summary>
            <param name="elementCount">The element count.</param>
            <param name="elementSize">Size of the element (in bytes).</param>
            <param name="isUnorderedAccess">if set to <c>true</c> [is unordered access].</param>
            <returns>The buffer description.</returns>
            <remarks>
            Example in HLSL: StructuredBuffer&lt;float4&gt; or RWStructuredBuffer&lt;float4&gt; for structured buffers supporting unordered access.
            </remarks>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.StructuredAppend(System.Int32,System.Int32)">
            <summary>
            Creates append buffer description (structured buffer).
            </summary>
            <param name="elementCount">The element count.</param>
            <param name="elementSize">Size of the element (in bytes).</param>
            <returns>The buffer description.</returns>
            <remarks>
            Example in HLSL: AppendStructuredBuffer&lt;float4&gt; or ConsumeStructuredBuffer&lt;float4&gt;.
            </remarks>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.StructuredCounter(System.Int32,System.Int32)">
            <summary>
            Creates counter buffer description (structured buffer).
            </summary>
            <param name="elementCount">The element count.</param>
            <param name="elementSize">Size of the element (in bytes).</param>
            <returns>The buffer description.</returns>
            <remarks>
            Example in HLSL: StructuredBuffer&lt;float4&gt; or RWStructuredBuffer&lt;float4&gt; for structured buffers supporting unordered access.
            </remarks>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Argument(System.Int32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates argument buffer description.
            </summary>
            <param name="size">The size (in bytes).</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Argument(System.IntPtr,System.Int32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates argument buffer description.
            </summary>
            <param name="data">The initial data.</param>
            <param name="size">The size (in bytes).</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Raw(System.Int32,FlaxEngine.GPUBufferFlags,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates raw buffer description.
            </summary>
            <param name="size">The size (in bytes).</param>
            <param name="additionalFlags">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="F:FlaxEngine.GPUBufferFlags.IndexBuffer" />).</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Raw(System.IntPtr,System.Int32,FlaxEngine.GPUBufferFlags,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates raw buffer description.
            </summary>
            <param name="data">The initial data.</param>
            <param name="size">The size (in bytes).</param>
            <param name="additionalFlags">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="F:FlaxEngine.GPUBufferFlags.IndexBuffer" />).</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.ToStagingUpload">
            <summary>
            Gets the staging upload description for this instance.
            </summary>
            <returns>A staging buffer description</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.ToStagingReadback">
            <summary>
            Gets the staging readback description for this instance.
            </summary>
            <returns>A staging buffer description</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Equals(FlaxEngine.GPUBufferDescription)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.GetHashCode">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.GPUBufferDescription.Size">
            <summary>
            The buffer total size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferDescription.Stride">
            <summary>
            The buffer structure stride (size in bytes per element).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferDescription.Flags">
            <summary>
            The buffer flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferDescription.Format">
            <summary>
            The format of the data in a buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferDescription.InitData">
            <summary>
            The pointer to location of initial resource data. Null if not used.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferDescription.Usage">
            <summary>
            Value that identifies how the buffer is to be read from and written to. The most common value is <see cref="F:FlaxEngine.GPUResourceUsage.Default"/>; see <strong><see cref="T:FlaxEngine.GPUResourceUsage"/></strong> for all possible values.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUBufferFlags">
            <summary>
            The GPU buffer usage flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.None">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.ShaderResource">
            <summary>
            Create a buffer that can be bound as a shader resource.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.VertexBuffer">
            <summary>
            Create a buffer that can be bound as a vertex buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.IndexBuffer">
            <summary>
            Create a buffer that can be bound as a index buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.UnorderedAccess">
            <summary>
            Create a buffer that can be bound as a unordered access.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.Append">
            <summary>
            Flag for unordered access buffers that will use append feature.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.Counter">
            <summary>
            Flag for unordered access buffers that will use counter feature.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.Argument">
            <summary>
            Flag for unordered access buffers that will be used as draw indirect argument buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.Structured">
            <summary>
            Flag for structured buffers.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.RawBuffer">
            <summary>
            Flag for raw buffers.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.StructuredAppendBuffer">
            <summary>
            Creates a structured buffer that supports unordered access and append.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.StructuredCounterBuffer">
            <summary>
            Creates a structured buffer that supports unordered access and counter.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUDispatchIndirectArgs">
            <summary>
            The GPU dispatch indirect command arguments data.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDispatchIndirectArgs.ThreadGroupCountX">
            <summary>
            The X dimension of dispatch size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDispatchIndirectArgs.ThreadGroupCountY">
            <summary>
            The Y dimension of dispatch size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDispatchIndirectArgs.ThreadGroupCountZ">
            <summary>
            The Z dimension of dispatch size.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUDrawIndirectArgs">
            <summary>
            The GPU draw indirect command arguments data.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndirectArgs.VerticesCount">
            <summary>
            The number of vertices to draw for each instance.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndirectArgs.InstanceCount">
            <summary>
            The number of instances to draw.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndirectArgs.StartVertex">
            <summary>
            An offset added to each vertex index.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndirectArgs.StartInstance">
            <summary>
            An offset added to each instance index.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUDrawIndexedIndirectArgs">
            <summary>
            The GPU draw indexed indirect command arguments data.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndexedIndirectArgs.IndicesCount">
            <summary>
            The number of indices to draw for each instance.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndexedIndirectArgs.InstanceCount">
            <summary>
            The number of instances to draw.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndexedIndirectArgs.StartIndex">
            <summary>
            An offset into the index buffer where drawing should begin.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndexedIndirectArgs.StartVertex">
            <summary>
            An offset added to each vertex index.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndexedIndirectArgs.StartInstance">
            <summary>
            An offset added to each instance index.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUContext">
            <summary>
            Interface for GPU device context that can record and send graphics commands to the GPU in a sequence.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUContext"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.Clear(FlaxEngine.GPUTextureView,FlaxEngine.Color)">
            <summary>
            Clears texture surface with a color. Supports volumetric textures and texture arrays (including cube textures).
            </summary>
            <param name="rt">The target surface.</param>
            <param name="color">The clear color.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.ClearDepth(FlaxEngine.GPUTextureView,System.Single)">
            <summary>
            Clears depth buffer.
            </summary>
            <param name="depthBuffer">The depth buffer to clear.</param>
            <param name="depthValue">The clear depth value.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.ClearUA(FlaxEngine.GPUBuffer,FlaxEngine.Vector4)">
            <summary>
            Clears an unordered access resource with a float value.
            </summary>
            <param name="buf">The buffer to clear.</param>
            <param name="value">The clear value.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.UpdateBuffer(FlaxEngine.GPUBuffer,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Updates the buffer data.
            </summary>
            <param name="buffer">The destination buffer to write to.</param>
            <param name="data">The pointer to the data.</param>
            <param name="size">The data size (in bytes) to write.</param>
            <param name="offset">The offset (in bytes) from the buffer start to copy data to.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.CopyBuffer(FlaxEngine.GPUBuffer,FlaxEngine.GPUBuffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies the buffer data.
            </summary>
            <param name="dstBuffer">The destination buffer to write to.</param>
            <param name="srcBuffer">The source buffer to read from.</param>
            <param name="size">The size of data to copy (in bytes).</param>
            <param name="dstOffset">The offset (in bytes) from the destination buffer start to copy data to.</param>
            <param name="srcOffset">The offset (in bytes) from the source buffer start to copy data from.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.UpdateTexture(FlaxEngine.GPUTexture,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Updates the texture data.
            </summary>
            <param name="texture">The destination texture.</param>
            <param name="arrayIndex">The destination surface index in the texture array.</param>
            <param name="mipIndex">The absolute index of the mip map to update.</param>
            <param name="data">The pointer to the data.</param>
            <param name="rowPitch">The row pitch (in bytes) of the input data.</param>
            <param name="slicePitch">The slice pitch (in bytes) of the input data.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.CopyTexture(FlaxEngine.GPUTexture,System.UInt32,System.UInt32,System.UInt32,System.UInt32,FlaxEngine.GPUTexture,System.UInt32)">
            <summary>
            Copies region of the texture.
            </summary>
            <param name="dstResource">The destination resource.</param>
            <param name="dstSubresource">The destination subresource index.</param>
            <param name="dstX">The x-coordinate of the upper left corner of the destination region.</param>
            <param name="dstY">The y-coordinate of the upper left corner of the destination region.</param>
            <param name="dstZ">The z-coordinate of the upper left corner of the destination region.</param>
            <param name="srcResource">The source resource.</param>
            <param name="srcSubresource">The source subresource index.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.ResetCounter(FlaxEngine.GPUBuffer)">
            <summary>
            Resets the counter buffer to zero (hidden by the driver).
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.CopyCounter(FlaxEngine.GPUBuffer,System.UInt32,FlaxEngine.GPUBuffer)">
            <summary>
            Copies the counter buffer value.
            </summary>
            <param name="dstBuffer">The destination buffer.</param>
            <param name="dstOffset">The destination aligned byte offset.</param>
            <param name="srcBuffer">The source buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.CopyResource(FlaxEngine.GPUResource,FlaxEngine.GPUResource)">
            <summary>
            Copies the resource data (whole resource).
            </summary>
            <param name="dstResource">The destination resource.</param>
            <param name="srcResource">The source resource.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.CopySubresource(FlaxEngine.GPUResource,System.UInt32,FlaxEngine.GPUResource,System.UInt32)">
            <summary>
            Copies the subresource data.
            </summary>
            <param name="dstResource">The destination resource.</param>
            <param name="dstSubresource">The destination subresource index.</param>
            <param name="srcResource">The source resource.</param>
            <param name="srcSubresource">The source subresource index.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.ResetRenderTarget">
            <summary>
            Unbinds all the render targets and flushes the change with the driver (used to prevent driver detection of resource hazards, eg. when down-scaling the texture).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetRenderTarget(FlaxEngine.GPUTextureView)">
            <summary>
            Sets the render target to the output.
            </summary>
            <param name="rt">The render target.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetRenderTarget(FlaxEngine.GPUTextureView,FlaxEngine.GPUTextureView)">
            <summary>
            Sets the render target and the depth buffer to the output.
            </summary>
            <param name="depthBuffer">The depth buffer.</param>
            <param name="rt">The render target.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetRenderTarget(FlaxEngine.GPUTextureView,FlaxEngine.GPUTextureView[])">
            <summary>
            Sets the render targets and the depth buffer to the output.
            </summary>
            <param name="depthBuffer">The depth buffer (can be null).</param>
            <param name="rts">The array with render targets to bind.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetRenderTarget(FlaxEngine.GPUTextureView,FlaxEngine.GPUBuffer)">
            <summary>
            Sets the render target and unordered access output.
            </summary>
            <param name="rt">The render target to bind to output.</param>
            <param name="uaOutput">The unordered access buffer to bind to output.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.ResetSR">
            <summary>
            Unbinds all shader resource slots and flushes the change with the driver (used to prevent driver detection of resource hazards, eg. when down-scaling the texture).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.ResetUA">
            <summary>
            Unbinds all unordered access resource slots and flushes the change with the driver (used to prevent driver detection of resource hazards, eg. when down-scaling the texture).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.ResetCB">
            <summary>
            Unbinds all constant buffer slots and flushes the change with the driver (used to prevent driver detection of resource hazards, eg. when down-scaling the texture).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindSR(System.Int32,FlaxEngine.GPUTexture)">
            <summary>
            Binds the texture to the shader resource slot.
            </summary>
            <param name="slot">The slot index.</param>
            <param name="t">The GPU texture.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindSR(System.Int32,FlaxEngine.GPUResourceView)">
            <summary>
            Binds the resource view to the shader resource slot (texture view or buffer view).
            </summary>
            <param name="slot">The slot index.</param>
            <param name="view">The resource view.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindUA(System.Int32,FlaxEngine.GPUResourceView)">
            <summary>
            Binds the resource view to the unordered access slot (texture view or buffer view).
            </summary>
            <param name="slot">The slot index.</param>
            <param name="view">The resource view.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindCB(System.Int32,System.IntPtr)">
            <summary>
            Binds the constant buffer to the slot.
            </summary>
            <param name="slot">The slot index.</param>
            <param name="cb">The constant buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindVB(FlaxEngine.GPUBuffer[])">
            <summary>
            Binds the vertex buffers to the pipeline.
            </summary>
            <param name="vertexBuffers">The array of vertex buffers to use.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindIB(FlaxEngine.GPUBuffer)">
            <summary>
            Binds the index buffer to the pipeline.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.UpdateCB(System.IntPtr,System.IntPtr)">
            <summary>
            Updates the constant buffer data.
            </summary>
            <param name="cb">The constant buffer.</param>
            <param name="data">The pointer to the data.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.Dispatch(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Executes a command list from a thread group.
            </summary>
            <param name="shader">The compute shader program to execute.</param>
            <param name="threadGroupCountX">The number of groups dispatched in the x direction.</param>
            <param name="threadGroupCountY">The number of groups dispatched in the y direction.</param>
            <param name="threadGroupCountZ">The number of groups dispatched in the z direction.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DispatchIndirect(System.IntPtr,FlaxEngine.GPUBuffer,System.UInt32)">
            <summary>
            Executes a command list from a thread group. Buffer must contain GPUDispatchIndirectArgs.
            </summary>
            <param name="shader">The compute shader program to execute.</param>
            <param name="bufferForArgs">The buffer with drawing arguments.</param>
            <param name="offsetForArgs">The aligned byte offset for arguments.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.ResolveMultisample(FlaxEngine.GPUTexture,FlaxEngine.GPUTexture,System.Int32,System.Int32,FlaxEngine.PixelFormat)">
            <summary>
            Resolves the multisampled texture by performing a copy of the resource into a non-multisampled resource.
            </summary>
            <param name="sourceMultisampleTexture">The source multisampled texture. Must be multisampled.</param>
            <param name="destTexture">The destination texture. Must be single-sampled.</param>
            <param name="sourceSubResource">The source sub-resource index.</param>
            <param name="destSubResource">The destination sub-resource index.</param>
            <param name="format">The format. Indicates how the multisampled resource will be resolved to a single-sampled resource.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DrawFullscreenTriangle(System.Int32)">
            <summary>
            Draws the fullscreen triangle (using single triangle). Use instance count parameter to render more than one instance of the triangle.
            </summary>
            <param name="instanceCount">The instance count. Use SV_InstanceID in vertex shader to detect volume slice plane index.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.Draw(FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <summary>
            Draws the specified source texture to destination render target (using fullscreen triangle). Copies contents with resizing and format conversion support. Uses linear texture sampling.
            </summary>
            <param name="dst">The destination texture.</param>
            <param name="src">The source texture.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.Draw(FlaxEngine.GPUTexture)">
            <summary>
            Draws the specified texture to render target (using fullscreen triangle). Copies contents with resizing and format conversion support. Uses linear texture sampling.
            </summary>
            <param name="rt">The texture.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.Draw(FlaxEngine.GPUTextureView)">
            <summary>
            Draws the specified texture to render target (using fullscreen triangle). Copies contents with resizing and format conversion support. Uses linear texture sampling.
            </summary>
            <param name="rt">The texture view.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.Draw(System.UInt32,System.UInt32)">
            <summary>
            Draws non-indexed, non-instanced primitives.
            </summary>
            <param name="startVertex">A value added to each index before reading a vertex from the vertex buffer.</param>
            <param name="verticesCount">The vertices count.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DrawInstanced(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Draws the instanced primitives.
            </summary>
            <param name="verticesCount">The vertices count.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startInstance">A value added to each index before reading per-instance data from a vertex buffer.</param>
            <param name="startVertex">A value added to each index before reading a vertex from the vertex buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DrawIndexed(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Draws the indexed primitives.
            </summary>
            <param name="indicesCount">The indices count.</param>
            <param name="startVertex">A value added to each index before reading a vertex from the vertex buffer.</param>
            <param name="startIndex">The location of the first index read by the GPU from the index buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DrawIndexedInstanced(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the indexed, instanced primitives.
            </summary>
            <param name="indicesCount">The indices count.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startInstance">A value added to each index before reading per-instance data from a vertex buffer.</param>
            <param name="startVertex">A value added to each index before reading a vertex from the vertex buffer.</param>
            <param name="startIndex">The location of the first index read by the GPU from the index buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DrawInstancedIndirect(FlaxEngine.GPUBuffer,System.UInt32)">
            <summary>
            Draws the instanced GPU-generated primitives. Buffer must contain GPUDrawIndirectArgs.
            </summary>
            <param name="bufferForArgs">The buffer with drawing arguments.</param>
            <param name="offsetForArgs">The aligned byte offset for arguments.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DrawIndexedInstancedIndirect(FlaxEngine.GPUBuffer,System.UInt32)">
            <summary>
            Draws the instanced GPU-generated indexed primitives. Buffer must contain GPUDrawIndexedIndirectArgs.
            </summary>
            <param name="bufferForArgs">The buffer with drawing arguments.</param>
            <param name="offsetForArgs">The aligned byte offset for arguments.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetViewportAndScissors(System.Single,System.Single)">
            <summary>
            Sets the rendering viewport and scissor rectangle.
            </summary>
            <param name="width">The width (in pixels).</param>
            <param name="height">The height (in pixels).</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetViewportAndScissors(FlaxEngine.Viewport)">
            <summary>
            Sets the rendering viewport and scissor rectangle.
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetViewport(System.Single,System.Single)">
            <summary>
            Sets the rendering viewport.
            </summary>
            <param name="width">The width (in pixels).</param>
            <param name="height">The height (in pixels).</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetViewport(FlaxEngine.Viewport@)">
            <summary>
            Sets the rendering viewport.
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetScissor(FlaxEngine.Rectangle@)">
            <summary>
            Sets the scissor rectangle.
            </summary>
            <param name="scissorRect">The scissor rectangle.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetState(FlaxEngine.GPUPipelineState)">
            <summary>
            Sets the graphics pipeline state.
            </summary>
            <param name="state">The state to bind.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.GetState">
            <summary>
            Gets the current pipeline state binded to the graphics pipeline.
            </summary>
            <returns>The current state.</returns>
        </member>
        <member name="M:FlaxEngine.GPUContext.ClearState">
            <summary>
            Clears the context state.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.FlushState">
            <summary>
            Flushes the internal cached context state with a command buffer.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.Flush">
            <summary>
            Flushes the command buffer (calls GPU execution).
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUDevice">
            <summary>
            Graphics device object for rendering on GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUDevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUDevice"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.Instance">
            <summary>
            The singleton instance of the graphics device.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.TotalGraphicsMemory">
            <summary>
            The total amount of graphics memory in bytes.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.Limits">
            <summary>
            The GPU limits.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.VideoOutputModes">
            <summary>
            The available video output modes.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.RendererType">
            <summary>
            Gets the device renderer type.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.ShaderProfile">
            <summary>
            Gets device shader profile type.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.FeatureLevel">
            <summary>
            Gets device feature level type.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.MainContext">
            <summary>
            Gets the main GPU context.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.Adapter">
            <summary>
            Gets the adapter device.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.NativePtr">
            <summary>
            Gets the native pointer to the underlying graphics device. It's a low-level platform-specific handle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.MemoryUsage">
            <summary>
            Gets the amount of memory usage by all the GPU resources (in bytes).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUDevice.GetFormatFeatures(FlaxEngine.PixelFormat)">
            <summary>
            Gets the supported features for the specified format (index is the pixel format value).
            </summary>
            <param name="format">The format.</param>
            <returns>The format features flags.</returns>
        </member>
        <member name="M:FlaxEngine.GPUDevice.CreateTexture(System.String)">
            <summary>
            Creates the texture.
            </summary>
            <param name="name">The resource name.</param>
            <returns>The texture.</returns>
        </member>
        <member name="T:FlaxEngine.GPUDevice.VideoOutputMode">
            <summary>
            Describes a video output display mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDevice.VideoOutputMode.Width">
            <summary>
            The resolution width (in pixel).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDevice.VideoOutputMode.Height">
            <summary>
            The resolution height (in pixel).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDevice.VideoOutputMode.RefreshRate">
            <summary>
            The screen refresh rate (in hertz).
            </summary>
        </member>
        <member name="T:FlaxEngine.FormatSupport">
            <summary>
            Which resources are supported for a given format and given device.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.None">
            <summary>
            No features supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Buffer">
            <summary>
            Buffer resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.InputAssemblyVertexBuffer">
            <summary>
            Vertex buffers supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.InputAssemblyIndexBuffer">
            <summary>
            Index buffers supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.StreamOutputBuffer">
            <summary>
            Streaming output buffers supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Texture1D">
            <summary>
            1D texture resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Texture2D">
            <summary>
            2D texture resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Texture3D">
            <summary>
            3D texture resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.TextureCube">
            <summary>
            Cube texture resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.ShaderLoad">
            <summary>
            The shader Load function for texture objects is supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.ShaderSample">
            <summary>
            The shader Sample function for texture objects is supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.ShaderSampleComparison">
            <summary>
            The shader SampleCmp and SampleCmpLevelZero functions for texture objects are supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.ShaderSampleMonoText">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Mip">
            <summary>
            Mipmaps are supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.MipAutogen">
            <summary>
            Automatic generation of mipmaps is supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.RenderTarget">
            <summary>
            Render targets are supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Blendable">
            <summary>
            Blend operations supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.DepthStencil">
            <summary>
            Depth stencils supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.CpuLockable">
            <summary>
            CPU locking supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.MultisampleResolve">
            <summary>
            Multisample antialiasing (MSAA) resolve operations are supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Display">
            <summary>
            Format can be displayed on screen.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.CastWithinBitLayout">
            <summary>
            Format can't be cast to another format.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.MultisampleRenderTarget">
            <summary>
            Format can be used as a multi-sampled render target.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.MultisampleLoad">
            <summary>
            Format can be used as a multi-sampled texture and read into a shader with the shader Load function.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.ShaderGather">
            <summary>
            Format can be used with the shader gather function.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.BackBufferCast">
            <summary>
            Format supports casting when the resource is a back buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.TypedUnorderedAccessView">
            <summary>
            Format can be used for an unordered access view.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.ShaderGatherComparison">
            <summary>
            Format can be used with the shader gather with comparison function.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.DecoderOutput">
            <summary>
            Format can be used with the decoder output.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.VideoProcessorOutput">
            <summary>
            Format can be used with the video processor output.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.VideoProcessorInput">
            <summary>
            Format can be used with the video processor input.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.VideoEncoder">
            <summary>
            Format can be used with the video encoder.
            </summary>
        </member>
        <member name="T:FlaxEngine.FormatFeatures">
            <summary>
            The features exposed for a particular format.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatFeatures.MSAALevelMax">
            <summary>
            Gets the maximum MSAA sample count for a particular <see cref="T:FlaxEngine.PixelFormat"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatFeatures.Support">
            <summary>
            Support of a given format on the installed video device.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPULimits">
            <summary>
            Graphics Device limits and constraints descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasCompute">
            <summary>
            True if device supports Compute shaders.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasTessellation">
            <summary>
            True if device supports Tessellation shaders (domain and hull shaders).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasGeometryShaders">
            <summary>
            True if device supports Geometry shaders.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasInstancing">
            <summary>
            True if device supports hardware geometry instancing.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasVolumeTextureRendering">
            <summary>
            True if device supports rendering to volume textures using Geometry shaders.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasDrawIndirect">
            <summary>
            True if device supports indirect drawing (including pixel shader write to UAV).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasAppendConsumeBuffers">
            <summary>
            True if device supports append/consume buffers with counters.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasSeparateRenderTargetBlendState">
            <summary>
            True if device supports separate render target blending states.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasDepthAsSRV">
            <summary>
            True if device supports depth buffer texture as a shader resource view.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasReadOnlyDepth">
            <summary>
            True if device supports depth buffer texture as a readonly depth buffer (can be sampled in the shader while performing depth-test).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasMultisampleDepthAsSRV">
            <summary>
            True if device supports multisampled depth buffer texture as a shader resource view.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumMipLevelsCount">
            <summary>
            The maximum amount of texture mip levels.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumTexture1DSize">
            <summary>
            The maximum size of the 1D texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumTexture1DArraySize">
            <summary>
            The maximum length of 1D textures array.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumTexture2DSize">
            <summary>
            The maximum size of the 2D texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumTexture2DArraySize">
            <summary>
            The maximum length of 2D textures array.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumTexture3DSize">
            <summary>
            The maximum size of the 3D texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumTextureCubeSize">
            <summary>
            The maximum size of the cube texture (both width and height).
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUPipelineState">
            <summary>
            Describes full graphics pipeline state within single object.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUPipelineState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUPipelineState"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUPipelineState.IsValid">
            <summary>
            Returns true if pipeline state is valid and ready to use
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUPipelineState.Init(FlaxEngine.GPUPipelineState.Description@)">
            <summary>
            Create new state data
            </summary>
            <param name="desc">Full pipeline state description</param>
            <returns>True if cannot create state, otherwise false</returns>
        </member>
        <member name="T:FlaxEngine.GPUPipelineState.Description">
            <summary>
            Pipeline state description
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.DepthWriteEnable">
            <summary>
            Enable/disable depth write
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.DepthTestEnable">
            <summary>
            Enable/disable depth test
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.DepthClipEnable">
            <summary>
            Enable/disable depth clipping
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.DepthFunc">
            <summary>
            A function that compares depth data against existing depth data
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.VS">
            <summary>
            Vertex shader program
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.HS">
            <summary>
            Hull shader program
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.DS">
            <summary>
            Domain shader program
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.GS">
            <summary>
            Geometry shader program
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.PS">
            <summary>
            Pixel shader program
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.PrimitiveTopologyType">
            <summary>
            Input primitives topology
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.Wireframe">
            <summary>
            True if use wireframe rendering, otherwise false
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.CullMode">
            <summary>
            Primitives culling mode
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.BlendMode">
            <summary>
            Colors blending mode
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUPipelineState.Description.Default">
            <summary>
            Default description
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUPipelineState.Description.DefaultNoDepth">
            <summary>
            Default description without using depth buffer at all
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUPipelineState.Description.DefaultFullscreenTriangle">
            <summary>
            Default description for fullscreen triangle rendering
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUResource">
            <summary>
            The base class for all GPU resources.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUResource"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUResource.MemoryUsage">
            <summary>
            Gets amount of GPU memory used by this resource (in bytes).
            It's a rough estimation. GPU memory may be fragmented, compressed or sub-allocated so the actual memory pressure from this resource may vary (also depends on the current graphics backend).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUResource.ReleaseGPU">
            <summary>
            Releases GPU resource data.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUResourceView">
            <summary>
            Interface for GPU resources views. Shared base class for texture and buffer views.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUResourceView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUResourceView"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.Graphics">
            <summary>
            Graphics device manager that creates, manages and releases graphics device and related objects.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.UseVSync">
            <summary>
            Enables rendering synchronization with the refresh rate of the display device to avoid "tearing" artifacts.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.AAQuality">
            <summary>
            Anti Aliasing quality setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.SSRQuality">
            <summary>
            Screen Space Reflections quality setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.SSAOQuality">
            <summary>
            Screen Space Ambient Occlusion quality setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.VolumetricFogQuality">
            <summary>
            Volumetric Fog quality setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.ShadowsQuality">
            <summary>
            The shadows quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.ShadowMapsQuality">
            <summary>
            The shadow maps quality (textures resolution).
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.AllowCSMBlending">
            <summary>
            Enables cascades splits blending for directional light shadows.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialInfo">
            <summary>
            Structure with basic information about the material surface. It describes how material is reacting on light and which graphical features of it requires to render.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialInfo.CreateDefault">
            <summary>
            Creates the default <see cref="T:FlaxEngine.MaterialInfo"/>.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialInfo.op_Equality(FlaxEngine.MaterialInfo,FlaxEngine.MaterialInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialInfo.op_Inequality(FlaxEngine.MaterialInfo,FlaxEngine.MaterialInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialInfo.Equals(FlaxEngine.MaterialInfo)">
            <summary>
            Compares with the other material info and returns true if both values are equal.
            </summary>
            <param name="other">The other info.</param>
            <returns>True if both objects are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.MaterialInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.MaterialInfo.Domain">
            <summary>
            The material shader domain.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.BlendMode">
            <summary>
            The blending mode for rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.ShadingModel">
            <summary>
            The shading mode for lighting.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.UsageFlags">
            <summary>
            The usage flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.FeaturesFlags">
            <summary>
            The features usage flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.DecalBlendingMode">
            <summary>
            The decal material blending mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.PostFxLocation">
            <summary>
            The post fx material rendering location.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.CullMode">
            <summary>
            The primitives culling mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.MaskThreshold">
            <summary>
            The mask threshold.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.OpacityThreshold">
            <summary>
            The opacity threshold.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.TessellationMode">
            <summary>
            The tessellation mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.MaxTessellationFactor">
            <summary>
            The maximum tessellation factor (used only if material uses tessellation).
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialParameterType">
            <summary>
            Material parameters types.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Invalid">
            <summary>
            The invalid type.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Bool">
            <summary>
            The bool.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Integer">
            <summary>
            The integer.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Float">
            <summary>
            The float.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Vector2">
            <summary>
            The vector2
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Vector3">
            <summary>
            The vector3.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Vector4">
            <summary>
            The vector4.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.CubeTexture">
            <summary>
            The cube texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.NormalMap">
            <summary>
            The normal map texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.SceneTexture">
            <summary>
            The scene texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.GPUTexture">
            <summary>
            The GPU texture (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Matrix">
            <summary>
            The matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.GPUTextureArray">
            <summary>
            The GPU texture array (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.GPUTextureVolume">
            <summary>
            The GPU volume texture (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.GPUTextureCube">
            <summary>
            The GPU cube texture (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.ChannelMask">
            <summary>
            The RGBA channel selection mask.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.GameplayGlobal">
            <summary>
            The gameplay global.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialDomain">
            <summary>
            Material domain type. Material domain defines the target usage of the material shader.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.Surface">
            <summary>
            The surface material. Can be used to render the scene geometry including models and skinned models.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.PostProcess">
            <summary>
            The post process material. Can be used to perform custom post-processing of the rendered frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.Decal">
            <summary>
            The deferred decal material. Can be used to apply custom overlay or surface modifications to the object surfaces in the world.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.GUI">
            <summary>
            The GUI shader. Can be used to draw custom control interface elements or to add custom effects to the GUI.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.Terrain">
            <summary>
            The terrain shader. Can be used only with landscape chunks geometry that use optimized vertex data and support multi-layered blending.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.Particle">
            <summary>
            The particle shader. Can be used only with particles geometry (sprites, trails and ribbons). Supports reading particle data on a GPU.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialBlendMode">
            <summary>
            Material blending modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialBlendMode.Opaque">
            <summary>
            The opaque material. Used during GBuffer pass rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialBlendMode.Transparent">
            <summary>
            The transparent material. Used during Forward pass rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialBlendMode.Additive">
            <summary>
            The additive blend. Material color is used to add to color of the objects behind the surface. Used during Forward pass rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialBlendMode.Multiply">
            <summary>
            The multiply blend. Material color is used to multiply color of the objects behind the surface. Used during Forward pass rendering.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialShadingModel">
            <summary>
            Material shading modes. Defines how material inputs and properties are combined to result the final surface color.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialShadingModel.Unlit">
            <summary>
            The unlit material. Emissive channel is used as an output color. Can perform custom lighting operations or just glow. Won't be affected by the lighting pipeline.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialShadingModel.Lit">
            <summary>
            The default lit material. The most common choice for the material surfaces.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialShadingModel.Subsurface">
            <summary>
            The subsurface material. Intended for materials like vax or skin that need light scattering to transport simulation through the object.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialFeaturesFlags">
            <summary>
            Material features flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.Wireframe">
            <summary>
            The wireframe material.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.DisableDepthTest">
            <summary>
            The depth test is disabled (material ignores depth).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.DisableDepthWrite">
            <summary>
            Disable depth buffer write (won't modify depth buffer value during rendering).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.InputWorldSpaceNormal">
            <summary>
            The flag used to indicate that material input normal vector is defined in the world space rather than tangent space.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.DitheredLODTransition">
            <summary>
            The flag used to indicate that material uses dithered model LOD transition for smoother LODs switching.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.DisableFog">
            <summary>
            The flag used to disable fog. The Forward Pass materials option.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.DisableReflections">
            <summary>
            The flag used to disable reflections. The Forward Pass materials option.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.DisableDistortion">
            <summary>
            The flag used to disable distortion effect (light refraction). The Forward Pass materials option.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialUsageFlags">
            <summary>
            Material features usage flags. Detected by the material generator to help graphics pipeline optimize rendering of material shaders.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UseMask">
            <summary>
            Material is using mask to discard some pixels. Masked materials are using full vertex buffer during shadow maps and depth pass rendering (need UVs).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UseEmissive">
            <summary>
            The material is using emissive light.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UsePositionOffset">
            <summary>
            The material is using world position offset (it may be animated inside a shader).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UseVertexColor">
            <summary>
            The material is using vertex colors. The render will try to feed the pipeline with a proper buffer so material can gather valid data.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UseNormal">
            <summary>
            The material is using per-pixel normal mapping.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UseDisplacement">
            <summary>
            The material is using position displacement (in domain shader).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UseRefraction">
            <summary>
            The flag used to indicate that material uses refraction feature.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialDecalBlendingMode">
            <summary>
            Decal material blending modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDecalBlendingMode.Translucent">
            <summary>
            Decal will be fully blended with the material surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDecalBlendingMode.Stain">
            <summary>
            Decal color will be blended with the material surface color (using multiplication).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDecalBlendingMode.Normal">
            <summary>
            Decal will blend the normal vector only.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDecalBlendingMode.Emissive">
            <summary>
            Decal will apply the emissive light only.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialSceneTextures">
            <summary>
            Material input scene textures. Special inputs from the graphics pipeline.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.SceneColor">
            <summary>
            The scene color.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.SceneDepth">
            <summary>
            The scene depth.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.DiffuseColor">
            <summary>
            The material diffuse color.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.SpecularColor">
            <summary>
            The material specular color.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.WorldNormal">
            <summary>
            The material world space normal.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.AmbientOcclusion">
            <summary>
            The ambient occlusion.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.Metalness">
            <summary>
            The material metalness value.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.Roughness">
            <summary>
            The material roughness value.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.Specular">
            <summary>
            The material specular value.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.BaseColor">
            <summary>
            The material color.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.ShadingModel">
            <summary>
            The material shading mode.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialParameter">
            <summary>
            Material variable object. Allows to modify material parameter value at runtime.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MaterialParameter"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialParameter.ParameterID">
            <summary>
            Gets the parameter ID (not the parameter instance Id but the original parameter ID).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialParameter.ParameterType">
            <summary>
            Gets the parameter type.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialParameter.IsPublic">
            <summary>
            Returns true is parameter is public visible.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialParameter.IsOverride">
            <summary>
            Returns true is parameter is overriding the value.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh">
            <summary>
            Represents part of the model that is made of vertices and can be rendered using custom material and transformation.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh.Vertex0">
            <summary>
            The Vertex Buffer 0 structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex0.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh.Vertex1">
            <summary>
            The Vertex Buffer 1 structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex1.TexCoord">
            <summary>
            The texture coordinates (packed).
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex1.Normal">
            <summary>
            The normal vector (packed).
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex1.Tangent">
            <summary>
            The tangent vector (packed). Bitangent sign in component A.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex1.LightmapUVs">
            <summary>
            The lightmap UVs (packed).
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh.Vertex2">
            <summary>
            The Vertex Buffer 2 structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex2.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh.Vertex">
            <summary>
            The raw Vertex Buffer structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.TexCoord">
            <summary>
            The texture coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Normal">
            <summary>
            The normal vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Tangent">
            <summary>
            The tangent vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Bitangent">
            <summary>
            The tangent vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.LightmapUVs">
            <summary>
            The lightmap UVs.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.ParentModel">
            <summary>
            Gets the parent model asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.MaterialSlot">
            <summary>
            Gets the material slot used by this mesh during rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.IndexBufferFormat">
            <summary>
            Gets a format of the mesh index buffer.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateMesh(FlaxEngine.Vector3[],System.Int32[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[],FlaxEngine.Color32[])">
            <summary>
            Updates the model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (triangles). Uses 32-bit stride buffer. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The normal vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
            <param name="colors">The vertex colors (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateMesh(System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{FlaxEngine.Vector2},System.Collections.Generic.List{FlaxEngine.Color32})">
            <summary>
            Updates the model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (triangles). Uses 32-bit stride buffer. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The normal vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
            <param name="colors">The vertex colors (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateMesh(FlaxEngine.Vector3[],System.UInt16[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[],FlaxEngine.Color32[])">
            <summary>
            Updates the model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (triangles). Uses 16-bit stride buffer. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The tangent vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
            <param name="colors">The vertex colors (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateMesh(System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{System.UInt16},System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{FlaxEngine.Vector2},System.Collections.Generic.List{FlaxEngine.Color32})">
            <summary>
            Updates the model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (triangles). Uses 16-bit stride buffer. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The tangent vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
            <param name="colors">The vertex colors (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateTriangles(System.Int32[])">
            <summary>
            Updates the model mesh index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="triangles">The mesh index buffer (triangles). Uses 32-bit stride buffer. Cannot be null.</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateTriangles(System.Collections.Generic.List{System.Int32})">
            <summary>
            Updates the model mesh index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="triangles">The mesh index buffer (triangles). Uses 32-bit stride buffer. Cannot be null.</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateTriangles(System.UInt16[])">
            <summary>
            Updates the model mesh index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="triangles">The mesh index buffer (triangles). Uses 16-bit stride buffer. Cannot be null.</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateTriangles(System.Collections.Generic.List{System.UInt16})">
            <summary>
            Updates the model mesh index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="triangles">The mesh index buffer (triangles). Uses 16-bit stride buffer. Cannot be null.</param>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadVertexBuffer0(System.Boolean)">
            <summary>
            Downloads the first vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadVertexBuffer1(System.Boolean)">
            <summary>
            Downloads the second vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadVertexBuffer2(System.Boolean)">
            <summary>
            Downloads the third vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <remarks>
            If mesh has no vertex colors (stored in vertex buffer 2) the the returned value is null.
            </remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data or null if mesh has no vertex colors.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadVertexBuffer(System.Boolean)">
            <summary>
            Downloads the raw vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadIndexBuffer(System.Boolean)">
            <summary>
            Downloads the index buffer that contains mesh triangles data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <remarks>If mesh index buffer format (see <see cref="P:FlaxEngine.Mesh.IndexBufferFormat"/>) is <see cref="F:FlaxEngine.PixelFormat.R16_UInt"/> then it's faster to call .</remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadIndexBufferUShort(System.Boolean)">
            <summary>
            Downloads the index buffer that contains mesh triangles data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <remarks>If mesh index buffer format (see <see cref="P:FlaxEngine.Mesh.IndexBufferFormat"/>) is <see cref="F:FlaxEngine.PixelFormat.R32_UInt"/> then data won't be downloaded.</remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Mesh"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.MaterialSlotIndex">
            <summary>
            Gets or sets the index of the material slot to use during this mesh rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.TriangleCount">
            <summary>
            Gets the triangle count.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.Use16BitIndexBuffer">
            <summary>
            Determines whether this mesh is using 16 bit index buffer, otherwise it's 32 bit.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.HasVertexColors">
            <summary>
            Determines whether this mesh has a vertex colors buffer.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.HasLightmapUVs">
            <summary>
            Determines whether this mesh contains valid lightmap texture coordinates data.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.Box">
            <summary>
            Gets the box.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.Sphere">
            <summary>
            Gets the sphere.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mesh.Draw(FlaxEngine.RenderContext@,FlaxEngine.MaterialBase,FlaxEngine.Matrix@,FlaxEngine.StaticFlags,System.Boolean)">
            <summary>
            Draws the mesh.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="material">The material to use for rendering.</param>
            <param name="world">The world transformation of the model.</param>
            <param name="flags">The object static flags.</param>
            <param name="receiveDecals">True if rendered geometry can receive decals, otherwise false.</param>
        </member>
        <member name="T:FlaxEngine.MaterialSlot">
            <summary>
            The material slot descriptor that specifies how to render geometry using it.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialSlot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MaterialSlot"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialSlot.Material">
            <summary>
            The material to use for rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialSlot.ShadowsMode">
            <summary>
            The shadows casting mode by this visual element.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialSlot.Name">
            <summary>
            The slot name.
            </summary>
        </member>
        <member name="T:FlaxEngine.ModelInstanceEntry">
            <summary>
            The model instance entry that describes how to draw it.
            </summary>
        </member>
        <member name="F:FlaxEngine.ModelInstanceEntry.Material">
            <summary>
            The mesh surface material used for the rendering. If not assigned the default value will be used from the model asset.
            </summary>
        </member>
        <member name="F:FlaxEngine.ModelInstanceEntry.ShadowsMode">
            <summary>
            The shadows casting mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.ModelInstanceEntry.Visible">
            <summary>
            Determines whenever this mesh is visible.
            </summary>
        </member>
        <member name="F:FlaxEngine.ModelInstanceEntry.ReceiveDecals">
            <summary>
            Determines whenever this mesh can receive decals.
            </summary>
        </member>
        <member name="T:FlaxEngine.ModelLOD">
            <summary>
            Represents single Level Of Detail for the model. Contains a collection of the meshes.
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelLOD.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ModelLOD"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelLOD.ScreenSize">
            <summary>
            The screen size to switch LODs. Bottom limit of the model screen size to render this LOD.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelLOD.Meshes">
            <summary>
            The meshes array.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelLOD.Box">
            <summary>
            Gets the bounding box combined for all meshes in this model LOD.
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelLOD.Draw(FlaxEngine.RenderContext@,FlaxEngine.MaterialBase,FlaxEngine.Matrix@,FlaxEngine.StaticFlags,System.Boolean)">
            <summary>
            Draws the meshes from the model LOD.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="material">The material to use for rendering.</param>
            <param name="world">The world transformation of the model.</param>
            <param name="flags">The object static flags.</param>
            <param name="receiveDecals">True if rendered geometry can receive decals, otherwise false.</param>
        </member>
        <member name="T:FlaxEngine.SkeletonNode">
            <summary>
            Describes a single skeleton node data. Used by the runtime.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonNode.ParentIndex">
            <summary>
            The parent node index. The root node uses value -1.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonNode.LocalTransform">
            <summary>
            The local transformation of the node, relative to the parent node.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonNode.Name">
            <summary>
            The name of this node.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkeletonBone">
            <summary>
            Describes a single skeleton bone data. Used by the runtime. Skeleton bones are subset of the skeleton nodes collection that are actually used by the skinned model meshes.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonBone.ParentIndex">
            <summary>
            The parent bone index. The root bone uses value -1.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonBone.NodeIndex">
            <summary>
            The index of the skeleton node where bone is 'attached'. Used as a animation transformation source.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonBone.LocalTransform">
            <summary>
            The local transformation of the bone, relative to the parent bone (in bind pose).
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonBone.OffsetMatrix">
            <summary>
            The matrix that transforms from mesh space to bone space in bind pose (inverse bind pose).
            </summary>
        </member>
        <member name="T:FlaxEngine.SkinnedMesh">
            <summary>
            Represents part of the skinned model that is made of vertices and can be rendered using custom material, transformation and skeleton bones hierarchy.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SkinnedMesh"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.MaterialSlotIndex">
            <summary>
            Gets or sets the material slot index.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.TriangleCount">
            <summary>
            Gets the triangle count.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.Use16BitIndexBuffer">
            <summary>
            Determines whether this mesh is using 16 bit index buffer, otherwise it's 32 bit.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.Box">
            <summary>
            Gets the box.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.Sphere">
            <summary>
            Gets the sphere.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkinnedMesh.Vertex0">
            <summary>
            The Vertex Buffer 0 structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.TexCoord">
            <summary>
            The texture coordinates (packed).
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.Normal">
            <summary>
            The normal vector (packed).
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.Tangent">
            <summary>
            The tangent vector (packed). Bitangent sign in component A.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.BlendIndices">
            <summary>
            The blend indices (packed). Up to 4 bones.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.BlendWeights">
            <summary>
            The blend weights (normalized, packed). Up to 4 bones.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkinnedMesh.Vertex">
            <summary>
            The raw Vertex Buffer structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.TexCoord">
            <summary>
            The texture coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.Normal">
            <summary>
            The normal vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.Tangent">
            <summary>
            The tangent vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.Bitangent">
            <summary>
            The tangent vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.BlendIndices">
            <summary>
            The blend indices. Up to 4 bones.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.BlendWeights">
            <summary>
            The blend weights (normalized). Up to 4 bones.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.ParentSkinnedModel">
            <summary>
            Gets the parent model asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.MaterialSlot">
            <summary>
            Gets the material slot used by this mesh during rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.IndexBufferFormat">
            <summary>
            Gets a format of the mesh index buffer.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.UpdateMesh(FlaxEngine.Vector3[],System.Int32[],FlaxEngine.Int4[],FlaxEngine.Vector4[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[])">
            <summary>
            Updates the skinned model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (triangles). Uses 32-bit stride buffer. Cannot be null.</param>
            <param name="blendIndices">The skinned mesh blend indices buffer. Contains indices of the skeleton bones (up to 4 bones per vertex) to use for vertex position blending. Cannot be null.</param>
            <param name="blendWeights">The skinned mesh blend weights buffer (normalized). Contains weights per blend bone (up to 4 bones per vertex) of the skeleton bones to mix for vertex position blending. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The normal vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.UpdateMesh(FlaxEngine.Vector3[],System.UInt16[],FlaxEngine.Int4[],FlaxEngine.Vector4[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[])">
            <summary>
            Updates the skinned model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (triangles). Uses 16-bit stride buffer. Cannot be null.</param>
            <param name="blendIndices">The skinned mesh blend indices buffer. Contains indices of the skeleton bones (up to 4 bones per vertex) to use for vertex position blending. Cannot be null.</param>
            <param name="blendWeights">The skinned mesh blend weights buffer (normalized). Contains weights per blend bone (up to 4 bones per vertex) of the skeleton bones to mix for vertex position blending. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The tangent vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.DownloadVertexBuffer0(System.Boolean)">
            <summary>
            Downloads the first vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.DownloadVertexBuffer(System.Boolean)">
            <summary>
            Downloads the raw vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.DownloadIndexBuffer(System.Boolean)">
            <summary>
            Downloads the index buffer that contains mesh triangles data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <remarks>If mesh index buffer format (see <see cref="P:FlaxEngine.SkinnedMesh.IndexBufferFormat"/>) is <see cref="F:FlaxEngine.PixelFormat.R16_UInt"/> then it's faster to call .</remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.DownloadIndexBufferUShort(System.Boolean)">
            <summary>
            Downloads the index buffer that contains mesh triangles data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <remarks>If mesh index buffer format (see <see cref="P:FlaxEngine.SkinnedMesh.IndexBufferFormat"/>) is <see cref="F:FlaxEngine.PixelFormat.R32_UInt"/> then data won't be downloaded.</remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="T:FlaxEngine.SkinnedModelLOD">
            <summary>
            Represents single Level Of Detail for the skinned model. Contains a collection of the meshes.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedModelLOD.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SkinnedModelLOD"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModelLOD.ScreenSize">
            <summary>
            The screen size to switch LODs. Bottom limit of the model screen size to render this LOD.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModelLOD.Meshes">
            <summary>
            The meshes array.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModelLOD.Box">
            <summary>
            Gets the bounding box combined for all meshes in this model LOD.
            </summary>
        </member>
        <member name="T:FlaxEngine.PixelFormat">
            <summary>
            Enumeration with all pixel formats used by the graphics pipeline.
            </summary>
            <remarks>
            Reference: https://msdn.microsoft.com/en-us/library/windows/desktop/bb173059(v=vs.85).aspx
            </remarks>
        </member>
        <member name="F:FlaxEngine.PixelFormat.Unknown">
            <summary>
            The format is not known.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32A32_Typeless">
            <summary>
            A four-component, 128-bit typeless format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32A32_Float">
            <summary>
            A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32A32_UInt">
            <summary>
            A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32A32_SInt">
            <summary>
            A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32_Typeless">
            <summary>
            A three-component, 96-bit typeless format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32_Float">
            <summary>
            A three-component, 96-bit floating-point format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32_UInt">
            <summary>
            A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32_SInt">
            <summary>
            A three-component, 96-bit signed-integer format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16B16A16_Typeless">
            <summary>
            A four-component, 64-bit typeless format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16B16A16_Float">
            <summary>
            A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16B16A16_UNorm">
            <summary>
            A four-component, 64-bit unsigned-normalized-integer format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16B16A16_UInt">
            <summary>
            A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16B16A16_SNorm">
            <summary>
            A four-component, 64-bit signed-normalized-integer format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16B16A16_SInt">
            <summary>
            A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32_Typeless">
            <summary>
            A two-component, 64-bit typeless format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32_Float">
            <summary>
            A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32_UInt">
            <summary>
            A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32_SInt">
            <summary>
            A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G8X24_Typeless">
            <summary>
            A two-component, 64-bit typeless format that supports 32 bits for the red channel, 8 bits for the green channel, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.D32_Float_S8X24_UInt">
            <summary>
            A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32_Float_X8X24_Typeless">
            <summary>
            A 32-bit floating-point component, and two typeless components (with an additional 32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.X32_Typeless_G8X24_UInt">
            <summary>
            A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R10G10B10A2_Typeless">
            <summary>
            A four-component, 32-bit typeless format that supports 10 bits for each color and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R10G10B10A2_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format that supports 10 bits for each color and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R10G10B10A2_UInt">
            <summary>
            A four-component, 32-bit unsigned-integer format that supports 10 bits for each color and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R11G11B10_Float">
            <summary>
            Three partial-precision floating-point numbers encoded into a single 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa for R and G, and a 5-bit mantissa for B.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8B8A8_Typeless">
            <summary>
            A four-component, 32-bit typeless format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8B8A8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8B8A8_UNorm_sRGB">
            <summary>
            A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8B8A8_UInt">
            <summary>
            A four-component, 32-bit unsigned-integer format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8B8A8_SNorm">
            <summary>
            A four-component, 32-bit signed-normalized-integer format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8B8A8_SInt">
            <summary>
            A four-component, 32-bit signed-integer format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16_Typeless">
            <summary>
            A two-component, 32-bit typeless format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16_Float">
            <summary>
            A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16_UNorm">
            <summary>
            A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits each for the green and red channels.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16_UInt">
            <summary>
            A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16_SNorm">
            <summary>
            A two-component, 32-bit signed-normalized-integer format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16_SInt">
            <summary>
            A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32_Typeless">
            <summary>
            A single-component, 32-bit typeless format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.D32_Float">
            <summary>
            A single-component, 32-bit floating-point format that supports 32 bits for depth.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32_Float">
            <summary>
            A single-component, 32-bit floating-point format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32_UInt">
            <summary>
            A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32_SInt">
            <summary>
            A single-component, 32-bit signed-integer format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R24G8_Typeless">
            <summary>
            A two-component, 32-bit typeless format that supports 24 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.D24_UNorm_S8_UInt">
            <summary>
            A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R24_UNorm_X8_Typeless">
            <summary>
            A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits. This format has 24 bits red channel and 8 bits unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.X24_Typeless_G8_UInt">
            <summary>
            A 32-bit format, that contains a 24 bit, single-component, typeless format, with an additional 8 bit unsigned integer component. This format has 24 bits unused and 8 bits green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8_Typeless">
            <summary>
            A two-component, 16-bit typeless format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8_UNorm">
            <summary>
            A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8_UInt">
            <summary>
            A two-component, 16-bit unsigned-integer format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8_SNorm">
            <summary>
            A two-component, 16-bit signed-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8_SInt">
            <summary>
            A two-component, 16-bit signed-integer format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16_Typeless">
            <summary>
            A single-component, 16-bit typeless format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16_Float">
            <summary>
            A single-component, 16-bit floating-point format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.D16_UNorm">
            <summary>
            A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for depth.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16_UNorm">
            <summary>
            A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16_UInt">
            <summary>
            A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16_SNorm">
            <summary>
            A single-component, 16-bit signed-normalized-integer format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16_SInt">
            <summary>
            A single-component, 16-bit signed-integer format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8_Typeless">
            <summary>
            A single-component, 8-bit typeless format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8_UNorm">
            <summary>
            A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8_UInt">
            <summary>
            A single-component, 8-bit unsigned-integer format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8_SNorm">
            <summary>
            A single-component, 8-bit signed-normalized-integer format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8_SInt">
            <summary>
            A single-component, 8-bit signed-integer format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.A8_UNorm">
            <summary>
            A single-component, 8-bit unsigned-normalized-integer format for alpha only.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R1_UNorm">
            <summary>
            A single-component, 1-bit unsigned-normalized integer format that supports 1 bit for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R9G9B9E5_SharedExp">
            <summary>
            Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8_B8G8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the UYVY format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. Width must be even.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.G8R8_G8B8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the YUY2 format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. Width must be even.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC1_Typeless">
            <summary>
            Four-component typeless block-compression format
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC1_UNorm">
            <summary>
            Four-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC1_UNorm_sRGB">
            <summary>
            Four-component block-compression format for sRGB data.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC2_Typeless">
            <summary>
            Four-component typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC2_UNorm">
            <summary>
            Four-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC2_UNorm_sRGB">
            <summary>
            Four-component block-compression format for sRGB data.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC3_Typeless">
            <summary>
            Four-component typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC3_UNorm">
            <summary>
            Four-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC3_UNorm_sRGB">
            <summary>
            Four-component block-compression format for sRGB data.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC4_Typeless">
            <summary>
            One-component typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC4_UNorm">
            <summary>
            One-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC4_SNorm">
            <summary>
            One-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC5_Typeless">
            <summary>
            Two-component typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC5_UNorm">
            <summary>
            Two-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC5_SNorm">
            <summary>
            Two-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B5G6R5_UNorm">
            <summary>
            A three-component, 16-bit unsigned-normalized-integer format that supports 5 bits for blue, 6 bits for green, and 5 bits for red.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B5G5R5A1_UNorm">
            <summary>
            A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits for each color channel and 1-bit alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B8G8R8A8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8-bit alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B8G8R8X8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8 bits unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R10G10B10_Xr_Bias_A2_UNorm">
            <summary>
            A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits for each color channel and 2-bit alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B8G8R8A8_Typeless">
            <summary>
            A four-component, 32-bit typeless format that supports 8 bits for each channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B8G8R8A8_UNorm_sRGB">
            <summary>
            A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B8G8R8X8_Typeless">
            <summary>
            A four-component, 32-bit typeless format that supports 8 bits for each color channel, and 8 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B8G8R8X8_UNorm_sRGB">
            <summary>
            A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each color channel, and 8 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC6H_Typeless">
            <summary>
            A typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC6H_Uf16">
            <summary>
            A block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC6H_Sf16">
            <summary>
            A block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC7_Typeless">
            <summary>
            A typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC7_UNorm">
            <summary>
            A block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC7_UNorm_sRGB">
            <summary>
            A block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.MAX">
            <summary>
            The maximum format value (for internal use only).
            </summary>
        </member>
        <member name="T:FlaxEngine.PixelFormatExtensions">
            <summary>
            Extensions to <see cref="T:FlaxEngine.PixelFormat"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.SizeInBytes(FlaxEngine.PixelFormat)">
            <summary>
            Calculates the size of a <see cref="T:FlaxEngine.PixelFormat"/> in bytes.
            </summary>
            <param name="format">The Pixel format.</param>
            <returns>size of in bytes</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.SizeInBits(FlaxEngine.PixelFormat)">
            <summary>
            Calculates the size of a <see cref="T:FlaxEngine.PixelFormat"/> in bits.
            </summary>
            <param name="format">The pixel format.</param>
            <returns>The size in bits</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.AlphaSizeInBits(FlaxEngine.PixelFormat)">
            <summary>
            Calculate the size of the alpha channel in bits depending on the pixel format.
            </summary>
            <param name="format">The pixel format</param>
            <returns>The size in bits</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.HasAlpha(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> contains alpha channel.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> has alpha; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsDepthStencil(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is depth stencil.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> is depth stencil; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.HasStencil(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> has stencil bits.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> has stencil bits; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsTypeless(FlaxEngine.PixelFormat,System.Boolean)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is Typeless.
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <param name="partialTypeless">Enable/disable partially typeless formats.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> is Typeless; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsValid(FlaxEngine.PixelFormat)">
            <summary>
            Returns true if the <see cref="T:FlaxEngine.PixelFormat"/> is valid.
            </summary>
            <param name="format">A format to validate</param>
            <returns>True if the <see cref="T:FlaxEngine.PixelFormat"/> is valid.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsCompressed(FlaxEngine.PixelFormat)">
            <summary>
            Returns true if the <see cref="T:FlaxEngine.PixelFormat"/> is a compressed format.
            </summary>
            <param name="format">The format to check for compressed.</param>
            <returns>True if the <see cref="T:FlaxEngine.PixelFormat"/> is a compressed format</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsPacked(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is packed.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> is packed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsPlanar(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is planar.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> is planar; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsVideo(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is video.
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> is video; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsSRGB(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is a sRGB format.
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> is a sRGB format; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsHDR(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is HDR (either 16 or 32bits Float)
            </summary>
            <param name="format">The format.</param>
            <returns><c>true</c> if the specified pixel format is HDR (Floating poInt); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsRgbAOrder(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified format is in RGBA order.
            </summary>
            <param name="format">The format.</param>
            <returns><c>true</c> if the specified format is in RGBA order; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsBGRAOrder(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified format is in BGRA order.
            </summary>
            <param name="format">The format.</param>
            <returns><c>true</c> if the specified format is in BGRA order; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsNormalized(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified format contains normalized data. It indicates that values stored in an integer format are to be mapped to the range [-1,1] (for signed values) or [0,1] (for unsigned values) when they are accessed and converted to floating point.
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <returns>True if given format contains normalized data type, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsInteger(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified format is integer data type (signed or unsigned).
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <returns>True if given format contains integer data type (signed or unsigned), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.ComputeScanlineCount(FlaxEngine.PixelFormat,System.Int32)">
            <summary>
            Computes the scanline count (number of scanlines).
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <param name="height">The height.</param>
            <returns>The scanline count.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.ComputeComponentsCount(FlaxEngine.PixelFormat)">
            <summary>
            Computes the format components count (number of R, G, B, A channels).
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <returns>The components count.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.TosRGB(FlaxEngine.PixelFormat)">
            <summary>
            Finds the equivalent sRGB format to the provided format.
            </summary>
            <param name="format">The non sRGB format.</param>
            <returns>The equivalent sRGB format if any, the provided format else.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.ToNonsRGB(FlaxEngine.PixelFormat)">
            <summary>
            Finds the equivalent non sRGB format to the provided sRGB format.
            </summary>
            <param name="format">The non sRGB format.</param>
            <returns>The equivalent non sRGB format if any, the provided format else.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.MakeTypeless(FlaxEngine.PixelFormat)">
            <summary>
            Converts the format to typeless.
            </summary>
            <param name="format">The format.</param>
            <returns>The typeless format.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.MakeTypelessFloat(FlaxEngine.PixelFormat)">
            <summary>
            Converts the typeless format to float.
            </summary>
            <param name="format">The typeless format.</param>
            <returns>The float format.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.MakeTypelessUNorm(FlaxEngine.PixelFormat)">
            <summary>
            Converts the typeless format to unorm.
            </summary>
            <param name="format">The typeless format.</param>
            <returns>The unorm format.</returns>
        </member>
        <member name="T:FlaxEngine.ToneMappingMode">
            <summary>
            Tone mapping effect rendering modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingMode.None">
            <summary>
            Disabled tone mapping effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingMode.Neutral">
            <summary>
            The neutral tonemapper.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingMode.ACES">
            <summary>
            The ACES Filmic reference tonemapper (approximation).
            </summary>
        </member>
        <member name="T:FlaxEngine.EyeAdaptationMode">
            <summary>
            Eye adaptation effect rendering modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationMode.None">
            <summary>
            Disabled eye adaptation effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationMode.Manual">
            <summary>
            The manual mode that uses a fixed exposure values.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationMode.AutomaticHistogram">
            <summary>
            The automatic mode applies the eye adaptation exposure based on the scene color luminance blending using the histogram. Requires compute shader support.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationMode.AutomaticAverageLuminance">
            <summary>
            The automatic mode applies the eye adaptation exposure based on the scene color luminance blending using the average luminance.
            </summary>
        </member>
        <member name="T:FlaxEngine.BokehShapeType">
            <summary>
            Depth of field bokeh shape types.
            </summary>
        </member>
        <member name="F:FlaxEngine.BokehShapeType.Hexagon">
            <summary>
            The hexagon shape.
            </summary>
        </member>
        <member name="F:FlaxEngine.BokehShapeType.Octagon">
            <summary>
            The octagon shape.
            </summary>
        </member>
        <member name="F:FlaxEngine.BokehShapeType.Circle">
            <summary>
            The circle shape.
            </summary>
        </member>
        <member name="F:FlaxEngine.BokehShapeType.Cross">
            <summary>
            The cross shape.
            </summary>
        </member>
        <member name="F:FlaxEngine.BokehShapeType.Custom">
            <summary>
            The custom texture shape.
            </summary>
        </member>
        <member name="T:FlaxEngine.AntialiasingMode">
            <summary>
            Anti-aliasing modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntialiasingMode.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntialiasingMode.FastApproximateAntialiasing">
            <summary>
            Fast-Approximate Anti-Aliasing effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntialiasingMode.TemporalAntialiasing">
            <summary>
            Temporal Anti-Aliasing effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntialiasingMode.SubpixelMorphologicalAntialiasing">
            <summary>
            Subpixel Morphological Anti-Aliasing effect.
            </summary>
        </member>
        <member name="T:FlaxEngine.ResolutionMode">
            <summary>
            The effect pass resolution.
            </summary>
        </member>
        <member name="F:FlaxEngine.ResolutionMode.Full">
            <summary>
            Full resolution
            </summary>
        </member>
        <member name="F:FlaxEngine.ResolutionMode.Half">
            <summary>
            Half resolution
            </summary>
        </member>
        <member name="T:FlaxEngine.AmbientOcclusionSettingsOverride">
            <summary>
            The <see cref="T:FlaxEngine.AmbientOcclusionSettings"/> structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.Enabled">
            <summary>
            Overrides <see cref="F:FlaxEngine.AmbientOcclusionSettings.Enabled"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.Intensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.AmbientOcclusionSettings.Intensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.Power">
            <summary>
            Overrides <see cref="F:FlaxEngine.AmbientOcclusionSettings.Power"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.Radius">
            <summary>
            Overrides <see cref="F:FlaxEngine.AmbientOcclusionSettings.Radius"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.FadeOutDistance">
            <summary>
            Overrides <see cref="F:FlaxEngine.AmbientOcclusionSettings.FadeOutDistance"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.FadeDistance">
            <summary>
            Overrides <see cref="F:FlaxEngine.AmbientOcclusionSettings.FadeDistance"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.AmbientOcclusionSettings">
            <summary>
            Contains settings for Ambient Occlusion effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.Enabled">
            <summary>
            Enable/disable ambient occlusion effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.Intensity">
            <summary>
            Ambient occlusion intensity.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.Power">
            <summary>
            Ambient occlusion power.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.Radius">
            <summary>
            Ambient occlusion check range radius.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.FadeOutDistance">
            <summary>
            Ambient occlusion fade out end distance from camera (in world units).
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.FadeDistance">
            <summary>
            Ambient occlusion fade distance (in world units). Defines the size of the effect fade from fully visible to fully invisible at FadeOutDistance.
            </summary>
        </member>
        <member name="T:FlaxEngine.BloomSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.Enabled">
            <summary>
            Overrides <see cref="F:FlaxEngine.BloomSettings.Enabled"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.Intensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.BloomSettings.Intensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.Threshold">
            <summary>
            Overrides <see cref="F:FlaxEngine.BloomSettings.Threshold"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.BlurSigma">
            <summary>
            Overrides <see cref="F:FlaxEngine.BloomSettings.BlurSigma"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.Limit">
            <summary>
            Overrides <see cref="F:FlaxEngine.BloomSettings.Limit"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.BloomSettings">
            <summary>
            Contains settings for Bloom effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettings.Enabled">
            <summary>
            If checked, bloom effect will be rendered.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettings.Intensity">
            <summary>
            Bloom effect strength. Value 0 disabled is, while higher values increase the effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettings.Threshold">
            <summary>
            Minimum pixel brightness value to start blowing. Values below the threshold are skipped.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettings.BlurSigma">
            <summary>
            This affects the fall-off of the bloom. It's the standard deviation (sigma) used in the Gaussian blur formula when calculating the kernel of the bloom.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettings.Limit">
            <summary>
            Bloom effect brightness limit. Pixels with higher luminance will be capped to this brightness level.
            </summary>
        </member>
        <member name="T:FlaxEngine.ToneMappingSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettingsOverride.WhiteTemperature">
            <summary>
            Overrides <see cref="F:FlaxEngine.ToneMappingSettings.WhiteTemperature"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettingsOverride.WhiteTint">
            <summary>
            Overrides <see cref="F:FlaxEngine.ToneMappingSettings.WhiteTint"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettingsOverride.Mode">
            <summary>
            Overrides <see cref="F:FlaxEngine.ToneMappingSettings.Mode"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.ToneMappingSettings">
            <summary>
            Contains settings for Tone Mapping effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettings.WhiteTemperature">
            <summary>
            Adjusts the white balance in relation to the temperature of the light in the scene. When the light temperature and this one match the light will appear white. When a value is used that is higher than the light in the scene it will yield a "warm" or yellow color, and, conversely, if the value is lower, it would yield a "cool" or blue color. The default value is `6500`.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettings.WhiteTint">
            <summary>
            Adjusts the white balance temperature tint for the scene by adjusting the cyan and magenta color ranges. Ideally, this setting should be used once you've adjusted the white balance temporature to get accurate colors. Under some light temperatures, the colors may appear to be more yellow or blue. This can be used to balance the resulting color to look more natural. The default value is `0`.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettings.Mode">
            <summary>
            The tone mapping mode to use for the color grading process.
            </summary>
        </member>
        <member name="T:FlaxEngine.ColorGradingSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorSaturation">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorSaturation"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorContrast">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorContrast"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGamma">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGamma"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGain">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGain"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorOffset">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorOffset"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorSaturationShadows">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorSaturationShadows"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorContrastShadows">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorContrastShadows"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGammaShadows">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGammaShadows"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGainShadows">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGainShadows"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorOffsetShadows">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorOffsetShadows"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorSaturationMidtones">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorSaturationMidtones"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorContrastMidtones">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorContrastMidtones"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGammaMidtones">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGammaMidtones"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGainMidtones">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGainMidtones"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorOffsetMidtones">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorOffsetMidtones"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorSaturationHighlights">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorSaturationHighlights"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorContrastHighlights">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorContrastHighlights"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGammaHighlights">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGammaHighlights"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGainHighlights">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGainHighlights"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorOffsetHighlights">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorOffsetHighlights"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ShadowsMax">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ShadowsMax"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.HighlightsMin">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.HighlightsMin"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.LutTexture">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.LutTexture"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.LutWeight">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.LutWeight"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.ColorGradingSettings">
            <summary>
            Contains settings for Color Grading effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorSaturation">
            <summary>
            Gets or sets the color saturation (applies globally to the whole image). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorContrast">
            <summary>
            Gets or sets the color contrast (applies globally to the whole image). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGamma">
            <summary>
            Gets or sets the color gamma (applies globally to the whole image). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGain">
            <summary>
            Gets or sets the color gain (applies globally to the whole image). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorOffset">
            <summary>
            Gets or sets the color offset (applies globally to the whole image). Default is 0.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorSaturationShadows">
            <summary>
            Gets or sets the color saturation (applies to shadows only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorContrastShadows">
            <summary>
            Gets or sets the color contrast (applies to shadows only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGammaShadows">
            <summary>
            Gets or sets the color gamma (applies to shadows only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGainShadows">
            <summary>
            Gets or sets the color gain (applies to shadows only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorOffsetShadows">
            <summary>
            Gets or sets the color offset (applies to shadows only). Default is 0.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorSaturationMidtones">
            <summary>
            Gets or sets the color saturation (applies to midtones only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorContrastMidtones">
            <summary>
            Gets or sets the color contrast (applies to midtones only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGammaMidtones">
            <summary>
            Gets or sets the color gamma (applies to midtones only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGainMidtones">
            <summary>
            Gets or sets the color gain (applies to midtones only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorOffsetMidtones">
            <summary>
            Gets or sets the color offset (applies to midtones only). Default is 0.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorSaturationHighlights">
            <summary>
            Gets or sets the color saturation (applies to highlights only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorContrastHighlights">
            <summary>
            Gets or sets the color contrast (applies to highlights only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGammaHighlights">
            <summary>
            Gets or sets the color gamma (applies to highlights only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGainHighlights">
            <summary>
            Gets or sets the color gain (applies to highlights only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorOffsetHighlights">
            <summary>
            Gets or sets the color offset (applies to highlights only). Default is 0.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ShadowsMax">
            <summary>
            The shadows maximum value. Default is 0.09.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.HighlightsMin">
            <summary>
            The highlights minimum value. Default is 0.5.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.LutTexture">
            <summary>
            The Lookup Table (LUT) used to perform color correction.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.LutWeight">
            <summary>
            The LUT blending weight (normalized to range 0-1). Default is 1.0.
            </summary>
        </member>
        <member name="T:FlaxEngine.EyeAdaptationSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.Mode">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.Mode"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.SpeedUp">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.SpeedUp"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.SpeedDown">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.SpeedDown"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.PreExposure">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.PreExposure"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.PostExposure">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.PostExposure"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.MinBrightness">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.MinBrightness"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.MaxBrightness">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.MaxBrightness"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.HistogramLowPercent">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.HistogramLowPercent"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.HistogramHighPercent">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.HistogramHighPercent"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.EyeAdaptationSettings">
            <summary>
            Contains settings for Eye Adaptation effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.Mode">
            <summary>
            The effect rendering mode used for the exposure processing.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.SpeedUp">
            <summary>
            The speed at which the exposure changes when the scene brightness moves from a dark area to a bright area (brightness goes up).
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.SpeedDown">
            <summary>
            The speed at which the exposure changes when the scene brightness moves from a bright area to a dark area (brightness goes down).
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.PreExposure">
            <summary>
            The pre-exposure value applied to the scene color before performing post-processing (such as bloom, lens flares, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.PostExposure">
            <summary>
            The post-exposure value applied to the scene color after performing post-processing (such as bloom, lens flares, etc.) but before color grading and tone mapping.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.MinBrightness">
            <summary>
            The minimum brightness for the auto exposure which limits the lower brightness the eye can adapt within.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.MaxBrightness">
            <summary>
            The maximum brightness for the auto exposure which limits the upper brightness the eye can adapt within.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.HistogramLowPercent">
            <summary>
            The lower bound for the luminance histogram of the scene color. Value is in percent and limits the pixels below this brightness. Use values from range 60-80. Used only in AutomaticHistogram mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.HistogramHighPercent">
            <summary>
            The upper bound for the luminance histogram of the scene color. Value is in percent and limits the pixels above this brightness. Use values from range 80-95. Used only in AutomaticHistogram mode.
            </summary>
        </member>
        <member name="T:FlaxEngine.CameraArtifactsSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.VignetteIntensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.VignetteIntensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.VignetteColor">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.VignetteColor"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.VignetteShapeFactor">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.VignetteShapeFactor"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.GrainAmount">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.GrainAmount"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.GrainParticleSize">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.GrainParticleSize"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.GrainSpeed">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.GrainSpeed"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.ChromaticDistortion">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.ChromaticDistortion"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.ScreenFadeColor">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.ScreenFadeColor"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.CameraArtifactsSettings">
            <summary>
            Contains settings for Camera Artifacts effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.VignetteIntensity">
            <summary>
            Strength of the vignette effect. Value 0 hides it. The default value is 0.8.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.VignetteColor">
            <summary>
            Color of the vignette.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.VignetteShapeFactor">
            <summary>
            Controls shape of the vignette. Values near 0 produce rectangle shape. Higher values result in round shape. The default value is 0.125.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.GrainAmount">
            <summary>
            Intensity of the grain filter. Value 0 hides it. The default value is 0.005.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.GrainParticleSize">
            <summary>
            Size of the grain particles. The default value is 1.6.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.GrainSpeed">
            <summary>
            Speed of the grain particles animation.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.ChromaticDistortion">
            <summary>
            Controls chromatic aberration effect strength. Value 0 hides it.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.ScreenFadeColor">
            <summary>
            Screen tint color (alpha channel defines the blending factor).
            </summary>
        </member>
        <member name="T:FlaxEngine.LensFlaresSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.Intensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.Intensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.Ghosts">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.Ghosts"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.HaloWidth">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.HaloWidth"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.HaloIntensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.HaloIntensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.GhostDispersal">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.GhostDispersal"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.Distortion">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.Distortion"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.ThresholdBias">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.ThresholdBias"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.ThresholdScale">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.ThresholdScale"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.LensDirt">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.LensDirt"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.LensDirtIntensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.LensDirtIntensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.LensColor">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.LensColor"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.LensStar">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.LensStar"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.LensFlaresSettings">
            <summary>
            Contains settings for Lens Flares effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.Intensity">
            <summary>
            Strength of the effect. Value 0 disabled it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.Ghosts">
            <summary>
            Amount of lens flares ghosts.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.HaloWidth">
            <summary>
            Lens flares halo width.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.HaloIntensity">
            <summary>
            Lens flares halo intensity.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.GhostDispersal">
            <summary>
            Ghost samples dispersal parameter.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.Distortion">
            <summary>
            Lens flares color distortion parameter.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.ThresholdBias">
            <summary>
            Input image brightness threshold. Added to input pixels.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.ThresholdScale">
            <summary>
            Input image brightness threshold scale. Used to multiply input pixels.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.LensDirt">
            <summary>
            Fullscreen lens dirt texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.LensDirtIntensity">
            <summary>
            Fullscreen lens dirt intensity parameter. Allows to tune dirt visibility.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.LensColor">
            <summary>
            Custom lens color texture (1D) used for lens color spectrum.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.LensStar">
            <summary>
            Custom lens star texture sampled by lens flares.
            </summary>
        </member>
        <member name="T:FlaxEngine.DepthOfFieldSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.Enabled">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.Enabled"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BlurStrength">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BlurStrength"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.FocalDistance">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.FocalDistance"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.FocalRegion">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.FocalRegion"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.NearTransitionRange">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.NearTransitionRange"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.FarTransitionRange">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.FarTransitionRange"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.DepthLimit">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.DepthLimit"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehEnabled">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehEnabled"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehSize">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehSize"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehShape">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehShape"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehShapeCustom">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehShapeCustom"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehBrightnessThreshold">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehBrightnessThreshold"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehBlurThreshold">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehBlurThreshold"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehFalloff">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehFalloff"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehDepthCutoff">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehDepthCutoff"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.DepthOfFieldSettings">
            <summary>
            Contains settings for Depth Of Field effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.Enabled">
            <summary>
            If checked, depth of field effect will be visible.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BlurStrength">
            <summary>
            The blur intensity in the out-of-focus areas. Allows reducing blur amount by scaling down the Gaussian Blur radius. Normalized to range 0-1.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.FocalDistance">
            <summary>
            The distance in World Units from the camera that acts as the center of the region where the scene is perfectly in focus and no blurring occurs.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.FocalRegion">
            <summary>
            The distance in World Units beyond the focal distance where the scene is perfectly in focus and no blurring occurs.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.NearTransitionRange">
            <summary>
            The distance in World Units from the focal region on the side nearer to the camera over which the scene transitions from focused to blurred.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.FarTransitionRange">
            <summary>
            The distance in World Units from the focal region on the side farther from the camera over which the scene transitions from focused to blurred.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.DepthLimit">
            <summary>
            The distance in World Units which describes border after that there is no blur (useful to disable DoF on sky). Use 0 to disable that feature.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehEnabled">
            <summary>
            If checked, bokeh shapes will be rendered.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehSize">
            <summary>
            Controls size of the bokeh shapes.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehShape">
            <summary>
            Defines bokeh shapes type.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehShapeCustom">
            <summary>
            If BokehShape is set to Custom, then this texture will be used for the bokeh shapes. For best performance, use small, compressed, grayscale textures (for instance 32px).
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehBrightnessThreshold">
            <summary>
            The minimum pixel brightness to create bokeh. Pixels with lower brightness will be skipped.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehBlurThreshold">
            <summary>
            Depth of Field bokeh shapes blur threshold.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehFalloff">
            <summary>
            Controls bokeh shapes brightness falloff. Higher values reduce bokeh visibility.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehDepthCutoff">
            <summary>
            Controls bokeh shape generation for depth discontinuities.
            </summary>
        </member>
        <member name="T:FlaxEngine.MotionBlurSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettingsOverride.Enabled">
            <summary>
            Overrides <see cref="F:FlaxEngine.MotionBlurSettings.Enabled"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettingsOverride.Scale">
            <summary>
            Overrides <see cref="F:FlaxEngine.MotionBlurSettings.Scale"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettingsOverride.SampleCount">
            <summary>
            Overrides <see cref="F:FlaxEngine.MotionBlurSettings.SampleCount"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettingsOverride.MotionVectorsResolution">
            <summary>
            Overrides <see cref="F:FlaxEngine.MotionBlurSettings.MotionVectorsResolution"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.MotionBlurSettings">
            <summary>
            Contains settings for Motion Blur effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettings.Enabled">
            <summary>
            If checked, motion blur effect will be rendered.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettings.Scale">
            <summary>
            The blur effect strength. Value 0 disabled is, while higher values increase the effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettings.SampleCount">
            <summary>
            The amount of sample points used during motion blur rendering. It affects quality and performance.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettings.MotionVectorsResolution">
            <summary>
            The motion vectors texture resolution. Motion blur uses per-pixel motion vectors buffer that contains objects movement information. Use lower resolution to improve performance.
            </summary>
        </member>
        <member name="T:FlaxEngine.ScreenSpaceReflectionsSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.Intensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.Intensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.DepthResolution">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.DepthResolution"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.RayTracePassResolution">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.RayTracePassResolution"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.BRDFBias">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.BRDFBias"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.RoughnessThreshold">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.RoughnessThreshold"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.WorldAntiSelfOcclusionBias">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.WorldAntiSelfOcclusionBias"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.ResolvePassResolution">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.ResolvePassResolution"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.ResolveSamples">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.ResolveSamples"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.EdgeFadeFactor">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.EdgeFadeFactor"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.UseColorBufferMips">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.UseColorBufferMips"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.TemporalEffect">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.TemporalEffect"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.TemporalScale">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.TemporalScale"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.TemporalResponse">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.TemporalResponse"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.FadeOutDistance">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.FadeOutDistance"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.FadeDistance">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.FadeDistance"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.ScreenSpaceReflectionsSettings">
            <summary>
            Contains settings for Screen Space Reflections effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.Intensity">
            <summary>
            The effect intensity (normalized to range [0;1]). Use 0 to disable it.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.DepthResolution">
            <summary>
            The depth buffer downscale option to optimize raycast performance. Full gives better quality, but half improves performance. The default value is half.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.RayTracePassResolution">
            <summary>
            The raycast resolution. Full gives better quality, but half improves performance. The default value is half.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.BRDFBias">
            <summary>
            The reflection spread parameter. This value controls source roughness effect on reflections blur. Smaller values produce wider reflections spread but also introduce more noise. Higher values provide more mirror-like reflections. Default value is 0.82.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.RoughnessThreshold">
            <summary>
            The maximum amount of roughness a material must have to reflect the scene. For example, if this value is set to 0.4, only materials with a roughness value of 0.4 or below reflect the scene. The default value is 0.45.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.WorldAntiSelfOcclusionBias">
            <summary>
            The offset of the raycast origin. Lower values produce more correct reflection placement, but produce more artifacts. We recommend values of 0.3 or lower. The default value is 0.1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.ResolvePassResolution">
            <summary>
            The raycast resolution. Full gives better quality, but half improves performance. The default value is half.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.ResolveSamples">
            <summary>
            The number of rays used to resolve the reflection color. Higher values provide better quality but reduce effect performance. Default value is 4. Use 1 for the highest speed.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.EdgeFadeFactor">
            <summary>
            The point at which the far edges of the reflection begin to fade. Has no effect on performance. The default value is 0.1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.FadeOutDistance">
            <summary>
            The effect fade out end distance from camera (in world units).
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.FadeDistance">
            <summary>
            The effect fade distance (in world units). Defines the size of the effect fade from fully visible to fully invisible at FadeOutDistance.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.UseColorBufferMips">
            <summary>
            "The input color buffer downscale mode that uses blurred mipmaps when resolving the reflection color. Produces more realistic results by blurring distant parts of reflections in rough (low-gloss) materials. It also improves performance on most platforms but uses more memory.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.TemporalEffect">
            <summary>
            If checked, enables the temporal pass. Reduces noise, but produces an animated "jittering" effect that's sometimes noticeable. If disabled, the properties below have no effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.TemporalScale">
            <summary>
            The intensity of the temporal effect. Lower values produce reflections faster, but more noise. The default value is 8.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.TemporalResponse">
            <summary>
            Defines how quickly reflections blend between the reflection in the current frame and the history buffer. Lower values produce reflections faster, but with more jittering. If the camera in your game doesn't move much, we recommend values closer to 1. The default value is 0.8.
            </summary>
        </member>
        <member name="T:FlaxEngine.AntiAliasingSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.Mode">
            <summary>
            Overrides <see cref="F:FlaxEngine.AntiAliasingSettings.Mode"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.TAA_JitterSpread">
            <summary>
            Overrides <see cref="F:FlaxEngine.AntiAliasingSettings.TAA_JitterSpread"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.TAA_Sharpness">
            <summary>
            Overrides <see cref="F:FlaxEngine.AntiAliasingSettings.TAA_Sharpness"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.TAA_StationaryBlending">
            <summary>
            Overrides <see cref="F:FlaxEngine.AntiAliasingSettings.TAA_StationaryBlending"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.TAA_MotionBlending">
            <summary>
            Overrides <see cref="F:FlaxEngine.AntiAliasingSettings.TAA_MotionBlending"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.AntiAliasingSettings">
            <summary>
            Contains settings for Anti Aliasing effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettings.Mode">
            <summary>
            The anti-aliasing effect mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettings.TAA_JitterSpread">
            <summary>
            The diameter (in texels) inside which jitter samples are spread. Smaller values result in crisper but more aliased output, while larger values result in more stable but blurrier output.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettings.TAA_Sharpness">
            <summary>
            Controls the amount of sharpening applied to the color buffer. TAA can induce a slight loss of details in high frequency regions. Sharpening alleviates this issue. High values may introduce dark-border artifacts.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettings.TAA_StationaryBlending">
            <summary>
            The blend coefficient for stationary fragments. Controls the percentage of history sample blended into final color for fragments with minimal active motion.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettings.TAA_MotionBlending">
            <summary>
            The blending coefficient for moving fragments. Controls the percentage of history sample blended into the final color for fragments with significant active motion.
            </summary>
        </member>
        <member name="T:FlaxEngine.PostFxMaterialsSettings">
            <summary>
            Contains settings for custom PostFx materials rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostFxMaterialsSettings.Materials">
            <summary>
            The post-process materials collection for rendering (fixed capacity).
            </summary>
        </member>
        <member name="T:FlaxEngine.PostProcessSettings">
            <summary>
            Contains settings for rendering advanced visual effects and post effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.AmbientOcclusion">
            <summary>
            The ambient occlusion effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.Bloom">
            <summary>
            The bloom effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.ToneMapping">
            <summary>
            The tone mapping effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.ColorGrading">
            <summary>
            The color grading effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.EyeAdaptation">
            <summary>
            The eye adaptation effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.CameraArtifacts">
            <summary>
            The camera artifacts effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.LensFlares">
            <summary>
            The lens flares effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.DepthOfField">
            <summary>
            The depth of field effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.MotionBlur">
            <summary>
            The motion blur effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.ScreenSpaceReflections">
            <summary>
            The screen space reflections effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.AntiAliasing">
            <summary>
            The anti-aliasing effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.PostFxMaterials">
            <summary>
            The PostFx materials rendering settings.
            </summary>
        </member>
        <member name="T:FlaxEngine.RenderBuffers">
            <summary>
            The scene rendering buffers container.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderBuffers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RenderBuffers"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.DepthBuffer">
            <summary>
            Gets the depth buffer render target allocated within this render buffers collection (read only).
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.MotionVectors">
            <summary>
            Gets the motion vectors render target allocated within this render buffers collection (read only).
            </summary>
            <remarks>
            Texture ca be null or not initialized if motion blur is disabled or not yet rendered.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.Width">
            <summary>
            Gets the buffers width (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.Height">
            <summary>
            Gets the buffers height (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.Size">
            <summary>
            Gets the buffers width and height (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.AspectRatio">
            <summary>
            Gets the buffers aspect ratio.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.Viewport">
            <summary>
            Gets the buffers rendering viewport.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderBuffers.Init(System.Int32,System.Int32)">
            <summary>
            Allocates the buffers.
            </summary>
            <param name="width">The surface width (in pixels).</param>
            <param name="height">The surface height (in pixels).</param>
            <returns>True if cannot allocate buffers, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.RenderBuffers.Release">
            <summary>
            Release the buffers data.
            </summary>
        </member>
        <member name="T:FlaxEngine.RenderTargetPool">
            <summary>
            Utility for pooling render target resources with reusing and sharing resources during rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderTargetPool.Get(FlaxEngine.GPUTextureDescription@)">
            <summary>
            Gets a temporary render target.
            </summary>
            <param name="desc">The texture description.</param>
            <returns>The allocated render target or reused one.</returns>
        </member>
        <member name="M:FlaxEngine.RenderTargetPool.Release(FlaxEngine.GPUTexture)">
            <summary>
            Releases a temporary render target.
            </summary>
            <param name="rt">The reference to temporary target to release.</param>
        </member>
        <member name="T:FlaxEngine.RenderTask">
            <summary>
            Allows to perform custom rendering using graphics pipeline.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderTask.Tag">
            <summary>
            The custom tag object value linked to the rendering task.
            </summary>
        </member>
        <member name="E:FlaxEngine.RenderTask.Begin">
            <summary>
            The action called on rendering begin.
            </summary>
        </member>
        <member name="E:FlaxEngine.RenderTask.Render">
            <summary>
            The action called on rendering.
            </summary>
        </member>
        <member name="E:FlaxEngine.RenderTask.End">
            <summary>
            The action called on rendering end.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RenderTask"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderTask.Enabled">
            <summary>
            Gets or sets a value indicating whether task is enabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderTask.Order">
            <summary>
            The order of the task. Used for tasks rendering order. Lower first, higher later.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderTask.FrameCount">
            <summary>
            The amount of frames rendered by this task. It is auto incremented on task drawing.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderTask.CanDraw">
            <summary>
            Determines whether this task can be rendered.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderTask.OnDraw">
            <summary>
            Called by graphics device to draw this task. Can be used to invoke task rendering nested inside another task - use on own risk!
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderTask.Resize(System.Int32,System.Int32)">
            <summary>
            Changes the buffers and output size. Does nothing if size won't change. Called by window or user to resize rendering buffers.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>True if cannot resize the buffers.</returns>
        </member>
        <member name="T:FlaxEngine.SceneRenderTask">
            <summary>
            Render task which draws scene actors into the output buffer.
            </summary>
            <seealso cref="T:FlaxEngine.RenderTask" />
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.ViewFlags">
            <summary>
            Gets or sets the view flags (via <see cref="P:FlaxEngine.SceneRenderTask.View"/> property).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.ViewMode">
            <summary>
            Gets or sets the view mode (via <see cref="P:FlaxEngine.SceneRenderTask.View"/> property).
            </summary>
        </member>
        <member name="F:FlaxEngine.SceneRenderTask.GlobalCustomPostFx">
            <summary>
            The global custom post processing effects applied to all <see cref="T:FlaxEngine.SceneRenderTask"/> (applied to tasks that have <see cref="F:FlaxEngine.SceneRenderTask.AllowGlobalCustomPostFx"/> turned on).
            </summary>
        </member>
        <member name="F:FlaxEngine.SceneRenderTask.CustomPostFx">
            <summary>
            The custom post processing effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.SceneRenderTask.AllowGlobalCustomPostFx">
            <summary>
            True if allow using global custom PostFx when rendering this task.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneRenderTask.CollectDrawCalls">
            <summary>
            The action called on view rendering to collect draw calls. It allows to extend rendering pipeline and draw custom geometry non-existing in the scene or custom actors set.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneRenderTask.PostRender">
            <summary>
            The action called after scene rendering. Can be used to render additional visual elements to the output.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneRenderTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneRenderTask"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.Output">
            <summary>
            The output texture (can be null if using rendering to window swap chain). Can be sued to redirect the default scene rendering output to a texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.Buffers">
            <summary>
            The scene rendering buffers. Created and managed by the task.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.Camera">
            <summary>
            The scene rendering camera. Can be used to override the rendering view properties based on the current camera setup.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.View">
            <summary>
            The render view description.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.ActorsSource">
            <summary>
            The actors source to use (configures what objects to render).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.Viewport">
            <summary>
            Gets the rendering render task viewport.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.OutputView">
            <summary>
            Gets the rendering output view.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneRenderTask.CameraCut">
            <summary>
            Marks the next rendered frame as camera cut. Used to clear the temporal effects history and prevent visual artifacts blended from the previous frames.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneRenderTask.AddCustomActor(FlaxEngine.Actor)">
            <summary>
            Adds the custom actor to the rendering.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:FlaxEngine.SceneRenderTask.RemoveCustomActor(FlaxEngine.Actor)">
            <summary>
            Removes the custom actor from the rendering.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="T:FlaxEngine.ActorsSources">
            <summary>
            Defines actors to draw sources.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActorsSources.None">
            <summary>
            The actors won't be rendered.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActorsSources.Scenes">
            <summary>
            The actors from the loaded scenes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActorsSources.CustomActors">
            <summary>
            The actors from the custom collection.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActorsSources.ScenesAndCustomActors">
            <summary>
            The actors from the loaded scenes and custom collection.
            </summary>
        </member>
        <member name="T:FlaxEngine.MainRenderTask">
            <summary>
            The main game rendering task used by the engine.
            </summary>
            <remarks>
            For Main Render Task its <see cref="P:FlaxEngine.SceneRenderTask.Output"/> may be null because game can be rendered directly to the native window backbuffer.
            This allows to increase game rendering performance (reduced memory usage and data transfer).
            User should use post effects pipeline to modify the final frame.
            </remarks>
            <seealso cref="T:FlaxEngine.SceneRenderTask" />
        </member>
        <member name="M:FlaxEngine.MainRenderTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MainRenderTask"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MainRenderTask.Instance">
            <summary>
            Gets the main game rendering task. Use it to plug custom rendering logic for your game.
            </summary>
        </member>
        <member name="T:FlaxEngine.RenderContext">
            <summary>
            The high-level renderer context. Used to collect the draw calls for the scene rendering. Can be used to perform a custom rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderContext.Buffers">
            <summary>
            The render buffers.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderContext.List">
            <summary>
            The render list.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderContext.View">
            <summary>
            The render view.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderContext.LodProxyView">
            <summary>
            The proxy render view used to synchronize objects level of detail during rendering (eg. during shadow maps rendering passes). It's optional.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderContext.Task">
            <summary>
            The scene rendering task that is a source of renderable objects (optional).
            </summary>
        </member>
        <member name="T:FlaxEngine.RenderTools">
            <summary>
            Set of utilities for rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderTools.ComputeModelLOD(FlaxEngine.Model,FlaxEngine.Vector3@,System.Single,FlaxEngine.RenderContext@)">
            <summary>
            Computes the model LOD index to use during rendering.
            </summary>
            <param name="model">The model.</param>
            <param name="origin">The bounds origin.</param>
            <param name="radius">The bounds radius.</param>
            <param name="renderContext">The rendering context.</param>
            <returns>The zero-based LOD index. Returns -1 if model should not be rendered.</returns>
        </member>
        <member name="M:FlaxEngine.RenderTools.ComputeSkinnedModelLOD(FlaxEngine.SkinnedModel,FlaxEngine.Vector3@,System.Single,FlaxEngine.RenderContext@)">
            <summary>
            Computes the skinned model LOD index to use during rendering.
            </summary>
            <param name="model">The skinned model.</param>
            <param name="origin">The bounds origin.</param>
            <param name="radius">The bounds radius.</param>
            <param name="renderContext">The rendering context.</param>
            <returns>The zero-based LOD index. Returns -1 if model should not be rendered.</returns>
        </member>
        <member name="T:FlaxEngine.RenderView">
            <summary>
            Rendering view description that defines how to render the objects (camera placement, rendering properties, etc.).
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderView.Init">
            <summary>
            Initializes this view with default options.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderView.UpdateCachedData">
            <summary>
            Updates the cached data for the view (inverse matrices, etc.).
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderView.SetUp(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Initializes render view data.
            </summary>
            <param name="view">The view.</param>
            <param name="projection">The projection.</param>
        </member>
        <member name="M:FlaxEngine.RenderView.SetProjector(System.Single,System.Single,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Set up view for projector rendering.
            </summary>
            <param name="nearPlane">Near plane</param>
            <param name="farPlane">Far plane</param>
            <param name="position">Camera's position</param>
            <param name="direction">Camera's direction vector</param>
            <param name="up">Camera's up vector</param>
            <param name="angle">Camera's FOV angle (in degrees)</param>
        </member>
        <member name="M:FlaxEngine.RenderView.CopyFrom(FlaxEngine.Camera)">
            <summary>
            Copies render view data from the camera.
            </summary>
            <param name="camera">The camera.</param>
        </member>
        <member name="M:FlaxEngine.RenderView.CopyFrom(FlaxEngine.Camera,FlaxEngine.Viewport@)">
            <summary>
            Copies render view data from the camera.
            </summary>
            <param name="camera">The camera.</param>
            <param name="customViewport">The custom viewport to use for view/projeection matrices override.</param>
        </member>
        <member name="F:FlaxEngine.RenderView.Position">
            <summary>
            The position of the view.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Direction">
            <summary>
            The direction of the view.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Near">
            <summary>
            The near plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Far">
            <summary>
            The far plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.View">
            <summary>
            The view matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Projection">
            <summary>
            The projection matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.NonJitteredProjection">
            <summary>
            The projection matrix with no camera offset (no jittering).
            For many temporal image effects, the camera that is currently rendering needs to be slightly offset from the default projection (that is, the camera is ‘jittered’).
            If you use motion vectors and camera jittering together, use this property to keep the motion vectors stable between frames.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.IV">
            <summary>
            The inverted view matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.IP">
            <summary>
            The inverted projection matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.IVP">
            <summary>
            The inverted projection view matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Frustum">
            <summary>
            The view frustum.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.CullingFrustum">
            <summary>
            The view frustum used for culling (can be different than Frustum in some cases e.g. cascaded shadow map rendering).
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Pass">
            <summary>
            The draw passes mask for the current view rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.IsOfflinePass">
            <summary>
            Flag used by static, offline rendering passes (eg. reflections rendering, lightmap rendering etc.)
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.StaticFlagsMask">
            <summary>
            The static flags mask used to hide objects that don't have a given static flags. Eg. use StaticFlags::Lightmap to render only objects that can use lightmap.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Flags">
            <summary>
            The view flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Mode">
            <summary>
            The view mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.MaxShadowsQuality">
            <summary>
            Maximum allowed shadows quality for this view
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ModelLODBias">
            <summary>
            The model LOD bias. Default is 0. Applied to all the objects in the render view.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ModelLODDistanceFactor">
            <summary>
            The model LOD distance scale factor. Default is 1. Applied to all the objects in the render view. Higher values increase LODs quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ShadowModelLODBias">
            <summary>
            The model LOD bias. Default is 0. Applied to all the objects in the shadow maps render views. Can be used to improve shadows rendering performance or increase quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ShadowModelLODDistanceFactor">
            <summary>
            The model LOD distance scale factor. Default is 1. Applied to all the objects in the shadow maps render views. Higher values increase LODs quality. Can be used to improve shadows rendering performance or increase quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.TaaFrameIndex">
            <summary>
            The Temporal Anti-Aliasing jitter frame index.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ViewInfo">
            <summary>
            The view information vector with packed components to reconstruct linear depth and view position from the hardware depth buffer. Cached before rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ScreenSize">
            <summary>
            The screen size packed (x - width, y - height, zw - inv width, w - inv height). Cached before rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.TemporalAAJitter">
            <summary>
            The temporal AA jitter packed (xy - this frame jitter, zw - previous frame jitter). Cached before rendering. Zero if TAA is disabled. The value added to projection matrix (in clip space).
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.PrevView">
            <summary>
            The previous frame view matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.PrevProjection">
            <summary>
            The previous frame projection matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.PrevViewProjection">
            <summary>
            The previous frame view * projection matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ModelLODDistanceFactorSqrt">
            <summary>
            Square of <see cref="F:FlaxEngine.RenderView.ModelLODDistanceFactor"/>. Cached by rendering backend.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUShader">
            <summary>
            The GPU resource with shader programs that can run on the GPU and are able to perform rendering calculation using textures, vertices and other resources.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUShader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUShader"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetVS(System.String,System.Int32)">
            <summary>
            Gets the vertex shader.
            </summary>
            <param name="name">Thr shader program name.</param>
            <param name="permutationIndex">The shader permutation index.</param>
            <returns>The shader object.</returns>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetHS(System.String,System.Int32)">
            <summary>
            Gets the hull shader.
            </summary>
            <param name="name">Thr shader program name.</param>
            <param name="permutationIndex">The shader permutation index.</param>
            <returns>The shader object.</returns>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetDS(System.String,System.Int32)">
            <summary>
            Gets domain shader.
            </summary>
            <param name="name">Thr shader program name.</param>
            <param name="permutationIndex">The shader permutation index.</param>
            <returns>The shader object.</returns>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetGS(System.String,System.Int32)">
            <summary>
            Gets the geometry shader.
            </summary>
            <param name="name">Thr shader program name.</param>
            <param name="permutationIndex">The shader permutation index.</param>
            <returns>The shader object.</returns>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetPS(System.String,System.Int32)">
            <summary>
            Gets the pixel shader.
            </summary>
            <param name="name">Thr shader program name.</param>
            <param name="permutationIndex">The shader permutation index.</param>
            <returns>The shader object.</returns>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetCS(System.String,System.Int32)">
            <summary>
            Gets the compute shader.
            </summary>
            <param name="name">Thr shader program name.</param>
            <param name="permutationIndex">The shader permutation index.</param>
            <returns>The shader object.</returns>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetCB(System.Int32)">
            <summary>
            Gets the constant buffer.
            </summary>
            <param name="slot">The buffer slot index.</param>
            <returns>The Constant Buffer object.</returns>
        </member>
        <member name="T:FlaxEngine.TextureBase">
            <summary>
            Base class for <see cref="P:FlaxEngine.TextureBase.Texture"/>, <see cref="T:FlaxEngine.SpriteAtlas"/>, <see cref="T:FlaxEngine.IESProfile"/> and other assets that can contain texture data.
            </summary>
            <seealso cref="T:FlaxEngine.BinaryAsset" />
        </member>
        <member name="F:FlaxEngine.TextureBase.MaxTextureSize">
            <summary>
            The maximum size for the texture resources (supported by engine, the target platform can be lower capabilities).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.MaxMipLevels">
            <summary>
            The maximum amount of the mip levels for the texture resources (supported by engine, the target platform can be lower capabilities).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.MaxArraySize">
            <summary>
            The maximum array size for the texture resources (supported by engine, the target platform can be lower capabilities).
            </summary>
        </member>
        <member name="T:FlaxEngine.TextureBase.InitData">
            <summary>
            The texture data initialization container.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.Format">
            <summary>
            The format of the pixels.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.Width">
            <summary>
            The width (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.Height">
            <summary>
            The height (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.ArraySize">
            <summary>
            The array size (slices count).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.Mips">
            <summary>
            The mips levels data.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.InitData.IsValid">
            <summary>
            Returns true if init data is valid.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextureBase.InitData.MipData">
            <summary>
            The mip data container.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.MipData.Data">
            <summary>
            The texture data. Use <see cref="F:FlaxEngine.TextureBase.InitData.MipData.RowPitch"/> and <see cref="F:FlaxEngine.TextureBase.InitData.MipData.SlicePitch"/> to define the storage format.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.MipData.RowPitch">
            <summary>
            The data container image row pitch (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.MipData.SlicePitch">
            <summary>
            The data container image slice pitch (in bytes).
            </summary>
        </member>
        <member name="M:FlaxEngine.TextureBase.Init(FlaxEngine.TextureBase.InitData@)">
            <summary>
            Initializes the texture storage container with the given data. Valid only for virtual assets. Can be used in both Editor and at runtime in a build game.
            It does not perform any data streaming or uploading to the GPU. Only the texture resource is being initialized and the data is copied to be streamed later.
            </summary>
            <remarks>
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
            <param name="initData">The texture init data.</param>
        </member>
        <member name="M:FlaxEngine.TextureBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TextureBase"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Texture">
            <summary>
            Gets GPU texture object allocated by the asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Format">
            <summary>
            Gets the texture data format.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Width">
            <summary>
            Gets the total width of the texture. Actual resident size may be different due to dynamic content streaming. Returns 0 if texture is not loaded.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Height">
            <summary>
            Gets the total height of the texture. Actual resident size may be different due to dynamic content streaming. Returns 0 if texture is not loaded.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Size">
            <summary>
            Gets the total size of the texture. Actual resident size may be different due to dynamic content streaming. Returns Vector2.Zero if texture is not loaded.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.ArraySize">
            <summary>
            Gets the total array size of the texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.MipLevels">
            <summary>
            Gets the total mip levels count of the texture. Actual resident mipmaps count may be different due to dynamic content streaming.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.ResidentMipLevels">
            <summary>
            Gets the current mip levels count of the texture that are on GPU ready to use.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.CurrentMemoryUsage">
            <summary>
            Gets the amount of the memory used by this resource. Exact value may differ due to memory alignment and resource allocation policy.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.TotalMemoryUsage">
            <summary>
            Gets the total memory usage that texture may have in use (if loaded to the maximum quality). Exact value may differ due to memory alignment and resource allocation policy.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextureBase.GetMipData(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the mip data.
            </summary>
            <param name="mipIndex">The mip index (zero-based).</param>
            <param name="rowPitch">The data row pitch (in bytes).</param>
            <param name="slicePitch">The data slice pitch (in bytes).</param>
            <returns>The mip-map data or empty if failed to get it.</returns>
        </member>
        <member name="T:FlaxEngine.GPUTextureView">
            <summary>
            Defines a view for the <see cref="T:FlaxEngine.GPUTexture"/> surface, full resource or any of the sub-parts. Can be used to define a single subresource of the texture, volume texture or texture array. Used to render to the texture and/or use textures in the shaders.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUTextureView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUTextureView"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureView.Parent">
            <summary>
            Gets parent GPU resource owning that view.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureView.Format">
            <summary>
            Gets the view format.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureView.MSAA">
            <summary>
            Gets view MSAA level.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUTexture">
            <summary>
            The GPU texture resource object. This class is able to create 2D/3D textures, volume textures and render targets.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUTexture"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.HasResidentMip">
            <summary>
            Gets a value indicating whether this texture has any resided mip (data already uploaded to the GPU).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.IsAllocated">
            <summary>
            Gets a value indicating whether this texture has been allocated.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Width">
            <summary>
            Gets texture width (in texels).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Height">
            <summary>
            Gets texture height (in texels).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Depth">
            <summary>
            Gets texture depth (in texels).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.ArraySize">
            <summary>
            Gets number of textures in the array.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.MultiSampleLevel">
            <summary>
            Gets multi-sampling parameters for the texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.MipLevels">
            <summary>
            Gets number of mipmap levels in the texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.ResidentMipLevels">
            <summary>
            Gets the number of resident mipmap levels in the texture. (already uploaded to the GPU).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.HighestResidentMipIndex">
            <summary>
            Gets the index of the highest resident mip map (may be equal to MipLevels if no mip has been uploaded). Note: mip=0 is the highest (top quality).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Format">
            <summary>
            Gets texture data format.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Flags">
            <summary>
            Gets flags of the texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Dimensions">
            <summary>
            Gets texture dimensions.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Description">
            <summary>
            Gets texture description structure.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Size">
            <summary>
            Gets the texture total size in pixels.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Size3">
            <summary>
            Gets the texture total size in pixels (with depth).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.IsPowerOfTwo">
            <summary>
            Returns true if texture has size that is power of two.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.NativePtr">
            <summary>
            Gets the native pointer to the underlying resource. It's a low-level platform-specific handle.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUTexture.GetMipSize(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the texture mip map dimensions.
            </summary>
            <param name="mipLevelIndex">Mip level index (zero-based where 0 is top texture surface).</param>
            <param name="mipWidth">The calculated mip level width (in pixels).</param>
            <param name="mipHeight">The calculated mip level height (in pixels).</param>
        </member>
        <member name="M:FlaxEngine.GPUTexture.GetMipSize(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the texture mip map dimensions.
            </summary>
            <param name="mipLevelIndex">Mip level index (zero-based where 0 is top texture surface).</param>
            <param name="mipWidth">The calculated mip level width (in pixels).</param>
            <param name="mipHeight">The calculated mip level height (in pixels).</param>
            <param name="mipDepth">The calculated mip level depth (in pixels).</param>
        </member>
        <member name="M:FlaxEngine.GPUTexture.View">
            <summary>
            Gets the view to the first surface (only for 2D textures).
            </summary>
            <returns>The view to the main texture surface.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.View(System.Int32)">
            <summary>
            Gets the view to the surface at index in an array.
            </summary>
            <remarks>
            To use per depth/array slice view you need to specify the <see cref="F:FlaxEngine.GPUTextureFlags.PerSliceViews"/> when creating the resource.
            </remarks>
            <param name="arrayOrDepthIndex">The index of the surface in an array (or depth slice index).</param>
            <returns>The view to the surface at index in an array.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.View(System.Int32,System.Int32)">
            <summary>
            Gets the view to the mip map surface at index in an array.
            </summary>
            <remarks>
            To use per mip map view you need to specify the <see cref="F:FlaxEngine.GPUTextureFlags.PerMipViews"/> when creating the resource.
            </remarks>
            <param name="arrayOrDepthIndex">The index of the surface in an array (or depth slice index).</param>
            <param name="mipMapIndex">Index of the mip level.</param>
            <returns>The view to the surface at index in an array.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.ViewArray">
            <summary>
            Gets the view to the array of surfaces
            </summary>
            <remarks>
            To use array texture view you need to create render target as an array.
            </remarks>
            <returns>The view to the array of surfaces.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.ViewVolume">
            <summary>
            Gets the view to the volume texture (3D).
            </summary>
            <remarks>
            To use volume texture view you need to create render target as a volume resource (3D texture with Depth > 1).
            </remarks>
            <returns>The view to the volume texture.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.ViewReadOnlyDepth">
            <summary>
            Gets the view to the texture as read-only depth/stencil buffer. Valid only if graphics device supports it and the texture uses depth/stencil.
            </summary>
            <returns>The view to the depth-stencil resource descriptor as read-only depth.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.Init(FlaxEngine.GPUTextureDescription@)">
            <summary>
            Initializes a texture resource (allocates the GPU memory and performs the resource setup).
            </summary>
            <param name="desc">The texture description.</param>
            <returns>True if cannot create texture, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the texture. It must be created first.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>True if fails, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.Resize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the texture. It must be created first.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <returns>True if fails, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.GPUTextureDescription">
            <summary>
            A common description for all GPU textures.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsRenderTarget">
            <summary>
            Gets a value indicating whether this instance is a render target.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsDepthStencil">
            <summary>
            Gets a value indicating whether this instance is a depth stencil.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsShaderResource">
            <summary>
            Gets a value indicating whether this instance is a shader resource.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsUnorderedAccess">
            <summary>
            Gets a value indicating whether this instance is a unordered access.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.HasPerMipViews">
            <summary>
            Gets a value indicating whether this instance has per mip level handles.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.HasPerSliceViews">
            <summary>
            Gets a value indicating whether this instance has per slice views.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsMultiSample">
            <summary>
            Gets a value indicating whether this instance is a multi sample texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsCubeMap">
            <summary>
            Gets a value indicating whether this instance is a cubemap texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsVolume">
            <summary>
            Gets a value indicating whether this instance is a volume texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsArray">
            <summary>
            Gets a value indicating whether this instance is an array texture.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.Clear">
            <summary>
            Clears description.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New1D(System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32)">
            <summary>
            Creates a new 1D <see cref="T:FlaxEngine.GPUTextureDescription" /> with a single mipmap.
            </summary>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of 1D <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New1D(System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32)">
            <summary>
            Creates a new 1D <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of 1D <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New1D(System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32,System.Int32)">
            <summary>
            Creates a new 1D <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of 1D <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New2D(System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" /> with a single mipmap.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New2D(System.Int32,System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32,FlaxEngine.MSAALevel)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="msaaLevel">The MSAA Level.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New2D(System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32,System.Int32,FlaxEngine.MSAALevel)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="msaaLevel">The MSAA Level.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New3D(FlaxEngine.Vector3,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" /> with a single mipmap.
            </summary>
            <param name="size">The size (width, height and depth).</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New3D(System.Int32,System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" /> with a single mipmap.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New3D(System.Int32,System.Int32,System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New3D(System.Int32,System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.NewCube(System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags)">
            <summary>
            Creates a new Cube <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">The texture flags.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.NewCube(System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags)">
            <summary>
            Creates a new Cube <see cref="T:FlaxEngine.GPUTextureDescription"/>.
            </summary>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">The texture flags.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription"/> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.NewCube(System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32)">
            <summary>
            Creates a new Cube <see cref="T:FlaxEngine.GPUTextureDescription"/>.
            </summary>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">The texture flags.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription"/> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.ToStagingUpload">
            <summary>
            Gets the staging description for this instance.
            </summary>
            <returns>A staging texture description</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.ToStagingReadback">
            <summary>
            Gets the staging description for this instance.
            </summary>
            <returns>A staging texture description</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.Equals(FlaxEngine.GPUTextureDescription)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Dimensions">
            <summary>
            The dimensions of the texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Width">
            <summary>
            Texture width (in texels).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Height">
            <summary>
            Texture height (in texels).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Depth">
            <summary>
            Texture depth (in texels) for Volume Textures.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.ArraySize">
            <summary>
            Number of textures in array for Texture Arrays.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.MipLevels">
            <summary>
            The maximum number of mipmap levels in the texture. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Format">
            <summary>
            Texture format (see <strong><see cref="T:FlaxEngine.PixelFormat"/></strong>).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.MultiSampleLevel">
            <summary>
            Structure that specifies multisampling parameters for the texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Flags">
            <summary>
            Flags (see <strong><see cref="T:FlaxEngine.GPUTextureFlags"/></strong>) for binding to pipeline stages. The flags can be combined by a logical OR.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Usage">
            <summary>
            Value that identifies how the texture is to be read from and written to. The most common value is <see cref="F:FlaxEngine.GPUResourceUsage.Default"/>; see <strong><see cref="T:FlaxEngine.GPUResourceUsage"/></strong> for all possible values.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.DefaultClearColor">
            <summary>
            Default clear color for render targets
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUTextureFlags">
            <summary>
            GPU texture usage flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.None">
            <summary>
            No texture flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.ShaderResource">
            <summary>
            Create a texture that can be bound as a shader resource.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.RenderTarget">
            <summary>
            Create a texture that can be bound as a render target.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.UnorderedAccess">
            <summary>
            Create a texture can be bound as an unordered access buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.DepthStencil">
            <summary>
            Create a texture can be bound as a depth stencil buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.PerMipViews">
            <summary>
            Create texture views per texture mip map (valid only for Texture2D with ShaderResource or RenderTarget flag).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.PerSliceViews">
            <summary>
            Create texture views per texture slice map (valid only for Texture3D with ShaderResource or RenderTarget flag).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.ReadOnlyDepthView">
            <summary>
            Create read-only view for depth-stencil buffer. Valid only if texture uses depth-stencil and the graphics device supports it.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.BackBuffer">
            <summary>
            Create a texture that can be used as a native window swap chain backbuffer surface.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextureDimensions">
            <summary>
            Defines the dimension of a texture object.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureDimensions.Texture">
            <summary>
            The texture (2d).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureDimensions.VolumeTexture">
            <summary>
            The volume texture (3d texture).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureDimensions.CubeTexture">
            <summary>
            The cube texture (2d texture array of 6 items).
            </summary>
        </member>
        <member name="T:FlaxEngine.CursorLockMode">
            <summary>
            Hardware mouse cursor behaviour.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorLockMode.None">
            <summary>
            The default mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorLockMode.Locked">
            <summary>
            Cursor position is locked to the center of the game window.
            </summary>
        </member>
        <member name="T:FlaxEngine.MouseButton">
            <summary>
            Mouse buttons types.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.None">
            <summary>
            No button.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Left">
            <summary>
            Left button.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Middle">
            <summary>
            Middle button.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Right">
            <summary>
            Right button.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Extended1">
            <summary>
            Extended button 1 (or XButton1).
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Extended2">
            <summary>
            Extended button 2 (or XButton2).
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.MAX">
            <summary>
            The count of items in the MouseButton enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.GamepadAxis">
            <summary>
            Axis for gamepad.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.None">
            <summary>
            No axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.LeftStickX">
            <summary>
            The X-Axis of the left thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.LeftStickY">
            <summary>
            The Y-Axis of the left thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.RightStickX">
            <summary>
            The X-Axis of the right thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.RightStickY">
            <summary>
            The Y-Axis of the right thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.LeftTrigger">
            <summary>
            The left trigger.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.RightTrigger">
            <summary>
            The right trigger.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.MAX">
            <summary>
            The count of items in the GamepadAxis enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.GamepadButton">
            <summary>
            Buttons for gamepad.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.None">
            <summary>
            No buttons.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.DPadUp">
            <summary>
            PadUp button (DPad / Directional Pad).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.DPadDown">
            <summary>
            PadDown button (DPad / Directional Pad).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.DPadLeft">
            <summary>
            PadLeft button (DPad / Directional Pad).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.DPadRight">
            <summary>
            PadRight button (DPad / Directional Pad).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.Start">
            <summary>
            Start button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.Back">
            <summary>
            Back button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftThumb">
            <summary>
            Left thumbstick button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightThumb">
            <summary>
            Right thumbstick button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftShoulder">
            <summary>
            Left shoulder button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightShoulder">
            <summary>
            Right shoulder button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftTrigger">
            <summary>
            Left trigger button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightTrigger">
            <summary>
            Right trigger button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.A">
            <summary>
            A (face button down).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.B">
            <summary>
            B (face button right).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.X">
            <summary>
            X (face button left).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.Y">
            <summary>
            Y (face button up).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftStickUp">
            <summary>
            The left stick up.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftStickDown">
            <summary>
            The left stick down.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftStickLeft">
            <summary>
            The left stick left.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftStickRight">
            <summary>
            The left stick right.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightStickUp">
            <summary>
            The right stick up.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightStickDown">
            <summary>
            The right stick down.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightStickLeft">
            <summary>
            The right stick left.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightStickRight">
            <summary>
            The right stick right.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.MAX">
            <summary>
            The count of items in the GamepadButton enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.InputActionMode">
            <summary>
            The input action event trigger modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputActionMode.Pressing">
            <summary>
            User is pressing the key/button.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputActionMode.Press">
            <summary>
            User pressed the key/button (but wasn't pressing it in the previous frame).
            </summary>
        </member>
        <member name="F:FlaxEngine.InputActionMode.Release">
            <summary>
            User released the key/button (was pressing it in the previous frame).
            </summary>
        </member>
        <member name="T:FlaxEngine.InputGamepadIndex">
            <summary>
            The input gamepad index.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.All">
            <summary>
            All detected gamepads.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad0">
            <summary>
            The gamepad no. 0.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad1">
            <summary>
            The gamepad no. 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad2">
            <summary>
            The gamepad no. 2.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad3">
            <summary>
            The gamepad no. 3.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad4">
            <summary>
            The gamepad no. 4.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad5">
            <summary>
            The gamepad no. 5.
            </summary>
        </member>
        <member name="T:FlaxEngine.InputAxisType">
            <summary>
            The input axes types.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.MouseX">
            <summary>
            The mouse X-Axis (mouse delta position scaled by the sensitivity).
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.MouseY">
            <summary>
            The mouse Y-Axis (mouse delta position scaled by the sensitivity).
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.MouseWheel">
            <summary>
            The mouse wheel (mouse wheel delta scaled by the sensitivity).
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadLeftStickX">
            <summary>
            The gamepad X-Axis of the left thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadLeftStickY">
            <summary>
            The gamepad Y-Axis of the left thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadRightStickX">
            <summary>
            The gamepad X-Axis of the right thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadRightStickY">
            <summary>
            The gamepad Y-Axis of the right thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadLeftTrigger">
            <summary>
            The gamepad left trigger.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadRightTrigger">
            <summary>
            The gamepad right trigger.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.KeyboardOnly">
            <summary>
            The keyboard only mode. For key inputs.
            </summary>
        </member>
        <member name="T:FlaxEngine.GamepadVibrationState">
            <summary>
            General identifiers for potential force feedback channels. These will be mapped according to the platform specific implementation.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadVibrationState.LeftLarge">
            <summary>
            The left large motor vibration.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadVibrationState.LeftSmall">
            <summary>
            The left small motor vibration.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadVibrationState.RightLarge">
            <summary>
            The right large motor vibration.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadVibrationState.RightSmall">
            <summary>
            The right small motor vibration.
            </summary>
        </member>
        <member name="T:FlaxEngine.Gamepad">
            <summary>
            Represents a single hardware gamepad device. Used by the Input to report raw gamepad input events.
            </summary>
        </member>
        <member name="M:FlaxEngine.Gamepad.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Gamepad"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Gamepad.ProductID">
            <summary>
            Gets the gamepad device type identifier.
            </summary>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetAxis(FlaxEngine.GamepadAxis)">
            <summary>
            Gets the gamepad axis value.
            </summary>
            <param name="axis">Gamepad axis to check</param>
            <returns>Axis value.</returns>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetButton(FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button state (true if being pressed during the current frame).
            </summary>
            <param name="button">Gamepad button to check</param>
            <returns>True if user holds down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetButtonDown(FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button down state (true if was pressed during the current frame).
            </summary>
            <param name="button">Gamepad button to check</param>
            <returns>True if user starts pressing down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetButtonUp(FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button up state (true if was released during the current frame).
            </summary>
            <param name="button">Gamepad button to check</param>
            <returns>True if user releases the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Gamepad.SetVibration(FlaxEngine.GamepadVibrationState)">
            <summary>
            Sets the state of the gamepad vibration. Ignored if controller does not support this.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:FlaxEngine.Gamepad.SetColor(FlaxEngine.Color)">
            <summary>
            Sets the color of the gamepad light. Ignored if controller does not support this.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:FlaxEngine.Gamepad.ResetColor">
            <summary>
            Resets the color of the gamepad light to the default. Ignored if controller does not support this.
            </summary>
        </member>
        <member name="T:FlaxEngine.Input">
            <summary>
            The user input handling service.
            </summary>
        </member>
        <member name="E:FlaxEngine.Input.ActionTriggered">
            <summary>
            Event fired when virtual input action is triggered. Called before scripts update. See <see cref="P:FlaxEngine.Input.ActionMappings"/> to edit configuration.
            </summary>
            <seealso cref="T:FlaxEngine.InputEvent"/>
        </member>
        <member name="E:FlaxEngine.Input.GamepadsChanged">
            <summary>
            The gamepads changed event. Called when new gamepad device gets disconnected or added. Can be called always on main thread before the scripts update.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.Mouse">
            <summary>
            Gets the mouse (null if platform does not support mouse or it is not connected).
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.Keyboard">
            <summary>
            Gets the keyboard (null if platform does not support keyboard or it is not connected).
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.Gamepads">
            <summary>
            Gets the gamepads.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.ActionMappings">
            <summary>
            Maps a discrete button or key press events to a "friendly name" that will later be bound to event-driven behavior. The end effect is that pressing (and/or releasing) a key, mouse button, or keypad button.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.AxisMappings">
            <summary>
            Maps keyboard, controller, or mouse inputs to a "friendly name" that will later be bound to continuous game behavior, such as movement. The inputs mapped in AxisMappings are continuously polled, even if they are just reporting that their input value.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.GamepadsCount">
            <summary>
            Gets the gamepads count.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.InputText">
            <summary>
            Gets the text entered during the current frame (Unicode).
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.MousePosition">
            <summary>
            Gets or sets the mouse position in game window coordinates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.MouseScreenPosition">
            <summary>
            Gets or sets the mouse position in screen-space coordinates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.MousePositionDelta">
            <summary>
            Gets the mouse position change during the last frame.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.MouseScrollDelta">
            <summary>
            Gets the mouse wheel change during the last frame.
            </summary>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepad(System.Int32)">
            <summary>
            Gets the gamepads count.
            </summary>
            <param name="index">The gamepad index.</param>
            <returns>The gamepad device or null if index is invalid.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetKey(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets the key state (true if key is being pressed during this frame).
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True while the user holds down the key identified by id</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetKeyDown(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets the key 'down' state (true if key was pressed in this frame).
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True during the frame the user starts pressing down the key</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetKeyUp(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets the key 'up' state (true if key was released in this frame).
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True during the frame the user releases the key</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetMouseButton(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button state.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True while the user holds down the button</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button down state.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True during the frame the user starts pressing down the button</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button up state.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True during the frame the user releases the button</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadAxis(System.Int32,FlaxEngine.GamepadAxis)">
            <summary>
            Gets the gamepad axis value.
            </summary>
            <param name="gamepadIndex">The gamepad index</param>
            <param name="axis">Gamepad axis to check</param>
            <returns>Axis value.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadButton(System.Int32,FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button state (true if being pressed during the current frame).
            </summary>
            <param name="gamepadIndex">The gamepad index</param>
            <param name="button">Gamepad button to check</param>
            <returns>True if user holds down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadButtonDown(System.Int32,FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button down state (true if was pressed during the current frame).
            </summary>
            <param name="gamepadIndex">The gamepad index</param>
            <param name="button">Gamepad button to check</param>
            <returns>True if user starts pressing down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadButtonUp(System.Int32,FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button up state (true if was released during the current frame).
            </summary>
            <param name="gamepadIndex">The gamepad index</param>
            <param name="button">Gamepad button to check</param>
            <returns>True if user releases the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadAxis(FlaxEngine.InputGamepadIndex,FlaxEngine.GamepadAxis)">
            <summary>
            Gets the gamepad axis value.
            </summary>
            <param name="gamepad">The gamepad</param>
            <param name="axis">Gamepad axis to check</param>
            <returns>Axis value.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadButton(FlaxEngine.InputGamepadIndex,FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button state (true if being pressed during the current frame).
            </summary>
            <param name="gamepad">The gamepad</param>
            <param name="button">Gamepad button to check</param>
            <returns>True if user holds down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadButtonDown(FlaxEngine.InputGamepadIndex,FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button down state (true if was pressed during the current frame).
            </summary>
            <param name="gamepad">The gamepad</param>
            <param name="button">Gamepad button to check</param>
            <returns>True if user starts pressing down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadButtonUp(FlaxEngine.InputGamepadIndex,FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button up state (true if was released during the current frame).
            </summary>
            <param name="gamepad">The gamepad</param>
            <param name="button">Gamepad button to check</param>
            <returns>True if user releases the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetAction(System.String)">
            <summary>
            Gets the value of the virtual action identified by name. Use <see cref="P:FlaxEngine.Input.ActionMappings"/> to get the current config.
            </summary>
            <param name="name">The action name.</param>
            <returns>True if action has been triggered in the current frame (e.g. button pressed), otherwise false.</returns>
            <seealso cref="P:FlaxEngine.Input.ActionMappings"/>
        </member>
        <member name="M:FlaxEngine.Input.GetAxis(System.String)">
            <summary>
            Gets the value of the virtual axis identified by name. Use <see cref="P:FlaxEngine.Input.AxisMappings"/> to get the current config.
            </summary>
            <param name="name">The action name.</param>
            <returns>The current axis value (e.g for gamepads it's in the range -1..1). Value is smoothed to reduce artifacts.</returns>
            <seealso cref="P:FlaxEngine.Input.AxisMappings"/>
        </member>
        <member name="M:FlaxEngine.Input.GetAxisRaw(System.String)">
            <summary>
            Gets the raw value of the virtual axis identified by name with no smoothing filtering applied. Use <see cref="P:FlaxEngine.Input.AxisMappings"/> to get the current config.
            </summary>
            <param name="name">The action name.</param>
            <returns>The current axis value (e.g for gamepads it's in the range -1..1). No smoothing applied.</returns>
            <seealso cref="P:FlaxEngine.Input.AxisMappings"/>
        </member>
        <member name="T:FlaxEngine.InputDevice">
            <summary>
            Base class for all input device objects.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputDevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputDevice"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.InputDevice.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:FlaxEngine.Keyboard">
            <summary>
            Represents a single hardware keyboard device. Used by the Input to report raw keyboard input events.
            </summary>
        </member>
        <member name="M:FlaxEngine.Keyboard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Keyboard"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Keyboard.InputText">
            <summary>
            Gets the text entered during the current frame.
            </summary>
        </member>
        <member name="M:FlaxEngine.Keyboard.GetKey(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets keyboard key state.
            </summary>
            <param name="key">Key ID to check.</param>
            <returns>True if user holds down the key identified by id, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Keyboard.GetKeyDown(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets keyboard key down state.
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True if user starts pressing down the key, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Keyboard.GetKeyUp(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets keyboard key up state.
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True if user releases the key, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.KeyboardKeys">
            <summary>
            Enumeration for key codes.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.None">
            <summary>
            The 'none' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Backspace">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Tab">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Clear">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Return">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Shift">
            <summary>
            Any SHIFT key, right or left
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Control">
            <summary>
            Any CTRL key, right or left
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alt">
            <summary>
            Any ALT key, right or left
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Pause">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Capital">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Kana">
            <summary>
            IME Kana mode
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Hangul">
            <summary>
            IME Hangul mode
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Junja">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Final">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Hanja">
            <summary>
            IME Hanja mode
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Kanji">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Escape">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Convert">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Nonconvert">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Accept">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Modechange">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Spacebar">
            <summary>
            SPACEBAR key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.PageUp">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.PageDown">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.End">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Home">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.ArrowLeft">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.ArrowUp">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.ArrowRight">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.ArrowDown">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Select">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Print">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Execute">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.PrintScreen">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Insert">
            <summary>
            INSERT key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Delete">
            <summary>
            DELETE key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Help">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha0">
            <summary>
            The '0' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha1">
            <summary>
            The '1' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha2">
            <summary>
            The '2' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha3">
            <summary>
            The '3' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha4">
            <summary>
            The '4' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha5">
            <summary>
            The '5' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha6">
            <summary>
            The '6' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha7">
            <summary>
            The '7' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha8">
            <summary>
            The '8' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha9">
            <summary>
            The '9' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LeftWindows">
            <summary>
            Left Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.RightWindows">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Applications">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Sleep">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.NumpadMultiply">
            <summary>
            Numeric keypad Multiply key '*'
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.NumpadAdd">
            <summary>
            Numeric keypad Add key '+'
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.NumpadSeparator">
            <summary>
            Numeric Separator key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.NumpadSubtract">
            <summary>
            Numeric keypad Subtract key '-'
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.NumpadDecimal">
            <summary>
            Numeric keypad Decimal key ','
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.NumpadDivide">
            <summary>
            Numeric keypad Divide key '/'
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F1">
            <summary>
            F1 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F2">
            <summary>
            F2 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F3">
            <summary>
            F3 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F4">
            <summary>
            F4 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F5">
            <summary>
            F5 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F6">
            <summary>
            F6 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F7">
            <summary>
            F7 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F8">
            <summary>
            F8 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F9">
            <summary>
            F9 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F10">
            <summary>
            F10 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F11">
            <summary>
            F11 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F12">
            <summary>
            F12 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F13">
            <summary>
            F13 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F14">
            <summary>
            F14 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F15">
            <summary>
            F15 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F16">
            <summary>
            F16 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F17">
            <summary>
            F17 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F18">
            <summary>
            F18 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F19">
            <summary>
            F19 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F20">
            <summary>
            F20 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F21">
            <summary>
            F21 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F22">
            <summary>
            F22 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F23">
            <summary>
            F23 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F24">
            <summary>
            F24 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numlock">
            <summary>
            Numeric keypad NUM LOCK key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Scroll">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LeftMenu">
            <summary>
            Left MENU key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.RightMenu">
            <summary>
            Right MENU key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserBack">
            <summary>
            Browser Back key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserForward">
            <summary>
            Browser Forward key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserRefresh">
            <summary>
            Browser Refresh key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserStop">
            <summary>
            Browser Stop key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserSearch">
            <summary>
            Browser Search key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserFavorites">
            <summary>
            Browser Favorites key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserHome">
            <summary>
            Browser Start and Home key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.VolumeMute">
            <summary>
            Volume Mute key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.VolumeDown">
            <summary>
            Volume Down key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.VolumeUp">
            <summary>
            Volume Up key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.MediaNextTrack">
            <summary>
            Next Track key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.MediaPrevTrack">
            <summary>
            Previous Track key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.MediaStop">
            <summary>
            Stop Media key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.MediaPlayPause">
            <summary>
            Play/Pause Media key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LaunchMail">
            <summary>
            Start Mail key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LaunchMediaSelect">
            <summary>
            Select Media key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LaunchApp1">
            <summary>
            Start Application 1 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LaunchApp2">
            <summary>
            Start Application 2 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Colon">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the ';:' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Plus">
            <summary>
            For any country/region the '+' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Comma">
            <summary>
            For any country/region the ',' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Minus">
            <summary>
            For any country/region the '-' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Period">
            <summary>
            For any country/region the '.' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Slash">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the '/?' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BackQuote">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the '`~' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LeftBracket">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the '[{' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Backslash">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the '\\|' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.RightBracket">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the ']}' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Quote">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the
            'single-quote/double-quote' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Oem8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Oem102">
            <summary>
            Either the angle bracket key or the backslash key on the RT 102-key keyboard
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Processkey">
            <summary>
            IME PROCESS key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Packet">
            <summary>
            Used to pass Unicode characters as if they were keystrokes. The PACKET key is the low word of a 32-bit Virtual Key
            value used for non-keyboard input methods.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Attn">
            <summary>
            Attn key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Crsel">
            <summary>
            CrSel key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Exsel">
            <summary>
            ExSel key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Ereof">
            <summary>
            Erase EOF key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Play">
            <summary>
            Play key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Zoom">
            <summary>
            Zoom key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Pa1">
            <summary>
            PA1 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.OemClear">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.MAX">
            <summary>
            The count of items in the KeyboardKeys enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mouse">
            <summary>
            Represents a single hardware mouse device. Used by the Input to report raw mouse input events.
            </summary>
            <remarks>
            The mouse device position is in screen-space (not game client window space).
            </remarks>
        </member>
        <member name="M:FlaxEngine.Mouse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Mouse"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mouse.Position">
            <summary>
            Gets the position of the mouse in the screen-space coordinates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mouse.PositionDelta">
            <summary>
            Gets the delta position of the mouse in the screen-space coordinates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mouse.ScrollDelta">
            <summary>
            Gets the mouse wheel change during the last frame.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mouse.GetButton(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button state (true if being pressed during the current frame).
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True if user holds down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Mouse.GetButtonDown(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button down state (true if was pressed during the current frame).
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True if user starts pressing down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Mouse.GetButtonUp(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button up state (true if was released during the current frame).
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True if user releases the button, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.ActionConfig">
            <summary>
            Maps keyboard, controller, or mouse inputs to a "friendly name" that will later be bound to continuous game behavior, such as movement. The inputs mapped in AxisMappings are continuously polled, even if they are just reporting that their input value.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActionConfig.Name">
            <summary>
            The action "friendly name" used to access it from code.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActionConfig.Mode">
            <summary>
            The trigger mode. Allows to specify when input event should be fired.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActionConfig.Key">
            <summary>
            The keyboard key to map for this action. Use <see cref="F:FlaxEngine.KeyboardKeys.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActionConfig.MouseButton">
            <summary>
            The mouse button to map for this action. Use <see cref="F:FlaxEngine.MouseButton.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActionConfig.GamepadButton">
            <summary>
            The gamepad button to map for this action. Use <see cref="F:FlaxEngine.GamepadButton.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActionConfig.Gamepad">
            <summary>
            Which gamepad should be used.
            </summary>
        </member>
        <member name="T:FlaxEngine.AxisConfig">
            <summary>
            Maps keyboard, controller, or mouse inputs to a "friendly name" that will later be bound to continuous game behavior, such as movement. The inputs mapped in AxisMappings are continuously polled, even if they are just reporting that their input value.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Name">
            <summary>
            The axis "friendly name" used to access it from code.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Axis">
            <summary>
            The axis type (mouse, gamepad, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Gamepad">
            <summary>
            Which gamepad should be used.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.PositiveButton">
            <summary>
            The button to be pressed for movement in positive direction. Use <see cref="F:FlaxEngine.KeyboardKeys.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.NegativeButton">
            <summary>
            The button to be pressed for movement in negative direction. Use <see cref="F:FlaxEngine.KeyboardKeys.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.DeadZone">
            <summary>
            Any positive or negative values that are less than this number will register as zero. Useful for gamepads to specify the deadzone.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Sensitivity">
            <summary>
            For keyboard input, a larger value will result in faster response time (in units/s). A lower value will be more smooth. For Mouse delta the value will scale the actual mouse delta.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Gravity">
            <summary>
            For keyboard input describes how fast will the input recenter. Speed (in units/s) that output value will rest to neutral value if not when device at rest.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Scale">
            <summary>
            Additional scale parameter applied to the axis value. Allows to invert it or modify the range.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Snap">
            <summary>
            If enabled, the axis value will be immediately reset to zero after it receives opposite inputs. For keyboard input only.
            </summary>
        </member>
        <member name="T:FlaxEngine.Actor">
            <summary>
            Base class for all actor objects on the scene.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.EulerAngles">
            <summary>
            The rotation as Euler angles in degrees.
            </summary>
            <remarks>
            The x, y, and z angles represent a rotation z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
            Angles order (xyz): pitch, yaw and roll.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Actor.LocalEulerAngles">
            <summary>
            The local rotation as Euler angles in degrees.
            </summary>
            <remarks>
            The x, y, and z angles represent a rotation z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
            Angles order (xyz): pitch, yaw and roll.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Actor.HasChildren">
            <summary>
            Returns true if actor has any children
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.ResetLocalTransform">
            <summary>
            Resets actor local transform.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.AddChild(System.Type)">
            <summary>
            Creates a new child actor of the given type.
            </summary>
            <param name="type">Type of the actor.</param>
            <returns>The child actor.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddChild``1">
            <summary>
            Creates a new child actor of the given type.
            </summary>
            <typeparam name="T">Type of the actor to search for. Includes any actors derived from the type.</typeparam>
            <returns>The child actor.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChild``1">
            <summary>
            Finds the child actor of the given type.
            </summary>
            <typeparam name="T">Type of the actor to search for. Includes any actors derived from the type.</typeparam>
            <returns>The child actor or null if failed to find.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetOrAddChild``1">
            <summary>
            Finds the child actor of the given type or creates a new one.
            </summary>
            <typeparam name="T">Type of the actor to search for. Includes any actors derived from the type.</typeparam>
            <returns>The child actor.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddScript(System.Type)">
            <summary>
            Creates a new script of a specific type and adds it to the actor.
            </summary>
            <param name="type">Type of the script to create.</param>
            <returns>The created script instance, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddScript``1">
            <summary>
            Creates a new script of a specific type and adds it to the actor.
            </summary>
            <typeparam name="T">Type of the script to search for. Includes any scripts derived from the type.</typeparam>
            <returns>The created script instance, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScript``1">
            <summary>
            Finds the script of the given type.
            </summary>
            <typeparam name="T">Type of the script to search for. Includes any scripts derived from the type.</typeparam>
            <returns>The script or null if failed to find.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChildren``1">
            <summary>
            Searches for all actors of a specific type in this actor children list.
            </summary>
            <typeparam name="T">Type of the actor to search for. Includes any actors derived from the type.</typeparam>
            <returns>All actors matching the specified type</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScripts``1">
            <summary>
            Searches for all scripts of a specific type.
            </summary>
            <typeparam name="T">Type of the scripts to search for. Includes any scripts derived from the type.</typeparam>
            <returns>All scripts matching the specified type.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.DestroyChildren(System.Single)">
            <summary>
            Destroys the children. Calls Object.Destroy on every child actor and unlink them for the parent.
            </summary>
            <param name="timeLeft">The time left to destroy object (in seconds).</param>
        </member>
        <member name="P:FlaxEngine.Actor.WorldToLocalMatrix">
            <summary>
            Gets the matrix that transforms a point from the world space to local space of the actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalToWorldMatrix">
            <summary>
            Gets the matrix that transforms a point from the local space of the actor to world space.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Actor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Actor"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Children">
            <summary>
            List with all child actors attached to the actor (readonly). All items are valid (not null).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Scripts">
            <summary>
            List with all scripts attached to the actor (readonly). All items are valid (not null).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.HideFlags">
            <summary>
            The hide flags.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Layer">
            <summary>
            Gets or sets the object layer (index). Can be used for selective rendering or ignoring raycasts.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LayerName">
            <summary>
            Gets the name of the layer.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Tag">
            <summary>
            Gets or sets the name of the tag.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Name">
            <summary>
            Gets or sets the actor name.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Scene">
            <summary>
            Gets the scene object which contains this actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.ChildrenCount">
            <summary>
            Gets amount of child actors.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.ScriptsCount">
            <summary>
            Gets amount of scripts.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsActive">
            <summary>
            Gets or sets value indicating if actor is active in the scene.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsActiveInHierarchy">
            <summary>
            Gets value indicating if actor is active in the scene graph. It must be active as well as that of all it's parents.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsStatic">
            <summary>
            Returns true if object is fully static on the scene, otherwise false.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsTransformStatic">
            <summary>
            Returns true if object has static transform.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.StaticFlags">
            <summary>
            Gets or sets the actor static fags.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Transform">
            <summary>
            Gets or sets the actor's world transformation.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Position">
            <summary>
            Gets or sets the actor's world transform position.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Orientation">
            <summary>
            Gets or sets actor orientation in 3D space
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Scale">
            <summary>
            Gets or sets actor scale in 3D space
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Rotation">
            <summary>
            Gets or sets actor rotation matrix
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.PerInstanceRandom">
            <summary>
            Gets the random per-instance value (normalized to range 0-1).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Direction">
            <summary>
            Gets or sets actor direction vector (forward vector).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalTransform">
            <summary>
            Gets or sets local transform of the actor in parent actor space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalPosition">
            <summary>
            Gets or sets local position of the actor in parent actor space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalOrientation">
            <summary>
            Gets or sets local rotation of the actor in parent actor space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalScale">
            <summary>
            Gets or sets local scale vector of the actor in parent actor space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Sphere">
            <summary>
            Gets actor bounding sphere that defines 3D space intersecting with the actor (for determination of the visibility for actor).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Box">
            <summary>
            Gets actor bounding box that defines 3D space intersecting with the actor (for determination of the visibility for actor).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.BoxWithChildren">
            <summary>
            Gets actor bounding box of the actor including all child actors (children included in recursive way)
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.EditorBox">
            <summary>
            Gets actor bounding box (single actor, no children included) for editor tools.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.EditorBoxChildren">
            <summary>
            Gets actor bounding box of the actor including all child actors for editor tools.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.HasContentLoaded">
            <summary>
            Returns true if actor has loaded content.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsPrefabRoot">
            <summary>
            Gets a value indicating whether this actor is a prefab instance root object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.HasTag">
            <summary>
            Determines whether this actor has tag assigned.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.HasTag(System.String)">
            <summary>
            Determines whether this actor has given tag assigned.
            </summary>
            <param name="tag">The tag to check.</param>
        </member>
        <member name="M:FlaxEngine.Actor.GetChild(System.Int32)">
            <summary>
            Gets the child actor at the given index.
            </summary>
            <param name="index">The child actor index.</param>
            <returns>The child actor (always valid).</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChild(System.String)">
            <summary>
            Gets the child actor with the given name.
            </summary>
            <param name="name">The child actor name.</param>
            <returns>The child actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChild(System.Type)">
            <summary>
            Gets the child actor of the given type.
            </summary>
            <param name="type">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>The child actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChildren(System.Type)">
            <summary>
            Gets the child actors of the given type.
            </summary>
            <param name="type">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>The child actors.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScript(System.Int32)">
            <summary>
            Gets the script at the given index.
            </summary>
            <param name="index">The script index.</param>
            <returns>The script (always valid).</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScript(System.Type)">
            <summary>
            Gets the script of the given type.
            </summary>
            <param name="type">Type of the script to search for. Includes any scripts derived from the type.</param>
            <returns>The script or null.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScripts(System.Type)">
            <summary>
            Gets the scripts of the given type.
            </summary>
            <param name="type">Type of the script to search for. Includes any scripts derived from the type.</param>
            <returns>The scripts.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddStaticFlags(FlaxEngine.StaticFlags)">
            <summary>
            Adds the actor static flags.
            </summary>
            <param name="flags">The flags to add.</param>
        </member>
        <member name="M:FlaxEngine.Actor.RemoveStaticFlags(FlaxEngine.StaticFlags)">
            <summary>
            Removes the actor static flags.
            </summary>
            <param name="flags">The flags to remove.</param>
        </member>
        <member name="M:FlaxEngine.Actor.SetStaticFlag(FlaxEngine.StaticFlags,System.Boolean)">
            <summary>
            Sets a single static flag to the desire value.
            </summary>
            <param name="flag">The flag to change.</param>
            <param name="value">The target value of the flag.</param>
        </member>
        <member name="M:FlaxEngine.Actor.AddMovement(FlaxEngine.Vector3)">
            <summary>
            Moves the actor (also can rotate it) in world space.
            </summary>
            <param name="translation">The translation vector.</param>
        </member>
        <member name="M:FlaxEngine.Actor.AddMovement(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Moves the actor (also can rotate it) in world space.
            </summary>
            <param name="translation">The translation vector.</param>
            <param name="rotation">The rotation quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Actor.GetWorldToLocalMatrix(FlaxEngine.Matrix@)">
            <summary>
            Gets the matrix that transforms a point from the world space to local space of the actor.
            </summary>
            <param name="worldToLocal">The world to local matrix.</param>
        </member>
        <member name="M:FlaxEngine.Actor.GetLocalToWorldMatrix(FlaxEngine.Matrix@)">
            <summary>
            Gets the matrix that transforms a point from the local space of the actor to world space.
            </summary>
            <param name="localToWorld">The world to local matrix.</param>
        </member>
        <member name="M:FlaxEngine.Actor.FindActor(System.String)">
            <summary>
            Tries to find the actor with the given name in this actor hierarchy (checks this actor and all children hierarchy).
            </summary>
            <param name="name">The name of the actor.</param>
            <returns>Actor instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FindActor(System.Type)">
            <summary>
            Tries to find the actor of the given type in this actor hierarchy (checks this actor and all children hierarchy).
            </summary>
            <param name="type">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>Actor instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FindScript(System.Type)">
            <summary>
            Tries to find the script of the given type in this actor hierarchy (checks this actor and all children hierarchy).
            </summary>
            <param name="type">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>Script instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.HasActorInHierarchy(FlaxEngine.Actor)">
            <summary>
            Try to find actor in hierarchy structure.
            </summary>
            <param name="a">The actor to find.</param>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.HasActorInChildren(FlaxEngine.Actor)">
            <summary>
            Try to find actor in child actors structure.
            </summary>
            <param name="a">The actor to find.</param>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.IntersectsItself(FlaxEngine.Ray,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a Ray.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <returns>True whether the two objects intersected, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.Intersects(FlaxEngine.Ray,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object or any it's child and a ray.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <returns>The target hit actor that is the closest to the ray.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.LookAt(FlaxEngine.Vector3)">
            <summary>
            Rotates actor to orient it towards the specified world position.
            </summary>
            <param name="worldPos">The world position to orient towards.</param>
        </member>
        <member name="M:FlaxEngine.Actor.LookAt(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Rotates actor to orient it towards the specified world position with upwards direction.
            </summary>
            <param name="worldPos">The world position to orient towards.</param>
            <param name="worldUp">The up direction that Constrains y axis orientation to a plane this vector lies on. This rule might be broken if forward and up direction are nearly parallel.</param>
        </member>
        <member name="M:FlaxEngine.Actor.ToBytes(FlaxEngine.Actor[])">
            <summary>
            Performs actors serialization to the raw bytes.
            </summary>
            <param name="actors">The actors to serialize.</param>
            <returns>The output data, empty if failed.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FromBytes(System.Byte[])">
            <summary>
            Performs actors deserialization from the raw bytes.
            </summary>
            <param name="data">The input data.</param>
            <returns>The output actors.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FromBytes(System.Byte[],System.Collections.Generic.Dictionary{System.Guid,System.Guid})">
            <summary>
            Performs actors deserialization from the raw bytes.
            </summary>
            <param name="data">The input data.</param>
            <param name="idsMapping">The serialized objects Ids mapping. Can be used to convert the spawned objects ids and references to them.</param>
            <returns>The output actors.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.TryGetSerializedObjectsIds(System.Byte[])">
            <summary>
            Tries the get serialized objects ids from the raw bytes.
            </summary>
            <param name="data">The data.</param>
            <returns>The output array of serialized object ids.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.ToJson">
            <summary>
            Serializes the actor object to the Json string. Serialized are only this actor properties but no child actors nor scripts. Serializes references to the other objects in a proper way using IDs.
            </summary>
            <returns>The Json container with serialized actor data.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FromJson(System.String)">
            <summary>
            Deserializes the actor object to the Json string. Deserialized are only this actor properties but no child actors nor scripts.
            </summary>
            <param name="json">The serialized actor data (state).</param>
        </member>
        <member name="M:FlaxEngine.Actor.OnBeginPlay">
            <summary>
            Called when adding object to the game.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.OnEndPlay">
            <summary>
            Called when removing object from the game.
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimatedModel">
            <summary>
            Performs an animation and renders a skinned model.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AnimatedModel"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.SkinnedModel">
            <summary>
            The skinned model asset used for rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.AnimationGraph">
            <summary>
            The animation graph asset used for the skinned mesh skeleton bones evaluation (controls the animation).
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.PerBoneMotionBlur">
            <summary>
            If true, use per-bone motion blur on this skeletal model. It requires additional rendering, can be disabled to save performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.UseTimeScale">
            <summary>
            If true, animation speed will be affected by the global time scale parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.UpdateWhenOffscreen">
            <summary>
            If true, the animation will be updated even when an actor cannot be seen by any camera. Otherwise, the animations themselves will also stop running when the actor is off-screen.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.UpdateMode">
            <summary>
            The animation update mode. Can be used to optimize the performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.BoundsScale">
            <summary>
            The master scale parameter for the actor bounding box. Helps reducing mesh flickering effect on screen edges.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.CustomBounds">
            <summary>
            The custom bounds(in actor local space). If set to empty bounds then source skinned model bind pose bounds will be used.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.LODBias">
            <summary>
            The model Level Of Detail bias value. Allows to increase or decrease rendered model quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.ForcedLOD">
            <summary>
            Gets the model forced Level Of Detail index. Allows to bind the given model LOD to show. Value -1 disables this feature.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.DrawModes">
            <summary>
            The draw passes to use for rendering this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.ShadowsMode">
            <summary>
            The shadows casting mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.RootMotionTarget">
            <summary>
            The animation root motion apply target. If not specified the animated model will apply it itself.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.Parameters">
            <summary>
            Gets the anim graph instance parameters collection.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.ResetAnimation">
            <summary>
            Resets the animation state (clears the instance state data but preserves the instance parameters values).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.UpdateAnimation">
            <summary>
            Performs the full animation update.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.SetupSkinningData">
            <summary>
            Validates and creates a proper skinning data.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.PreInitSkinningData">
            <summary>
            Creates and setups the skinning data (writes the identity bones transformations).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.UpdateSockets">
            <summary>
            Updates the child bone socket actors.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetCurrentPose(FlaxEngine.Matrix[]@)">
            <summary>
            Gets the per-node final transformations in actor local-space.
            </summary>
            <param name="nodesTransformation">The output per-node final transformation matrices in actor local-space.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetParameter(System.String)">
            <summary>
            Gets the anim graph instance parameter by name.
            </summary>
            <param name="name">The parameter name.</param>
            <returns>The parameters.</returns>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetParameterValue(System.String)">
            <summary>
            Gets the anim graph instance parameter value.
            </summary>
            <param name="name">The parameter name.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.SetParameterValue(System.String,System.Object)">
            <summary>
            Sets the anim graph instance parameter value.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetParameterValue(System.Guid)">
            <summary>
            Gets the anim graph instance parameter value.
            </summary>
            <param name="id">The parameter id.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.SetParameterValue(System.Guid,System.Object)">
            <summary>
            Sets the anim graph instance parameter value.
            </summary>
            <param name="id">The parameter id.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetBlendShapeWeight(System.String)">
            <summary>
            Gets the weight of the blend shape.
            </summary>
            <param name="name">The blend shape name.</param>
            <returns>The normalized weight of the blend shape (in range -1:1).</returns>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.SetBlendShapeWeight(System.String,System.Single)">
            <summary>
            Sets the weight of the blend shape.
            </summary>
            <param name="name">The blend shape name.</param>
            <param name="value">The normalized weight of the blend shape (in range -1:1).</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.ClearBlendShapeWeights">
            <summary>
            Clears the weights of the blend shapes (disabled any used blend shapes).
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimatedModel.AnimationUpdateMode">
            <summary>
            Describes the animation graph updates frequency for the animated model.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.Auto">
            <summary>
            The automatic updates will be used (based on platform capabilities, distance to the player, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.EveryUpdate">
            <summary>
            Animation will be updated every game update.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.EverySecondUpdate">
            <summary>
            Animation will be updated every second game update.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.EveryFourthUpdate">
            <summary>
            Animation will be updated every fourth game update.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.Manual">
            <summary>
            Animation can be updated manually by the user scripts.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.Never">
            <summary>
            Animation won't be updated at all.
            </summary>
        </member>
        <member name="T:FlaxEngine.BoneSocket">
            <summary>
            Actor that links to the animated model skeleton node transformation.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoneSocket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoneSocket"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoneSocket.Node">
            <summary>
            Gets or sets the target node name to link to it.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoneSocket.UseScale">
            <summary>
            Gets or sets the value indicating whenever use the target node scale. Otherwise won't override the actor scale.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoneSocket.UpdateTransformation">
            <summary>
            Updates the actor transformation based on a skeleton node.
            </summary>
        </member>
        <member name="T:FlaxEngine.BrushSurface">
            <summary>
            Represents a part of the CSG brush actor. Contains information about single surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.Brush">
            <summary>
            The parent brush.
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.Index">
            <summary>
            The surface index in the parent brush surfaces list.
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.Material">
            <summary>
            The material used to render the brush surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.TexCoordScale">
            <summary>
            The surface texture coordinates scale.
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.TexCoordOffset">
            <summary>
            The surface texture coordinates offset.
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.TexCoordRotation">
            <summary>
            The surface texture coordinates rotation angle (in degrees).
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.ScaleInLightmap">
            <summary>
            The scale in lightmap (per surface).
            </summary>
        </member>
        <member name="T:FlaxEngine.BoxBrush">
            <summary>
            Performs CSG box brush operation that adds or removes geometry.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoxBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoxBrush"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.ScaleInLightmap">
            <summary>
            Brush surfaces scale in lightmap
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.Surfaces">
            <summary>
            Gets or sets the brush proxies per surface.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.Mode">
            <summary>
            Gets or sets the CSG brush mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.Center">
            <summary>
            Gets or sets the brush center (in local space).
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.Size">
            <summary>
            Gets or sets the brush size.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.OrientedBox">
            <summary>
            Gets the volume bounding box (oriented).
            </summary>
        </member>
        <member name="M:FlaxEngine.BoxBrush.Intersects(System.Int32,FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the brush surface and a ray.
            If collision data is available on the CPU performs exact intersection check with the geometry.
            Otherwise performs simple <see cref="T:FlaxEngine.BoundingBox"/> vs <see cref="T:FlaxEngine.Ray"/> test.
            For more efficient collisions detection and ray casting use physics.
            </summary>
            <param name="surfaceIndex">The brush surface index..</param>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes and returns true, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <returns>True if the actor is intersected by the ray, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.BoxBrush.GetVertices(System.Int32,FlaxEngine.Vector3[]@)">
            <summary>
            Gets the brush surface triangles array (group by 3 vertices).
            </summary>
            <param name="surfaceIndex">The brush surface index..</param>
            <param name="outputData">The output vertices buffer with triangles or empty if no data loaded.</param>
        </member>
        <member name="T:FlaxEngine.BoxVolume">
            <summary>
            A base class for actors that define 3D bounding box volume.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoxVolume.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoxVolume"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxVolume.Size">
            <summary>
            Gets or sets the size of the volume (in local space).
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxVolume.OrientedBox">
            <summary>
            Gets the volume bounding box (oriented in world space).
            </summary>
        </member>
        <member name="T:FlaxEngine.BrushMode">
            <summary>
            CSG brush mode
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushMode.Additive">
            <summary>
            Brush adds
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushMode.Subtractive">
            <summary>
            Brush subtracts
            </summary>
        </member>
        <member name="T:FlaxEngine.Camera">
            <summary>
            Describes the camera projection and view. Provides information about how to render scene (viewport location and direction, etc.).
            </summary>
        </member>
        <member name="M:FlaxEngine.Camera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Camera"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.OverrideMainCamera">
            <summary>
            The overriden main camera.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.MainCamera">
            <summary>
            Gets the main camera.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.View">
            <summary>
            Gets the view matrix.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.Projection">
            <summary>
            Gets the projection matrix.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.Frustum">
            <summary>
            Gets the frustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.UsePerspective">
            <summary>
            Gets or sets the value indicating if camera should use perspective rendering mode, otherwise it will use orthographic projection.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.FieldOfView">
            <summary>
            Gets or sets the camera's field of view (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.CustomAspectRatio">
            <summary>
            Gets or sets the custom aspect ratio. 0 if not use custom value.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.NearPlane">
            <summary>
            Gets or sets camera's near plane distance.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.FarPlane">
            <summary>
            Gets or sets camera's far plane distance.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.OrthographicScale">
            <summary>
            Gets or sets the orthographic projection scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.Viewport">
            <summary>
            Gets the camera viewport.
            </summary>
        </member>
        <member name="M:FlaxEngine.Camera.ProjectPoint(FlaxEngine.Vector3,FlaxEngine.Vector2@)">
            <summary>
            Projects the point from 3D world-space to the camera screen-space (in screen pixels for default viewport calculated from <see cref="P:FlaxEngine.Camera.Viewport"/>).
            </summary>
            <param name="worldSpaceLocation">The input world-space location (XYZ in world).</param>
            <param name="screenSpaceLocation">The output screen-space location (XY in screen pixels).</param>
        </member>
        <member name="M:FlaxEngine.Camera.ProjectPoint(FlaxEngine.Vector3,FlaxEngine.Vector2@,FlaxEngine.Viewport@)">
            <summary>
            Projects the point from 3D world-space to the camera screen-space (in screen pixels for given viewport).
            </summary>
            <param name="worldSpaceLocation">The input world-space location (XYZ in world).</param>
            <param name="screenSpaceLocation">The output screen-space location (XY in screen pixels).</param>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:FlaxEngine.Camera.ConvertMouseToRay(FlaxEngine.Vector2)">
            <summary>
            Converts the mouse position to 3D ray.
            </summary>
            <param name="mousePosition">The mouse position.</param>
            <returns>Mouse ray</returns>
        </member>
        <member name="M:FlaxEngine.Camera.ConvertMouseToRay(FlaxEngine.Vector2,FlaxEngine.Viewport@)">
            <summary>
            Converts the mouse position to 3D ray.
            </summary>
            <param name="mousePosition">The mouse position.</param>
            <param name="viewport">The viewport.</param>
            <returns>Mouse ray</returns>
        </member>
        <member name="M:FlaxEngine.Camera.GetMatrices(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Calculates the view and the projection matrices for the camera.
            </summary>
            <param name="view">The result camera view matrix.</param>
            <param name="projection">The result camera projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Camera.GetMatrices(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Viewport@)">
            <summary>
            Calculates the view and the projection matrices for the camera. Support using custom viewport.
            </summary>
            <param name="view">The result camera view matrix.</param>
            <param name="projection">The result camera projection matrix.</param>
            <param name="viewport">The custom output viewport. Use null to skip it.</param>
        </member>
        <member name="M:FlaxEngine.Camera.IntersectsItselfEditor(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Intersection check for editor picking the camera
            </summary>
        </member>
        <member name="T:FlaxEngine.Decal">
            <summary>
            Actor that draws the can be used to draw a custom decals on top of the other objects.
            </summary>
        </member>
        <member name="M:FlaxEngine.Decal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Decal"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Decal.Material">
            <summary>
            The decal material. Must have domain mode to Decal type.
            </summary>
        </member>
        <member name="P:FlaxEngine.Decal.SortOrder">
            <summary>
            The decal rendering order. The higher values are render later (on top).
            </summary>
        </member>
        <member name="P:FlaxEngine.Decal.Size">
            <summary>
            Gets or sets the decal bounds size (in local space).
            </summary>
        </member>
        <member name="M:FlaxEngine.Decal.CreateAndSetVirtualMaterialInstance">
            <summary>
            Utility to crate a new virtual Material Instance asset, set its parent to the currently applied material, and assign it to the decal. Can be used to modify the decal material parameters from code.
            </summary>
            <returns>The created virtual material instance.</returns>
        </member>
        <member name="T:FlaxEngine.DirectionalLight">
            <summary>
            Directional light emits light from direction in space.
            </summary>
        </member>
        <member name="M:FlaxEngine.DirectionalLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.DirectionalLight"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.DirectionalLight.CascadeCount">
            <summary>
            The number of cascades used for slicing the range of depth covered by the light. Values are 1, 2 or 4 cascades; a typical scene uses 4 cascades.
            </summary>
        </member>
        <member name="T:FlaxEngine.EmptyActor">
            <summary>
            The empty actor that is useful to create hierarchy and/or hold scripts. See <see cref="T:FlaxEngine.Script"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.EmptyActor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.EmptyActor"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.EnvironmentProbe">
            <summary>
            Environment Probe can capture space around the objects to provide reflections.
            </summary>
        </member>
        <member name="M:FlaxEngine.EnvironmentProbe.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.EnvironmentProbe"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.Brightness">
            <summary>
            The reflections brightness.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.AutoUpdate">
            <summary>
            Value indicating if probe should be updated automatically on change.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.CaptureNearPlane">
            <summary>
            The probe capture camera near plane distance.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.Radius">
            <summary>
            Gets or sets the probe radius.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.ScaledRadius">
            <summary>
            Gets probe scaled radius.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.HasProbe">
            <summary>
            Returns true if env probe has cube texture assigned.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.HasProbeLoaded">
            <summary>
            Returns true if env probe has cube texture assigned.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.Probe">
            <summary>
            Gets the probe texture used during rendering (baked or custom one).
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.IsUsingCustomProbe">
            <summary>
            True if probe is using custom cube texture (not baked).
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.CustomProbe">
            <summary>
            Gets or sets the custom probe (null if using baked one or none).
            </summary>
        </member>
        <member name="M:FlaxEngine.EnvironmentProbe.Bake(System.Single)">
            <summary>
            Bakes that probe. It won't be performed now but on async graphics rendering task.
            </summary>
            <param name="timeout">The timeout in seconds left to bake it (aka startup time).</param>
        </member>
        <member name="T:FlaxEngine.ExponentialHeightFog">
            <summary>
            Used to create fogging effects such as clouds but with a density that is related to the height of the fog.
            </summary>
        </member>
        <member name="M:FlaxEngine.ExponentialHeightFog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ExponentialHeightFog"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogDensity">
            <summary>
            The fog density factor.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogHeightFalloff">
            <summary>
            The fog height density factor that controls how the density increases as height decreases. The smaller values produce more visible transition larger.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogInscatteringColor">
            <summary>
            Color of the fog.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogMaxOpacity">
            <summary>
            Maximum opacity of the fog.
            A value of 1 means the fog can become fully opaque at a distance and replace scene color completely.
            A value of 0 means the fog color will not be factored in at all.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.StartDistance">
            <summary>
            Distance from the camera that the fog will start, in world units.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogCutoffDistance">
            <summary>
            Scene elements past this distance will not have fog applied. This is useful for excluding skyboxes which already have fog baked in.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.DirectionalInscatteringLight">
            <summary>
            Directional light used for Directional Inscattering.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.DirectionalInscatteringExponent">
            <summary>
            Controls the size of the directional inscattering cone, which is used to approximate inscattering from a directional light.
            Note: there must be a directional light enabled for DirectionalInscattering to be used. Range: 2-64.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.DirectionalInscatteringStartDistance">
            <summary>
            Controls the start distance from the viewer of the directional inscattering, which is used to approximate inscattering from a directional light.
            Note: there must be a directional light enabled for DirectionalInscattering to be used.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.DirectionalInscatteringColor">
            <summary>
            Controls the color of the directional inscattering, which is used to approximate inscattering from a directional light.
            Note: there must be a directional light enabled for DirectionalInscattering to be used.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogEnable">
            <summary>
            Whether to enable Volumetric fog. Graphics quality settings control the resolution of the fog simulation.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogScatteringDistribution">
            <summary>
            Controls the scattering phase function - how much incoming light scatters in various directions.
            A distribution value of 0 scatters equally in all directions, while 0.9 scatters predominantly in the light direction.
            In order to have visible volumetric fog light shafts from the side, the distribution will need to be closer to 0. Range: -0.9-0.9.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogAlbedo">
            <summary>
            The height fog particle reflectiveness used by volumetric fog.
            Water particles in air have an albedo near white, while dust has slightly darker value.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogEmissive">
            <summary>
            Light emitted by height fog. This is a density so more light is emitted the further you are looking through the fog.
            In most cases using a Skylight is a better choice, however, it may be useful in certain scenarios.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogExtinctionScale">
            <summary>
            Scales the height fog particle extinction amount used by volumetric fog.
            Values larger than 1 cause fog particles everywhere absorb more light. Range: 0.1-10.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogDistance">
            <summary>
            Distance over which volumetric fog should be computed. Larger values extend the effect into the distance but expose under-sampling artifacts in details.
            </summary>
        </member>
        <member name="T:FlaxEngine.Light">
            <summary>
            Base class for all light types.
            </summary>
        </member>
        <member name="M:FlaxEngine.Light.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Light"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.Color">
            <summary>
            Color of the light
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.Brightness">
            <summary>
            Brightness of the light
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.ViewDistance">
            <summary>
            Controls light visibility range. The distance at which the light be completely faded. Use value 0 to always draw light.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.IndirectLightingIntensity">
            <summary>
            Controls how much this light will contribute indirect lighting. When set to 0, there is no GI from the light. The default value is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.VolumetricScatteringIntensity">
            <summary>
            Controls how much this light will contribute to the Volumetric Fog. When set to 0, there is no contribution.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.CastVolumetricShadow">
            <summary>
            Toggles whether or not to cast a volumetric shadow for lights contributing to Volumetric Fog. Also shadows casting by this light should be enabled in order to make it cast volumetric fog shadow.
            </summary>
        </member>
        <member name="T:FlaxEngine.LightWithShadow">
            <summary>
            Base class for all light types that can cast dynamic or static shadow. Contains more shared properties for point/spot/directional lights.
            </summary>
        </member>
        <member name="M:FlaxEngine.LightWithShadow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LightWithShadow"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.MinRoughness">
            <summary>
            The minimum roughness value used to clamp material surface roughness during shading pixel.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsDistance">
            <summary>
            The light shadows casting distance from view.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsFadeDistance">
            <summary>
            The light shadows fade off distance
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsSharpness">
            <summary>
            The light shadows edges sharpness
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsStrength">
            <summary>
            Dynamic shadows blending strength. Default is 1 for fully opaque shadows, value 0 disables shadows.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsDepthBias">
            <summary>
            The depth bias used for shadow map comparison.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsNormalOffsetScale">
            <summary>
            A factor specifying the offset to add to the calculated shadow map depth with respect to the surface normal.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsMode">
            <summary>
            Shadows casting mode by this visual element
            </summary>
        </member>
        <member name="T:FlaxEngine.ModelInstanceActor">
            <summary>
            Base class for actor types that use ModelInstanceEntries for mesh rendering.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
        </member>
        <member name="M:FlaxEngine.ModelInstanceActor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ModelInstanceActor"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelInstanceActor.Entries">
            <summary>
            Gets or sets the model entries collection. Each entry contains data how to render meshes using this entry (transformation, material, shadows casting, etc.).
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelInstanceActor.SetMaterial(System.Int32,FlaxEngine.MaterialBase)">
            <summary>
            Sets the material to the entry slot. Can be used to override the material of the meshes using this slot.
            </summary>
            <param name="entryIndex">The material slot entry index.</param>
            <param name="material">The material to set..</param>
        </member>
        <member name="M:FlaxEngine.ModelInstanceActor.CreateAndSetVirtualMaterialInstance(System.Int32)">
            <summary>
            Utility to crate a new virtual Material Instance asset, set its parent to the currently applied material, and assign it to the entry. Can be used to modify the material parameters from code.
            </summary>
            <param name="entryIndex">The material slot entry index.</param>
            <returns>The created virtual material instance.</returns>
        </member>
        <member name="M:FlaxEngine.ModelInstanceActor.IntersectsEntry(System.Int32,FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the model actor mesh entry and a ray.
            If mesh data is available on the CPU performs exact intersection check with the geometry.
            Otherwise performs simple <see cref="T:FlaxEngine.BoundingBox"/> vs <see cref="T:FlaxEngine.Ray"/> test.
            For more efficient collisions detection and ray casting use physics.
            </summary>
            <param name="entryIndex">The material slot entry index to test.</param>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes and returns true, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <returns>True if the actor is intersected by the ray, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.ModelInstanceActor.IntersectsEntry(FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@,System.Int32@)">
            <summary>
            Determines if there is an intersection between the model actor mesh entry and a ray.
            If mesh data is available on the CPU performs exact intersection check with the geometry.
            Otherwise performs simple <see cref="T:FlaxEngine.BoundingBox"/> vs <see cref="T:FlaxEngine.Ray"/> test.
            For more efficient collisions detection and ray casting use physics.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes and returns true, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <param name="entryIndex">When the method completes, contains the intersection entry index (if any valid).</param>
            <returns>True if the actor is intersected by the ray, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.PointLight">
            <summary>
            Point light emits light from point in all directions.
            </summary>
        </member>
        <member name="M:FlaxEngine.PointLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.PointLight"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.SourceRadius">
            <summary>
            Light source bulb radius
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.SourceLength">
            <summary>
            Light source bulb length
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.FallOffExponent">
            <summary>
            Controls the radial falloff of light when UseInverseSquaredFalloff is disabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.UseInverseSquaredFalloff">
            <summary>
            Whether to use physically based inverse squared distance falloff, where Radius is only clamping the light's contribution.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.IESTexture">
            <summary>
            IES texture (light profiles from real world measured data)
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.UseIESBrightness">
            <summary>
            Enable/disable using light brightness from IES profile
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.IESBrightnessScale">
            <summary>
            Global scale for IES brightness contribution
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.Radius">
            <summary>
            Gets or sets light radius
            </summary>
        </member>
        <member name="T:FlaxEngine.PostFxVolume">
            <summary>
            A special type of volume that blends custom set of post process settings into the rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.PostFxVolume.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.PostFxVolume"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.AmbientOcclusion">
            <summary>
            The ambient occlusion effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.Bloom">
            <summary>
            The bloom effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.ToneMapping">
            <summary>
            The tone mapping effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.ColorGrading">
            <summary>
            The color grading effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.EyeAdaptation">
            <summary>
            The eye adaptation effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.CameraArtifacts">
            <summary>
            The camera artifacts effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.LensFlares">
            <summary>
            The lens flares effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.DepthOfField">
            <summary>
            The depth of field effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.MotionBlur">
            <summary>
            The motion blur effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.ScreenSpaceReflections">
            <summary>
            The screen space reflections effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.AntiAliasing">
            <summary>
            The anti-aliasing effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.PostFxMaterials">
            <summary>
            The PostFx materials rendering settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.Priority">
            <summary>
            Gets or sets the order in which multiple volumes are blended together.
            The volume with the highest priority takes precedence over all other overlapping volumes.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.BlendRadius">
            <summary>
            Gets or sets the distance inside the volume at which blending with the volume's settings occurs.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.BlendWeight">
            <summary>
            Gets or sets the amount of influence the volume's properties have. 0 is no effect; 1 is full effect.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.IsBounded">
            <summary>
            Gets or sets the value indicating whether the bounds of the volume are taken into account.
            If false, the volume affects the entire world, regardless of its bounds.
            If true, the volume only has an effect within its bounds.
            </summary>
        </member>
        <member name="M:FlaxEngine.PostFxVolume.AddPostFxMaterial(FlaxEngine.MaterialBase)">
            <summary>
            Adds the post fx material to the settings.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="M:FlaxEngine.PostFxVolume.RemovePostFxMaterial(FlaxEngine.MaterialBase)">
            <summary>
            Removes the post fx material from the settings.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="T:FlaxEngine.Sky">
            <summary>
            Sky actor renders atmosphere around the scene with fog and sky.
            </summary>
        </member>
        <member name="M:FlaxEngine.Sky.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Sky"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Sky.SunLight">
            <summary>
            Directional light that is used to simulate the sun.
            </summary>
        </member>
        <member name="P:FlaxEngine.Sky.SunDiscScale">
            <summary>
            The sun disc scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.Sky.SunPower">
            <summary>
            The sun power.
            </summary>
        </member>
        <member name="T:FlaxEngine.Skybox">
            <summary>
            Skybox actor renders sky using custom cube texture or material.
            </summary>
        </member>
        <member name="M:FlaxEngine.Skybox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Skybox"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Skybox.CubeTexture">
            <summary>
            The cube texture to draw.
            </summary>
        </member>
        <member name="P:FlaxEngine.Skybox.PanoramicTexture">
            <summary>
            The panoramic texture to draw. It should have a resolution ratio close to 2:1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Skybox.CustomMaterial">
            <summary>
            The skybox custom material used to override default (domain set to surface).
            </summary>
        </member>
        <member name="P:FlaxEngine.Skybox.Color">
            <summary>
            The skybox texture tint color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Skybox.Exposure">
            <summary>
            The skybox texture exposure value. Can be used to make skybox brighter or dimmer.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkyLight">
            <summary>
            Sky light captures the distant parts of the scene and applies it as a light. Allows to add ambient light.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkyLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SkyLight"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.AdditiveColor">
            <summary>
            Additional color to add. Source texture colors are summed with it. Can be used to apply custom ambient color.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.SkyDistanceThreshold">
            <summary>
            Distance from the light at which any geometry should be treated as part of the sky.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.Mode">
            <summary>
            The current light source mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.CustomTexture">
            <summary>
            The custom texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.Radius">
            <summary>
            Gets the radius.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkyLight.Bake(System.Single)">
            <summary>
            Bakes that probe.
            </summary>
            <param name="timeout">The timeout in seconds left to bake it (aka startup time).</param>
        </member>
        <member name="T:FlaxEngine.SkyLight.Modes">
            <summary>
            Sky light source mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkyLight.Modes.CaptureScene">
            <summary>
            The captured scene will be used as a light source.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkyLight.Modes.CustomTexture">
            <summary>
            The custom cube texture will be used as a light source.
            </summary>
        </member>
        <member name="T:FlaxEngine.SpotLight">
            <summary>
            Spot light emits light from the point in a given direction.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpotLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SpotLight"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.SourceRadius">
            <summary>
            Light source bulb radius
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.FallOffExponent">
            <summary>
            Controls the radial falloff of light when UseInverseSquaredFalloff is disabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.UseInverseSquaredFalloff">
            <summary>
            Whether to use physically based inverse squared distance falloff, where Radius is only clamping the light's contribution.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.IESTexture">
            <summary>
            IES texture (light profiles from real world measured data)
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.UseIESBrightness">
            <summary>
            Enable/disable using light brightness from IES profile
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.IESBrightnessScale">
            <summary>
            Global scale for IES brightness contribution
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.Radius">
            <summary>
            Gets light radius
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.OuterConeAngle">
            <summary>
            Gets the spot light's outer cone angle (in degrees)
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.InnerConeAngle">
            <summary>
            Sets the spot light's inner cone angle (in degrees)
            </summary>
        </member>
        <member name="T:FlaxEngine.StaticModel">
            <summary>
            Renders model on the screen.
            </summary>
        </member>
        <member name="M:FlaxEngine.StaticModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.StaticModel"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.Model">
            <summary>
            The model asset to draw.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.DrawModes">
            <summary>
            The draw passes to use for rendering this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.ScaleInLightmap">
            <summary>
            Gets or sets the model scale in lightmap (applied to all the meshes).
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.BoundsScale">
            <summary>
            Gets or sets the model bounds scale. It is useful when using Position Offset to animate the vertices of the object outside of its bounds. Increasing the bounds of an object will reduce performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.LODBias">
            <summary>
            Gets or sets the model Level Of Detail bias value. Allows to increase or decrease rendered model quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.ForcedLOD">
            <summary>
            Gets or sets the model forced Level Of Detail index. Allows to bind the given model LOD to show. Value -1 disables this feature.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.HasLightmap">
            <summary>
            Determines whether this model has valid lightmap data.
            </summary>
        </member>
        <member name="M:FlaxEngine.StaticModel.RemoveLightmap">
            <summary>
            Removes the lightmap data from the model.
            </summary>
        </member>
        <member name="M:FlaxEngine.StaticModel.GetMaterial(System.Int32,System.Int32)">
            <summary>
            Gets the material used to render mesh at given index (overriden by model instance buffer or model default).
            </summary>
            <param name="meshIndex">The zero-based mesh index.</param>
            <param name="lodIndex">The LOD index.</param>
            <returns>Material or null if not assigned.</returns>
        </member>
        <member name="T:FlaxEngine.SceneDelegate">
            <summary>
            Scene actions delegate type.
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="T:FlaxEngine.ActorDelegate">
            <summary>
            Actor actors delegate type.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="T:FlaxEngine.ActorParentChangedDelegate">
            <summary>
            Actor parent changed delegate.
            </summary>
            <param name="actor">The actor.</param>
            <param name="prevParent">The previous parent.</param>
        </member>
        <member name="T:FlaxEngine.Level">
            <summary>
            The scene manager that contains the loaded scenes collection and spawns/deleted actors.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneSaving">
            <summary>
            Fired when scene starts saving.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneSaved">
            <summary>
            Fired when scene gets saved.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneSaveError">
            <summary>
            Fired when scene gets saving error.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneLoading">
            <summary>
            Fired when scene starts loading.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneLoaded">
            <summary>
            Fired when scene gets loaded.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneLoadError">
            <summary>
            Fired when scene cannot be loaded.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneUnloading">
            <summary>
            Fired when scene gets unloading.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneUnloaded">
            <summary>
            Fired when scene gets unloaded.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.ActorSpawned">
            <summary>
            Occurs when new actor gets spawned to the game.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.ActorDeleted">
            <summary>
            Occurs when actor is removed from the game.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.ActorParentChanged">
            <summary>
            Occurs when actor parent gets changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.ActorOrderInParentChanged">
            <summary>
            Occurs when actor order in parent gets changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.ActorNameChanged">
            <summary>
            Occurs when actor name gets changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.ActorActiveChanged">
            <summary>
            Occurs when actor IsActive state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.Level.ChangeSceneAsync(System.Guid)">
            <summary>
            Unlaods all active scenes and loads the given scene (in the background).
            </summary>
            <param name="sceneAssetId">The scene asset identifier (scene to load).</param>
            <returns>True if action fails (given asset is not a scene asset, missing data, scene loading error), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.ChangeSceneAsync(FlaxEngine.SceneReference)">
            <summary>
            Unlaods all active scenes and loads the given scene (in the background).
            </summary>
            <param name="sceneAsset">The asset with the scene to load.</param>
            <returns>True if action fails (given asset is not a scene asset, missing data, scene loading error), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.LoadScene(FlaxEngine.SceneReference)">
            <summary>
            Loads scene from the asset.
            </summary>
            <param name="sceneAsset">The asset with the scene to load.</param>
            <returns>True if action fails (given asset is not a scene asset, missing data, scene loading error), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.LoadSceneAsync(FlaxEngine.SceneReference)">
            <summary>
            Loads scene from the asset. Done in the background.
            </summary>
            <param name="sceneAsset">The asset with the scene to load.</param>
            <returns>True if failed (given asset is not a scene asset, missing data), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindScript``1">
            <summary>
            Tries to find script of the given type in all loaded scenes.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Found script or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindActor``1">
            <summary>
            Tries to find actor of the given type in all loaded scenes.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindActor``1(System.Guid@)">
            <summary>
            Tries to find actor with the given ID in all loaded scenes. It's very fast O(1) lookup.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="id">The id.</param>
            <returns>Found actor or null.</returns>
        </member>
        <member name="P:FlaxEngine.Level.Scenes">
            <summary>
            The loaded scenes collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.Level.IsAnySceneLoaded">
            <summary>
            Checks if any scene has been loaded. Loaded scene means deserialized and added to the scenes collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.Level.IsAnyActorInGame">
            <summary>
            Checks if any scene has any actor
            </summary>
        </member>
        <member name="P:FlaxEngine.Level.IsAnyActionPending">
            <summary>
            Checks if any scene action is pending
            </summary>
        </member>
        <member name="P:FlaxEngine.Level.LastSceneLoadTime">
            <summary>
            Gets the last scene load time (in UTC).
            </summary>
        </member>
        <member name="P:FlaxEngine.Level.ScenesCount">
            <summary>
            Gets the scenes count.
            </summary>
        </member>
        <member name="M:FlaxEngine.Level.GetScene(System.Int32)">
            <summary>
            Gets the scene.
            </summary>
            <param name="index">The index.</param>
            <returns>The scene object (loaded).</returns>
        </member>
        <member name="M:FlaxEngine.Level.SpawnActor(FlaxEngine.Actor)">
            <summary>
            Spawn actor on the scene
            </summary>
            <param name="actor">Actor to spawn</param>
            <returns>True if action cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.SpawnActor(FlaxEngine.Actor,FlaxEngine.Actor)">
            <summary>
            Spawns actor on the scene.
            </summary>
            <param name="actor">The actor to spawn.</param>
            <param name="parent">The parent actor (will link spawned actor with this parent).</param>
            <returns>True if action cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.SaveScene(FlaxEngine.Scene,System.Boolean)">
            <summary>
            Saves scene to the asset.
            </summary>
            <param name="scene">Scene to serialize.</param>
            <param name="prettyJson">True if use pretty Json format writer, otherwise will use the compact Json format writer that packs data to use less memory and perform the action faster.</param>
            <returns>True if action cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.SaveSceneToBytes(FlaxEngine.Scene,System.Boolean)">
            <summary>
            Saves scene to the bytes.
            </summary>
            <param name="scene">Scene to serialize.</param>
            <param name="prettyJson">True if use pretty Json format writer, otherwise will use the compact Json format writer that packs data to use less memory and perform the action faster.</param>
            <returns>The result data or empty if failed.</returns>
        </member>
        <member name="M:FlaxEngine.Level.SaveSceneAsync(FlaxEngine.Scene)">
            <summary>
            Saves scene to the asset. Done in the background.
            </summary>
            <param name="scene">Scene to serialize.</param>
        </member>
        <member name="M:FlaxEngine.Level.SaveAllScenes">
            <summary>
            Saves all scenes to the assets.
            </summary>
            <returns>True if action cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.SaveAllScenesAsync">
            <summary>
            Saves all scenes to the assets. Done in the background.
            </summary>
        </member>
        <member name="M:FlaxEngine.Level.LoadScene(System.Guid,System.Boolean)">
            <summary>
            Loads scene from the asset.
            </summary>
            <param name="id">Scene ID</param>
            <param name="autoInitialize">Enable/disable auto scene initialization, otherwise user should do it (in that situation scene is registered but not in a gameplay, call OnBeginPlay to start logic for it; it will deserialize scripts and references to the other objects).</param>
            <returns>True if loading cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.LoadSceneFromBytes(System.Byte[],System.Boolean)">
            <summary>
            Loads scene from the bytes.
            </summary>
            <param name="data">The scene data to load.</param>
            <param name="autoInitialize">Enable/disable auto scene initialization, otherwise user should do it (in that situation scene is registered but not in a gameplay, call OnBeginPlay to start logic for it; it will deserialize scripts and references to the other objects).</param>
            <returns>Loaded scene object, otherwise null if cannot load data (then see log for more information).</returns>
        </member>
        <member name="M:FlaxEngine.Level.LoadSceneAsync(System.Guid)">
            <summary>
            Loads scene from the asset. Done in the background.
            </summary>
            <param name="id">Scene ID</param>
            <returns>True if loading cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.UnloadScene(FlaxEngine.Scene)">
            <summary>
            Unloads given scene.
            </summary>
            <returns>True if action cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.UnloadSceneAsync(FlaxEngine.Scene)">
            <summary>
            Unloads given scene. Done in the background.
            </summary>
        </member>
        <member name="M:FlaxEngine.Level.UnloadAllScenes">
            <summary>
            Unloads all scenes.
            </summary>
            <returns>True if action cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.UnloadAllScenesAsync">
            <summary>
            Unloads all scenes. Done in the background.
            </summary>
        </member>
        <member name="M:FlaxEngine.Level.FindActor(System.Guid)">
            <summary>
            Tries to find actor with the given ID. It's very fast O(1) lookup.
            </summary>
            <param name="id">The id.</param>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindActor(System.String)">
            <summary>
            Tries to find the actor with the given name.
            </summary>
            <param name="name">The name of the actor.</param>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindActor(System.Type)">
            <summary>
            Tries to find the actor of the given type in all the loaded scenes.
            </summary>
            <param name="type">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindScript(System.Type)">
            <summary>
            Tries to find the script of the given type in all the loaded scenes.
            </summary>
            <param name="type">Type of the script to search for. Includes any scripts derived from the type.</param>
            <returns>Found script or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindScene(System.Guid)">
            <summary>
            Tries to find scene with given ID.
            </summary>
            <param name="id">Scene id.</param>
            <returns>Found scene or null.</returns>
        </member>
        <member name="T:FlaxEngine.Prefab">
            <summary>
            Json asset that stores the collection of scene objects including actors and scripts. In general it can serve as any grouping of scene objects (for example a level) or be used as a form of a template instantiated and reused throughout the scene.
            </summary>
            <seealso cref="T:FlaxEngine.JsonAssetBase" />
        </member>
        <member name="M:FlaxEngine.Prefab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Prefab"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Prefab.GetDefaultInstance">
            <summary>
            Requests the default prefab object instance. Deserializes the prefab objects from the asset. Skips if already done.
            </summary>
            <returns>The root of the prefab object loaded from the prefab. Contains the default values. It's not added to gameplay but deserialized with postLoad and init event fired.</returns>
        </member>
        <member name="M:FlaxEngine.Prefab.GetDefaultInstance(System.Guid@)">
            <summary>
            Requests the default prefab object instance. Deserializes the prefab objects from the asset. Skips if already done.
            </summary>
            <param name="objectId">The ID of the object to get from prefab default object. It can be one of the child-actors or any script that exists in the prefab. Methods returns root if id is empty.</param>
            <returns>The object of the prefab loaded from the prefab. Contains the default values. It's not added to gameplay but deserialized with postLoad and init event fired.</returns>
        </member>
        <member name="T:FlaxEngine.PrefabManager">
            <summary>
            The prefab manager handles the prefabs creation, synchronization and serialization.
            </summary>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Vector3)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="position">The spawn position in the world space.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="position">The spawn position in the world space.</param>
            <param name="rotation">The spawn rotation (in world space).</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="position">The spawn position in the world space.</param>
            <param name="rotation">The spawn rotation (in world space).</param>
            <param name="scale">The spawn scale.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Transform)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="transform">The spawn transformation in the world space.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Actor)">
            <summary>
            Spawns the instance of the prefab objects. If parent actor is specified then created actors are fully initialized (OnLoad event and BeginPlay is called if parent actor is already during gameplay).
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="parent">The parent actor to add spawned object instance. Can be null to just deserialize contents of the prefab.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.CreatePrefab(FlaxEngine.Actor,System.String,System.Boolean)">
            <summary>
            Creates the prefab asset from the given root actor. Saves it to the output file path.
            </summary>
            <param name="targetActor">The target actor (prefab root). It cannot be a scene but it can contain a scripts and/or full hierarchy of objects to save.</param>
            <param name="outputPath">The output asset path.</param>
            <param name="autoLink">True if auto-connect the target actor and related objects to the created prefab.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.ApplyAll(FlaxEngine.Actor)">
            <summary>
            Applies the difference from the prefab object instance, saves the changes and synchronizes them with the active instances of the prefab asset.
            </summary>
            <remarks>
            Applies all the changes from not only the given actor instance but all actors created within that prefab instance.
            </remarks>
            <param name="instance">The modified instance.</param>
            <returns>True if data is failed to apply the changes, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.Scene">
            <summary>
            The scene root object that contains a hierarchy of actors.
            </summary>
        </member>
        <member name="F:FlaxEngine.Scene.AssetTypename">
            <summary>
            The scene asset typename. Type of the serialized scene asset data. Hidden class for the scene assets. Actors deserialization rules are strictly controlled under the hood by the C++ core parts. Mostly because scene asset has the same ID as scene root actor so loading both managed objects for scene asset and scene will crash (due to object ids conflict).
            </summary>
        </member>
        <member name="F:FlaxEngine.Scene.EditorPickerTypename">
            <summary>
            The scene asset typename used by the Editor asset picker control. Use it for asset reference picker filter.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scene.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Scene"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Scene.LightmapSettings">
            <summary>
            Gets or sets the lightmap settings (per scene).
            </summary>
        </member>
        <member name="P:FlaxEngine.Scene.Path">
            <summary>
            Gets path to the scene file
            </summary>
        </member>
        <member name="P:FlaxEngine.Scene.Filename">
            <summary>
            Gets filename of the scene file
            </summary>
        </member>
        <member name="P:FlaxEngine.Scene.DataFolderPath">
            <summary>
            Gets path to the scene data folder
            </summary>
        </member>
        <member name="M:FlaxEngine.Scene.ClearLightmaps">
            <summary>
            Removes all baked lightmap textures from the scene.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scene.BuildCSG(System.Single)">
            <summary>
            Builds the CSG geometry for the given scene.
            </summary>
            <remarks>Requests are enqueued till the next game scripts update.</remarks>
            <param name="timeoutMs">The timeout to wait before building CSG (in milliseconds).</param>
        </member>
        <member name="T:FlaxEngine.SceneAsset">
            <summary>
            The scene asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneAsset"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.SceneObject">
            <summary>
            Base class for objects that are parts of the scene (actors and scripts).
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneObject"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneObject.HasParent">
            <summary>
            Returns true if object has a parent assigned.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneObject.Parent">
            <summary>
            Gets or sets the parent actor (or null if object has no parent).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneObject.OrderInParent">
            <summary>
            Gets or sets zero-based index in parent actor children list (scripts or child actors).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneObject.HasPrefabLink">
            <summary>
            Gets a value indicating whether this object has a valid linkage to the prefab asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneObject.PrefabID">
            <summary>
            Gets the prefab asset ID. Empty if no prefab link exists.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneObject.PrefabObjectID">
            <summary>
            Gets the ID of the object within a prefab that is used for synchronization with this object. Empty if no prefab link exists.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneObject.SetParent(FlaxEngine.Actor,System.Boolean)">
            <summary>
            Sets the parent actor.
            </summary>
            <param name="value">The new parent.</param>
            <param name="canBreakPrefabLink">True if can break prefab link on changing the parent.</param>
        </member>
        <member name="M:FlaxEngine.SceneObject.LinkPrefab(System.Guid,System.Guid)">
            <summary>
            Links scene object instance to the prefab asset and prefab object. Warning! This applies to the only this object (not scripts or child actors).
            </summary>
            <param name="prefabId">The prefab asset identifier.</param>
            <param name="prefabObjectId">The prefab object identifier.</param>
        </member>
        <member name="M:FlaxEngine.SceneObject.BreakPrefabLink">
            <summary>
            Breaks the prefab linkage for this object, all its scripts, and all child actors.
            </summary>
        </member>
        <member name="T:FlaxEngine.StaticFlags">
            <summary>
            Static flags for the actor object.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.None">
            <summary>
            Non-static object.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.ReflectionProbe">
            <summary>
            Object is considered to be static for reflection probes offline caching.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.Lightmap">
            <summary>
            Object is considered to be static for static lightmaps.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.Transform">
            <summary>
            Object is considered to have static transformation in space (no dynamic physics and any movement at runtime).
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.Navigation">
            <summary>
            Object is considered to affect navigation (static occluder or walkable surface).
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.FullyStatic">
            <summary>
            Objects is fully static on the scene.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.MAX">
            <summary>
            Maximum value of the enum (force to int).
            </summary>
        </member>
        <member name="T:FlaxEngine.HideFlags">
            <summary>
            Object hide state description flags. Control object appearance.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.None">
            <summary>
            The default state.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.HideInHierarchy">
            <summary>
            The object will not be visible in the hierarchy.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.DontSave">
            <summary>
            The object will not be saved.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.DontSelect">
            <summary>
            The object will not selectable in the editor viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.FullyHidden">
            <summary>
            The fully hidden object flags mask.
            </summary>
        </member>
        <member name="T:FlaxEngine.NavMeshHit">
            <summary>
            The result information for navigation mesh queries.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshHit.Position">
            <summary>
            The hit point position.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshHit.Distance">
            <summary>
            The distance to hit point (from the query origin).
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshHit.Normal">
            <summary>
            The hit point normal vector.
            </summary>
        </member>
        <member name="T:FlaxEngine.Navigation">
            <summary>
            The navigation service used for path finding and agents navigation system.
            </summary>
        </member>
        <member name="P:FlaxEngine.Navigation.IsBuildingNavMesh">
            <summary>
            Returns true if navigation system is during navmesh building (any request is valid or async task active).
            </summary>
        </member>
        <member name="P:FlaxEngine.Navigation.NavMeshBuildingProgress">
            <summary>
            Gets the navmesh building progress (normalized to range 0-1).
            </summary>
        </member>
        <member name="M:FlaxEngine.Navigation.FindDistanceToWall(FlaxEngine.Vector3,FlaxEngine.NavMeshHit@,System.Single)">
            <summary>
            Finds the distance from the specified start position to the nearest polygon wall.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="hitInfo">The result hit information. Valid only when query succeed.</param>
            <param name="maxDistance">The maximum distance to search for wall (search radius).</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.FindPath(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3[]@)">
            <summary>
            Finds the path between the two positions presented as a list of waypoints stored in the corners array.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="endPosition">The end position.</param>
            <param name="resultPath">The result path.</param>
            <returns>True if found valid path between given two points (it may be partial), otherwise false if failed.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.ProjectPoint(FlaxEngine.Vector3,FlaxEngine.Vector3@)">
            <summary>
            Projects the point to nav mesh surface (finds the nearest polygon).
            </summary>
            <param name="point">The source point.</param>
            <param name="result">The result position on the navmesh (valid only if method returns true).</param>
            <returns>True if found valid location on the navmesh, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.NavMeshHit@)">
            <summary>
            Casts a 'walkability' ray along the surface of the navigation mesh from the start position toward the end position.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="endPosition">The end position.</param>
            <param name="hitInfo">The result hit information. Valid only when query succeed.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.BuildNavMesh(FlaxEngine.Scene,System.Single)">
            <summary>
            Builds the Nav Mesh for the given scene (discards all its tiles).
            </summary>
            <remarks>
            Requests are enqueued till the next game scripts update. Actual navmesh building in done via Thread Pool tasks in a background to prevent game thread stalls.
            </remarks>
            <param name="scene">The scene.</param>
            <param name="timeoutMs">The timeout to wait before building Nav Mesh (in milliseconds).</param>
        </member>
        <member name="M:FlaxEngine.Navigation.BuildNavMesh(FlaxEngine.Scene,FlaxEngine.BoundingBox,System.Single)">
            <summary>
            Builds the Nav Mesh for the given scene (builds only the tiles overlapping the given bounding box).
            </summary>
            <remarks>
            Requests are enqueued till the next game scripts update. Actual navmesh building in done via Thread Pool tasks in a background to prevent game thread stalls.
            </remarks>
            <param name="scene">The scene.</param>
            <param name="dirtyBounds">The bounds in world-space to build overlapping tiles.</param>
            <param name="timeoutMs">The timeout to wait before building Nav Mesh (in milliseconds).</param>
        </member>
        <member name="T:FlaxEngine.NavLink">
            <summary>
            The off-mesh link objects used to define a custom point-to-point edge within the navigation graph.
            An off-mesh connection is a user defined traversable connection made up to two vertices, at least one of which resides within a navigation mesh polygon allowing movement outside the navigation mesh.
            </summary>
        </member>
        <member name="M:FlaxEngine.NavLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.NavLink"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavLink.Start">
            <summary>
            The start location which transform is representing link start position. It is defined in local-space of the actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavLink.End">
            <summary>
            The end location which transform is representing link end position. It is defined in local-space of the actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavLink.Radius">
            <summary>
            The maximum radius of the agents that can go through the link.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavLink.BiDirectional">
            <summary>
            Flag used to define links that can be traversed in both directions. When set to false the link can only be traversed from start to end.
            </summary>
        </member>
        <member name="T:FlaxEngine.NavMeshBoundsVolume">
            <summary>
            A special type of volume that defines the areas of the scene in which navigation meshes are generated.
            </summary>
        </member>
        <member name="M:FlaxEngine.NavMeshBoundsVolume.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.NavMeshBoundsVolume"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEffect">
            <summary>
            The particle system instance that plays the particles simulation in the game.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ParticleEffect"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.ParticleSystem">
            <summary>
            The particle system to play.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.CustomViewRenderTask">
            <summary>
            The custom render task used as a view information source (effect will use its render buffers and rendering resolution information for particles simulation).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.UpdateMode">
            <summary>
            The particles simulation update mode. Defines how to update particles emitter.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.FixedTimestep">
            <summary>
            The fixed timestep for simulation updates. Used only if UpdateMode is set to FixedTimestep.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.SimulationSpeed">
            <summary>
            The particles simulation speed factor. Scales the particle system update delta time. Can be used to speed up or slow down the particles.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.UseTimeScale">
            <summary>
            Determines whether the particle effect should take into account the global game time scale for simulation updates.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.IsLooping">
            <summary>
            Determines whether the particle effect should loop when it finishes playing.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.UpdateWhenOffscreen">
            <summary>
            If true, the particle simulation will be updated even when an actor cannot be seen by any camera. Otherwise, the simulation will stop running when the actor is off-screen.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.DrawModes">
            <summary>
            The draw passes to use for rendering this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Parameters">
            <summary>
            Gets the effect parameters collection. Those parameters are instanced from the <see cref="P:FlaxEngine.ParticleEffect.ParticleSystem"/> that contains a linear list of emitters and every emitter has a list of own parameters.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.ParametersVersion">
            <summary>
            Gets the effect parameters collection version number. It can be used to track parameters changes that occur when particle system or one of the emitters gets reloaded/edited.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Time">
            <summary>
            Gets or sets the current time position of the particle system timeline animation playback (in seconds).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.LastUpdateTime">
            <summary>
            Gets or sets the last game time when particle system was updated. Value -1 indicates no previous updates.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.ParticlesCount">
            <summary>
            Gets the particles count (total). GPU particles count is read with one frame delay (due to GPU execution).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.ParametersOverrides">
            <summary>
            Exposed parameters overrides for Editor Undo.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.GetParameter(System.String,System.String)">
            <summary>
            Gets the particle parameter.
            </summary>
            <param name="emitterTrackName">The emitter track name (in particle system asset).</param>
            <param name="paramName">The emitter parameter name (in particle emitter asset).</param>
            <returns>The effect parameter or null if failed to find.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.GetParameter(System.String,System.Guid)">
            <summary>
            Gets the particle parameter.
            </summary>
            <param name="emitterTrackName">The emitter track name (in particle system asset).</param>
            <param name="paramId">The emitter parameter ID (in particle emitter asset).</param>
            <returns>The effect parameter or null if failed to find.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.GetParameterValue(System.String,System.String)">
            <summary>
            Gets the particle parameter value.
            </summary>
            <param name="emitterTrackName">The emitter track name (in particle system asset).</param>
            <param name="paramName">The emitter parameter name (in particle emitter asset).</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.SetParameterValue(System.String,System.String,System.Object)">
            <summary>
            Set the particle parameter value.
            </summary>
            <param name="emitterTrackName">The emitter track name (in particle system asset).</param>
            <param name="paramName">The emitter parameter name (in particle emitter asset).</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.ResetParameters">
            <summary>
            Resets the particle system parameters to the default values from asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.ResetSimulation">
            <summary>
            Resets the particles simulation state (clears the instance state data but preserves the instance parameters values).
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.UpdateSimulation">
            <summary>
            Performs the full particles simulation update (postponed for the next particle manager update).
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEffect.SimulationUpdateMode">
            <summary>
            The particles simulation update modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.SimulationUpdateMode.Realtime">
            <summary>
            Use realtime simulation updates. Updates particles during every game logic update.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.SimulationUpdateMode.FixedTimestep">
            <summary>
            Use fixed timestep delta time to update particles simulation with a custom frequency.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEffect.ParameterOverride">
            <summary>
            The particle parameter override data.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterOverride.Track">
            <summary>
            The name of the track that has overriden parameter.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterOverride.Id">
            <summary>
            The overriden parameter id.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterOverride.Value">
            <summary>
            The overriden value.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEffectParameter">
            <summary>
            Particle system parameter.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffectParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ParticleEffectParameter"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.EmitterIndex">
            <summary>
            Gets the index of the emitter (not the emitter track but the emitter).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.Emitter">
            <summary>
            Gets the emitter that this parameter belongs to.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.ParamIndex">
            <summary>
            Gets the parameter index (in the emitter parameters list).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.ParamType">
            <summary>
            Gets the parameter type.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.ParamIdentifier">
            <summary>
            Gets the parameter unique ID.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.TrackName">
            <summary>
            Gets the emitter track name.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.IsPublic">
            <summary>
            Gets the parameter flag that indicates whenever it's exposed to public.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.DefaultValue">
            <summary>
            Gets the default value of the parameter (set in particle system asset).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.DefaultEmitterValue">
            <summary>
            Gets the default value of the parameter (set in particle emitter asset).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.EmitterParameter">
            <summary>
            Gets the particle emitter parameter from the asset (the parameter instanced by this object).
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEmitter">
            <summary>
            Binary asset that contains a particle emitter definition graph for running particles simulation on CPU and GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ParticleEmitter"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.LoadSurface(System.Boolean)">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <param name="createDefaultIfMissing">True if create default surface if missing.</param>
            <returns>The output surface data, or empty if failed to load.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.SaveSurface(System.Byte[])">
            <summary>
            Updates surface (saves new one, discard cached data, reloads asset).
            </summary>
            <param name="data">The surface graph data.</param>
            <returns>True if cannot save it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="position">The spawn position.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="position">The spawn position.</param>
            <param name="rotation">The spawn rotation.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Transform,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="transform">The spawn transform.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Actor,FlaxEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="position">The spawn position.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Actor,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="position">The spawn position.</param>
            <param name="rotation">The spawn rotation.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Actor,FlaxEngine.Transform,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="transform">The spawn transform.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="T:FlaxEngine.ParticleEmitterFunction">
            <summary>
            Particle function graph asset that contains reusable part of the particle emitter graph.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEmitterFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ParticleEmitterFunction"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEmitterFunction.LoadSurface">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <returns>The output surface data, or empty if failed to load.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitterFunction.GetSignature(System.Int32[]@,System.String[]@)">
            <summary>
            Gets the function signature for Visject Surface editor.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEmitterFunction.SaveSurface(System.Byte[])">
            <summary>
            Updates the particle graph surface (save new one, discards cached data, reloads asset).
            </summary>
            <param name="data">The surface graph data.</param>
            <returns>True if cannot save it, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.ParticleSystem">
            <summary>
            Particle system contains a composition of particle emitters and playback information.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ParticleSystem"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleSystem.FramesPerSecond">
            <summary>
            The frames amount per second of the timeline animation.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleSystem.DurationFrames">
            <summary>
            The animation duration (in frames).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleSystem.Duration">
            <summary>
            The animation duration (in seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Init(FlaxEngine.ParticleEmitter,System.Single,System.Single)">
            <summary>
            Initializes the particle system that plays a single particles emitter. This can be used only for virtual assets.
            </summary>
            <param name="emitter">The emitter to playback.</param>
            <param name="duration">The timeline animation duration in seconds.</param>
            <param name="fps">The amount of frames per second of the timeline animation.</param>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.LoadTimeline">
            <summary>
            Loads the serialized timeline data.
            </summary>
            <returns>The output surface data, or empty if failed to load.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.SaveTimeline(System.Byte[])">
            <summary>
            Saves the serialized timeline data to the asset.
            </summary>
            <param name="data">The timeline data container.</param>
            <returns><c>true</c> failed to save data; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Vector3,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="position">The spawn position.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="position">The spawn position.</param>
            <param name="rotation">The spawn rotation.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Transform,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="transform">The spawn transform.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Actor,FlaxEngine.Vector3,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="position">The spawn position.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Actor,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="position">The spawn position.</param>
            <param name="rotation">The spawn rotation.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Actor,FlaxEngine.Transform,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="transform">The spawn transform.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="T:FlaxEngine.ParticlesSimulationMode">
            <summary>
            The particles simulation execution mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationMode.Default">
            <summary>
            The default model. Select the best simulation mode based on a target platform.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationMode.CPU">
            <summary>
            Runs particles simulation on a CPU (always supported).
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationMode.GPU">
            <summary>
            Runs particles simulation on a GPU (if supported).
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticlesSimulationSpace">
            <summary>
            The particles simulation space modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationSpace.World">
            <summary>
            Simulates particles in the world space.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationSpace.Local">
            <summary>
            Simulates particles in the local space of the actor.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleSpriteFacingMode">
            <summary>
            The sprite rendering facing modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSpriteFacingMode.FaceCameraPosition">
            <summary>
            Particles will face camera position.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSpriteFacingMode.FaceCameraPlane">
            <summary>
            Particles will face camera plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSpriteFacingMode.AlongVelocity">
            <summary>
            Particles will orient along velocity vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSpriteFacingMode.CustomFacingVector">
            <summary>
            Particles will use the custom vector for facing.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSpriteFacingMode.FixedAxis">
            <summary>
            Particles will use the custom fixed axis for facing up.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleModelFacingMode">
            <summary>
            The model particle rendering facing modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleModelFacingMode.FaceCameraPosition">
            <summary>
            Particles will face camera position.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleModelFacingMode.FaceCameraPlane">
            <summary>
            Particles will face camera plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleModelFacingMode.AlongVelocity">
            <summary>
            Particles will orient along velocity vector.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleSortMode">
            <summary>
            The particles sorting modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSortMode.None">
            <summary>
            Do not perform additional sorting prior to rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSortMode.ViewDepth">
            <summary>
            Sorts particles by depth to the view's near plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSortMode.ViewDistance">
            <summary>
            Sorts particles by distance to the view's origin.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSortMode.CustomAscending">
            <summary>
            The custom sorting according to a per particle attribute. Lower values are rendered before higher values.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSortMode.CustomDescending">
            <summary>
            The custom sorting according to a per particle attribute. Higher values are rendered before lower values.
            </summary>
        </member>
        <member name="T:FlaxEngine.PhysicsActor">
            <summary>
            A base class for all physical actors.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
        </member>
        <member name="M:FlaxEngine.PhysicsActor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.PhysicsActor"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.PhysicsColliderActor">
            <summary>
            A base class for all physical collider actors.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
        </member>
        <member name="M:FlaxEngine.PhysicsColliderActor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.PhysicsColliderActor"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.PhysicsColliderActor.AttachedRigidBody">
            <summary>
            Gets the attached rigid body.
            </summary>
        </member>
        <member name="T:FlaxEngine.RigidBody">
            <summary>
            Physics simulation driven object.
            </summary>
            <seealso cref="T:FlaxEngine.PhysicsActor" />
        </member>
        <member name="M:FlaxEngine.RigidBody.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RigidBody"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.IsKinematic">
            <summary>
            Enables kinematic mode for the rigidbody.
            </summary>
            <remarks>
            Kinematic rigidbodies are special dynamic actors that are not influenced by forces(such as gravity), and have no momentum.
            They are considered to have infinite mass and can push regular dynamic actors out of the way.
            Kinematics will not collide with static or other kinematic objects.
            <para>
            Kinematic rigidbodies are great for moving platforms or characters, where direct motion control is desired.
            </para>
            <para>
            Kinematic rigidbodies are incompatible with CCD.
            </para>
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.LinearDamping">
            <summary>
            Gets or sets the 'drag' force added to reduce linear movement.
            </summary>
            <remarks>
            Linear damping can be used to slow down an object. The higher the drag the more the object slows down.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.AngularDamping">
            <summary>
            Gets or sets the 'drag' force added to reduce angular movement.
            </summary>
            <remarks>
            Angular damping can be used to slow down the rotation of an object. The higher the drag the more the rotation slows down.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.EnableSimulation">
            <summary>
            If true simulation and collisions detection will be enabled for the rigidbody.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.UseCCD">
            <summary>
            If true Continuous Collision Detection (CCD) will be used for this component.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.EnableGravity">
            <summary>
            If object should have the force of gravity applied.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.StartAwake">
            <summary>
            If object should start awake, or if it should initially be sleeping.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.UpdateMassWhenScaleChanges">
            <summary>
            If true, it will update mass when actor scale changes.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.MaxAngularVelocity">
            <summary>
            Gets or sets the maximum angular velocity that a simulated object can achieve.
            </summary>
            <remarks>
            The angular velocity of rigidbodies is clamped to MaxAngularVelocity to avoid numerical instability with fast rotating bodies.
            Because this may prevent intentional fast rotations on objects such as wheels, you can override this value per rigidbody.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.OverrideMass">
            <summary>
            Override the auto computed mass.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.Mass">
            <summary>
            Gets or sets the mass value measured in kilograms (use override value only if EnableOverrideMass is enabled).
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.MassScale">
            <summary>
            Gets or sets the per-instance scaling of the mass.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.CenterOfMassOffset">
            <summary>
            Gets or sets the user specified offset for the center of mass of this object, from the calculated location.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.Constraints">
            <summary>
            Gets or sets the object movement constraint flags that define degrees of freedom are allowed for the simulation of object.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.LinearVelocity">
            <summary>
            Gets or sets the linear velocity of the rigidbody.
            </summary>
            <remarks>
            It's used mostly to get the current velocity. Manual modifications may result in unrealistic behaviour.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of the rigidbody measured in radians per second.
            </summary>
            <remarks>
            It's used mostly to get the current angular velocity. Manual modifications may result in unrealistic behaviour.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.MaxDepenetrationVelocity">
            <summary>
            Gets or sets the maximum depenetration velocity when rigidbody moving out of penetrating state.
            </summary>
            <remarks>
            This value controls how much velocity the solver can introduce to correct for penetrations in contacts.
            Using this property can smooth objects moving out of colliding state and prevent unstable motion.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.SleepThreshold">
            <summary>
            Gets or sets the mass-normalized kinetic energy threshold below which an actor may go to sleep.
            </summary>
            <remarks>
            Actors whose kinetic energy divided by their mass is below this threshold will be candidates for sleeping.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.CenterOfMass">
            <summary>
            Gets the center of the mass in the local space.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.IsSleeping">
            <summary>
            Determines whether this rigidbody is sleeping.
            </summary>
        </member>
        <member name="M:FlaxEngine.RigidBody.Sleep">
            <summary>
            Forces a rigidbody to sleep (for at least one frame).
            </summary>
        </member>
        <member name="M:FlaxEngine.RigidBody.WakeUp">
            <summary>
            Forces a rigidbody to wake up.
            </summary>
        </member>
        <member name="M:FlaxEngine.RigidBody.UpdateMass">
            <summary>
            Updates the actor's mass (auto calculated mass from density and inertia tensor or overriden value).
            </summary>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddForce(FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies a force (or impulse) defined in the world space to the rigidbody at its center of mass.
            </summary>
            <remarks>
            This will not induce a torque
            <para>
            ForceMode determines if the force is to be conventional or impulsive.
            </para>
            <para>
            Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes ForceMode.Acceleration
            and ForceMode.VelocityChange respectively. The modes ForceMode.Force and ForceMode.Impulse also modify these same
            accumulators and are just short hand for multiplying the vector parameter by inverse mass and then using ForceMode.Acceleration and
            ForceMode.VelocityChange respectively.
            </para>
            </remarks>
            <param name="force">The force/impulse to apply defined in the world space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddRelativeForce(FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies a force (or impulse) defined in the local space of the rigidbody (relative to its coordinate system) at its center of mass.
            </summary>
            <remarks>
            This will not induce a torque
            <para>
            ForceMode determines if the force is to be conventional or impulsive.
            </para>
            <para>
            Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes ForceMode.Acceleration
            and ForceMode.VelocityChange respectively. The modes ForceMode.Force and ForceMode.Impulse also modify these same
            accumulators and are just short hand for multiplying the vector parameter by inverse mass and then using ForceMode.Acceleration and
            ForceMode.VelocityChange respectively.
            </para>
            </remarks>
            <param name="force">The force/impulse to apply defined in the local space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddTorque(FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies an impulsive torque defined in the world space to the rigidbody.
            </summary>
            <remarks>
            ForceMode determines if the force is to be conventional or impulsive.
            <para>
            Each actor has an angular acceleration and an angular velocity change accumulator which are directly modified using the modes
            ForceMode.Acceleration and ForceMode.VelocityChange respectively.The modes ForceMode.Force and ForceMode.Impulse
            also modify these same accumulators and are just short hand for multiplying the vector parameter by inverse inertia and then
            using ForceMode.Acceleration and ForceMode.VelocityChange respectively.
            </para>
            </remarks>
            <param name="torque">The torque to apply defined in the world space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddRelativeTorque(FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies an impulsive torque defined in the local space of the rigidbody (relative to its coordinate system).
            </summary>
            <remarks>
            ForceMode determines if the force is to be conventional or impulsive.
            <para>
            Each actor has an angular acceleration and an angular velocity change accumulator which are directly modified using the modes
            ForceMode.Acceleration and ForceMode.VelocityChange respectively.The modes ForceMode.Force and ForceMode.Impulse
            also modify these same accumulators and are just short hand for multiplying the vector parameter by inverse inertia and then
            using ForceMode.Acceleration and ForceMode.VelocityChange respectively.
            </para>
            </remarks>
            <param name="torque">The torque to apply defined in the local space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.SetSolverIterationCounts(System.Int32,System.Int32)">
            <summary>
            Sets the solver iteration counts for the rigidbody.
            </summary>
            <remarks>
            The solver iteration count determines how accurately joints and contacts are resolved.
            If you are having trouble with jointed bodies oscillating and behaving erratically,
            then setting a higher position iteration count may improve their stability.
            <para>
            If intersecting bodies are being depenetrated too violently, increase the number of velocity
            iterations. More velocity iterations will drive the relative exit velocity of the intersecting
            objects closer to the correct value given the restitution.
            </para>
            <para>
            Default: 4 position iterations, 1 velocity iteration.
            </para>
            </remarks>
            <param name="minPositionIters">The minimum number of position iterations the solver should perform for this body.</param>
            <param name="minVelocityIters">The minimum number of velocity iterations the solver should perform for this body.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.ClosestPoint(FlaxEngine.Vector3,FlaxEngine.Vector3@)">
            <summary>
            Gets a point on one of the colliders attached to the attached that is closest to a given location. Can be used to find a hit location or position to apply explosion force or any other special effects.
            </summary>
            <param name="position">The position to find the closest point to it.</param>
            <param name="result">The result point on the rigidbody shape that is closest to the specified location.</param>
        </member>
        <member name="E:FlaxEngine.RigidBody.CollisionEnter">
            <summary>
            Occurs when a collision start gets registered for one of the colliders attached to this rigidbody (it collides with something).
            </summary>
        </member>
        <member name="E:FlaxEngine.RigidBody.CollisionExit">
            <summary>
            Occurs when a collision end gets registered for one of the colliders attached to this rigidbody (it ends colliding with something).
            </summary>
        </member>
        <member name="E:FlaxEngine.RigidBody.TriggerEnter">
            <summary>
            Occurs when a trigger touching start gets registered for one of the colliders attached to this rigidbody (the other collider enters it and triggers the event).
            </summary>
        </member>
        <member name="E:FlaxEngine.RigidBody.TriggerExit">
            <summary>
            Occurs when a trigger touching end gets registered for one of the colliders attached to this rigidbody (the other collider enters it and triggers the event).
            </summary>
        </member>
        <member name="T:FlaxEngine.CollisionDelegate">
            <summary>
            Function delegate used for the collision events.
            </summary>
            <param name="collision">The collision information.</param>
        </member>
        <member name="T:FlaxEngine.TriggerDelegate">
            <summary>
            Function delegate used for the trigger events.
            </summary>
            <param name="collider">The other collider.</param>
        </member>
        <member name="T:FlaxEngine.Collider">
            <summary>
            A base class for all colliders.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
            <seealso cref="T:FlaxEngine.PhysicsColliderActor" />
        </member>
        <member name="E:FlaxEngine.Collider.CollisionEnter">
            <summary>
            Occurs when a collision start gets registered for this collider (it collides with something).
            </summary>
        </member>
        <member name="E:FlaxEngine.Collider.CollisionExit">
            <summary>
            Occurs when a collision end gets registered for this collider (it ends colliding with something).
            </summary>
        </member>
        <member name="E:FlaxEngine.Collider.TriggerEnter">
            <summary>
            Occurs when a trigger touching start gets registered for this collider (the other collider enters it and triggers the event).
            </summary>
        </member>
        <member name="E:FlaxEngine.Collider.TriggerExit">
            <summary>
            Occurs when a trigger touching end gets registered for this collider (the other collider enters it and triggers the event).
            </summary>
        </member>
        <member name="M:FlaxEngine.Collider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collider"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collider.Material">
            <summary>
            The physical material used to define the collider physical properties.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collider.IsTrigger">
            <summary>
            Gets or sets the 'IsTrigger' flag.
            </summary>
            <remarks>
            A trigger doesn't register a collision with an incoming Rigidbody. Instead, it sends OnTriggerEnter, OnTriggerExit and OnTriggerStay message when a rigidbody enters or exits the trigger volume.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Collider.Center">
            <summary>
            Gets or sets the center of the collider, measured in the object's local space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collider.ContactOffset">
            <summary>
            Gets or sets the contact offset.
            </summary>
            <remarks>
            Colliders whose distance is less than the sum of their ContactOffset values will generate contacts. The contact offset must be positive. Contact offset allows the collision detection system to predictively enforce the contact constraint even when the objects are slightly separated.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Collider.IsAttached">
            <summary>
            Determines whether this collider is attached to the body.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collider.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single@,System.Single)">
            <summary>
            Performs a raycast against this collider shape.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="resultHitDistance">The raycast result hit position distance from the ray origin. Valid only if raycast hits anything.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Collider.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single)">
            <summary>
            Performs a raycast against this collider, returns results in a RaycastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Collider.ClosestPoint(FlaxEngine.Vector3,FlaxEngine.Vector3@)">
            <summary>
            Gets a point on the collider that is closest to a given location. Can be used to find a hit location or position to apply explosion force or any other special effects.
            </summary>
            <param name="position">The position to find the closest point to it.</param>
            <param name="result">The result point on the collider that is closest to the specified location.</param>
        </member>
        <member name="M:FlaxEngine.Collider.ComputePenetration(FlaxEngine.Collider,FlaxEngine.Collider,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Computes minimum translational distance between two geometry objects.
            Translating the first collider by direction * distance will separate the colliders apart if the function returned true. Otherwise, direction and distance are not defined.
            The one of the colliders has to be BoxCollider, SphereCollider CapsuleCollider or a convex MeshCollider. The other one can be any type.
            If objects do not overlap, the function can not compute the distance and returns false.
            </summary>
            <param name="colliderA">The first collider.</param>
            <param name="colliderB">The second collider.</param>
            <param name="direction">The computed direction along which the translation required to separate the colliders apart is minimal. Valid only if function returns true.</param>
            <param name="distance">The penetration distance along direction that is required to separate the colliders apart. Valid only if function returns true.</param>
            <returns>True if the distance has successfully been computed, i.e. if objects do overlap, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.BoxCollider">
            <summary>
            A box-shaped primitive collider.
            </summary>
            <seealso cref="T:FlaxEngine.Collider" />
        </member>
        <member name="M:FlaxEngine.BoxCollider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoxCollider"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxCollider.Size">
            <summary>
            Gets or sets the size of the box, measured in the object's local space.
            </summary>
            <remarks>
            The box size will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="P:FlaxEngine.BoxCollider.OrientedBox">
            <summary>
            Gets the volume bounding box (oriented).
            </summary>
        </member>
        <member name="T:FlaxEngine.CapsuleCollider">
            <summary>
            A capsule-shaped primitive collider.
            </summary>
            <remarks>
            Capsules are cylinders with a half-sphere at each end.
            </remarks>
            <seealso cref="T:FlaxEngine.Collider" />
        </member>
        <member name="M:FlaxEngine.CapsuleCollider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.CapsuleCollider"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.CapsuleCollider.Radius">
            <summary>
            Gets or sets the radius of the sphere, measured in the object's local space.
            </summary>
            <remarks>
            The sphere radius will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="P:FlaxEngine.CapsuleCollider.Height">
            <summary>
            Gets or sets the height of the capsule, measured in the object's local space.
            </summary>
            <remarks>
            The capsule height will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="T:FlaxEngine.CharacterController">
            <summary>
            Physical objects that allows to easily do player movement constrained by collisions without having to deal with a rigidbody.
            </summary>
            <seealso cref="T:FlaxEngine.Collider" />
        </member>
        <member name="M:FlaxEngine.CharacterController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.CharacterController"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.Radius">
            <summary>
            Gets or sets the radius of the sphere, measured in the object's local space. The sphere radius will be scaled by the actor's world scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.Height">
            <summary>
            Gets or sets the height of the capsule, measured in the object's local space. The capsule height will be scaled by the actor's world scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.SlopeLimit">
            <summary>
            Gets or sets the slope limit (in degrees). Limits the collider to only climb slopes that are less steep (in degrees) than the indicated value.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.NonWalkableMode">
            <summary>
            Gets or sets the non-walkable mode for the character controller.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.StepOffset">
            <summary>
            Gets or sets the step height. The character will step up a stair only if it is closer to the ground than the indicated value. This should not be greater than the Character Controller’s height or it will generate an error.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.MinMoveDistance">
            <summary>
            Gets or sets the minimum move distance of the character controller. The minimum travelled distance to consider. If travelled distance is smaller, the character doesn't move. This is used to stop the recursive motion algorithm when remaining distance to travel is small.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.Velocity">
            <summary>
            Gets the linear velocity of the Character Controller. This allows tracking how fast the character is actually moving, for instance when it is stuck at a wall this value will be the near zero vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.IsGrounded">
            <summary>
            Gets a value indicating whether this character was grounded during last move call grounded.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.Flags">
            <summary>
            Gets the current collision flags. Tells which parts of the character capsule collided with the environment during the last move call. It can be used to trigger various character animations.
            </summary>
        </member>
        <member name="M:FlaxEngine.CharacterController.SimpleMove(FlaxEngine.Vector3)">
            <summary>
            Moves the character with the given speed. Gravity is automatically applied. It will slide along colliders. Result collision flags is the summary of collisions that occurred during the Move.
            </summary>
            <param name="speed">The movement speed (in units/s).</param>
            <returns>The collision flags. It can be used to trigger various character animations.</returns>
        </member>
        <member name="M:FlaxEngine.CharacterController.Move(FlaxEngine.Vector3)">
            <summary>
            Moves the character using a 'collide-and-slide' algorithm. Attempts to move the controller by the given displacement vector, the motion will only be constrained by collisions. It will slide along colliders. Result collision flags is the summary of collisions that occurred during the Move. This function does not apply any gravity.
            </summary>
            <param name="displacement">The displacement vector (in world units).</param>
            <returns>The collision flags. It can be used to trigger various character animations.</returns>
        </member>
        <member name="T:FlaxEngine.CharacterController.CollisionFlags">
            <summary>
            Specifies which sides a character is colliding with.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.CollisionFlags.None">
            <summary>
            The character is not colliding.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.CollisionFlags.Sides">
            <summary>
            The character is colliding to the sides.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.CollisionFlags.Above">
            <summary>
            The character has collision above.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.CollisionFlags.Below">
            <summary>
            The character has collision below.
            </summary>
        </member>
        <member name="T:FlaxEngine.CharacterController.NonWalkableModes">
            <summary>
            Specifies how a character controller interacts with non-walkable parts.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.NonWalkableModes.PreventClimbing">
            <summary>
            Stops character from climbing up non-walkable slopes, but doesn't move it otherwise.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.NonWalkableModes.PreventClimbingAndForceSliding">
            <summary>
            Stops character from climbing up non-walkable slopes, and forces it to slide down those slopes.
            </summary>
        </member>
        <member name="T:FlaxEngine.MeshCollider">
            <summary>
            A collider represented by an arbitrary mesh.
            </summary>
            <seealso cref="T:FlaxEngine.Collider" />
        </member>
        <member name="M:FlaxEngine.MeshCollider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MeshCollider"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MeshCollider.CollisionData">
            <summary>
            Linked collision data asset that contains convex mesh or triangle mesh used to represent a mesh collider shape.
            </summary>
        </member>
        <member name="T:FlaxEngine.SphereCollider">
            <summary>
            A sphere-shaped primitive collider.
            </summary>
            <seealso cref="T:FlaxEngine.Collider" />
        </member>
        <member name="M:FlaxEngine.SphereCollider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SphereCollider"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphereCollider.Radius">
            <summary>
            Gets or sets the radius of the sphere, measured in the object's local space.
            </summary>
            <remarks>
            The sphere radius will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="T:FlaxEngine.Collision">
            <summary>
            Contains a collision information passed to the OnCollisionEnter and OnCollisionExit events.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.Impulse">
            <summary>
            The total impulse applied to this contact pair to resolve the collision.
            </summary>
            <remarks>
            The total impulse is obtained by summing up impulses applied at all contact points in this collision pair.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Collision.ThisVelocity">
            <summary>
            The linear velocity of the first colliding object (this instance).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.OtherVelocity">
            <summary>
            The linear velocity of the second colliding object (other instance).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.RelativeVelocity">
            <summary>
            The relative linear velocity of the two colliding objects.
            </summary>
            <remarks>
            Can be used to detect stronger collisions.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Collision.ThisCollider">
            <summary>
            The first collider (this instance). It may be null if this actor is not the <see cref="T:FlaxEngine.Collider"/> (eg. <see cref="T:FlaxEngine.Terrain"/>).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.OtherCollider">
            <summary>
            The second collider (other instance). It may be null if this actor is not the <see cref="T:FlaxEngine.Collider"/> (eg. <see cref="T:FlaxEngine.Terrain"/>).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.ThisActor">
            <summary>
            The first collider (this instance).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.OtherActor">
            <summary>
            The second collider (other instance).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.Contacts">
            <summary>
            The contacts locations.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collision.GetEnumerator">
            <summary>
            Gets the contact points enumerator
            </summary>
            <returns>The contact points enumerator.</returns>
        </member>
        <member name="T:FlaxEngine.CollisionDataType">
            <summary>
            A <see cref="T:FlaxEngine.CollisionData"/> storage data type.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataType.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataType.ConvexMesh">
            <summary>
            A convex polyhedron represented as a set of vertices and polygonal faces. The number of vertices and faces of a convex mesh is limited to 255.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataType.TriangleMesh">
            <summary>
            A collision triangle mesh consists of a collection of vertices and the triangle indices.
            </summary>
        </member>
        <member name="T:FlaxEngine.ConvexMeshGenerationFlags">
            <summary>
            Set of flags used to generate model convex mesh. Allows to customize process.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.SkipValidation">
            <summary>
            Disables the convex mesh validation to speed-up hull creation.
            Creating a convex mesh with invalid input data without prior validation
            may result in undefined behavior.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.UsePlaneShifting">
             <summary>
             Enables plane shifting vertex limit algorithm.
            
             Plane shifting is an alternative algorithm for the case when the computed hull has more vertices
             than the specified vertex limit.
            
             The default algorithm computes the full hull, and an OBB around the input vertices. This OBB is then sliced
             with the hull planes until the vertex limit is reached. The default algorithm requires the vertex limit
             to be set to at least 8, and typically produces results that are much better quality than are produced
             by plane shifting.
            
             When plane shifting is enabled, the hull computation stops when vertex limit is reached.The hull planes
             are then shifted to contain all input vertices, and the new plane intersection points are then used to
             generate the final hull with the given vertex limit.Plane shifting may produce sharp edges to vertices
             very far away from the input cloud, and does not guarantee that all input vertices are inside the resulting
             hull. However, it can be used with a vertex limit as low as 4.
             </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.UseFastInteriaComputation">
            <summary>
            Inertia tensor computation is faster using SIMD code, but the precision is lower, which may result
            in incorrect inertia for very thin hulls.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.ShiftVertices">
            <summary>
            Convex hull input vertices are shifted to be around origin to provide better computation stability.
            It is recommended to provide input vertices around the origin, otherwise use this flag to improve
            numerical stability.
            </summary>
        </member>
        <member name="T:FlaxEngine.CollisionDataOptions">
            <summary>
            The collision data asset cooking options.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.Type">
            <summary>
            The data type.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.Model">
            <summary>
            The source model asset id.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.ModelLodIndex">
            <summary>
            The source model LOD index.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.Box">
            <summary>
            The cooked collision bounds.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.ConvexFlags">
            <summary>
            The convex generation flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.ConvexVertexLimit">
            <summary>
            The convex vertices limit (maximum amount).
            </summary>
        </member>
        <member name="T:FlaxEngine.CollisionData">
            <summary>
            Represents a physics mesh that can be used with a MeshCollider. Physics mesh can be a generic triangle mesh or a convex mesh.
            </summary>
        </member>
        <member name="M:FlaxEngine.CollisionData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.CollisionData"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.CollisionData.Options">
            <summary>
            Gets the options.
            </summary>
        </member>
        <member name="M:FlaxEngine.CollisionData.CookCollision(FlaxEngine.CollisionDataType,FlaxEngine.Model,System.Int32,FlaxEngine.ConvexMeshGenerationFlags,System.Int32)">
            <summary>
            Cooks the mesh collision data and updates the virtual asset. action cannot be performed on a main thread.
            </summary>
            <remarks>
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
            <param name="type">The collision data type.</param>
            <param name="model">The source model.</param>
            <param name="modelLodIndex">The source model LOD index.</param>
            <param name="convexFlags">The convex mesh generation flags.</param>
            <param name="convexVertexLimit">The convex mesh vertex limit. Use values in range [8;255]</param>
        </member>
        <member name="M:FlaxEngine.CollisionData.CookCollision(FlaxEngine.CollisionDataType,FlaxEngine.Vector3[],System.UInt32[],FlaxEngine.ConvexMeshGenerationFlags,System.Int32)">
            <summary>
            Cooks the mesh collision data and updates the virtual asset. action cannot be performed on a main thread.
            </summary>
            <remarks>
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
            <param name="type">The collision data type.</param>
            <param name="vertices">The source geometry vertex buffer with vertices positions. Cannot be empty.</param>
            <param name="triangles">The source data index buffer (triangles list). Uses 32-bit stride buffer. Cannot be empty. Length must be multiple of 3 (as 3 vertices build a triangle).</param>
            <param name="convexFlags">The convex mesh generation flags.</param>
            <param name="convexVertexLimit">The convex mesh vertex limit. Use values in range [8;255]</param>
        </member>
        <member name="M:FlaxEngine.CollisionData.ExtractGeometry(FlaxEngine.Vector3[]@,System.Int32[]@)">
            <summary>
            Extracts the collision data geometry into list of triangles.
            </summary>
            <param name="vertexBuffer">The output vertex buffer.</param>
            <param name="indexBuffer">The output index buffer.</param>
        </member>
        <member name="T:FlaxEngine.ContactPoint">
            <summary>
            Contains a contact point data for the collision location.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContactPoint.Point">
            <summary>
            The contact point location in the world space.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContactPoint.Separation">
            <summary>
            The separation value (negative implies penetration).
            </summary>
        </member>
        <member name="F:FlaxEngine.ContactPoint.Normal">
            <summary>
            The contact normal.
            </summary>
        </member>
        <member name="T:FlaxEngine.D6JointDrive">
            <summary>
            Specifies parameters for a drive that will attempt to move the joint bodies to the specified drive position and velocity.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.Default">
            <summary>
            The default <see cref="T:FlaxEngine.D6JointDrive"/> structure.
            </summary>
        </member>
        <member name="M:FlaxEngine.D6JointDrive.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.D6JointDrive"/> struct.
            </summary>
            <param name="stiffness">The stiffness.</param>
            <param name="damping">The damping.</param>
            <param name="forceLimit">The force limit.</param>
            <param name="acceleration">if set to <c>true</c> the drive will generate acceleration instead of forces.</param>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.Stiffness">
            <summary>
            The spring strength. Force proportional to the position error.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.Damping">
            <summary>
            Damping strength. Force proportional to the velocity error.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.ForceLimit">
            <summary>
            The maximum force the drive can apply.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.Acceleration">
            <summary>
            If true the drive will generate acceleration instead of forces. Acceleration drives are easier to tune as they account for the masses of the actors to which the joint is attached.
            </summary>
        </member>
        <member name="T:FlaxEngine.HingeJointDrive">
            <summary>
            Properties of a drive that drives the joint's angular velocity towards a particular value.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.Default">
            <summary>
            The default <see cref="T:FlaxEngine.HingeJointDrive"/> structure.
            </summary>
        </member>
        <member name="M:FlaxEngine.HingeJointDrive.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.HingeJointDrive"/> struct.
            </summary>
            <param name="velocity">The velocity.</param>
            <param name="forceLimit">The force limit.</param>
            <param name="gearRatio">The gear ratio.</param>
            <param name="freeSpin">if set to <c>true</c> [free spin].</param>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.Velocity">
            <summary>
            Target velocity of the joint.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.ForceLimit">
            <summary>
            Maximum torque the drive is allowed to apply.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.GearRatio">
            <summary>
            Scales the velocity of the first body, and its response to drive torque is scaled down.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.FreeSpin">
            <summary>
            If the joint is moving faster than the drive's target speed, the drive will try to break.
            If you don't want the breaking to happen set this to true.
            </summary>
        </member>
        <member name="T:FlaxEngine.Joint">
            <summary>
            A base class for all Joint types. Joints constrain how two rigidbodies move relative to one another (for example a door hinge).
            One of the bodies in the joint must always be movable (non-kinematic).
            </summary>
            <remarks>
            Joint constraint is created between the parent physic actor (rigidbody, character controller, etc.) and the specified target actor.
            </remarks>
            <seealso cref="T:FlaxEngine.Actor" />
        </member>
        <member name="E:FlaxEngine.Joint.JointBreak">
            <summary>
            Occurs when a joint gets broken during simulation.
            </summary>
        </member>
        <member name="M:FlaxEngine.Joint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Joint"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.Target">
            <summary>
            The target actor for the joint. It has to be IPhysicsActor type (eg. RigidBody or CharacterController).
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.BreakForce">
            <summary>
            Gets or sets the break force. Determines the maximum force the joint can apply before breaking. Broken joints no longer participate in physics simulation.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.BreakTorque">
            <summary>
            Gets or sets the break torque. Determines the maximum torque the joint can apply before breaking. Broken joints no longer participate in physics simulation.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.EnableCollision">
            <summary>
            Determines whether collision between the two bodies managed by the joint are enabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.TargetAnchor">
            <summary>
            Gets or sets the target anchor.
            </summary>
            <remarks>
            This is the relative pose which locates the joint frame relative to the target actor.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Joint.TargetAnchorRotation">
            <summary>
            Gets or sets the target anchor rotation.
            </summary>
            <remarks>
            This is the relative pose rotation which locates the joint frame relative to the target actor.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Joint.GetCurrentForce(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Gets the current force applied by the solver to maintain all constraints.
            </summary>
            <param name="linear">The result linear force.</param>
            <param name="angular">The result angular force.</param>
        </member>
        <member name="T:FlaxEngine.D6JointAxis">
            <summary>
            Specifies axes that the D6 joint can constrain motion on.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.X">
            <summary>
            Movement on the X axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.Y">
            <summary>
            Movement on the Y axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.Z">
            <summary>
            Movement on the Z axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.Twist">
            <summary>
            Rotation around the X axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.SwingY">
            <summary>
            Rotation around the Y axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.SwingZ">
            <summary>
            Rotation around the Z axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.MAX">
            <summary>
            The count of items in the D6JointAxis enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.D6JointMotion">
            <summary>
            Specifies type of constraint placed on a specific axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointMotion.Locked">
            <summary>
            Axis is immovable.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointMotion.Limited">
            <summary>
            Axis will be constrained by the specified limits.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointMotion.Free">
            <summary>
            Axis will not be constrained.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointMotion.MAX">
            <summary>
            The count of items in the D6JointMotion enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.D6JointDriveType">
             <summary>
             Type of drives that can be used for moving or rotating bodies attached to the joint.
             </summary>
             <remarks>
             Each drive is an implicit force-limited damped spring:
             force = spring * (target position - position) + damping * (targetVelocity - velocity)
            
             Alternatively, the spring may be configured to generate a specified acceleration instead of a force.
            
             A linear axis is affected by drive only if the corresponding drive flag is set.There are two possible models
             for angular drive : swing / twist, which may be used to drive one or more angular degrees of freedom, or slerp,
             which may only be used to drive all three angular degrees simultaneously.
             </remarks>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.X">
            <summary>
            Linear movement on the X axis using the linear drive model.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Y">
            <summary>
            Linear movement on the Y axis using the linear drive model.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Z">
            <summary>
            Linear movement on the Z axis using the linear drive model.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Swing">
            <summary>
            Rotation around the Y axis using the twist/swing angular drive model. Should not be used together with Slerp mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Twist">
            <summary>
            Rotation around the Z axis using the twist/swing angular drive model. Should not be used together with Slerp mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Slerp">
            <summary>
            Rotation using spherical linear interpolation. Uses the SLERP angular drive mode which performs rotation
            by interpolating the quaternion values directly over the shortest path (applies to all three axes, which
            they all must be unlocked).
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.MAX">
            <summary>
            The count of items in the D6JointDriveType enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.D6Joint">
            <summary>
            Physics joint that is the most customizable type of joint. This joint type can be used to create all other built-in joint
            types, and to design your own custom ones, but is less intuitive to use.Allows a specification of a linear
            constraint (for example for a slider), twist constraint (rotating around X) and swing constraint (rotating around Y and Z).
            It also allows you to constrain limits to only specific axes or completely lock specific axes.
            </summary>
            <seealso cref="T:FlaxEngine.Joint" />
        </member>
        <member name="M:FlaxEngine.D6Joint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.D6Joint"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.LimitLinear">
            <summary>
            Determines the linear limit used for constraining translation degrees of freedom.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.LimitTwist">
            <summary>
            Determines the angular limit used for constraining the twist (rotation around X) degree of freedom.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.LimitSwing">
            <summary>
            Determines the cone limit used for constraining the swing (rotation around Y and Z) degree of freedom.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.DrivePosition">
            <summary>
            Gets or sets the drive's target position relative to the joint's first body.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.DriveRotation">
            <summary>
            Gets or sets the drive's target rotation relative to the joint's first body.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.DriveLinearVelocity">
            <summary>
            Gets or sets the drive's target linear velocity.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.DriveAngularVelocity">
            <summary>
            Gets or sets the drive's target angular velocity.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.CurrentTwist">
            <summary>
            Gets the twist angle of the joint.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.CurrentSwingYAngle">
            <summary>
            Gets the current swing angle of the joint from the Y axis.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.CurrentSwingZAngle">
            <summary>
            Gets the current swing angle of the joint from the Z axis.
            </summary>
        </member>
        <member name="M:FlaxEngine.D6Joint.GetMotion(FlaxEngine.D6JointAxis)">
            <summary>
            Gets the motion type around the specified axis.
            </summary>
            <remarks>
            Each axis may independently specify that the degree of freedom is locked (blocking relative movement along or around this axis), limited by the corresponding limit, or free.
            </remarks>
            <param name="axis">The axis the degree of freedom around which the motion type is specified.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.D6Joint.SetMotion(FlaxEngine.D6JointAxis,FlaxEngine.D6JointMotion)">
            <summary>
            Sets the motion type around the specified axis.
            </summary>
            <remarks>
            Each axis may independently specify that the degree of freedom is locked (blocking relative movement along or around this axis), limited by the corresponding limit, or free.
            </remarks>
            <param name="axis">The axis the degree of freedom around which the motion type is specified.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.D6Joint.GetDrive(FlaxEngine.D6JointDriveType)">
            <summary>
            Gets the drive parameters for the specified drive type.
            </summary>
            <param name="index">The type of drive being specified.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.D6Joint.SetDrive(FlaxEngine.D6JointDriveType,FlaxEngine.D6JointDrive)">
            <summary>
            Sets the drive parameters for the specified drive type.
            </summary>
            <param name="index">The type of drive being specified.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FlaxEngine.DistanceJointFlag">
            <summary>
            Controls distance joint options.
            </summary>
        </member>
        <member name="F:FlaxEngine.DistanceJointFlag.None">
            <summary>
            The none limits.
            </summary>
        </member>
        <member name="F:FlaxEngine.DistanceJointFlag.MinDistance">
            <summary>
            The minimum distance limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.DistanceJointFlag.MaxDistance">
            <summary>
            Uses the maximum distance limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.DistanceJointFlag.Spring">
            <summary>
            Uses the spring when maintaining limits
            </summary>
        </member>
        <member name="T:FlaxEngine.DistanceJoint">
            <summary>
            Physics joint that maintains an upper or lower (or both) bound on the distance between two bodies.
            </summary>
            <seealso cref="T:FlaxEngine.Joint" />
        </member>
        <member name="M:FlaxEngine.DistanceJoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.DistanceJoint"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.Flags">
            <summary>
            Gets or sets the joint mode flags. Controls joint behaviour.
            </summary>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.MinDistance">
            <summary>
            Gets or sets the allowed minimum distance for the joint.
            </summary>
            <remarks>
            Used only when DistanceJointFlag.MinDistance flag is set. The minimum distance must be no more than the maximum distance. Default: 0, Range: [0, float.MaxValue].
            </remarks>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.MaxDistance">
            <summary>
            Gets or sets the allowed maximum distance for the joint.
            </summary>
            <remarks>
            Used only when DistanceJointFlag.MaxDistance flag is set. The maximum distance must be no less than the minimum distance. Default: 0, Range: [0, float.MaxValue].
            </remarks>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.Tolerance">
            <summary>
            Gets or sets the error tolerance of the joint.
            </summary>
            <remarks>
            The distance beyond the joint's [min, max] range before the joint becomes active. Default: 25, Range: [0.1, float.MaxValue].
            </remarks>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.SpringParameters">
            <summary>
            Gets or sets the spring parameters.
            </summary>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.CurrentDistance">
            <summary>
            Gets the current distance of the joint.
            </summary>
        </member>
        <member name="T:FlaxEngine.FixedJoint">
            <summary>
            Physics joint that maintains a fixed distance and orientation between its two attached bodies.
            </summary>
            <seealso cref="T:FlaxEngine.Joint" />
        </member>
        <member name="M:FlaxEngine.FixedJoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FixedJoint"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.HingeJointFlag">
            <summary>
            Flags that control hinge joint options.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointFlag.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointFlag.Limit">
            <summary>
            The joint limit is enabled.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointFlag.Drive">
            <summary>
            The joint drive is enabled.
            </summary>
        </member>
        <member name="T:FlaxEngine.HingeJoint">
            <summary>
            Physics joint that removes all but a single rotation degree of freedom from its two attached bodies (for example a door hinge).
            </summary>
            <seealso cref="T:FlaxEngine.Joint" />
        </member>
        <member name="M:FlaxEngine.HingeJoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.HingeJoint"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.HingeJoint.Flags">
            <summary>
            Gets or sets the joint mode flags. Controls joint behaviour.
            </summary>
        </member>
        <member name="P:FlaxEngine.HingeJoint.Limit">
            <summary>
            Gets or sets the joint limit properties.
            </summary>
            <remarks>
            Determines the limit of the joint. Limit constrains the motion to the specified angle range. You must enable the limit flag on the joint in order for this to be recognized.
            </remarks>
        </member>
        <member name="P:FlaxEngine.HingeJoint.Drive">
            <summary>
            Gets or sets the joint drive properties.
            </summary>
            <remarks>
            Determines the drive properties of the joint. It drives the joint's angular velocity towards a particular value. You must enable the drive flag on the joint in order for the drive to be active.
            </remarks>
        </member>
        <member name="P:FlaxEngine.HingeJoint.CurrentAngle">
            <summary>
            Gets the current angle of the joint (in radians, in the range (-Pi, Pi]).
            </summary>
        </member>
        <member name="P:FlaxEngine.HingeJoint.CurrentVelocity">
            <summary>
            Gets the current velocity of the joint.
            </summary>
        </member>
        <member name="T:FlaxEngine.SpringParameters">
            <summary>
            Controls spring parameters for a physics joint limits. If a limit is soft (body bounces back due to restitution when
            the limit is reached) the spring will pull the body back towards the limit using the specified parameters.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpringParameters.Stiffness">
            <summary>
            The spring strength. Force proportional to the position error.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpringParameters.Damping">
            <summary>
            Damping strength. Force proportional to the velocity error.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpringParameters.Default">
            <summary>
            The default <see cref="T:FlaxEngine.SpringParameters"/> structure.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpringParameters.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a spring.
            </summary>
            <param name="stiffness">Spring strength. Force proportional to the position error.</param>
            <param name="damping">Damping strength. Force proportional to the velocity error.</param>
        </member>
        <member name="T:FlaxEngine.LimitLinearRange">
            <summary>
            Represents a joint limit between two distance values. Lower value must be less than the upper value.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.ContactDist">
            <summary>
            Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Restitution">
            <summary>
            Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Spring">
            <summary>
            The spring that controls how are the bodies pulled back towards the limit when they breach it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Lower">
            <summary>
            The lower distance of the limit. Must be less than upper.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Upper">
            <summary>
            The upper distance of the limit. Must be more than lower.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Default">
            <summary>
            The default <see cref="T:FlaxEngine.LimitLinearRange"/> structure with empty limit.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitLinearRange.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a hard limit. Once the limit is reached the movement of the attached bodies will come to a stop.
            </summary>
            <param name="lower">The lower distance of the limit. Must be less than upper.</param>
            <param name="upper">The upper distance of the limit. Must be more than lower.</param>
            <param name="contactDist">Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit. Specify -1 for the default.</param>
        </member>
        <member name="M:FlaxEngine.LimitLinearRange.#ctor(System.Single,System.Single,FlaxEngine.SpringParameters,System.Single)">
            <summary>
            Constructs a soft limit. Once the limit is reached the bodies will bounce back according to the restitution parameter and will be pulled back towards the limit by the provided spring.
            </summary>
            <param name="lower">The lower distance of the limit. Must be less than upper.</param>
            <param name="upper">The upper distance of the limit. Must be more than lower.</param>
            <param name="spring">The spring that controls how are the bodies pulled back towards the limit when they breach it.</param>
            <param name="restitution">Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.</param>
        </member>
        <member name="T:FlaxEngine.LimitLinear">
            <summary>
            Represents a joint limit between zero a single distance value.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.ContactDist">
            <summary>
            Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.Restitution">
            <summary>
            Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.Spring">
            <summary>
            The spring that controls how are the bodies pulled back towards the limit when they breach it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.Extent">
            <summary>
            The distance at which the limit becomes active.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.Default">
            <summary>
            The default <see cref="T:FlaxEngine.LimitLinear"/> structure with empty limit.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitLinear.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a hard limit. Once the limit is reached the movement of the attached bodies will come to a stop.
            </summary>
            <param name="extent">The distance at which the limit becomes active.</param>
            <param name="contactDist">The distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit. Specify -1 for the default.</param>
        </member>
        <member name="M:FlaxEngine.LimitLinear.#ctor(System.Single,FlaxEngine.SpringParameters,System.Single)">
            <summary>
            Constructs a soft limit. Once the limit is reached the bodies will bounce back according to the restitution parameter and will be pulled back towards the limit by the provided spring.
            </summary>
            <param name="extent">The distance at which the limit becomes active.</param>
            <param name="spring">The spring that controls how are the bodies pulled back towards the limit when they breach it.</param>
            <param name="restitution">Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.</param>
        </member>
        <member name="T:FlaxEngine.LimitAngularRange">
            <summary>
            Represents a joint limit between two angles.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.ContactDist">
            <summary>
            Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Restitution">
            <summary>
            Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Spring">
            <summary>
            The spring that controls how are the bodies pulled back towards the limit when they breach it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Lower">
            <summary>
            Lower angle of the limit (in degrees). Must be less than upper.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Upper">
            <summary>
            Upper angle of the limit (in degrees). Must be less than lower.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Default">
            <summary>
            The default <see cref="T:FlaxEngine.LimitAngularRange"/> structure with empty limit.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitAngularRange.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a hard limit. Once the limit is reached the movement of the attached bodies will come to a stop.
            </summary>
            <param name="lower">The lower angle of the limit (in degrees). Must be less than upper.</param>
            <param name="upper">The upper angle of the limit (in degrees). Must be more than lower.</param>
            <param name="contactDist">Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit. Specify -1 for the default.</param>
        </member>
        <member name="M:FlaxEngine.LimitAngularRange.#ctor(System.Single,System.Single,FlaxEngine.SpringParameters,System.Single)">
            <summary>
            Constructs a soft limit. Once the limit is reached the bodies will bounce back according to the restitution parameter and will be pulled back towards the limit by the provided spring.
            </summary>
            <param name="lower">The lower angle of the limit. Must be less than upper.</param>
            <param name="upper">The upper angle of the limit. Must be more than lower.</param>
            <param name="spring">The spring that controls how are the bodies pulled back towards the limit when they breach it.</param>
            <param name="restitution">Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.</param>
        </member>
        <member name="T:FlaxEngine.LimitConeRange">
            <summary>
            Represents a joint limit that constraints movement to within an elliptical cone.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.ContactDist">
            <summary>
            Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.Restitution">
            <summary>
            Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.Spring">
            <summary>
            The spring that controls how are the bodies pulled back towards the limit when they breach it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.YLimitAngle">
            <summary>
            The Y angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Y axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.ZLimitAngle">
            <summary>
            The Z angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Z axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.Default">
            <summary>
            The default <see cref="T:FlaxEngine.LimitConeRange"/> structure with a 45 degree cone limit.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitConeRange.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a hard limit. Once the limit is reached the movement of the attached bodies will come to a stop.
            </summary>
            <param name="yLimitAngle">The Y angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Y axis.</param>
            <param name="zLimitAngle">The Z angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Z axis.</param>
            <param name="contactDist">Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit. Specify -1 for the default.</param>
        </member>
        <member name="M:FlaxEngine.LimitConeRange.#ctor(System.Single,System.Single,FlaxEngine.SpringParameters,System.Single)">
            <summary>
            Constructs a soft limit. Once the limit is reached the bodies will bounce back according to the restitution parameter and will be pulled back towards the limit by the provided spring.
            </summary>
            <param name="yLimitAngle">The Y angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Y axis.</param>
            <param name="zLimitAngle">The Z angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Z axis.</param>
            <param name="spring">The spring that controls how are the bodies pulled back towards the limit when they breach it.</param>
            <param name="restitution">Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.</param>
        </member>
        <member name="T:FlaxEngine.SliderJointFlag">
            <summary>
            Flags that control slider joint options.
            </summary>
        </member>
        <member name="F:FlaxEngine.SliderJointFlag.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.SliderJointFlag.Limit">
            <summary>
            The joint linear range limit is enabled.
            </summary>
        </member>
        <member name="T:FlaxEngine.SliderJoint">
            <summary>
            Physics joint that removes all but a single translational degree of freedom. Bodies are allowed to move along a single axis.
            </summary>
            <seealso cref="T:FlaxEngine.Joint" />
        </member>
        <member name="M:FlaxEngine.SliderJoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SliderJoint"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SliderJoint.Flags">
            <summary>
            Gets or sets the joint mode flags. Controls joint behaviour.
            </summary>
        </member>
        <member name="P:FlaxEngine.SliderJoint.Limit">
            <summary>
            Gets or sets the joint limit properties.
            </summary>
            <remarks>
            Determines the limit of the joint. Limit constrains the motion to the specified angle range. You must enable the limit flag on the joint in order for this to be recognized.
            </remarks>
        </member>
        <member name="P:FlaxEngine.SliderJoint.CurrentPosition">
            <summary>
            Gets the current displacement of the joint along its axis.
            </summary>
        </member>
        <member name="P:FlaxEngine.SliderJoint.CurrentVelocity">
            <summary>
            Gets the current velocity of the joint along its axis.
            </summary>
        </member>
        <member name="T:FlaxEngine.SphericalJointFlag">
            <summary>
            Flags that control spherical joint options.
            </summary>
        </member>
        <member name="F:FlaxEngine.SphericalJointFlag.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.SphericalJointFlag.Limit">
            <summary>
            The joint cone range limit is enabled.
            </summary>
        </member>
        <member name="T:FlaxEngine.SphericalJoint">
            <summary>
            Physics joint that removes all translational degrees of freedom but allows all rotational degrees of freedom.
            Essentially this ensures that the anchor points of the two bodies are always coincident. Bodies are allowed to
            rotate around the anchor points, and their rotation can be limited by an elliptical cone.
            </summary>
            <seealso cref="T:FlaxEngine.Joint" />
        </member>
        <member name="M:FlaxEngine.SphericalJoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SphericalJoint"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphericalJoint.Flags">
            <summary>
            Gets or sets the joint mode flags. Controls joint behaviour.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphericalJoint.Limit">
            <summary>
            Gets or sets the joint limit properties.
            </summary>
            <remarks>
            Determines the limit of the joint. Limit constrains the motion to the specified angle range. You must enable the limit flag on the joint in order for this to be recognized.
            </remarks>
        </member>
        <member name="T:FlaxEngine.RayCastHit">
            <summary>
            Raycast hit result data.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.Collider">
            <summary>
            The collider that was hit.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.Normal">
            <summary>
            The normal of the surface the ray hit.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.Distance">
            <summary>
            The distance from the ray's origin to the hit location.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.Point">
            <summary>
            The point in the world space where ray hit the collider.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.UV">
            <summary>
            The barycentric coordinates of hit point, for triangle mesh and height field.
            </summary>
        </member>
        <member name="T:FlaxEngine.Physics">
            <summary>
            Physics simulation system.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.AutoSimulation">
            <summary>
            The automatic simulation feature. True if perform physics simulation after on fixed update by auto, otherwise user should do it.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.Gravity">
            <summary>
            Gets or sets the current gravity force.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.EnableCCD">
            <summary>
            Gets or sets the CCD feature enable flag.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.BounceThresholdVelocity">
            <summary>
            Gets or sets the minimum relative velocity required for an object to bounce.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.IsDuringSimulation">
            <summary>
            Checks if physical simulation is running
            </summary>
        </member>
        <member name="M:FlaxEngine.Physics.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a raycast against objects in the scene.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a raycast against objects in the scene, returns results in a RayCastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.RayCastAll(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a raycast against objects in the scene, returns results in a RayCastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.BoxCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a box geometry.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="direction">The normalized direction in which cast a box.</param>
            <param name="rotation">The box rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.BoxCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a box geometry.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="direction">The normalized direction in which cast a box.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="rotation">The box rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.BoxCastAll(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a box geometry.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="direction">The normalized direction in which cast a box.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="rotation">The box rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.SphereCast(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a sphere geometry.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The normalized direction in which cast a sphere.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.SphereCast(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a sphere geometry.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The normalized direction in which cast a sphere.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.SphereCastAll(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a sphere geometry.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The normalized direction in which cast a sphere.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.CheckBox(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Checks whether the given box overlaps with other colliders or not.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="rotation">The box rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.CheckSphere(FlaxEngine.Vector3,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Checks whether the given sphere overlaps with other colliders or not.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapBox(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Collider[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given box.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="rotation">The box rotation.</param>
            <param name="results">The result colliders that overlap with the given box. Valid only when method returns true.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapSphere(FlaxEngine.Vector3,System.Single,FlaxEngine.Collider[]@,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given sphere.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="results">The result colliders that overlap with the given sphere. Valid only when method returns true.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapBox(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.PhysicsColliderActor[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given box.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="rotation">The box rotation.</param>
            <param name="results">The result colliders that overlap with the given box. Valid only when method returns true.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapSphere(FlaxEngine.Vector3,System.Single,FlaxEngine.PhysicsColliderActor[]@,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given sphere.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="results">The result colliders that overlap with the given sphere. Valid only when method returns true.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.Simulate(System.Single)">
            <summary>
            Called during main engine loop to start physic simulation. Use CollectResults after.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEngine.Physics.CollectResults">
            <summary>
            Called during main engine loop to collect physic simulation results and apply them as well as fire collision events.
            </summary>
        </member>
        <member name="T:FlaxEngine.PhysicsCombineMode">
            <summary>
            Enumeration that determines the way in which two material properties will be combined to yield a friction or restitution coefficient for a collision.
            </summary>
            <remarks>
            Physics doesn't have any inherent combinations because the coefficients are determined empirically on a case by case basis.
            However, simulating this with a pairwise lookup table is often impractical.
            The effective combine mode for the pair is maximum(material0.combineMode, material1.combineMode).
            </remarks>
        </member>
        <member name="F:FlaxEngine.PhysicsCombineMode.Average">
            <summary>
            Uses the average value of the touching materials: (a+b)/2.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicsCombineMode.Minimum">
            <summary>
            Uses the smaller value of the touching materials: min(a,b)
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicsCombineMode.Multiply">
            <summary>
            Multiplies the values of the touching materials: a*b
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicsCombineMode.Maximum">
            <summary>
            Uses the larger value of the touching materials: max(a, b)
            </summary>
        </member>
        <member name="T:FlaxEngine.ForceMode">
            <summary>
            Force mode type determines the exact operation that is carried out when applying the force on a rigidbody.
            </summary>
        </member>
        <member name="F:FlaxEngine.ForceMode.Force">
            <summary>
            Add a continuous force to the rigidbody, using its mass. The parameter has unit of mass * distance / time^2, i.e. a force.
            </summary>
        </member>
        <member name="F:FlaxEngine.ForceMode.Impulse">
            <summary>
            Add an instant force impulse to the rigidbody, using its mass. The parameter has unit of mass * distance / time.
            </summary>
        </member>
        <member name="F:FlaxEngine.ForceMode.VelocityChange">
            <summary>
            Add an instant velocity change to the rigidbody, ignoring its mass. The parameter has unit of distance / time, i.e. the effect is mass independent: a velocity change.
            </summary>
        </member>
        <member name="F:FlaxEngine.ForceMode.Acceleration">
            <summary>
            Add a continuous acceleration to the rigidbody, ignoring its mass. The parameter has unit of distance / time^2, i.e. an acceleration. It gets treated just like a force except the mass is not divided out before integration.
            </summary>
        </member>
        <member name="T:FlaxEngine.RigidbodyConstraints">
            <summary>
            Dynamic rigidbodies movement and rotation locking flags. Provide a mechanism to lock motion along/around a specific axis or set of axes to constrain object motion.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.None">
            <summary>
            No constraints.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockPositionX">
            <summary>
            Freeze motion along the X-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockPositionY">
            <summary>
            Freeze motion along the Y-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockPositionZ">
            <summary>
            Freeze motion along the Z-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockRotationX">
            <summary>
            Freeze rotation along the X-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockRotationY">
            <summary>
            Freeze rotation along the Y-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockRotationZ">
            <summary>
            Freeze rotation along the Z-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockPosition">
            <summary>
            Freeze motion along all axes.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockRotation">
            <summary>
            Freeze rotation along all axes.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockAll">
            <summary>
            Freeze rotation and motion along all axes.
            </summary>
        </member>
        <member name="T:FlaxEngine.Clipboard">
            <summary>
            Native platform clipboard service.
            </summary>
        </member>
        <member name="P:FlaxEngine.Clipboard.Text">
            <summary>
            Sets text to the clipboard.
            </summary>
        </member>
        <member name="P:FlaxEngine.Clipboard.RawData">
            <summary>
            Sets the raw bytes data to the clipboard.
            </summary>
        </member>
        <member name="P:FlaxEngine.Clipboard.Files">
            <summary>
            Sets the files to the clipboard.
            </summary>
        </member>
        <member name="M:FlaxEngine.Clipboard.Clear">
            <summary>
            Clear the clipboard contents.
            </summary>
        </member>
        <member name="T:FlaxEngine.FileSystem">
            <summary>
            Platform implementation of filesystem service.
            </summary>
        </member>
        <member name="M:FlaxEngine.FileSystem.ShowOpenFileDialog(FlaxEngine.Window,System.String,System.String,System.Boolean,System.String,System.String[]@)">
            <summary>
            Displays a standard dialog box that prompts the user to open a file(s).
            </summary>
            <param name="parentWindow">The parent window or null.</param>
            <param name="initialDirectory">The initial directory.</param>
            <param name="filter">The custom filter.</param>
            <param name="multiSelect">True if allow multiple files to be selected, otherwise use single-file mode.</param>
            <param name="title">The dialog title.</param>
            <param name="filenames">The output names of the files picked by the user.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.FileSystem.ShowSaveFileDialog(FlaxEngine.Window,System.String,System.String,System.Boolean,System.String,System.String[]@)">
            <summary>
            Displays a standard dialog box that prompts the user to save a file(s).
            </summary>
            <param name="parentWindow">The parent window.</param>
            <param name="initialDirectory">The initial directory.</param>
            <param name="filter">The filter.</param>
            <param name="multiSelect">True if allow multiple files to be selected, otherwise use single-file mode.</param>
            <param name="title">The title.</param>
            <param name="filenames">The output names of the files picked by the user.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.FileSystem.ShowBrowseFolderDialog(FlaxEngine.Window,System.String,System.String,System.String@)">
            <summary>
            Displays a standard dialog box that prompts the user to select a folder.
            </summary>
            <param name="parentWindow">The parent window.</param>
            <param name="initialDirectory">The initial directory.</param>
            <param name="title">The dialog title.</param>
            <param name="path">The output path.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.FileSystem.ShowFileExplorer(System.String)">
            <summary>
            Opens a standard file explorer application and navigates to the given directory.
            </summary>
            <param name="path">The path.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.Platform">
            <summary>
            Runtime platform service.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.IsInMainThread">
            <summary>
            Checks if current execution in on the main thread.
            </summary>
            <returns>True if running on the main thread, otherwise false.</returns>
        </member>
        <member name="P:FlaxEngine.Platform.CustomDpiScale">
            <summary>
            The custom screen DPI scale factor to apply globally. Can be used to adjust the User Interface scale (resolution).
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.PlatformType">
            <summary>
            Returns the current runtime platform type. It's compile-time constant.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.Is64BitApp">
            <summary>
            Returns true if is running 64 bit application (otherwise 32 bit). It's compile-time constant.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.Is64BitPlatform">
            <summary>
            Returns true if running on 64-bit computer
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.IsEditor">
            <summary>
            Returns true if the game is running in the Flax Editor; false if run from any deployment target. Use this property to perform Editor-related actions.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.CPUInfo">
            <summary>
            Gets the CPU information.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.CacheLineSize">
            <summary>
            Gets the CPU cache line size.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.MemoryStats">
            <summary>
            Gets the current memory stats.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.ProcessMemoryStats">
            <summary>
            Gets the process current memory stats.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.CurrentProcessId">
            <summary>
            Gets the current process unique identifier.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.CurrentThreadID">
            <summary>
            Gets the current thread unique identifier.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.TimeSeconds">
            <summary>
            Gets the current time in seconds.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.TimeCycles">
            <summary>
            Gets the current time as CPU cycles counter.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.ClockFrequency">
            <summary>
            Gets the system clock frequency.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.Dpi">
            <summary>
            Gets the screen DPI setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.DpiScale">
            <summary>
            Gets the screen DPI setting scale factor (1 is default). Includes custom DPI scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.NetworkConnectionType">
            <summary>
            Gets the current network connection type.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.UserLocaleName">
            <summary>
            Gets the current  locale culture (eg. "pl-PL" or "en-US").
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.ComputerName">
            <summary>
            Gets the computer machine name.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.UserName">
            <summary>
            Gets the user name.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.HasFocus">
            <summary>
            Returns true if app has user focus.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.DesktopSize">
            <summary>
            Gets size of the primary desktop.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.VirtualDesktopBounds">
            <summary>
            Gets virtual bounds of the desktop made of all the monitors outputs attached.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.VirtualDesktopSize">
            <summary>
            Gets virtual size of the desktop made of all the monitors outputs attached.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.MainDirectory">
            <summary>
            Gets full path of the main engine directory.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.ExecutableFilePath">
            <summary>
            Gets full path of the main engine executable file.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.UniqueDeviceId">
            <summary>
            Gets the (almost) unique ID of the current user device.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.WorkingDirectory">
            <summary>
            Gets the current working directory of the process.
            </summary>
        </member>
        <member name="M:FlaxEngine.Platform.Fatal(System.String)">
            <summary>
            Shows the fatal error message to the user.
            </summary>
            <param name="msg">The message content.</param>
        </member>
        <member name="M:FlaxEngine.Platform.Error(System.String)">
            <summary>
            Shows the error message to the user.
            </summary>
            <param name="msg">The message content.</param>
        </member>
        <member name="M:FlaxEngine.Platform.Warning(System.String)">
            <summary>
            Shows the warning message to the user.
            </summary>
            <param name="msg">The message content.</param>
        </member>
        <member name="M:FlaxEngine.Platform.Info(System.String)">
            <summary>
            Shows the information message to the user.
            </summary>
            <param name="msg">The message content.</param>
        </member>
        <member name="M:FlaxEngine.Platform.CanOpenUrl(System.String)">
            <summary>
            Returns a value indicating whether can open a given URL in a web browser.
            </summary>
            <param name="url">The URI to assign to web browser.</param>
            <returns>True if can open URL, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Platform.OpenUrl(System.String)">
            <summary>
            Launches a web browser and opens a given URL.
            </summary>
            <param name="url">The URI to assign to web browser.</param>
        </member>
        <member name="M:FlaxEngine.Platform.GetMonitorBounds(FlaxEngine.Vector2)">
            <summary>
            Gets the origin position and size of the monitor at the given screen-space location.
            </summary>
            <param name="screenPos">The screen position (in pixels).</param>
            <returns>The monitor bounds.</returns>
        </member>
        <member name="M:FlaxEngine.Platform.StartProcess(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Starts a new process.
            </summary>
            <param name="filename">The path to the file.</param>
            <param name="args">Custom arguments for command line</param>
            <param name="workingDir">The custom name of the working directory</param>
            <param name="hiddenWindow">True if start process with hidden window</param>
            <param name="waitForEnd">True if wait for process competition</param>
            <returns>Retrieves the termination status of the specified process. Valid only if processed ended.</returns>
        </member>
        <member name="M:FlaxEngine.Platform.RunProcess(System.String,System.String,System.Boolean)">
            <summary>
            Starts a new process. Waits for it's end and captures its output.
            </summary>
            <param name="cmdLine">Command line to execute</param>
            <param name="workingDir">The custom path of the working directory.</param>
            <param name="hiddenWindow">True if start process with hidden window.</param>
            <returns>Retrieves the termination status of the specified process. Valid only if processed ended.</returns>
        </member>
        <member name="M:FlaxEngine.Platform.RunProcess(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Starts a new process. Waits for it's end and captures its output.
            </summary>
            <param name="cmdLine">Command line to execute</param>
            <param name="workingDir">The custom path of the working directory.</param>
            <param name="environment">The process environment variables. If null the current process environment is used.</param>
            <param name="hiddenWindow">True if start process with hidden window.</param>
            <returns>Retrieves the termination status of the specified process. Valid only if processed ended.</returns>
        </member>
        <member name="M:FlaxEngine.Platform.CreateWindow(FlaxEngine.CreateWindowSettings@)">
            <summary>
            Creates the window.
            </summary>
            <param name="settings">The window settings.</param>
            <returns>The created native window object or null if failed.</returns>
        </member>
        <member name="T:FlaxEngine.NetworkConnectionType">
            <summary>
            Network connection types for device.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.None">
            <summary>
            No connection.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.Unknown">
            <summary>
            The unknown connection type.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.AirplaneMode">
            <summary>
            The airplane mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.Cell">
            <summary>
            The cell connection.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.WiFi">
            <summary>
            The WiFi connection.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.Bluetooth">
            <summary>
            The Bluetooth connection.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.Ethernet">
            <summary>
            The Ethernet cable connection (LAN).
            </summary>
        </member>
        <member name="T:FlaxEngine.ClosingReason">
            <summary>
            Window closing reasons.
            </summary>
        </member>
        <member name="F:FlaxEngine.ClosingReason.Unknown">
            <summary>
            The unknown.
            </summary>
        </member>
        <member name="F:FlaxEngine.ClosingReason.User">
            <summary>
            The user.
            </summary>
        </member>
        <member name="F:FlaxEngine.ClosingReason.EngineExit">
            <summary>
            The engine exit.
            </summary>
        </member>
        <member name="F:FlaxEngine.ClosingReason.CloseEvent">
            <summary>
            The close event.
            </summary>
        </member>
        <member name="T:FlaxEngine.CursorType">
            <summary>
            Types of default cursors.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Default">
            <summary>
            The default.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Cross">
            <summary>
            The cross.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Hand">
            <summary>
            The hand.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Help">
            <summary>
            The help icon
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.IBeam">
            <summary>
            The I beam.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.No">
            <summary>
            The blocking image.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Wait">
            <summary>
            The wait.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeAll">
            <summary>
            The size all sides.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeNESW">
            <summary>
            The size NE-SW.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeNS">
            <summary>
            The size NS.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeNWSE">
            <summary>
            The size NW-SE.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeWE">
            <summary>
            The size WE.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Hidden">
            <summary>
            The cursor is hidden.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.MAX">
            <summary>
            The count of items in the CursorType enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.DragDropEffect">
            <summary>
            Data drag and drop effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.DragDropEffect.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.DragDropEffect.Copy">
            <summary>
            The copy.
            </summary>
        </member>
        <member name="F:FlaxEngine.DragDropEffect.Move">
            <summary>
            The move.
            </summary>
        </member>
        <member name="F:FlaxEngine.DragDropEffect.Link">
            <summary>
            The link.
            </summary>
        </member>
        <member name="T:FlaxEngine.WindowHitCodes">
            <summary>
            Window hit test codes. Note: they are 1:1 mapping for Win32 values.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Transparent">
            <summary>
            The transparent area.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.NoWhere">
            <summary>
            The no hit.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Client">
            <summary>
            The client area.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Caption">
            <summary>
            The caption area.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.SystemMenu">
            <summary>
            The system menu.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.GrowBox">
            <summary>
            The grow box
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Menu">
            <summary>
            The menu.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.HScroll">
            <summary>
            The horizontal scroll.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.VScroll">
            <summary>
            The vertical scroll.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.MinButton">
            <summary>
            The minimize button.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.MaxButton">
            <summary>
            The maximize button.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Left">
            <summary>
            The left side;
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Right">
            <summary>
            The right side.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Top">
            <summary>
            The top side.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.TopLeft">
            <summary>
            The top left corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.TopRight">
            <summary>
            The top right corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Bottom">
            <summary>
            The bottom side.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.BottomLeft">
            <summary>
            The bottom left corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.BottomRight">
            <summary>
            The bottom right corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Border">
            <summary>
            The border.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Object">
            <summary>
            The object.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Close">
            <summary>
            The close button.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Help">
            <summary>
            The help button.
            </summary>
        </member>
        <member name="T:FlaxEngine.Window">
            <summary>
            Native platform window object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsFullscreen">
            <summary>
            Gets or sets a value that indicates whether a window is in a fullscreen mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsWindowed">
            <summary>
            Gets a value that indicates whether a window is not in a fullscreen mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsVisible">
            <summary>
            Gets or sets a value that indicates whether a window is visible (hidden or shown).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsMinimized">
            <summary>
            Gets a value that indicates whether a window is minimized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsMaximized">
            <summary>
            Gets a value that indicates whether a window is maximized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.NativePtr">
            <summary>
            Gets the native window handle.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsClosed">
            <summary>
            Checks if window is closed.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsForegroundWindow">
            <summary>
            Checks if window is foreground (the window with which the user is currently working).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.ClientBounds">
            <summary>
            Gets or sets the client bounds of the window (client area not including border).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Position">
            <summary>
            Gets or sets the window position (in screen coordinates).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.ClientPosition">
            <summary>
            Gets or sets the client position of the window (client area not including border).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Size">
            <summary>
            Gets the window size (including border).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.ClientSize">
            <summary>
            Gets or sets the size of the client area of the window (not including border).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Title">
            <summary>
            Gets or sets the window title.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Opacity">
            <summary>
            Gets or sets window opacity value (valid only for windows created with SupportsTransparency flag). Opacity values are normalized to range [0;1].
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsFocused">
            <summary>
            Determines whether this window is focused.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.TrackingMouseOffset">
            <summary>
            Gets the mouse tracking offset.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Cursor">
            <summary>
            Gets or sets the mouse cursor.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.RenderingEnabled">
            <summary>
            Gets or sets the value indicating whenever rendering to this window enabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.InputText">
            <summary>
            Gets the text entered during the current frame (Unicode).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.MousePosition">
            <summary>
            Gets or sets the mouse position in window coordinates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.MousePositionDelta">
            <summary>
            Gets the mouse position change during the last frame.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.MouseScrollDelta">
            <summary>
            Gets the mouse wheel change during the last frame.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Show">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Minimize">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Maximize">
            <summary>
            Maximizes the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Restore">
            <summary>
            Restores the window state before minimizing or maximizing.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Close(FlaxEngine.ClosingReason)">
            <summary>
            Closes the window.
            </summary>
            <param name="reason">The closing reason.</param>
        </member>
        <member name="M:FlaxEngine.Window.ScreenToClient(FlaxEngine.Vector2)">
            <summary>
            Converts screen space location into window space coordinates.
            </summary>
            <param name="screenPos">The screen position.</param>
            <returns>The client space position.</returns>
        </member>
        <member name="M:FlaxEngine.Window.ClientToScreen(FlaxEngine.Vector2)">
            <summary>
            Converts window space location into screen space coordinates.
            </summary>
            <param name="clientPos">The client position.</param>
            <returns>The screen space position.</returns>
        </member>
        <member name="M:FlaxEngine.Window.Focus">
            <summary>
            Focuses this window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.BringToFront(System.Boolean)">
            <summary>
            Brings window to the front of the Z order.
            </summary>
            <param name="force">True if move to the front by force, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Window.FlashWindow">
            <summary>
            Flashes the window to bring use attention.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.DoDragDrop(System.String)">
            <summary>
            Starts drag and drop operation
            </summary>
            <param name="data">The data.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Window.StartTrackingMouse(System.Boolean)">
            <summary>
            Starts the mouse tracking.
            </summary>
            <param name="useMouseScreenOffset">If set to <c>true</c> will use mouse screen offset.</param>
        </member>
        <member name="M:FlaxEngine.Window.EndTrackingMouse">
            <summary>
            Ends the mouse tracking.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.GetKey(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets the key state (true if key is being pressed during this frame).
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True while the user holds down the key identified by id</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetKeyDown(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets the key 'down' state (true if key was pressed in this frame).
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True during the frame the user starts pressing down the key</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetKeyUp(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets the key 'up' state (true if key was released in this frame).
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True during the frame the user releases the key</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetMouseButton(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button state.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True while the user holds down the button</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button down state.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True during the frame the user starts pressing down the button</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button up state.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True during the frame the user releases the button</returns>
        </member>
        <member name="T:FlaxEngine.Window.ClosingDelegate">
            <summary>
            Window closing delegate.
            </summary>
            <param name="reason">The closing reason.</param>
            <param name="cancel">If set to <c>true</c> operation will be cancelled, otherwise window will be closed.</param>
        </member>
        <member name="T:FlaxEngine.Window.HitTestDelegate">
            <summary>
            Perform window hit test delegate.
            </summary>
            <param name="mouse">The mouse position. The coordinate is relative to the upper-left corner of the screen. Use <see cref="M:FlaxEngine.Window.ScreenToClient(FlaxEngine.Vector2)"/> to convert position into client space coordinates.</param>
            <returns>Hit result.</returns>
        </member>
        <member name="T:FlaxEngine.Window.MouseButtonDelegate">
            <summary>
            Perform mouse buttons action.
            </summary>
            <param name="mouse">The mouse position.</param>
            <param name="button">The mouse buttons state.</param>
            <param name="handled">The flag that indicated that event has been handled by the custom code and should not be passed further. By default it is set to false.</param>
        </member>
        <member name="T:FlaxEngine.Window.MouseMoveDelegate">
            <summary>
            Perform mouse move action.
            </summary>
            <param name="mouse">The mouse position.</param>
        </member>
        <member name="T:FlaxEngine.Window.MouseWheelDelegate">
            <summary>
            Perform mouse wheel action.
            </summary>
            <param name="mouse">The mouse position.</param>
            <param name="delta">The mouse wheel move delta (can be positive or negative; normalized to [-1;1] range).</param>
            <param name="handled">The flag that indicated that event has been handled by the custom code and should not be passed further. By default it is set to false.</param>
        </member>
        <member name="T:FlaxEngine.Window.CharDelegate">
            <summary>
            Perform input character action.
            </summary>
            <param name="c">The input character.</param>
        </member>
        <member name="T:FlaxEngine.Window.KeyboardDelegate">
            <summary>
            Perform keyboard action.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="E:FlaxEngine.Window.OnCharInput">
            <summary>
            Event fired on character input.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.KeyDown">
            <summary>
            Event fired on key pressed.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.KeyUp">
            <summary>
            Event fired on key released.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseDown">
            <summary>
            Event fired when mouse goes down.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseUp">
            <summary>
            Event fired when mouse goes up.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseDoubleClick">
            <summary>
            Event fired when mouse double clicks.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseWheel">
            <summary>
            Event fired when mouse wheel is scrolling.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseMove">
            <summary>
            Event fired when mouse moves
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseLeave">
            <summary>
            Event fired when mouse leaves window.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.GotFocus">
            <summary>
            Event fired when window gets focus.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.LostFocus">
            <summary>
            Event fired when window lost focus.
            </summary>
        </member>
        <member name="F:FlaxEngine.Window.HitTest">
            <summary>
            Event fired when window performs hit test, parameter is a mouse position
            </summary>
        </member>
        <member name="F:FlaxEngine.Window.LeftButtonHit">
            <summary>
            Event fired when left mouse button goes down (hit test performed etc.).
            Returns true if event has been processed and further actions should be canceled, otherwise false.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.Closing">
            <summary>
            Event fired when windows wants to be closed. Should return true if suspend window closing, otherwise returns false
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.Closed">
            <summary>
            Event fired when gets closed and deleted, all references to the window object should be removed at this point.
            </summary>
        </member>
        <member name="F:FlaxEngine.Window.GUI">
            <summary>
            The window GUI root object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.DoDragDrop(FlaxEngine.GUI.DragData)">
            <summary>
            Starts the drag and drop operation.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:FlaxEngine.CPUInfo">
            <summary>
            Contains information about CPU (Central Processing Unit).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.ProcessorPackageCount">
            <summary>
            The number of physical processor packages.
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.ProcessorCoreCount">
            <summary>
            The number of processor cores (physical).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.LogicalProcessorCount">
            <summary>
            The number of logical processors (including hyper-threading).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.L1CacheSize">
            <summary>
            The size of processor L1 caches (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.L2CacheSize">
            <summary>
            The size of processor L2 caches (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.L3CacheSize">
            <summary>
            The size of processor L3 caches (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.PageSize">
            <summary>
            The CPU memory page size (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.ClockSpeed">
            <summary>
            The CPU clock speed (in Hz).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.CacheLineSize">
            <summary>
            The CPU cache line size (in bytes).
            </summary>
        </member>
        <member name="T:FlaxEngine.CreateWindowSettings">
            <summary>
            Settings for new window.
            </summary>
        </member>
        <member name="P:FlaxEngine.CreateWindowSettings.Default">
            <summary>
            Gets the default settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Parent">
            <summary>
            The native parent window pointer.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Title">
            <summary>
            The title.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Position">
            <summary>
            The custom start position.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Size">
            <summary>
            The client size.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.MinimumSize">
            <summary>
            The minimum size.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.MaximumSize">
            <summary>
            The maximum size.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.StartPosition">
            <summary>
            The start position mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Fullscreen">
            <summary>
            True if show window fullscreen on show.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.HasBorder">
            <summary>
            Enable/disable window border.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.SupportsTransparency">
            <summary>
            Enable/disable window transparency support. Required to change window opacity property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.ShowInTaskbar">
            <summary>
            True if show window on taskbar, otherwise it will be hidden.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.ActivateWhenFirstShown">
            <summary>
            Auto activate window after show.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.AllowInput">
            <summary>
            Allow window to capture input.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.AllowMinimize">
            <summary>
            Allow window minimize action.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.AllowMaximize">
            <summary>
            Allow window maximize action.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.AllowDragAndDrop">
            <summary>
            Enable/disable drag and drop actions over the window.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.IsTopmost">
            <summary>
            True if window topmost.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.IsRegularWindow">
            <summary>
            True if it's a regular window.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.HasSizingFrame">
            <summary>
            Enable/disable window sizing frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.ShowAfterFirstPaint">
            <summary>
            Enable/disable window auto-show after the first paint.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Data">
            <summary>
            The custom data (platform dependant).
            </summary>
        </member>
        <member name="T:FlaxEngine.WindowStartPosition">
            <summary>
            Specifies the initial position of a window.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowStartPosition.CenterParent">
            <summary>
            The window is centered within the bounds of its parent window or center screen if has no parent window specified.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowStartPosition.CenterScreen">
            <summary>
            The windows is centered on the current display, and has the dimensions specified in the windows's size.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowStartPosition.Manual">
            <summary>
            The position of the form is determined by the Position property.
            </summary>
        </member>
        <member name="T:FlaxEngine.PlatformType">
            <summary>
            The platform the game is running.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.Windows">
            <summary>
            Running on Windows.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.XboxOne">
            <summary>
            Running on Xbox One.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.UWP">
            <summary>
            Running Windows Store App (Universal Windows Platform).
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.Linux">
            <summary>
            Running on Linux system.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.PS4">
            <summary>
            Running on PlayStation 4.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.XboxScarlett">
            <summary>
            Running on Xbox Series X.
            </summary>
        </member>
        <member name="T:FlaxEngine.ArchitectureType">
            <summary>
            The platform architecture types.
            </summary>
        </member>
        <member name="F:FlaxEngine.ArchitectureType.AnyCPU">
            <summary>
            Anything or not important.
            </summary>
        </member>
        <member name="F:FlaxEngine.ArchitectureType.x86">
            <summary>
            32-bit.
            </summary>
        </member>
        <member name="F:FlaxEngine.ArchitectureType.x64">
            <summary>
            64-bit.
            </summary>
        </member>
        <member name="F:FlaxEngine.ArchitectureType.ARM">
            <summary>
            The ARM 32-bit.
            </summary>
        </member>
        <member name="F:FlaxEngine.ArchitectureType.ARM64">
            <summary>
            The ARM 64-bit.
            </summary>
        </member>
        <member name="T:FlaxEngine.MemoryStats">
            <summary>
            Contains information about current memory usage and capacity.
            </summary>
        </member>
        <member name="F:FlaxEngine.MemoryStats.TotalPhysicalMemory">
            <summary>
            Total amount of physical memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.MemoryStats.UsedPhysicalMemory">
            <summary>
            Amount of used physical memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.MemoryStats.TotalVirtualMemory">
            <summary>
            Total amount of virtual memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.MemoryStats.UsedVirtualMemory">
            <summary>
            Amount of used virtual memory in bytes.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProcessMemoryStats">
            <summary>
            Contains information about current memory usage by the process.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProcessMemoryStats.UsedPhysicalMemory">
            <summary>
            Amount of used physical memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProcessMemoryStats.UsedVirtualMemory">
            <summary>
            Amount of used virtual memory in bytes.
            </summary>
        </member>
        <member name="T:FlaxEngine.DialogResult">
            <summary>
            Specifies identifiers to indicate the return value of a dialog box.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Abort">
            <summary>
            The abort.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Cancel">
            <summary>
            The cancel.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Ignore">
            <summary>
            The ignore.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.No">
            <summary>
            The no.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.OK">
            <summary>
            The ok.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Retry">
            <summary>
            The retry.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Yes">
            <summary>
            The yes.
            </summary>
        </member>
        <member name="T:FlaxEngine.MessageBoxIcon">
            <summary>
            Specifies constants defining which information to display.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Asterisk">
            <summary>
            Asterisk
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Exclamation">
            <summary>
            Exclamation
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Hand">
            <summary>
            Hand
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Information">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Question">
            <summary>
            Question
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="T:FlaxEngine.MessageBoxButtons">
            <summary>
            Specifies constants defining which buttons to display on a Message Box.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxButtons.AbortRetryIgnore">
            <summary>
            Abort, Retry, Ignore
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxButtons.OK">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxButtons.OKCancel">
            <summary>
            OK, Cancel
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxButtons.RetryCancel">
            <summary>
            Retry, Cancel
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxButtons.YesNo">
            <summary>
            Yes, No
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxButtons.YesNoCancel">
            <summary>
            Yes, No, Cancel
            </summary>
        </member>
        <member name="T:FlaxEngine.MessageBox">
            <summary>
            Message dialogs utility (native platform).
            </summary>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(System.String)">
            <summary>
            Displays a message box with specified text.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(System.String,System.String)">
            <summary>
            Displays a message box with specified text and caption.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(System.String,System.String,FlaxEngine.MessageBoxButtons)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(System.String,System.String,FlaxEngine.MessageBoxButtons,FlaxEngine.MessageBoxIcon)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(FlaxEngine.Window,System.String)">
            <summary>
            Displays a message box with specified text.
            </summary>
            <param name="parent">The parent window or null if not used.</param>
            <param name="text">The text to display in the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(FlaxEngine.Window,System.String,System.String)">
            <summary>
            Displays a message box with specified text and caption.
            </summary>
            <param name="parent">The parent window or null if not used.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(FlaxEngine.Window,System.String,System.String,FlaxEngine.MessageBoxButtons)">
            <summary>
            Displays a message box with specified text, caption and buttons.
            </summary>
            <param name="parent">The parent window or null if not used.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(FlaxEngine.Window,System.String,System.String,FlaxEngine.MessageBoxButtons,FlaxEngine.MessageBoxIcon)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon.
            </summary>
            <param name="parent">The parent window or null if not used.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="T:FlaxEngine.ProfilerCPU">
            <summary>
            Provides CPU performance measuring methods.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilerCPU.Event">
            <summary>
            Represents single CPU profiling event data.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerCPU.Event.Start">
            <summary>
            The start time (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerCPU.Event.End">
            <summary>
            The end time (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerCPU.Event.Depth">
            <summary>
            The event depth. Value 0 is used for the root event.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerCPU.Event.NativeMemoryAllocation">
            <summary>
            The native dynamic memory allocation size during this event (excluding the child events). Given value is in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerCPU.Event.ManagedMemoryAllocation">
            <summary>
            The managed memory allocation size during this event (excluding the child events). Given value is in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerCPU.Event.Name">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilerGPU">
            <summary>
            Provides GPU performance measuring methods.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilerGPU.Event">
            <summary>
            Represents single CPU profiling event data.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerGPU.Event.Name">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerGPU.Event.Timer">
            <summary>
            The timer query used to get the exact event time on a GPU. Assigned and managed by the internal profiler layer.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerGPU.Event.Stats">
            <summary>
            The rendering stats for this event. When event is active it holds the stats on event begin.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerGPU.Event.Time">
            <summary>
            The event execution time on a GPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerGPU.Event.Depth">
            <summary>
            The event depth. Value 0 is used for the root events.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilingTools">
            <summary>
            Profiler tools for development. Allows to gather profiling data and events from the engine.
            </summary>
        </member>
        <member name="P:FlaxEngine.ProfilingTools.Stats">
            <summary>
            The current collected main stats by the profiler from the local session. Updated every frame.
            </summary>
        </member>
        <member name="P:FlaxEngine.ProfilingTools.EventsCPU">
            <summary>
            The CPU threads profiler events.
            </summary>
        </member>
        <member name="P:FlaxEngine.ProfilingTools.EventsGPU">
            <summary>
            The GPU rendering profiler events.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilingTools.MemoryStatsGPU">
            <summary>
            The GPU memory stats.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MemoryStatsGPU.Total">
            <summary>
            The total amount of memory in bytes (as reported by the driver).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MemoryStatsGPU.Used">
            <summary>
            The used by the game amount of memory in bytes (estimated).
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilingTools.MainStats">
            <summary>
            Engine profiling data header. Contains main info and stats.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.ProcessMemory">
            <summary>
            The process memory stats.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.MemoryCPU">
            <summary>
            The CPU memory stats.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.MemoryGPU">
            <summary>
            The GPU memory stats.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.FPS">
            <summary>
            The frames per second (fps counter).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.UpdateTimeMs">
            <summary>
            The update time on CPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.PhysicsTimeMs">
            <summary>
            The fixed update time on CPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.DrawCPUTimeMs">
            <summary>
            The draw time on CPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.DrawGPUTimeMs">
            <summary>
            The draw time on GPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.DrawStats">
            <summary>
            The last rendered frame stats.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilingTools.ThreadStats">
            <summary>
            The CPU thread stats.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.ThreadStats.Name">
            <summary>
            The thread name.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.ThreadStats.Events">
            <summary>
            The events list.
            </summary>
        </member>
        <member name="T:FlaxEngine.RenderStatsData">
            <summary>
            Object that stores various render statistics.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderStatsData.DrawCalls">
            <summary>
            The draw calls count.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderStatsData.DispatchCalls">
            <summary>
            The compute shader dispatch calls count.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderStatsData.Vertices">
            <summary>
            The vertices drawn count.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderStatsData.Triangles">
            <summary>
            The triangles drawn count.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderStatsData.PipelineStateChanges">
            <summary>
            The pipeline state changes count.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextRange">
            <summary>
            The text range.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextRange.StartIndex">
            <summary>
            The start index.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextRange.EndIndex">
            <summary>
            The end index.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRange.Length">
            <summary>
            Gets the range length.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TextRange"/> struct.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="P:FlaxEngine.TextRange.IsEmpty">
            <summary>
            Gets a value indicating whether range is empty.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextRange.Contains(System.Int32)">
            <summary>
            Determines whether this range contains the character index.
            </summary>
            <param name="index">The index.</param>
            <returns><c>true</c> if range contains the specified character index; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.TextRange.Intersect(FlaxEngine.TextRange@)">
            <summary>
            Determines whether this range intersects with the other range.
            </summary>
            <param name="other">The other text range.</param>
            <returns><c>true</c> if range intersects with the specified range index;, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.TextRange.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.FontLineCache">
            <summary>
            The font line info generated during text processing.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontLineCache.Location">
            <summary>
            The root position of the line (upper left corner).
            </summary>
        </member>
        <member name="F:FlaxEngine.FontLineCache.Size">
            <summary>
            The line bounds (width and height).
            </summary>
        </member>
        <member name="F:FlaxEngine.FontLineCache.FirstCharIndex">
            <summary>
            The first character index (from the input text).
            </summary>
        </member>
        <member name="F:FlaxEngine.FontLineCache.LastCharIndex">
            <summary>
            The last character index (from the input text).
            </summary>
        </member>
        <member name="T:FlaxEngine.FontCharacterEntry">
            <summary>
            The cached font character entry (read for rendering and further processing).
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.Character">
            <summary>
            The character represented by this entry.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.IsValid">
            <summary>
            True if entry is valid, otherwise false.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.TextureIndex">
            <summary>
            The index to a specific texture in the font cache.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.OffsetX">
            <summary>
            The left bearing expressed in integer pixels.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.OffsetY">
            <summary>
            The top bearing expressed in integer pixels.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.AdvanceX">
            <summary>
            The amount to advance in X before drawing the next character in a string.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.BearingY">
            <summary>
            The distance from baseline to glyph top most point.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.Height">
            <summary>
            The height in pixels of the glyph.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.UV">
            <summary>
            The start location of the character in the texture (in texture coordinates space).
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.UVSize">
            <summary>
            The size the character in the texture (in texture coordinates space).
            </summary>
        </member>
        <member name="T:FlaxEngine.Font">
            <summary>
            Represents font object that can be using during text rendering (it uses Font Asset but with pre-cached data for chosen font properties).
            </summary>
        </member>
        <member name="M:FlaxEngine.Font.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Font"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Asset">
            <summary>
            Gets parent font asset that contains font family used by this font.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Size">
            <summary>
            Gets font size.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Height">
            <summary>
            Gets characters height.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Descender">
            <summary>
            Gets the largest vertical distance below the baseline for any character in the font.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.LineGap">
            <summary>
            Gets the line gap property.
            </summary>
        </member>
        <member name="M:FlaxEngine.Font.GetKerning(System.Char,System.Char)">
            <summary>
            Gets the kerning amount for a pair of characters.
            </summary>
            <param name="first">The first character in the pair.</param>
            <param name="second">The second character in the pair.</param>
            <returns>The kerning amount or 0 if no kerning.</returns>
        </member>
        <member name="M:FlaxEngine.Font.CacheText(System.String)">
            <summary>
            Caches the given text to prepared for the rendering.
            </summary>
            <param name="text">The text witch characters to cache.</param>
        </member>
        <member name="M:FlaxEngine.Font.Invalidate">
            <summary>
            Invalidates all cached dynamic font atlases using this font. Can be used to reload font characters after changing font asset options.
            </summary>
        </member>
        <member name="M:FlaxEngine.Font.ProcessText(System.String,FlaxEngine.TextLayoutOptions@)">
            <summary>
            Processes text to get cached lines for rendering.
            </summary>
            <param name="text">The input text.</param>
            <param name="layout">The layout properties.</param>
            <returns>The output lines list.</returns>
        </member>
        <member name="M:FlaxEngine.Font.ProcessText(System.String)">
            <summary>
            Processes text to get cached lines for rendering.
            </summary>
            <param name="text">The input text.</param>
            <returns>The output lines list.</returns>
        </member>
        <member name="M:FlaxEngine.Font.MeasureText(System.String,FlaxEngine.TextLayoutOptions@)">
            <summary>
            Measures minimum size of the rectangle that will be needed to draw given text.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="layout">The layout properties.</param>
            <returns>The minimum size for that text and fot to render properly.</returns>
        </member>
        <member name="M:FlaxEngine.Font.MeasureText(System.String)">
            <summary>
            Measures minimum size of the rectangle that will be needed to draw given text
            </summary>.
            <param name="text">The input text to test.</param>
            <returns>The minimum size for that text and fot to render properly.</returns>
        </member>
        <member name="M:FlaxEngine.Font.HitTestText(System.String,FlaxEngine.TextRange@,FlaxEngine.Vector2,FlaxEngine.TextLayoutOptions@)">
            <summary>
            Calculates hit character index at given location.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="textRange">The input text range (substring range of the input text parameter).</param>
            <param name="location">The input location to test.</param>
            <param name="layout">The text layout properties.</param>
            <returns>The selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
        </member>
        <member name="M:FlaxEngine.Font.HitTestText(System.String,FlaxEngine.Vector2,FlaxEngine.TextLayoutOptions@)">
            <summary>
            Calculates hit character index at given location.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="location">The input location to test.</param>
            <param name="layout">The text layout properties.</param>
            <returns>The selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
        </member>
        <member name="M:FlaxEngine.Font.HitTestText(System.String,FlaxEngine.Vector2)">
            <summary>
            Calculates hit character index at given location.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="location">The input location to test.</param>
            <returns>The selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
        </member>
        <member name="M:FlaxEngine.Font.HitTestText(System.String,FlaxEngine.TextRange@,FlaxEngine.Vector2)">
            <summary>
            Calculates hit character index at given location.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="textRange">The input text range (substring range of the input text parameter).</param>
            <param name="location">The input location to test.</param>
            <returns>The selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
        </member>
        <member name="M:FlaxEngine.Font.GetCharPosition(System.String,System.Int32,FlaxEngine.TextLayoutOptions@)">
            <summary>
            Calculates character position for given text and character index.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="index">The text position to get coordinates of.</param>
            <param name="layout">The text layout properties.</param>
            <returns>The character position (upper left corner which can be used for a caret position).</returns>
        </member>
        <member name="M:FlaxEngine.Font.GetCharPosition(System.String,FlaxEngine.TextRange@,System.Int32,FlaxEngine.TextLayoutOptions@)">
            <summary>
            Calculates character position for given text and character index.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="textRange">The input text range (substring range of the input text parameter).</param>
            <param name="index">The text position to get coordinates of.</param>
            <param name="layout">The text layout properties.</param>
            <returns>The character position (upper left corner which can be used for a caret position).</returns>
        </member>
        <member name="M:FlaxEngine.Font.GetCharPosition(System.String,System.Int32)">
            <summary>
            Calculates character position for given text and character index
            </summary>
            <param name="text">The input text to test.</param>
            <param name="index">The text position to get coordinates of.</param>
            <returns>The character position (upper left corner which can be used for a caret position).</returns>
        </member>
        <member name="M:FlaxEngine.Font.GetCharPosition(System.String,FlaxEngine.TextRange@,System.Int32)">
            <summary>
            Calculates character position for given text and character index
            </summary>
            <param name="text">The input text to test.</param>
            <param name="textRange">The input text range (substring range of the input text parameter).</param>
            <param name="index">The text position to get coordinates of.</param>
            <returns>The character position (upper left corner which can be used for a caret position).</returns>
        </member>
        <member name="T:FlaxEngine.FontOptions">
            <summary>
            The font asset options.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontOptions.Equals(FlaxEngine.FontOptions)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="other">The other object to compare.</param>
            <returns><c>true</c> if this object has the same value as <paramref name="other" />; otherwise, <c>false</c> </returns>
        </member>
        <member name="M:FlaxEngine.FontOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.FontOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.FontOptions.op_Equality(FlaxEngine.FontOptions,FlaxEngine.FontOptions)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FontOptions.op_Inequality(FlaxEngine.FontOptions,FlaxEngine.FontOptions)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,<c>false</c>.</returns>
        </member>
        <member name="F:FlaxEngine.FontOptions.Hinting">
            <summary>
            The hinting.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontOptions.Flags">
            <summary>
            The flags.
            </summary>
        </member>
        <member name="T:FlaxEngine.FontHinting">
            <summary>
            The font hinting used when rendering characters.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontHinting.Default">
            <summary>
            Use the default hinting specified in the font.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontHinting.Auto">
            <summary>
            Force the use of an automatic hinting algorithm (over the font's native hinter).
            </summary>
        </member>
        <member name="F:FlaxEngine.FontHinting.AutoLight">
            <summary>
            Force the use of an automatic light hinting algorithm, optimized for non-monochrome displays.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontHinting.Monochrome">
            <summary>
            Force the use of an automatic hinting algorithm optimized for monochrome displays.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontHinting.None">
            <summary>
            Do not use hinting. This generally generates 'blurrier' bitmap glyphs when the glyph are rendered in any of the anti-aliased modes.
            </summary>
        </member>
        <member name="T:FlaxEngine.FontFlags">
            <summary>
            The font flags used when rendering characters.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontFlags.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontFlags.AntiAliasing">
            <summary>
            Enables using anti-aliasing for font characters. Otherwise font will use monochrome data.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontFlags.Bold">
            <summary>
            Enables artificial embolden effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontFlags.Italic">
            <summary>
            Enables slant effect, emulating italic style.
            </summary>
        </member>
        <member name="T:FlaxEngine.FontAsset">
            <summary>
            Font asset contains glyph collection and cached data used to render text.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FontAsset"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.FontAsset.FamilyName">
            <summary>
            Gets the font family name.
            </summary>
        </member>
        <member name="P:FlaxEngine.FontAsset.StyleName">
            <summary>
            Gets the font style name.
            </summary>
        </member>
        <member name="P:FlaxEngine.FontAsset.Options">
            <summary>
            Gets or sets the font options.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontAsset.CreateFont(System.Int32)">
            <summary>
            Creates the font object of given characters size.
            </summary>
            <param name="size">The font characters size.</param>
            <returns>The created font object.</returns>
        </member>
        <member name="M:FlaxEngine.FontAsset.Save(System.String)">
            <summary>
            Saves this asset to the file. Supported only in Editor.
            </summary>
            <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate asset. Must be specified when saving virtual asset.</param>
            <returns>True if cannot save data, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.FontAsset.Invalidate">
            <summary>
            Invalidates all cached dynamic font atlases using this font. Can be used to reload font characters after changing font asset options.
            </summary>
        </member>
        <member name="T:FlaxEngine.FontReference">
            <summary>
            Font reference that defines the font asset and font size to use.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontReference.#ctor(FlaxEngine.FontAsset,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FontReference"/> struct.
            </summary>
            <param name="font">The font.</param>
            <param name="size">The font size.</param>
        </member>
        <member name="M:FlaxEngine.FontReference.#ctor(FlaxEngine.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FontReference"/> struct.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="P:FlaxEngine.FontReference.Font">
            <summary>
            The font asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.FontReference.Size">
            <summary>
            The size of the font characters.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontReference.GetFont">
            <summary>
            Gets the font object described by the structure.
            </summary>
            <returns>Th font or null if descriptor is invalid.</returns>
        </member>
        <member name="M:FlaxEngine.FontReference.Equals(FlaxEngine.FontReference@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.FontReference" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.FontReference" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.FontReference" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.FontReference.op_Equality(FlaxEngine.FontReference,FlaxEngine.FontReference)">
            <summary>
            Compares two font references.
            </summary>
            <param name="lhs">The left.</param>
            <param name="rhs">The right.</param>
            <returns>True if font references are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.FontReference.op_Inequality(FlaxEngine.FontReference,FlaxEngine.FontReference)">
            <summary>
            Compares two font references.
            </summary>
            <param name="lhs">The left.</param>
            <param name="rhs">The right.</param>
            <returns>True if font references are not equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.FontReference.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.FontReference.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.FontReference.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.FontTextureAtlas">
            <summary>
            Texture resource that contains an atlas of cached font glyphs.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontTextureAtlas.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FontTextureAtlas"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.Render2D">
            <summary>
            Rendering 2D shapes and text using Graphics Device.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.PushTransform(FlaxEngine.Matrix3x3)">
            <summary>
            Pushes transformation layer.
            </summary>
            <param name="transform">The transformation to apply.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PushClip(FlaxEngine.Rectangle)">
            <summary>
            Pushes clipping rectangle mask.
            </summary>
            <param name="clipRect">The axis aligned clipping mask rectangle.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.GPUTextureView,FlaxEngine.Rectangle)">
            <summary>
            Draws the render target.
            </summary>
            <param name="rt">The render target handle to draw.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.GPUTexture,FlaxEngine.Rectangle)">
            <summary>
            Draws the texture.
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.TextureBase,FlaxEngine.Rectangle)">
            <summary>
            Draws the texture.
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawSprite(FlaxEngine.SpriteHandle,FlaxEngine.Rectangle)">
            <summary>
            Draws a sprite.
            </summary>
            <param name="spriteHandle">The sprite to draw.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexturePoint(FlaxEngine.GPUTexture,FlaxEngine.Rectangle)">
            <summary>
            Draws the texture (uses point sampler).
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawSpritePoint(FlaxEngine.SpriteHandle,FlaxEngine.Rectangle)">
            <summary>
            Draws a sprite (uses point sampler).
            </summary>
            <param name="spriteHandle">The sprite to draw.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawMaterial(FlaxEngine.MaterialBase,FlaxEngine.Rectangle)">
            <summary>
            Draws the GUI material.
            </summary>
            <param name="material">The material to render. Must be a GUI material type.</param>
            <param name="rect">The target rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,System.String,FlaxEngine.Rectangle,FlaxEngine.Color,FlaxEngine.TextAlignment,FlaxEngine.TextAlignment,FlaxEngine.TextWrapping,System.Single,System.Single)">
            <summary>
            Draws a text.
            </summary>
            <param name="font">The font to use.</param>
            <param name="text">The text to render.</param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.</param>
            <param name="color">The text color.</param>
            <param name="horizontalAlignment">The horizontal alignment of the text in a layout rectangle.</param>
            <param name="verticalAlignment">The vertical alignment of the text in a layout rectangle.</param>
            <param name="textWrapping">Describes how wrap text inside a layout rectangle.</param>
            <param name="baseLinesGapScale">The scale for distance one baseline from another. Default is 1.</param>
            <param name="scale">The text drawing scale. Default is 1.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,FlaxEngine.MaterialBase,System.String,FlaxEngine.Rectangle,FlaxEngine.Color,FlaxEngine.TextAlignment,FlaxEngine.TextAlignment,FlaxEngine.TextWrapping,System.Single,System.Single)">
            <summary>
            Draws a text using a custom material shader. Given material must have GUI domain and a public parameter named Font (texture parameter used for a font atlas sampling).
            </summary>
            <param name="font">The font to use.</param>
            <param name="customMaterial">Custom material for font characters rendering. It must contain texture parameter named Font used to sample font texture.</param>
            <param name="text">The text to render.</param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.</param>
            <param name="color">The text color.</param>
            <param name="horizontalAlignment">The horizontal alignment of the text in a layout rectangle.</param>
            <param name="verticalAlignment">The vertical alignment of the text in a layout rectangle.</param>
            <param name="textWrapping">Describes how wrap text inside a layout rectangle.</param>
            <param name="baseLinesGapScale">The scale for distance one baseline from another. Default is 1.</param>
            <param name="scale">The text drawing scale. Default is 1.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.CallDrawing(FlaxEngine.IDrawable,FlaxEngine.GPUContext,FlaxEngine.GPUTexture)">
            <summary>
            Calls drawing GUI to the texture.
            </summary>
            <param name="drawableElement">The root container for Draw methods.</param>
            <param name="context">The GPU context to handle graphics commands.</param>
            <param name="output">The output render target.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.CallDrawing(FlaxEngine.IDrawable,FlaxEngine.GPUContext,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture,FlaxEngine.Matrix@)">
            <summary>
            Calls drawing GUI to the texture using custom View*Projection matrix.
            If depth buffer texture is provided there will be depth test performed during rendering.
            </summary>
            <param name="drawableElement">The root container for Draw methods.</param>
            <param name="context">The GPU context to handle graphics commands.</param>
            <param name="output">The output render target.</param>
            <param name="depthBuffer">The depth buffer render target. It's optional parameter but if provided must match output texture.</param>
            <param name="viewProjection">The View*Projection matrix used to transform all rendered vertices.</param>
        </member>
        <member name="P:FlaxEngine.Render2D.Features">
            <summary>
            The active rendering features flags.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.Begin(FlaxEngine.GPUContext,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <summary>
            Begins the rendering phrase.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="output">The output target.</param>
            <param name="depthBuffer">The depth buffer.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.Begin(FlaxEngine.GPUContext,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture,FlaxEngine.Matrix@)">
            <summary>
            Begins the rendering phrase.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="output">The output target.</param>
            <param name="depthBuffer">The depth buffer.</param>
            <param name="viewProjection">The View*Projection matrix. Allows to render GUI in 3D or with custom transformations.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.Begin(FlaxEngine.GPUContext,FlaxEngine.GPUTextureView,FlaxEngine.GPUTextureView,FlaxEngine.Viewport@)">
            <summary>
            Begins the rendering phrase.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="output">The output target.</param>
            <param name="depthBuffer">The depth buffer.</param>
            <param name="viewport">The output viewport.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.Begin(FlaxEngine.GPUContext,FlaxEngine.GPUTextureView,FlaxEngine.GPUTextureView,FlaxEngine.Viewport@,FlaxEngine.Matrix@)">
            <summary>
            Begins the rendering phrase.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="output">The output target.</param>
            <param name="depthBuffer">The depth buffer.</param>
            <param name="viewport">The output viewport.</param>
            <param name="viewProjection">The View*Projection matrix. Allows to render GUI in 3D or with custom transformations.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.End">
            <summary>
            Ends the rendering phrase.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.PushTransform(FlaxEngine.Matrix3x3@)">
            <summary>
            Pushes transformation layer.
            </summary>
            <param name="transform">The transformation to apply.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PopTransform">
            <summary>
            Pops transformation layer.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.PushClip(FlaxEngine.Rectangle@)">
            <summary>
            Pushes clipping rectangle mask.
            </summary>
            <param name="clipRect">The axis aligned clipping mask rectangle.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PopClip">
            <summary>
            Pops clipping rectangle mask.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,System.String,FlaxEngine.Color,FlaxEngine.Vector2,FlaxEngine.MaterialBase)">
            <summary>
            Draws a text.
            </summary>
            <param name="font">The font to use.</param>
            <param name="text">The text to render.</param>
            <param name="color">The text color.</param>
            <param name="location">The text location.</param>
            <param name="customMaterial">The custom material for font characters rendering. It must contain texture parameter named Font used to sample font texture.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,System.String,FlaxEngine.TextRange@,FlaxEngine.Color,FlaxEngine.Vector2,FlaxEngine.MaterialBase)">
            <summary>
            Draws a text.
            </summary>
            <param name="font">The font to use.</param>
            <param name="text">The text to render.</param>
            <param name="textRange">The input text range (substring range of the input text parameter).</param>
            <param name="color">The text color.</param>
            <param name="location">The text location.</param>
            <param name="customMaterial">The custom material for font characters rendering. It must contain texture parameter named Font used to sample font texture.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,System.String,FlaxEngine.Color,FlaxEngine.TextLayoutOptions@,FlaxEngine.MaterialBase)">
            <summary>
            Draws a text with formatting.
            </summary>
            <param name="font">The font to use.</param>
            <param name="text">The text to render.</param>
            <param name="color">The text color.</param>
            <param name="layout">The text layout properties.</param>
            <param name="customMaterial">The custom material for font characters rendering. It must contain texture parameter named Font used to sample font texture.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,System.String,FlaxEngine.TextRange@,FlaxEngine.Color,FlaxEngine.TextLayoutOptions@,FlaxEngine.MaterialBase)">
            <summary>
            Draws a text with formatting.
            </summary>
            <param name="font">The font to use.</param>
            <param name="text">The text to render.</param>
            <param name="textRange">The input text range (substring range of the input text parameter).</param>
            <param name="color">The text color.</param>
            <param name="layout">The text layout properties.</param>
            <param name="customMaterial">The custom material for font characters rendering. It must contain texture parameter named Font used to sample font texture.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.FillRectangle(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Fills a rectangle area.
            </summary>
            <param name="rect">The rectangle to fill.</param>
            <param name="color">The color to use.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.FillRectangle(FlaxEngine.Rectangle,FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Fills a rectangle area.
            </summary>
            <param name="rect">The rectangle to fill.</param>
            <param name="color1">The color to use for upper left vertex.</param>
            <param name="color2">The color to use for upper right vertex.</param>
            <param name="color3">The color to use for bottom right vertex.</param>
            <param name="color4">The color to use for bottom left vertex.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawRectangle(FlaxEngine.Rectangle,FlaxEngine.Color,System.Single)">
            <summary>
            Draws a rectangle borders.
            </summary>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to use.</param>
            <param name="thickness">The line thickness.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawRectangle(FlaxEngine.Rectangle,FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color,System.Single)">
            <summary>
            Draws a rectangle borders.
            </summary>
            <param name="rect">The rectangle to fill.</param>
            <param name="color1">The color to use for upper left vertex.</param>
            <param name="color2">The color to use for upper right vertex.</param>
            <param name="color3">The color to use for bottom right vertex.</param>
            <param name="color4">The color to use for bottom left vertex.</param>
            <param name="thickness">The line thickness.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.GPUTextureView,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the render target.
            </summary>
            <param name="rt">The render target handle to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.GPUTexture,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the texture.
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.TextureBase,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the texture.
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawSprite(FlaxEngine.SpriteHandle,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws a sprite.
            </summary>
            <param name="spriteHandle">The sprite to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexturePoint(FlaxEngine.GPUTexture,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the texture (uses point sampler).
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawSpritePoint(FlaxEngine.SpriteHandle,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws a sprite (uses point sampler).
            </summary>
            <param name="spriteHandle">The sprite to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawCustom(FlaxEngine.GPUTexture,FlaxEngine.Rectangle,FlaxEngine.GPUPipelineState,FlaxEngine.Color)">
            <summary>
            Performs custom rendering.
            </summary>
            <param name="t">The texture to use.</param>
            <param name="rect">The rectangle area to draw.</param>
            <param name="ps">The custom pipeline state to use (input must match default Render2D vertex shader and can use single texture).</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawLine(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Color,System.Single)">
            <summary>
            Draws a line.
            </summary>
            <param name="p1">The start point.</param>
            <param name="p2">The end point.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawLine(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Color,FlaxEngine.Color,System.Single)">
            <summary>
            Draws a line.
            </summary>
            <param name="p1">The start point.</param>
            <param name="p2">The end point.</param>
            <param name="color1">The line start color.</param>
            <param name="color2">The line end color.</param>
            <param name="thickness">The line thickness.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawBezier(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Color,System.Single)">
            <summary>
            Draws a Bezier curve.
            </summary>
            <param name="p1">The start point.</param>
            <param name="p2">The first control point.</param>
            <param name="p3">The second control point.</param>
            <param name="p4">The end point.</param>
            <param name="color">The line color</param>
            <param name="thickness">The line thickness.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawMaterial(FlaxEngine.MaterialBase,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the GUI material.
            </summary>
            <param name="material">The material to render. Must be a GUI material type.</param>
            <param name="rect">The target rectangle to draw.</param>
            <param name="color">The color to use.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawBlur(FlaxEngine.Rectangle,System.Single)">
            <summary>
            Draws the background blur.
            </summary>
            <param name="rect">The target rectangle to draw (blurs its background).</param>
            <param name="blurStrength">The blur strength defines how blurry the background is. Larger numbers increase blur, resulting in a larger runtime cost on the GPU.</param>
        </member>
        <member name="T:FlaxEngine.Render2D.RenderingFeatures">
            <summary>
            The rendering features and options flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.Render2D.RenderingFeatures.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.Render2D.RenderingFeatures.VertexSnapping">
            <summary>
            Enables automatic geometry vertices snapping to integer coordinates in screen space. Reduces aliasing and sampling artifacts. Might be disabled for 3D projection viewport or for complex UI transformations.
            </summary>
        </member>
        <member name="T:FlaxEngine.SpriteHandle">
            <summary>
            Handle to sprite atlas slot with a single sprite texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpriteHandle.Invalid">
            <summary>
            Invalid sprite handle.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpriteHandle.#ctor(FlaxEngine.SpriteAtlas,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Sprite"/> struct.
            </summary>
            <param name="atlas">The atlas.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:FlaxEngine.SpriteHandle.IsValid">
            <summary>
            Returns true if sprite is valid.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteHandle.Name">
            <summary>
            Gets or sets the sprite name.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteHandle.Location">
            <summary>
            Gets or sets the sprite location (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteHandle.Size">
            <summary>
            Gets or sets the sprite size (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteHandle.Area">
            <summary>
            Gets or sets the sprite area in atlas (in normalized atlas coordinates [0;1]).
            </summary>
        </member>
        <member name="F:FlaxEngine.SpriteHandle.Atlas">
            <summary>
            The parent atlas.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpriteHandle.Index">
            <summary>
            The atlas sprites array index.
            </summary>
        </member>
        <member name="T:FlaxEngine.Sprite">
            <summary>
            Contains information about single atlas slot with sprite texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.Sprite.Area">
            <summary>
            The normalized area of the sprite in the atlas (in range [0;1]).
            </summary>
        </member>
        <member name="F:FlaxEngine.Sprite.Name">
            <summary>
            The sprite name.
            </summary>
        </member>
        <member name="T:FlaxEngine.SpriteAtlas">
            <summary>
            Sprite atlas asset that contains collection of sprites combined into a single texture.
            </summary>
            <seealso cref="T:FlaxEngine.TextureBase" />
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SpriteAtlas"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteAtlas.Sprites">
            <summary>
            List with all tiles in the sprite atlas.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteAtlas.SpritesCount">
            <summary>
            Gets the sprites count.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.GetSprite(System.Int32)">
            <summary>
            Gets the sprite data.
            </summary>
            <param name="index">The index.</param>
            <returns>The sprite data.</returns>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.SetSprite(System.Int32,FlaxEngine.Sprite@)">
            <summary>
            Sets the sprite data.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The sprite data.</param>
            <returns>The sprite handle.</returns>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.FindSprite(System.String)">
            <summary>
            Finds the sprite by the name.
            </summary>
            <param name="name">The name.</param>
            <returns>The sprite handle.</returns>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.AddSprite(FlaxEngine.Sprite)">
            <summary>
            Adds the sprite.
            </summary>
            <param name="sprite">The sprite.</param>
            <returns>The sprite handle.</returns>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.RemoveSprite(System.Int32)">
            <summary>
            Removes the sprite.
            </summary>
            <param name="index">The sprite index.</param>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.SaveSprites">
            <summary>
            Save the sprites (texture content won't be modified).
            </summary>
            <returns>True if cannot save, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.TextLayoutOptions">
            <summary>
            Structure which describes text layout properties.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextLayoutOptions.Default">
            <summary>
            Gets the default layout.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.Bounds">
            <summary>
            The layout rectangle (text bounds).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.HorizontalAlignment">
            <summary>
            The horizontal alignment mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.VerticalAlignment">
            <summary>
            The vertical alignment mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.TextWrapping">
            <summary>
            The text wrapping mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.Scale">
            <summary>
            The text scale factor. Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.BaseLinesGapScale">
            <summary>
            Base line gap scale. Default is 1.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextAlignment">
            <summary>
            Specifies the alignment of the text along horizontal or vertical direction in the layout box.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextAlignment.Near">
            <summary>
            Align text near the edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextAlignment.Center">
            <summary>
            Align text to the center.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextAlignment.Far">
            <summary>
            Align text to the far edge.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextWrapping">
            <summary>
            Specifies text wrapping to be used in a particular multiline paragraph.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextWrapping.NoWrap">
            <summary>
            No text wrapping.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextWrapping.WrapWords">
            <summary>
            Wrap only whole words that overflow.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextWrapping.WrapChars">
            <summary>
            Wrap single characters that overflow.
            </summary>
        </member>
        <member name="T:FlaxEngine.LightmapSettings">
            <summary>
            Describes lightmap generation options
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.IndirectLightingIntensity">
            <summary>
            Controls how much all lights will contribute indirect lighting.
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.GlobalObjectsScale">
            <summary>
            Global scale for objects in lightmap to increase quality
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.ChartsPadding">
            <summary>
            Amount of pixels space between charts in lightmap atlas
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSize">
            <summary>
            Single lightmap atlas size (width and height in pixels)
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.BounceCount">
            <summary>
            Amount of indirect light GI bounce passes
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.UseGeometryWithNoMaterials">
            <summary>
            Enable/disable rendering static light for geometry with missing or empty material slots
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.Quality">
            <summary>
            GI quality (range  [0;100])
            </summary>
        </member>
        <member name="T:FlaxEngine.LightmapSettings.AtlasSizes">
            <summary>
            Lightmap atlas sizes (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._64">
            <summary>
            64x64
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._128">
            <summary>
            128x128
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._256">
            <summary>
            256x256
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._512">
            <summary>
            512x512
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._1024">
            <summary>
            1024x1024
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._2048">
            <summary>
            2048x2048
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._4096">
            <summary>
            4096x4096
            </summary>
        </member>
        <member name="T:FlaxEngine.Renderer">
            <summary>
            High-level rendering service.
            </summary>
        </member>
        <member name="M:FlaxEngine.Renderer.DrawSceneDepth(FlaxEngine.GPUContext,FlaxEngine.SceneRenderTask,FlaxEngine.GPUTexture,System.Collections.Generic.List{FlaxEngine.Actor})">
            <summary>
            Draws scene objects depth (to the output Z buffer). The output must be depth texture to write hardware depth to it.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="task">Render task to use it's view description and the render buffers.</param>
            <param name="output">The output texture. Must be valid and created.</param>
            <param name="customActors">The custom set of actors to render. If empty, the loaded scenes will be rendered.</param>
        </member>
        <member name="M:FlaxEngine.Renderer.DrawSceneDepth(FlaxEngine.GPUContext,FlaxEngine.SceneRenderTask,FlaxEngine.GPUTexture,FlaxEngine.Actor[])">
            <summary>
            Draws scene objects depth (to the output Z buffer). The output must be depth texture to write hardware depth to it.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="task">Render task to use it's view description and the render buffers.</param>
            <param name="output">The output texture. Must be valid and created.</param>
            <param name="customActors">The custom set of actors to render. If empty, the loaded scenes will be rendered.</param>
        </member>
        <member name="M:FlaxEngine.Renderer.DrawPostFxMaterial(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.MaterialBase,FlaxEngine.GPUTexture,FlaxEngine.GPUTextureView)">
            <summary>
            Draws postFx material to the render target.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="renderContext">The rendering context.</param>
            <param name="material">The material to render. It must be a post fx material.</param>
            <param name="output">The output texture. Must be valid and created.</param>
            <param name="input">The input texture. It's optional.</param>
        </member>
        <member name="T:FlaxEngine.DrawCallsListType">
            <summary>
            The draw calls list types.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.Depth">
            <summary>
            Hardware depth rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.GBuffer">
            <summary>
            GBuffer rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.GBufferNoDecals">
            <summary>
            GBuffer rendering after decals.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.Forward">
            <summary>
            Transparency rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.Distortion">
            <summary>
            Distortion accumulation rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.MotionVectors">
            <summary>
            Motion vectors rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.MAX">
            <summary>
            The count of items in the DrawCallsListType enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.RenderList">
            <summary>
            Rendering cache container object for the draw calls collecting, sorting and executing.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RenderList"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderList.GetFromPool">
            <summary>
            Allocates the new renderer list object or reuses already allocated one.
            </summary>
            <returns>The cache object.</returns>
        </member>
        <member name="M:FlaxEngine.RenderList.ReturnToPool(FlaxEngine.RenderList)">
            <summary>
            Frees the list back to the pool.
            </summary>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:FlaxEngine.RenderList.SortDrawCalls(FlaxEngine.RenderContext@,System.Boolean,FlaxEngine.DrawCallsListType)">
            <summary>
            Sorts the collected draw calls list.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="reverseDistance">If set to <c>true</c> reverse draw call distance to the view. Results in back to front sorting.</param>
            <param name="listType">The collected draw calls list type.</param>
        </member>
        <member name="M:FlaxEngine.RenderList.ExecuteDrawCalls(FlaxEngine.RenderContext@,FlaxEngine.DrawCallsListType)">
            <summary>
            Executes the collected draw calls.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="listType">The collected draw calls list type.</param>
        </member>
        <member name="T:FlaxEngine.CollectionAttribute">
            <summary>
            This attributes provides additional information on a member collection.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollectionAttribute.ReadOnly">
            <summary>
            Gets or sets whether this collection is read-only. If <c>true</c>, applications using this collection should not allow to add or remove items.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollectionAttribute.CanReorderItems">
            <summary>
            Gets or sets whether the items of this collection can be reordered. If <c>true</c>, applications using this collection should provide users a way to reorder items.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollectionAttribute.NotNullItems">
            <summary>
            Gets or sets whether the items of this collection can be null. If <c>true</c>, applications using this collection should prevent user to add null items to the collection.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollectionAttribute.OverrideEditorTypeName">
            <summary>
            Custom editor class typename for collection values editing.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollectionAttribute.Spacing">
            <summary>
            The spacing amount between collection items in the UI.
            </summary>
        </member>
        <member name="T:FlaxEngine.AssetReferenceAttribute">
            <summary>
            Specifies a options for an asset reference picker in the editor. Allows to customize view or provide custom value assign policy.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.AssetReferenceAttribute.TypeName">
            <summary>
            The full name of the asset type to link. Use null or empty to skip it.
            </summary>
        </member>
        <member name="F:FlaxEngine.AssetReferenceAttribute.UseSmallPicker">
            <summary>
            True if use asset picker with a smaller height (single line), otherwise will use with full icon.
            </summary>
        </member>
        <member name="M:FlaxEngine.AssetReferenceAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AssetReferenceAttribute"/> class.
            </summary>
            <param name="useSmallPicker">True if use asset picker with a smaller height (single line), otherwise will use with full icon.</param>
        </member>
        <member name="M:FlaxEngine.AssetReferenceAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AssetReferenceAttribute"/> class.
            </summary>
            <param name="typeName">The full name of the asset type to link. Use null or empty to skip it.</param>
            <param name="useSmallPicker">True if use asset picker with a smaller height (single line), otherwise will use with full icon.</param>
        </member>
        <member name="M:FlaxEngine.AssetReferenceAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AssetReferenceAttribute"/> class.
            </summary>
            <param name="typeName">The full name of the asset type to link. Use null or empty to skip it.</param>
            <param name="useSmallPicker">True if use asset picker with a smaller height (single line), otherwise will use with full icon.</param>
        </member>
        <member name="T:FlaxEngine.CustomEditorAliasAttribute">
            <summary>
            Overrides default editor provided for the target object/class/field/property. Allows to extend visuals and editing experience of the objects.
            </summary>
            <seealso cref="T:FlaxEngine.CustomEditorAttribute"/>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.CustomEditorAliasAttribute.TypeName">
            <summary>
            Custom editor class typename.
            </summary>
        </member>
        <member name="M:FlaxEngine.CustomEditorAliasAttribute.#ctor(System.String)">
            <summary>
            Overrides default editor provided for the target object.
            </summary>
            <param name="typeName">The custom editor class typename.</param>
        </member>
        <member name="T:FlaxEngine.CustomEditorAttribute">
            <summary>
            Overrides the default editor provided for the target object/class/field/property. Allows to extend visuals and editing experience of the object.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.CustomEditorAttribute.Type">
            <summary>
            Custom editor class type.
            Note: if attribute is used on CustomEditor class it specifies object type to edit.
            </summary>
        </member>
        <member name="M:FlaxEngine.CustomEditorAttribute.#ctor(System.Type)">
            <summary>
            Overrides default editor provided for the target object.
            </summary>
            <param name="type">The custom editor class type.</param>
        </member>
        <member name="T:FlaxEngine.DefaultEditorAttribute">
            <summary>
            Specifies default editor provided for the target object/class/field/property. Should be used along with <see cref="T:FlaxEngine.CustomEditorAttribute"/>.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.EditorDisplayAttribute">
            <summary>
            Allows to change item display name or a group in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.EditorDisplayAttribute.InlineStyle">
            <summary>
            Special text sequence used for property names to override the default layout style and inline property into the parent layout.
            </summary>
        </member>
        <member name="F:FlaxEngine.EditorDisplayAttribute.Group">
            <summary>
            The group name. Default is null.
            </summary>
        </member>
        <member name="F:FlaxEngine.EditorDisplayAttribute.Name">
            <summary>
            The overriden item display name. Default is null.
            </summary>
        </member>
        <member name="M:FlaxEngine.EditorDisplayAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.EditorDisplayAttribute"/> class.
            </summary>
            <param name="group">The group name.</param>
            <param name="name">The display name. Use special name `__inline__` (see <see cref="F:FlaxEngine.EditorDisplayAttribute.InlineStyle"/>) to inline property into the parent container.</param>
        </member>
        <member name="T:FlaxEngine.EditorOrderAttribute">
            <summary>
            Allows to declare order of the item in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.EditorOrderAttribute.Order">
            <summary>
            Requested order to perform layout on. Used to order the items.
            </summary>
        </member>
        <member name="M:FlaxEngine.EditorOrderAttribute.#ctor(System.Int32)">
            <summary>
            Override display order in visual tree for provided model.
            </summary>
            <remarks>
            Current order is resolved runtime, and can change if custom editor class has changed.
            </remarks>
            <param name="order">The order order.</param>
        </member>
        <member name="T:FlaxEngine.EnumDisplayAttribute">
            <summary>
            Allows to change enum type field or property display mode in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.EnumDisplayAttribute.FormatMode">
            <summary>
            Enumeration items names formatting modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.EnumDisplayAttribute.FormatMode.Default">
            <summary>
            The default formatting. Performs standard name processing to create more human-readable label for User Interface.
            </summary>
        </member>
        <member name="F:FlaxEngine.EnumDisplayAttribute.FormatMode.None">
            <summary>
            The none formatting. The enum items names won't be modified.
            </summary>
        </member>
        <member name="F:FlaxEngine.EnumDisplayAttribute.Mode">
            <summary>
            The formatting mode.
            </summary>
        </member>
        <member name="M:FlaxEngine.EnumDisplayAttribute.#ctor(FlaxEngine.EnumDisplayAttribute.FormatMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.EnumDisplayAttribute"/> class.
            </summary>
            <param name="mode">The formatting mode.</param>
        </member>
        <member name="T:FlaxEngine.ExpandGroupsAttribute">
            <summary>
            Marks the item to be visible in editor by expanding all the container groups in the upper hierarchy.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.HeaderAttribute">
            <summary>
            Inserts a header control with a custom text into the editor layout.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.HeaderAttribute.Text">
            <summary>
            The header text.
            </summary>
        </member>
        <member name="M:FlaxEngine.HeaderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.HeaderAttribute"/> class.
            </summary>
            <param name="text">The header text.</param>
        </member>
        <member name="T:FlaxEngine.HideInEditorAttribute">
            <summary>
            Makes a variable not show up in the editor.
            </summary>
        </member>
        <member name="T:FlaxEngine.LimitAttribute">
            <summary>
            Used to make a float or int variable in a script be restricted to a specific range.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.LimitAttribute.Min">
            <summary>
            The minimum range value.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAttribute.Max">
            <summary>
            The maximum range value.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAttribute.SliderSpeed">
            <summary>
            The slider speed used to edit value.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LimitAttribute"/> class.
            </summary>
            <param name="min">The minimum limit value.</param>
            <param name="max">The maximum limit value.</param>
            <param name="sliderSpeed">The slider speed.</param>
        </member>
        <member name="T:FlaxEngine.MultilineTextAttribute">
            <summary>
            Instructs UI editor to use multiline textbox for editing <see cref="T:System.String"/> property or field.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.RangeAttribute">
            <summary>
            Used to make a float or int variable in a script be restricted to a specific range.
            When used, the float or int will be shown as a slider in the editor instead of default number field.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.RangeAttribute.Min">
            <summary>
            The minimum range value.
            </summary>
        </member>
        <member name="F:FlaxEngine.RangeAttribute.Max">
            <summary>
            The maximum range value.
            </summary>
        </member>
        <member name="M:FlaxEngine.RangeAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RangeAttribute"/> class.
            </summary>
            <param name="min">The minimum range value.</param>
            <param name="max">The maximum range value.</param>
        </member>
        <member name="T:FlaxEngine.ReadOnlyAttribute">
            <summary>
            Makes a variable show up in the editor as read-only (editing is disabled).
            </summary>
        </member>
        <member name="T:FlaxEngine.ShowInEditorAttribute">
            <summary>
            Makes a variable show up in the editor.
            </summary>
            <remarks>
            If used on a private field/property you may also need to add <see cref="T:FlaxEngine.SerializeAttribute"/> to ensure that modified value is being serialized.
            </remarks>
        </member>
        <member name="T:FlaxEngine.SpaceAttribute">
            <summary>
            Inserts an empty space between controls in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.SpaceAttribute.Height">
            <summary>
            The spacing in pixel (vertically).
            </summary>
        </member>
        <member name="M:FlaxEngine.SpaceAttribute.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SpaceAttribute"/> class.
            </summary>
            <param name="height">The spacing.</param>
        </member>
        <member name="T:FlaxEngine.TooltipAttribute">
            <summary>
            Specifies a tooltip for a property/field in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.TooltipAttribute.Text">
            <summary>
            The tooltip text.
            </summary>
        </member>
        <member name="M:FlaxEngine.TooltipAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TooltipAttribute"/> class.
            </summary>
            <param name="text">The tooltip text.</param>
        </member>
        <member name="T:FlaxEngine.VisibleIfAttribute">
            <summary>
            Shows property/field in the editor only if the specified member has a given value. Can be used to hide properties based on other properties (also private properties). The given member has to be bool type.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.VisibleIfAttribute.MemberName">
            <summary>
            The member name.
            </summary>
        </member>
        <member name="M:FlaxEngine.VisibleIfAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.HeaderAttribute"/> class.
            </summary>
            <param name="memberName">The name of the field or property of the object. Must be a bool type.</param>
        </member>
        <member name="T:FlaxEngine.ExecuteInEditModeAttribute">
            <summary>
            Makes a script execute in edit mode.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mono.MonoPInvokeCallbackAttribute">
            <summary>
            Attribute necessary for AOT ports of Mono to mark methods that can be invoked by the native runtime.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.NoAnimateAttribute">
            <summary>
            Indicates that a member of a class cannot be animated by the scene animations system. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:FlaxEngine.NoSerializeAttribute">
            <summary>
            Indicates that a field or a property of a serializable class should not be serialized. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:FlaxEngine.SerializeAttribute">
            <summary>
            Indicates that a field or a property of a serializable class should be be serialized. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:FlaxEngine.UnmanagedAttribute">
            <summary>
            Marks the types and members defined in unmanaged code (native C++).
            </summary>
        </member>
        <member name="T:FlaxEngine.Object">
            <summary>
            Base class for all objects Flax can reference. Every object has unique identifier.
            </summary>
        </member>
        <member name="F:FlaxEngine.Object.__unmanagedPtr">
            <summary>
            The pointer to the unmanaged object (native C++ instance).
            </summary>
        </member>
        <member name="F:FlaxEngine.Object.__internalId">
            <summary>
            The object unique identifier.
            </summary>
        </member>
        <member name="P:FlaxEngine.Object.ID">
            <summary>
            Gets the unique object ID.
            </summary>
        </member>
        <member name="M:FlaxEngine.Object.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Object"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Object.Finalize">
            <summary>
            Notifies the unmanaged interop object that the managed instance was finalized.
            </summary>
        </member>
        <member name="M:FlaxEngine.Object.As``1">
            <summary>
            Casts this object instance to the given object type.
            </summary>
            <typeparam name="T">object actor type.</typeparam>
            <returns>The object instance cast to the given actor type.</returns>
        </member>
        <member name="M:FlaxEngine.Object.New``1">
            <summary>
            Creates the new instance of the Object.
            All unused objects should be released using <see cref="M:FlaxEngine.Object.Destroy(FlaxEngine.Object,System.Single)"/>.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Created object.</returns>
        </member>
        <member name="M:FlaxEngine.Object.New(System.Type)">
            <summary>
            Creates the new instance of the Object.
            All unused objects should be released using <see cref="M:FlaxEngine.Object.Destroy(FlaxEngine.Object,System.Single)"/>.
            </summary>
            <param name="type">Type of the object.</param>
            <returns>Created object.</returns>
        </member>
        <member name="M:FlaxEngine.Object.Find``1(System.Guid@)">
            <summary>
            Finds the object with the given ID. Searches registered scene objects and assets.
            </summary>
            <param name="id">Unique ID of the object.</param>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Found object or null if missing.</returns>
        </member>
        <member name="M:FlaxEngine.Object.TryFind``1(System.Guid@)">
            <summary>
            Tries to find the object by the given identifier. Searches only registered scene objects.
            </summary>
            <param name="id">Unique ID of the object.</param>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Found object or null if missing.</returns>
        </member>
        <member name="M:FlaxEngine.Object.Destroy(FlaxEngine.Object,System.Single)">
            <summary>
            Destroys the specified object and clears the reference variable.
            The object obj will be destroyed now or after the time specified in seconds from now.
            If obj is a Script it will be removed from the Actor and deleted.
            If obj is an Actor it will be removed from the Scene and deleted as well as all its Scripts and all children of the Actor.
            Actual object destruction is always delayed until after the current Update loop, but will always be done before rendering.
            </summary>
            <param name="obj">The object to destroy.</param>
            <param name="timeLeft">The time left to destroy object (in seconds).</param>
        </member>
        <member name="M:FlaxEngine.Object.Destroy``1(``0@,System.Single)">
            <summary>
            Destroys the specified object and clears the reference variable.
            The object obj will be destroyed now or after the time specified in seconds from now.
            If obj is a Script it will be removed from the Actor and deleted.
            If obj is an Actor it will be removed from the Scene and deleted as well as all its Scripts and all children of the Actor.
            Actual object destruction is always delayed until after the current Update loop, but will always be done before rendering.
            </summary>
            <param name="obj">The object to destroy.</param>
            <param name="timeLeft">The time left to destroy object (in seconds).</param>
        </member>
        <member name="M:FlaxEngine.Object.op_Implicit(FlaxEngine.Object)~System.Boolean">
            <summary>
            Checks if the object exists (reference is not null and the unmanaged object pointer is valid).
            </summary>
            <param name="obj">The object to check.</param>
            <returns>True if object is valid, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Object.GetUnmanagedPtr(FlaxEngine.Object)">
            <summary>
            Gets the pointer to the native object. Handles null object reference (returns zero).
            </summary>
            <param name="obj">The object.</param>
            <returns>The native object pointer.</returns>
        </member>
        <member name="M:FlaxEngine.Object.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GamePlugin">
            <summary>
            Base class for all plugins used at runtime in game.
            </summary>
            <remarks>
            Plugins should have a public and parameter-less constructor.
            </remarks>
            <seealso cref="T:FlaxEngine.Plugin" />
        </member>
        <member name="T:FlaxEngine.Plugin">
            <summary>
            Base class for game engine editor plugins.
            </summary>
            <remarks>
            Plugins should have a public and parameter-less constructor.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Plugin.Description">
            <summary>
            Gets the description.
            </summary>
            <remarks>
            Plugin description should be a constant part of the plugin created in constructor and valid before calling <see cref="M:FlaxEngine.Plugin.Initialize"/>.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Plugin.Initialize">
            <summary>
            Initialization method called when this plugin is loaded to the memory and can be used.
            </summary>
        </member>
        <member name="M:FlaxEngine.Plugin.Deinitialize">
            <summary>
            Cleanup method called when this plugin is being unloaded or reloaded or engine is closing.
            </summary>
        </member>
        <member name="T:FlaxEngine.PluginDescription">
            <summary>
            The engine plugin description container.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Name">
            <summary>
            The name of the plugin.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Version">
            <summary>
            The version of the plugin.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Author">
            <summary>
            The name of the author of the plugin.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.AuthorUrl">
            <summary>
            The plugin author website URL.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.HomepageUrl">
            <summary>
            The homepage URL for the plugin.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.RepositoryUrl">
            <summary>
            The plugin repository URL (for open-source plugins).
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Description">
            <summary>
            The plugin description.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Category">
            <summary>
            The plugin category.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.IsBeta">
            <summary>
            True if plugin is during Beta tests (before release).
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.IsAlpha">
            <summary>
            True if plugin is during Alpha tests (early version).
            </summary>
        </member>
        <member name="T:FlaxEngine.PluginDelegate">
            <summary>
            Plugin related event delegate type.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="T:FlaxEngine.PluginManager">
            <summary>
            Game and Editor plugins management service.
            </summary>
        </member>
        <member name="P:FlaxEngine.PluginManager.GamePlugins">
            <summary>
            Gets the loaded and enabled game plugins.
            </summary>
        </member>
        <member name="P:FlaxEngine.PluginManager.EditorPlugins">
            <summary>
            Gets the loaded and enabled editor plugins.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginLoading">
            <summary>
            Occurs before loading plugin.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginLoaded">
            <summary>
            Occurs when plugin gets loaded and initialized.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginUnloading">
            <summary>
            Occurs before unloading plugin.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginUnloaded">
            <summary>
            Occurs when plugin gets unloaded. It should not be used anymore.
            </summary>
        </member>
        <member name="T:FlaxEngine.PluginManager.CanLoadPluginDelegate">
            <summary>
            Determines whether can load the specified plugin.
            </summary>
            <param name="pluginDesc">The plugin description.</param>
            <returns>True if load it, otherwise false.</returns>
        </member>
        <member name="F:FlaxEngine.PluginManager.CanLoadPlugin">
            <summary>
            Determines whether can load the specified plugin.
            </summary>
        </member>
        <member name="T:FlaxEngine.PluginManager.PluginDelegate">
            <summary>
            Plugin related event delegate type.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:FlaxEngine.PluginManager.DefaultCanLoadPlugin(FlaxEngine.PluginDescription@)">
            <summary>
            The default implementation for <see cref="F:FlaxEngine.PluginManager.CanLoadPlugin"/>.
            </summary>
            <param name="pluginDesc">The plugin description.</param>
            <returns>True if load it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PluginManager.GetPlugin``1">
            <summary>
            Returns the first plugin of the provided type.
            </summary>
            <typeparam name="T">The plugin type.</typeparam>
            <returns>The plugin, or null if not loaded.</returns>
        </member>
        <member name="M:FlaxEngine.PluginManager.GetPlugin(System.String)">
            <summary>
            Return the first plugin using the provided name.
            </summary>
            /// <param name="name">The plugin name.</param>
            <returns>The plugin, or null if not loaded.</returns>
        </member>
        <member name="T:FlaxEngine.Script">
            <summary>
            Base class for all scripts.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.Scene">
            <summary>
            Gets the scene object which contains this script.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.Transform">
            <summary>
            Gets or sets the world space transformation of the actors owning this script.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.LocalTransform">
            <summary>
            Gets or sets the local space transformation of the actors owning this script.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Script"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.Enabled">
            <summary>
            Gets or sets value indicating if script is active.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.Actor">
            <summary>
            Gets or sets the actor owning that script.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnAwake">
            <summary>
            Called after the object is loaded.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnEnable">
            <summary>
            Called when object becomes enabled and active.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnDisable">
            <summary>
            Called when object becomes disabled and inactive.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnDestroy">
            <summary>
            Called before the object will be destroyed..
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnStart">
            <summary>
            Called when a script is enabled just before any of the Update methods is called for the first time.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnUpdate">
            <summary>
            Called every frame if object is enabled.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnLateUpdate">
            <summary>
            Called every frame (after gameplay Update) if object is enabled.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnFixedUpdate">
            <summary>
            Called every fixed framerate frame if object is enabled.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnDebugDraw">
            <summary>
            Called during drawing debug shapes in editor. Use <see cref="T:FlaxEngine.DebugDraw"/> to draw debug shapes and other visualization.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnDebugDrawSelected">
            <summary>
            Called during drawing debug shapes in editor when object is selected. Use <see cref="T:FlaxEngine.DebugDraw"/> to draw debug shapes and other visualization.
            </summary>
        </member>
        <member name="T:FlaxEngine.Scripting">
            <summary>
            C# scripting service.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.Update">
            <summary>
            Occurs on scripting update.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.LateUpdate">
            <summary>
            Occurs on scripting 'late' update.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.FixedUpdate">
            <summary>
            Occurs on scripting `fixed` update.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.Draw">
            <summary>
            Occurs on scripting `draw` update. Called during frame rendering and can be used to invoke custom rendering with GPUDevice.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.Exit">
            <summary>
            Occurs when scripting engine is disposing. Engine is during closing and some services may be unavailable (eg. loading scenes). This may be called after the engine fatal error event.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scripting.InvokeOnUpdate(System.Action)">
            <summary>
            Calls the given action on the next scripting update.
            </summary>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:FlaxEngine.Scripting.Init">
            <summary>
            Initializes Flax API. Called before everything else from native code.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scripting.SetWindow(FlaxEngine.Window)">
            <summary>
            Sets the managed window as a main game window. Called after creating game window by the native code.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:FlaxEngine.Scripting.HasGameModulesLoaded">
            <summary>
            Returns true if game scripts assembly has been loaded.
            </summary>
            <returns>True if game scripts assembly is loaded, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Scripting.IsTypeFromGameScripts(System.Type)">
            <summary>
            Returns true if given type is from one of the game scripts assemblies.
            </summary>
            <returns>True if the type is from game assembly, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Scripting.FlushRemovedObjects">
            <summary>
            Flushes the removed objects (disposed objects using Object.Destroy).
            </summary>
        </member>
        <member name="T:FlaxEngine.Profiler">
            <summary>
            Provides C# scripts profiling methods.
            </summary>
            <remarks>
            Profiler is available in the editor and Debug/Development builds. Release builds don't have profiling tools.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Profiler.BeginEvent(System.String)">
            <summary>
            Begins profiling a piece of code with a custom label.
            </summary>
            <param name="name">The name of the event.</param>
        </member>
        <member name="M:FlaxEngine.Profiler.EndEvent">
            <summary>
            Ends profiling an event.
            </summary>
        </member>
        <member name="M:FlaxEngine.Profiler.BeginEventGPU(System.String)">
            <summary>
            Begins GPU profiling a piece of code with a custom label.
            </summary>
            <param name="name">The name of the event.</param>
        </member>
        <member name="M:FlaxEngine.Profiler.EndEventGPU">
            <summary>
            Ends GPU profiling an event.
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.JsonCustomSerializers.ExtendedDefaultContractResolver.CreateContract(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Json.FlaxObjectConverter">
            <summary>
            Serialize references to the FlaxEngine.Object as Guid.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:FlaxEngine.Json.FlaxObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.FlaxObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.FlaxObjectConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Json.SceneReferenceConverter">
            <summary>
            Serialize SceneReference as Guid in internal format.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:FlaxEngine.Json.SceneReferenceConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.SceneReferenceConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.SceneReferenceConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Json.JsonSerializer">
            <summary>
            Objects serialization tool (json format).
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.ValueEquals(System.Object,System.Object)">
            <summary>
            The default implementation of the values comparision function used by the serialization system.
            </summary>
            <param name="objA">The object a.</param>
            <param name="objB">The object b.</param>
            <returns>True if both objects are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Serialize(System.Object,System.Boolean)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="isManagedOnly">True if serialize only C# members and skip C++ members (marked with <see cref="T:FlaxEngine.UnmanagedAttribute"/>).</param>
            <returns>The output json string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Boolean)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="type">The object type. Can be typeof(object) to handle generic object serialization.</param>
            <param name="isManagedOnly">True if serialize only C# members and skip C++ members (marked with <see cref="T:FlaxEngine.UnmanagedAttribute"/>).</param>
            <returns>The output json string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.SerializeDiff(System.Object,System.Object,System.Boolean)">
            <summary>
            Serializes the specified object difference to the other object of the same type. Used to serialize modified properties of the object during prefab instance serialization.
            </summary>
            <param name="obj">The object.</param>
            <param name="other">The reference object.</param>
            <param name="isManagedOnly">True if serialize only C# members and skip C++ members (marked with <see cref="T:FlaxEngine.UnmanagedAttribute"/>).</param>
            <returns>The output json string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize(System.Object,System.String)">
            <summary>
            Deserializes the specified object (from the input json data).
            </summary>
            <param name="input">The object.</param>
            <param name="json">The input json data.</param>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified .NET object type (from the input json data).
            </summary>
            <param name="json">The input json data.</param>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the specified .NET object type (from the input json data).
            </summary>
            <param name="json">The input json data.</param>
            <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the .NET object (from the input json data).
            </summary>
            <param name="json">The input json data.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize(System.Object,System.Void*,System.Int32)">
            <summary>
            Deserializes the specified object (from the input json data).
            </summary>
            <param name="input">The object.</param>
            <param name="jsonBuffer">The input json data buffer (raw, fixed memory buffer).</param>
            <param name="jsonLength">The input json data buffer length (characters count).</param>
        </member>
        <member name="T:FlaxEngine.Json.JsonSerializer.GuidInterop">
            <summary>
            Guid type in Flax format (the same as C++ layer).
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.GetStringID(System.Guid)">
            <summary>
            Gets the string representation of the given object ID. It matches the internal serialization formatting rules.
            </summary>
            <param name="id">The object identifier.</param>
            <returns>The serialized ID.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.GetStringID(System.Guid*)">
            <summary>
            Gets the string representation of the given object ID. It matches the internal serialization formatting rules.
            </summary>
            <param name="id">The object identifier.</param>
            <returns>The serialized ID.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.GetStringID(FlaxEngine.Object)">
            <summary>
            Gets the string representation of the given object. It matches the internal serialization formatting rules.
            </summary>
            <param name="obj">The object.</param>
            <returns>The serialized ID.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.ParseID(System.String,System.Guid@)">
            <summary>
            Parses the given object identifier represented in the internal serialization format.
            </summary>
            <param name="str">The ID string.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:FlaxEngine.Json.UnmanagedStringReader">
            <summary>
            Implements a <see cref="T:System.IO.TextReader" /> that reads from unmanaged UTF8 string buffer (provided as raw pointer and length).
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Json.UnmanagedStringReader"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Json.UnmanagedStringReader"/> class.
            </summary>
            <param name="buffer">The text buffer pointer (raw, fixed memory).</param>
            <param name="length">The text length (characters count).</param>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Initialize(System.Void*,System.Int32)">
            <summary>
            Initializes the reader with the specified text buffer.
            </summary>
            <param name="buffer">The text buffer pointer (raw, fixed memory).</param>
            <param name="length">The text length (characters count).</param>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Initialize(System.IntPtr,System.Int32)">
            <summary>
            Initializes the reader with the specified text buffer.
            </summary>
            <param name="buffer">The text buffer pointer (raw, fixed memory).</param>
            <param name="length">The text length (characters count).</param>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Peek">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Read">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Terrain">
            <summary>
            Represents a single terrain object.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
            <seealso cref="T:FlaxEngine.PhysicsColliderActor" />
        </member>
        <member name="F:FlaxEngine.Terrain.UnitsPerVertex">
            <summary>
            The constant amount of units per terrain geometry vertex (can be adjusted per terrain instance using non-uniform scale factor).
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.MaxLODs">
            <summary>
            The maximum amount of levels of detail for the terrain chunks.
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.PatchChunksCount">
            <summary>
            The constant amount of terrain chunks per terrain patch object.
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.PatchEdgeChunksCount">
            <summary>
            The constant amount of terrain chunks on terrain patch object edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.MaxSplatmapsCount">
            <summary>
            The terrain splatmaps amount limit. Each splatmap can hold up to 4 layer weights.
            </summary>
        </member>
        <member name="M:FlaxEngine.Terrain.SetupPatchHeightMap(FlaxEngine.Int2@,System.Single[],System.Byte[],System.Boolean)">
            <summary>
            Setups the terrain patch using the specified heightmap data.
            </summary>
            <param name="patchCoord">The patch location (x and z coordinates).</param>
            <param name="heightMap">The height map. Each array item contains a height value (2D inlined array). It should has size equal (chunkSize*4+1)^2.</param>
            <param name="holesMask">The holes mask (optional). Normalized to 0-1 range values with holes mask per-vertex. Must match the heightmap dimensions.</param>
            <param name="forceUseVirtualStorage">If set to <c>true</c> patch will use virtual storage by force. Otherwise it can use normal texture asset storage on drive (valid only during Editor). Runtime-created terrain can only use virtual storage (in RAM).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.SetupPatchSplatMap(FlaxEngine.Int2@,System.Int32,FlaxEngine.Color32[],System.Boolean)">
            <summary>
            Setups the terrain patch using the specified heightmap data.
            </summary>
            <param name="patchCoord">The patch location (x and z coordinates).</param>
            <param name="index">The zero-based index of the splatmap texture.</param>
            <param name="splatMap">The splat map. Each array item contains 4 layer weights. It must match the terrain descriptor, so it should be (chunkSize*4+1)^2. Patch is a 4 by 4 square made of chunks. Each chunk has chunkSize quads on edge.</param>
            <param name="forceUseVirtualStorage">If set to <c>true</c> patch will use virtual storage by force. Otherwise it can use normal texture asset storage on drive (valid only during Editor). Runtime-created terrain can only use virtual storage (in RAM).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Terrain"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.Material">
            <summary>
            The default material used for terrain rendering (chunks can override this).
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.PhysicalMaterial">
            <summary>
            The physical material used to define the terrain collider physical properties.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.DrawModes">
            <summary>
            The draw passes to use for rendering this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.LODBias">
            <summary>
            Gets or sets the terrain Level Of Detail bias value. Allows to increase or decrease rendered terrain quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.ForcedLOD">
            <summary>
            Gets or sets the terrain forced Level Of Detail index. Allows to bind the given chunks LOD to show. Value -1 disables this feature.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.LODDistribution">
            <summary>
            Gets or sets the terrain LODs distribution parameter. Adjusts terrain chunks transitions distances. Use lower value to increase terrain quality or higher value to increase performance. Default value is 0.75.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.ScaleInLightmap">
            <summary>
            Gets or sets the terrain scale in lightmap (applied to all the chunks). Use value higher than 1 to increase baked lighting resolution.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.BoundsExtent">
            <summary>
            Gets or sets the terrain chunks bounds extent. Values used to expand terrain chunks bounding boxes. Use it when your terrain material is performing vertex offset operations on a GPU.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.CollisionLOD">
            <summary>
            Gets or sets the terrain geometry LOD index used for collision.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.LODCount">
            <summary>
            Gets the terrain Level Of Detail count.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.ChunkSize">
            <summary>
            Gets the terrain chunk vertices amount per edge (square).
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.PatchesCount">
            <summary>
            Gets the terrain patches count. Each patch contains 16 chunks arranged into a 4x4 square.
            </summary>
        </member>
        <member name="M:FlaxEngine.Terrain.HasPatch(FlaxEngine.Int2@)">
            <summary>
            Checks if terrain has the patch at the given coordinates.
            </summary>
            <param name="patchCoord">The patch location (x and z).</param>
            <returns>True if has patch added, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.GetPatchIndex(FlaxEngine.Int2@)">
            <summary>
            Gets the zero-based index of the terrain patch in the terrain patches collection.
            </summary>
            <param name="patchCoord">The patch location (x and z).</param>
            <returns>The zero-based index of the terrain patch in the terrain patches collection. Returns -1 if patch coordinates are invalid.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.GetPatchCoord(System.Int32,FlaxEngine.Int2@)">
            <summary>
            Gets the terrain patch coordinates (x and z) at the given index.
            </summary>
            <param name="patchIndex">The zero-based index of the terrain patch in the terrain patches collection.</param>
            <param name="patchCoord">The patch location (x and z).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.GetPatchBounds(System.Int32,FlaxEngine.BoundingBox@)">
            <summary>
            Gets the terrain patch world bounds at the given index.
            </summary>
            <param name="patchIndex">The zero-based index of the terrain patch in the terrain patches collection.</param>
            <param name="bounds">The patch world bounds.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.GetChunkBounds(System.Int32,System.Int32,FlaxEngine.BoundingBox@)">
            <summary>
            Gets the terrain chunk world bounds at the given index.
            </summary>
            <param name="patchIndex">The zero-based index of the terrain patch in the terrain patches collection.</param>
            <param name="chunkIndex">The zero-based index of the terrain chunk in the terrain patch chunks collection (in range 0-15).</param>
            <param name="bounds">The chunk world bounds.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.GetChunkOverrideMaterial(FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Gets the chunk material that overrides the terrain default one.
            </summary>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <param name="chunkCoord">The chunk coordinates (x and z).</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.SetChunkOverrideMaterial(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.MaterialBase)">
            <summary>
            Sets the chunk material to override the terrain default one.
            </summary>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <param name="chunkCoord">The chunk coordinates (x and z).</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.SetupPatchHeightMap(FlaxEngine.Int2@,System.Int32,System.Single*,System.Byte*,System.Boolean)">
            <summary>
            Setups the terrain patch using the specified heightmap data.
            </summary>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <param name="heightMapLength">The height map array length. It must match the terrain descriptor, so it should be (chunkSize*4+1)^2. Patch is a 4 by 4 square made of chunks. Each chunk has chunkSize quads on edge.</param>
            <param name="heightMap">The height map. Each array item contains a height value.</param>
            <param name="holesMask">The holes mask (optional). Normalized to 0-1 range values with holes mask per-vertex. Must match the heightmap dimensions.</param>
            <param name="forceUseVirtualStorage">If set to <c>true</c> patch will use virtual storage by force. Otherwise it can use normal texture asset storage on drive (valid only during Editor). Runtime-created terrain can only use virtual storage (in RAM).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.SetupPatchSplatMap(FlaxEngine.Int2@,System.Int32,System.Int32,FlaxEngine.Color32*,System.Boolean)">
            <summary>
            Setups the terrain patch layer weights using the specified splatmaps data.
            </summary>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <param name="index">The zero-based index of the splatmap texture.</param>
            <param name="splatMapLength">The splatmap map array length. It must match the terrain descriptor, so it should be (chunkSize*4+1)^2. Patch is a 4 by 4 square made of chunks. Each chunk has chunkSize quads on edge.</param>
            <param name="splatMap">The splat map. Each array item contains 4 layer weights.</param>
            <param name="forceUseVirtualStorage">If set to <c>true</c> patch will use virtual storage by force. Otherwise it can use normal texture asset storage on drive (valid only during Editor). Runtime-created terrain can only use virtual storage (in RAM).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.Setup(System.Int32,System.Int32)">
            <summary>
            Setups the terrain. Clears the existing data.
            </summary>
            <param name="lodCount">The LODs count. The actual amount of LODs may be lower due to provided chunk size (each LOD has 4 times less quads).</param>
            <param name="chunkSize">The size of the chunk (amount of quads per edge for the highest LOD). Must be power of two minus one (eg. 63 or 127).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.AddPatches(FlaxEngine.Int2@)">
            <summary>
            Adds the patches to the terrain (clears existing ones).
            </summary>
            <param name="numberOfPatches">The number of patches (x and z axis).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.AddPatch(FlaxEngine.Int2@)">
            <summary>
            Adds the patch.
            </summary>
            <param name="patchCoord">The patch location (x and z).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.RemovePatch(FlaxEngine.Int2@)">
            <summary>
            Removes the patch.
            </summary>
            <param name="patchCoord">The patch location (x and z).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.Single)">
            <summary>
            Performs a raycast against this terrain collision shape.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="resultHitDistance">The raycast result hit position distance from the ray origin. Valid only if raycast hits anything.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.RayCast(FlaxEngine.Ray,System.Single@,FlaxEngine.Int2@,FlaxEngine.Int2@,System.Single)">
            <summary>
            Performs a raycast against this terrain collision shape. Returns the hit chunk.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="resultHitDistance">The raycast result hit position distance from the ray origin. Valid only if raycast hits anything.</param>
            <param name="resultPatchCoord">The raycast result hit terrain patch coordinates (x and z). Valid only if raycast hits anything.</param>
            <param name="resultChunkCoord">The raycast result hit terrain chunk coordinates (relative to the patch, x and z). Valid only if raycast hits anything.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single)">
            <summary>
            Performs a raycast against terrain collision, returns results in a RayCastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.ClosestPoint(FlaxEngine.Vector3,FlaxEngine.Vector3@)">
            <summary>
            Gets a point on the terrain collider that is closest to a given location. Can be used to find a hit location or position to apply explosion force or any other special effects.
            </summary>
            <param name="position">The position to find the closest point to it.</param>
            <param name="result">The result point on the collider that is closest to the specified location.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.DrawPatch(FlaxEngine.RenderContext@,FlaxEngine.Int2@,FlaxEngine.MaterialBase,System.Int32)">
            <summary>
            Draws the terrain patch.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="patchCoord">The patch location (x and z).</param>
            <param name="material">The material to use for rendering.</param>
            <param name="lodIndex">The LOD index.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.DrawChunk(FlaxEngine.RenderContext@,FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.MaterialBase,System.Int32)">
            <summary>
            Draws the terrain chunk.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="patchCoord">The patch location (x and z).</param>
            <param name="chunkCoord">The chunk location (x and z).</param>
            <param name="material">The material to use for rendering.</param>
            <param name="lodIndex">The LOD index.</param>
        </member>
        <member name="T:FlaxEngine.GUI.GPUTextureBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.GPUTexture"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.GPUTextureBrush.Texture">
            <summary>
            The GPU texture.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.GPUTextureBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.GPUTextureBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.GPUTextureBrush.#ctor(FlaxEngine.GPUTexture)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.GPUTextureBrush"/> struct.
            </summary>
            <param name="texture">The GPU texture.</param>
        </member>
        <member name="P:FlaxEngine.GUI.GPUTextureBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.GPUTextureBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.IBrush">
            <summary>
            Interface that unifies input source textures, sprites, render targets, and any other brushes to be used in a more generic way.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.IBrush.Size">
            <summary>
            Gets the size of the image brush in pixels (if relevant).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.IBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the specified image using <see cref="T:FlaxEngine.Render2D"/> graphics backend.
            </summary>
            <param name="rect">The draw area rectangle.</param>
            <param name="color">The color.</param>
        </member>
        <member name="T:FlaxEngine.GUI.LinearGradientBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for linear color gradient (made of 2 color).
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.LinearGradientBrush.StartColor">
            <summary>
            The brush start color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.LinearGradientBrush.EndColor">
            <summary>
            The brush end color.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.LinearGradientBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.LinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.LinearGradientBrush.#ctor(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.LinearGradientBrush"/> struct.
            </summary>
            <param name="startColor">The start color.</param>
            <param name="endColor">The end color.</param>
        </member>
        <member name="P:FlaxEngine.GUI.LinearGradientBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.LinearGradientBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.MaterialBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.MaterialBase"/> rendering.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.MaterialBrush.Material">
            <summary>
            The material.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.MaterialBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.MaterialBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.MaterialBrush.#ctor(FlaxEngine.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.MaterialBrush"/> struct.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="P:FlaxEngine.GUI.MaterialBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.MaterialBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.SolidColorBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for single color fill.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.SolidColorBrush.Color">
            <summary>
            The brush color.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SolidColorBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SolidColorBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SolidColorBrush.#ctor(FlaxEngine.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SolidColorBrush"/> struct.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="P:FlaxEngine.GUI.SolidColorBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SolidColorBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.SpriteBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.Sprite"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.SpriteBrush.Sprite">
            <summary>
            The sprite.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SpriteBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SpriteBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SpriteBrush.#ctor(FlaxEngine.SpriteHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SpriteBrush"/> struct.
            </summary>
            <param name="sprite">The sprite.</param>
        </member>
        <member name="P:FlaxEngine.GUI.SpriteBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SpriteBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.TextureBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.Texture"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.TextureBrush.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextureBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextureBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextureBrush.#ctor(FlaxEngine.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextureBrush"/> struct.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:FlaxEngine.GUI.TextureBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextureBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.CanvasContainer">
            <summary>
            The root container control used to sort and manage child UICanvas controls. Helps with sending input events.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.SortCanvases">
            <summary>
            Sorts the canvases by order.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnChildrenChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.DrawChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.IntersectsChildContent(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.CanvasRootControl">
            <summary>
            Root control implementation used by the <see cref="T:FlaxEngine.UICanvas"/> actor.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.RootControl" />
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.Canvas">
            <summary>
            Gets the owning canvas.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.Is2D">
            <summary>
            Gets a value indicating whether canvas is 2D (screen-space).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.Is3D">
            <summary>
            Gets a value indicating whether canvas is 3D (world-space or camera-space).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.#ctor(FlaxEngine.UICanvas)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.CanvasRootControl"/> class.
            </summary>
            <param name="canvas">The canvas.</param>
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.Cursor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.FocusedControl">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.TrackingMouseOffset">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.MousePosition">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.StartTrackingMouse(FlaxEngine.GUI.Control,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.EndTrackingMouse">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetKey(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetKeyUp(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetMouseButton(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.PointToParent(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.ContainsPoint(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnCharInput(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnKeyUp(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.Focus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.DoDragDrop(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Border">
            <summary>
            Border control that draws the border around the control edges (inner and outer sides).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Border.BorderColor">
            <summary>
            Gets or sets the color used to draw border lines.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Border.BorderWidth">
            <summary>
            The border lines width.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Border.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Border"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Border.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Button">
            <summary>
            Button control
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Button.DefaultHeight">
            <summary>
            The default height fro the buttons.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Button._mouseDown">
            <summary>
            The mouse down flag.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Button._font">
            <summary>
            The font.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.Text">
            <summary>
            Button text property.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.Font">
            <summary>
            Gets or sets the font used to draw button text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.TextMaterial">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Button.TextColor">
            <summary>
            Gets or sets the color used to draw button text.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Button.Clicked">
            <summary>
            Event fired when user clicks on the button
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Button.ButtonClicked">
            <summary>
            Event fired when user clicks on the button
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BackgroundColorSelected">
            <summary>
            Gets or sets the background color when button is selected.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BorderColorSelected">
            <summary>
            Gets or sets the border color when button is selected.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BackgroundColorHighlighted">
            <summary>
            Gets or sets the background color when button is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BorderColorHighlighted">
            <summary>
            Gets or sets the border color when button is highlighted.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Button"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Button.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Button"/> class.
            </summary>
            <param name="x">Position X coordinate</param>
            <param name="y">Position Y coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnClick">
            <summary>
            Called when mouse clicks the button.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Button.SetColors(FlaxEngine.Color)">
            <summary>
            Sets the button colors palette based on a given main color.
            </summary>
            <param name="color">The main color.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Button.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.CheckBoxState">
            <summary>
            The checkbox control states.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBoxState.Default">
            <summary>
            The default state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBoxState.Checked">
            <summary>
            The checked state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBoxState.Intermediate">
            <summary>
            The intermediate state.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.CheckBox">
            <summary>
            Check box control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._mouseDown">
            <summary>
            The mouse is down.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._mouseOverBox">
            <summary>
            The mouse over box state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._boxSize">
            <summary>
            The box size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._box">
            <summary>
            The box rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.State">
            <summary>
            Gets or sets the state of the checkbox.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEngine.GUI.CheckBox"/> is checked.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.Intermediate">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEngine.GUI.CheckBox"/> is in the intermediate state.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.BoxSize">
            <summary>
            Gets or sets the size of the box.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.ImageColor">
            <summary>
            Gets or sets the color of the checkbox icon.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.BorderColorHighlighted">
            <summary>
            Gets or sets the border color when checkbox is hovered.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.CheckedImage">
            <summary>
            Gets or sets the image used to render checkbox checked state.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.IntermediateImage">
            <summary>
            Gets or sets the image used to render checkbox intermediate state.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.CheckBox.StateChanged">
            <summary>
            Event fired when 'checked' state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.CheckBox"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.#ctor(System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.CheckBox"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="isChecked">if set to <c>true</c> set checked on start.</param>
            <param name="size">The checkbox size.</param>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.Toggle">
            <summary>
            Toggles the checked state.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Dropdown">
            <summary>
            Dropdown menu control allows to choose one item from the provided collection of options.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="T:FlaxEngine.GUI.Dropdown.DropdownRoot">
            <summary>
            The root control used by the <see cref="T:FlaxEngine.GUI.Dropdown"/> to show the items collections and track item selecting event.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown.DropdownRoot.ItemClicked">
            <summary>
            Occurs when item gets clicked. Argument is item index.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown.DropdownRoot.LostFocus">
            <summary>
            Occurs when popup losts focus.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown.DropdownRoot.ItemsContainer">
            <summary>
            The items container control.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DropdownRoot.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DropdownRoot.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DropdownRoot.OnDestroy">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown._items">
            <summary>
            The items.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown._popup">
            <summary>
            The popup menu. May be null if has not been used yet.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown._selectedIndex">
            <summary>
            The selected index of the item (-1 for no selection).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.Items">
            <summary>
            Gets or sets the items collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.SelectedItem">
            <summary>
            Gets or sets the selected item (returns <see cref="F:System.String.Empty"/> if no item is being selected).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.SelectedIndex">
            <summary>
            Gets or sets the index of the selected.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Dropdown.SelectedIndexChanged">
            <summary>
            Event fired when selected index gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.IsPopupOpened">
            <summary>
            Gets a value indicating whether this popup menu is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.Font">
            <summary>
            Gets or sets the font used to draw text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.FontMaterial">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BackgroundColorSelected">
            <summary>
            Gets or sets the background color when dropdown popup is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BorderColorSelected">
            <summary>
            Gets or sets the border color when dropdown popup is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BackgroundColorHighlighted">
            <summary>
            Gets or sets the background color when dropdown is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BorderColorHighlighted">
            <summary>
            Gets or sets the border color when dropdown is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.ArrowImage">
            <summary>
            Gets or sets the image used to render dropdown drop arrow icon.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.ArrowColor">
            <summary>
            Gets or sets the color used to render dropdown drop arrow icon.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.ArrowColorSelected">
            <summary>
            Gets or sets the color used to render dropdown drop arrow icon (menu is opened).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.ArrowColorHighlighted">
            <summary>
            Gets or sets the color used to render dropdown drop arrow icon (menu is highlighted).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.CheckedImage">
            <summary>
            Gets or sets the image used to render dropdown checked item icon.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Dropdown"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.ClearItems">
            <summary>
            Clears the items.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.AddItem(System.String)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.AddItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.SetItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnSelectedIndexChanged">
            <summary>
            Called when selected item index gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnItemClicked(System.Int32)">
            <summary>
            Called when item is clicked.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.CreatePopup">
            <summary>
            Creates the popup menu (including items collection).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DestroyPopup">
            <summary>
            Destroys the popup.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Image">
            <summary>
            The basic GUI image control. Shows texture, sprite or render target.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.Image.Brush">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.Margin">
            <summary>
            Gets or sets the margin for the image.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.Color">
            <summary>
            Gets or sets the color used to multiply the image pixels.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.MouseOverColor">
            <summary>
            Gets or sets the color used to multiply the image pixels when mouse is over the image.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.DisabledTint">
            <summary>
            Gets or sets the color used to multiply the image pixels when control is disabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.KeepAspectRatio">
            <summary>
            Gets or sets a value indicating whether keep aspect ratio when drawing the image.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Image.Clicked">
            <summary>
            Occurs when mouse clicks on the image.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Image.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.#ctor(FlaxEngine.Rectangle)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Label">
            <summary>
            The basic GUI label control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.Label._font">
            <summary>
            The font.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.TextColorHighlighted">
            <summary>
            Gets or sets the color of the text when it is highlighted (mouse is over).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal text alignment within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.VerticalAlignment">
            <summary>
            Gets or sets the vertical text alignment within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Wrapping">
            <summary>
            Gets or sets the text wrapping within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Font">
            <summary>
            Gets or sets the font.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Material">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Margin">
            <summary>
            Gets or sets the margin for the text within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.ClipText">
            <summary>
            Gets or sets a value indicating whether clip text during rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.AutoWidth">
            <summary>
            Gets or sets a value indicating whether set automatic width based on text contents.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.AutoHeight">
            <summary>
            Gets or sets a value indicating whether set automatic height based on text contents.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.AutoFitText">
            <summary>
            Gets or sets a value indicating whether scale text to fit the label control bounds. Disables using text alignment, automatic width and height.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.AutoFitTextRange">
            <summary>
            Gets or sets the text scale range (min and max) for automatic fit text option. Can be used to constraint the text scale adjustment.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Label.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Label"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Label.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Label.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Label.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ProgressBar">
            <summary>
            Progress bar control shows visual progress of the action or set of actions.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEngine.GUI.ProgressBar._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ProgressBar._current">
            <summary>
            The current value (used to apply smooth progress changes).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ProgressBar._minimum">
            <summary>
            The minimum progress value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ProgressBar._maximum">
            <summary>
            The maximum progress value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.SmoothingScale">
            <summary>
            Gets or sets the value smoothing scale (0 to not use it).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.UseSmoothing">
            <summary>
            Gets a value indicating whether use progress value smoothing.
            </summary>
            <value>
              <c>true</c> if use progress value smoothing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.BarMargin">
            <summary>
            Gets or sets the margin for the progress bar rectangle within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.BarColor">
            <summary>
            Gets or sets the color of the progress bar rectangle.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ProgressBar.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ProgressBar.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ProgressBar.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RenderToTextureControl">
            <summary>
            UI container control that can render children to texture and display pre-cached texture instead of drawing children every frame. It can be also used to render part of UI to texture and use it in material or shader.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderToTextureControl.Texture">
            <summary>
            Gets the texture with cached children controls.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderToTextureControl.AutomaticTextureSize">
            <summary>
            Gets or sets a value indicating whether automatically update size of texture when control dimensions gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderToTextureControl.TextureSize">
            <summary>
            Gets or sets the size of the texture (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderToTextureControl.AutomaticInvalidate">
            <summary>
            Gets or sets the value whether cached texture data should be invalidated automatically (eg. when child control changes). 
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.Invalidate">
            <summary>
            Invalidates the cached image of children controls and invokes the redraw to the texture.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.OnChildrenChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RichTextBox">
            <summary>
            Rich text box control which can gather text input from the user and present text in highly formatted and stylized way.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RichTextBox.TextStyle">
            <summary>
            The text style applied to the whole text.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBox.OnParseTextBlocks">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RichTextBoxBase">
            <summary>
            Base class for all rich text box controls which can gather text input from the user and present text in highly formatted and stylized way.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.RichTextBoxBase.ParseTextBlocksDelegate">
            <summary>
            The delegate for text blocks processing.
            </summary>
            <param name="text">The text.</param>
            <param name="textBlocks">The output text blocks. Given list is not-nul and cleared before.</param>
        </member>
        <member name="F:FlaxEngine.GUI.RichTextBoxBase._textBlocks">
            <summary>
            The text blocks.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RichTextBoxBase.ParseTextBlocks">
            <summary>
            The custom callback for parsing text blocks.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.RichTextBoxBase"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.UpdateTextBlocks">
            <summary>
            Updates the text blocks.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.OnParseTextBlocks">
            <summary>
            Called when text blocks needs to be updated from the current text.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.OnTextChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.GetTextSize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.GetCharPosition(System.Int32,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.HitTestText(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Spacer">
            <summary>
            Helper control used to insert blank space into the layout.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEngine.GUI.Spacer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Spacer"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Spacer.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Spacer"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="T:FlaxEngine.GUI.TextBox">
            <summary>
            Text box control which can gather text input from the user.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.WatermarkText">
            <summary>
            Gets or sets the watermark text to show grayed when textbox is empty.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.Wrapping">
            <summary>
            Gets or sets the text wrapping within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.Font">
            <summary>
            Gets or sets the font.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.TextMaterial">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.WatermarkTextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.SelectionColor">
            <summary>
            Gets or sets the color of the selection (Transparent if not used).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextBox"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.#ctor(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Init
            </summary>
            <param name="isMultiline">Enable/disable multiline text input support</param>
            <param name="x">Position X coordinate</param>
            <param name="y">Position Y coordinate</param>
            <param name="width">Width</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.GetTextSize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.GetCharPosition(System.Int32,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.HitTestText(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnIsMultilineChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.TextBoxBase">
            <summary>
            Base class for all text box controls which can gather text input from the user.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase.Separators">
            <summary>
            The text separators (used for words skipping).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase.DefaultHeight">
            <summary>
            Default height of the text box
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase.DefaultMargin">
            <summary>
            Left and right margin for text inside the text box bounds rectangle
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._text">
            <summary>
            The current text value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._onStartEditValue">
            <summary>
            The text value captured when user started editing text. Used to detect content modification.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._isEditing">
            <summary>
            Flag used to indicate whenever user is editing the text.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._viewOffset">
            <summary>
            The view offset
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._targetViewOffset">
            <summary>
            The target view offset.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._textSize">
            <summary>
            The text size calculated from font.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._isMultiline">
            <summary>
            Flag used to indicate whenever text can contain multiple lines.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._isReadOnly">
            <summary>
            Flag used to indicate whenever text is read-only and cannot be modified by the user.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._maxLength">
            <summary>
            The maximum length of the text.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._isSelecting">
            <summary>
            Flag used to indicate whenever user is selecting text.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._selectionStart">
            <summary>
            The selection start position (character index).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._selectionEnd">
            <summary>
            The selection end position (character index).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._animateTime">
            <summary>
            The animate time for selection.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.TextBoxBase.TextChanged">
            <summary>
            Event fired when text gets changed
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.TextBoxBase.EditEnd">
            <summary>
            Event fired when text gets changed after editing (user accepted entered value).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.IsMultiline">
            <summary>
            Gets or sets a value indicating whether this is a multiline text box control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.MaxLength">
            <summary>
            Gets or sets the maximum number of characters the user can type into the text box control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether text in the text box is read-only. 
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.BackgroundSelectedColor">
            <summary>
            Gets or sets textbox background color when the control is selected (has focus).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.CaretColor">
            <summary>
            Gets or sets the color of the caret (Transparent if not used).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.CaretFlashSpeed">
            <summary>
            Gets or sets the speed of the caret flashing animation.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.BackgroundSelectedFlashSpeed">
            <summary>
            Gets or sets the speed of the selection background flashing animation.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.BorderColor">
            <summary>
            Gets or sets the color of the border (Transparent if not used).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.BorderSelectedColor">
            <summary>
            Gets or sets the color of the border when control is focused (Transparent if not used).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.TextSize">
            <summary>
            Gets the size of the text (cached).
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.TextBoxBase.TargetViewOffsetChanged">
            <summary>
            Occurs when target view offset gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.ViewOffset">
            <summary>
            Gets the current view offset (text scrolling offset). Includes the smoothing.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.TargetViewOffset">
            <summary>
            Gets or sets the target view offset (text scrolling offset).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.Text">
            <summary>
            Gets or sets text property.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.SetText(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.TextLength">
            <summary>
            Gets length of the text
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.SelectedText">
            <summary>
            Gets the currently selected text in the control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.SelectionLength">
            <summary>
            Gets the number of characters selected in the text box.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.SelectionRange">
            <summary>
            Gets or sets the selection range.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.HasSelection">
            <summary>
            Returns true if any text is selected, otherwise false
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.SelectionLeft">
            <summary>
            Index of the character on left edge of the selection
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.SelectionRight">
            <summary>
            Index of the character on right edge of the selection
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.CaretPosition">
            <summary>
            Gets current caret position (index of the character)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.CaretBounds">
            <summary>
            Calculates the caret rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.TextRectangle">
            <summary>
            Gets rectangle with area for text
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.TextClipRectangle">
            <summary>
            Gets rectangle used to clip text
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextBoxBase"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.#ctor(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextBoxBase"/> class.
            </summary>
            <param name="isMultiline">Enable/disable multiline text input support.</param>
            <param name="x">The control position X coordinate.</param>
            <param name="y">The control position Y coordinate.</param>
            <param name="width">The control width.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Clear">
            <summary>
            Clears all text from the text box control. 
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.ClearSelection">
            <summary>
            Clear selection range
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.ResetViewOffset">
            <summary>
            Resets the view offset (text scroll view).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnTargetViewOffsetChanged">
            <summary>
            Called when target view offset gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Copy">
            <summary>
            Copies the current selection in the text box to the Clipboard. 
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Cut">
            <summary>
            Moves the current selection in the text box to the Clipboard. 
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Paste">
            <summary>
            Replaces the current selection in the text box with the contents of the Clipboard.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Duplicate">
            <summary>
            Duplicates the current selection in the text box.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.ScrollToCaret">
            <summary>
            Ensures that the caret is visible in the TextBox window, by scrolling the TextBox control surface if necessary.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.SelectAll">
            <summary>
            Selects all text in the text box.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Deselect">
            <summary>
            Sets the selection to empty value.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.CharIndexAtPoint(FlaxEngine.Vector2@)">
            <summary>
            Gets the character the index at point (eg. mouse location in control-space).
            </summary>
            <param name="location">The location (in control-space).</param>
            <returns>The character index under the location</returns>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Insert(System.Char)">
            <summary>
            Inserts the specified character (at the current selection).
            </summary>
            <param name="c">The character.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Insert(System.String)">
            <summary>
            Inserts the specified text (at the current selection).
            </summary>
            <param name="str">The string.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.SetSelection(System.Int32,System.Boolean)">
            <summary>
            Sets the caret position.
            </summary>
            <param name="caret">The caret position.</param>
            <param name="withScroll">If set to <c>true</c> with auto-scroll.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.SetSelection(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the selection.
            </summary>
            <param name="start">The selection start character.</param>
            <param name="end">The selection end character.</param>
            <param name="withScroll">If set to <c>true</c> with auto-scroll.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.GetTextSize">
            <summary>
            Calculates total text size. Called by <see cref="M:FlaxEngine.GUI.TextBoxBase.OnTextChanged"/> to cache the text size.
            </summary>
            <returns>The total text size.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.GetCharPosition(System.Int32,System.Single@)">
            <summary>
            Calculates character position for given character index.
            </summary>
            <param name="index">The text position to get it's coordinates.</param>
            <param name="height">The character height (at the given character position).</param>
            <returns>The character position (upper left corner which can be used for a caret position).</returns>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.HitTestText(FlaxEngine.Vector2)">
            <summary>
            Calculates hit character index at given location.
            </summary>
            <param name="location">The location to test.</param>
            <returns>The selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnIsMultilineChanged">
            <summary>
            Called when is multiline gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnIsReadOnlyChanged">
            <summary>
            Called when is read only gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnSelectingBegin">
            <summary>
            Action called when user starts text selecting
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnSelectingEnd">
            <summary>
            Action called when user ends text selecting
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnEditBegin">
            <summary>
            Action called when user starts text editing
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnEditEnd">
            <summary>
            Action called when user ends text editing.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnTextChanged">
            <summary>
            Action called when text gets modified.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnGotFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnCharInput(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ContainerControl">
            <summary>
            Base class for all GUI controls that can contain child controls.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContainerControl._children">
            <summary>
            The children collection.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContainerControl._containsFocus">
            <summary>
            The contains focus cached flag.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContainerControl._performChildrenLayoutFirst">
            <summary>
            The option to update child controls layout first before self. Useful for controls which dimensions are based on children.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContainerControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContainerControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContainerControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.#ctor(FlaxEngine.Rectangle)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.Children">
            <summary>
            Gets child controls list
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.ChildrenCount">
            <summary>
            Gets amount of the children controls
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.HasChildren">
            <summary>
            Checks if container has any child controls
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.ContainsFocus">
            <summary>
            Gets a value indicating whether the control, or one of its child controls, currently has the input focus.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.IsLayoutLocked">
            <summary>
            True if automatic updates for control layout are locked (useful when creating a lot of GUI control to prevent lags).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.ClipChildren">
            <summary>
            Gets or sets a value indicating whether apply clipping mask on children during rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.LockChildrenRecursive">
            <summary>
            Locks all child controls layout and itself.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.UnlockChildrenRecursive">
            <summary>
            Unlocks all the child controls layout and itself.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.RemoveChildren">
            <summary>
            Unlinks all the child controls.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.DisposeChildren">
            <summary>
            Removes and disposes all the child controls
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.AddChild``1">
            <summary>
            Creates a new control and adds it to the container.
            </summary>
            <returns>The added control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.AddChild``1(``0)">
            <summary>
            Adds the control to the container.
            </summary>
            <param name="child">The control to add.</param>
            <returns>The added control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.RemoveChild(FlaxEngine.GUI.Control)">
            <summary>
            Removes control from the container.
            </summary>
            <param name="child">The control to remove.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChild(System.Int32)">
            <summary>
            Gets child control at given index.
            </summary>
            <param name="index">The control index.</param>
            <returns>The child control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChild``1">
            <summary>
            Searches for a child control of a specific type. If there are multiple controls matching the type, only the first one found is returned.
            </summary>
            <typeparam name="T">The type of the control to search for. Includes any controls derived from the type.</typeparam>
            <returns>The control instance if found, otherwise null.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildIndex(FlaxEngine.GUI.Control)">
            <summary>
            Gets zero-based index in the list of control children.
            </summary>
            <param name="child">The child control.</param>
            <returns>The zero-based index in the list of control children.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildIndexAt(FlaxEngine.Vector2)">
            <summary>
            Tries to find any child control at given point in control local coordinates.
            </summary>
            <param name="point">The local point to check.</param>
            <returns>The found control index or -1 if failed.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildAt(FlaxEngine.Vector2)">
            <summary>
            Tries to find any child control at given point in control local coordinates
            </summary>
            <param name="point">The local point to check.</param>
            <returns>The found control or null.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildAt(FlaxEngine.Vector2,System.Func{FlaxEngine.GUI.Control,System.Boolean})">
            <summary>
            Tries to find valid child control at given point in control local coordinates. Uses custom callback method to test controls to pick.
            </summary>
            <param name="point">The local point to check.</param>
            <param name="isValid">The control validation callback.</param>
            <returns>The found control or null.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildAtRecursive(FlaxEngine.Vector2)">
            <summary>
            Tries to find lowest child control at given point in control local coordinates.
            </summary>
            <param name="point">The local point to check.</param>
            <returns>The found control or null.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetClientArea">
            <summary>
            Gets rectangle in local control coordinates with area for controls (without scroll bars, anchored controls, etc.).
            </summary>
            <returns>The rectangle in local control coordinates with area for controls (without scroll bars etc.).</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.SortChildren">
            <summary>
            Sort child controls list
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.SortChildrenRecursive">
            <summary>
            Sort children using recursion
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnChildResized(FlaxEngine.GUI.Control)">
            <summary>
            Called when child control gets resized.
            </summary>
            <param name="control">The resized control.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnChildrenChanged">
            <summary>
            Called when children collection gets changed (child added or removed).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.CacheRootHandle">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.AddChildInternal(FlaxEngine.GUI.Control)">
            <summary>
            Adds a child control to the container.
            </summary>
            <param name="child">The control to add.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.RemoveChildInternal(FlaxEngine.GUI.Control)">
            <summary>
            Removes a child control from this container.
            </summary>
            <param name="child">The control to remove.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetDesireClientArea(FlaxEngine.Rectangle@)">
            <summary>
            Gets the desire client area rectangle for all the controls.
            </summary>
            <param name="rect">The client area rectangle for child controls.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.IntersectsChildContent(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Vector2@)">
            <summary>
            Checks if given point in thi container control space intersects with the child control content.
            Also calculates result location in child control space which can be used to feed control with event at that point.
            </summary>
            <param name="child">The child control to check.</param>
            <param name="location">The location in this container control space.</param>
            <param name="childSpaceLocation">The output location in child control space.</param>
            <returns>True if point is over the control content, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.UpdateContainsFocus">
            <summary>
            Update contain focus state and all it's children
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.UpdateChildrenBounds">
            <summary>
            Updates child controls bounds.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.PerformLayoutSelf">
            <summary>
            Perform layout for that container control
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.IsMouseOver">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.DrawChildren">
            <summary>
            Draws the children. Can be overriden to provide some customizations. Draw is performed with applied clipping mask fro the client area.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnCharInput(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnKeyUp(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Control">
            <summary>
            Base class for all GUI controls
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.X">
            <summary>
            Gets or sets X coordinate of the upper-left corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Y">
            <summary>
            Gets or sets Y coordinate of the upper-left corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.AnchorMin">
            <summary>
            Gets or sets the normalized position in the parent control that the upper left corner is anchored to (range 0-1).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.AnchorMax">
            <summary>
            Gets or sets the normalized position in the parent control that the bottom right corner is anchored to (range 0-1).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Offsets">
            <summary>
            Gets or sets the offsets of the corners of the control relative to its anchors.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Location">
            <summary>
            Gets or sets coordinates of the upper-left corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Width">
            <summary>
            Gets or sets width of the control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Height">
            <summary>
            Gets or sets height of the control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Size">
            <summary>
            Gets or sets control's size.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Top">
            <summary>
            Gets Y coordinate of the top edge of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Bottom">
            <summary>
            Gets Y coordinate of the bottom edge of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Left">
            <summary>
            Gets X coordinate of the left edge of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Right">
            <summary>
            Gets X coordinate of the right edge of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.UpperLeft">
            <summary>
            Gets position of the upper left corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.UpperRight">
            <summary>
            Gets position of the upper right corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.BottomRight">
            <summary>
            Gets position of the bottom right corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.BottomLeft">
            <summary>
            Gets position of the bottom left of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Center">
            <summary>
            Gets center position of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Bounds">
            <summary>
            Gets or sets control's bounds rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Pivot">
            <summary>
            Gets or sets the normalized pivot location (used to transform control around it). Point (0,0) is upper left corner, (0.5,0.5) is center, (1,1) is bottom right corner.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Shear">
            <summary>
            Gets or sets the shear transform angles (x, y). Defined in degrees.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Rotation">
            <summary>
            Gets or sets the rotation angle (in degrees).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.UpdateBounds">
            <summary>
            Updates the control cached bounds (based on anchors and offsets).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.UpdateTransform">
            <summary>
            Updates the control cached transformation matrix (based on bounds).
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Control.LocationChanged">
            <summary>
            Action is invoked, when location is changed
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Control.SizeChanged">
            <summary>
            Action is invoked, when size is changed
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Control.ParentChanged">
            <summary>
            Action is invoked, when parent is changed
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Control.VisibleChanged">
            <summary>
            Action is invoked, when visibility is changed
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Parent">
            <summary>
            Parent control (the one above in the tree hierarchy)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.HasParent">
            <summary>
            Checks if control has parent container control
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IndexInParent">
            <summary>
            Gets or sets zero-based index of the control inside the parent container list.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.BackgroundColor">
            <summary>
            Gets or sets control background color (transparent color (alpha=0) means no background rendering)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.AnchorPreset">
            <summary>
            Gets or sets the anchor preset used by the control anchors (based on <see cref="P:FlaxEngine.GUI.Control.AnchorMin"/> and <see cref="P:FlaxEngine.GUI.Control.AnchorMax"/>).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsScrollable">
            <summary>
            Gets or sets a value indicating whether this control is scrollable (scroll bars affect it).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Enabled">
            <summary>
            Gets or sets a value indicating whether the control can respond to user interaction
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.EnabledInHierarchy">
            <summary>
            Gets a value indicating whether the control is enabled in the hierarchy (it's enabled and all it's parents are enabled as well).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Visible">
            <summary>
            Gets or sets a value indicating whether the control is visible
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.VisibleInHierarchy">
            <summary>
            Gets a value indicating whether the control is visible in the hierarchy (it's visible and all it's parents are visible as well).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsDisposing">
            <summary>
            Returns true if control is during disposing state (on destroy)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Root">
            <summary>
            Gets the GUI tree root control which contains that control (or null if not linked to any)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.RootWindow">
            <summary>
            Gets the GUI window root control which contains that control (or null if not linked to any).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.ScreenPos">
            <summary>
            Gets screen position of the control (upper left corner).
            </summary>
            <returns>Screen position of the control.</returns>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Cursor">
            <summary>
            Gets or sets the cursor (per window). Control should restore cursor to the default value eg. when mouse leaves it's area.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Control.Tag">
            <summary>
            The custom tag object value linked to the control.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Control"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Control"/> class.
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Control"/> class.
            </summary>
            <param name="location">Upper left corner location.</param>
            <param name="size">Bounds size.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.#ctor(FlaxEngine.Rectangle)">
            <summary>
            Init
            </summary>
            <param name="bounds">Window bounds</param>
        </member>
        <member name="T:FlaxEngine.GUI.Control.UpdateDelegate">
            <summary>
            Performs control logic update.
            </summary>
            <param name="deltaTime">The delta time in seconds (since last update).</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Dispose">
            <summary>
            Delete control (will unlink from the parent and start to dispose)
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Update(System.Single)">
            <summary>
            Perform control update and all its children
            </summary>
            <param name="deltaTime">Delta time in seconds</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Draw">
            <summary>
            Draw control
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PerformLayout(System.Boolean)">
            <summary>
            Update control layout
            </summary>
            <param name="force">True if perform layout by force even if cached state wants to skip it due to optimization.</param>
        </member>
        <member name="P:FlaxEngine.GUI.Control.AutoFocus">
            <summary>
            Gets a value indicating whether the control can receive automatic focus on user events (eg. mouse down.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.ContainsFocus">
            <summary>
            Gets a value indicating whether the control, currently has the input focus
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsFocused">
            <summary>
            Gets a value indicating whether the control has input focus
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Focus">
            <summary>
            Sets input focus to the control
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Defocus">
            <summary>
            Removes input focus from the control
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnGotFocus">
            <summary>
            When control gets input focus
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnLostFocus">
            <summary>
            When control losts input focus
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnStartContainsFocus">
            <summary>
            Action fired when control gets 'Contains Focus' state
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnEndContainsFocus">
            <summary>
            Action fired when control losts 'Contains Focus' state
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Focus(FlaxEngine.GUI.Control)">
            <summary>
            Focus that control
            </summary>
            <param name="c">Control to focus</param>
            <returns>True if control got a focus</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.StartMouseCapture(System.Boolean)">
            <summary>
            Starts the mouse tracking. Used by the scrollbars, splitters, etc.
            </summary>
            <param name="useMouseScreenOffset">If set to <c>true</c> will use mouse screen offset.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.EndMouseCapture">
            <summary>
            Ends the mouse tracking.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnEndMouseCapture">
            <summary>
            When mouse goes up/down not over the control but it has user focus so remove that focus from it (used by scroll
            bars, sliders etc.)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsMouseOver">
            <summary>
            Check if mouse is over that item or its child items
            </summary>
            <returns>True if mouse is over</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseEnter(FlaxEngine.Vector2)">
            <summary>
            When mouse enters control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseMove(FlaxEngine.Vector2)">
            <summary>
            When mouse moves over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseLeave">
            <summary>
            When mouse leaves control's area
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <summary>
            When mouse wheel moves
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="delta">
              Mouse wheel move delta. A positive value indicates that the wheel was rotated forward, away from
              the user; a negative value indicates that the wheel was rotated backward, toward the user. Normalized to [-1;1] range.
            </param>
            <returns>True if event has been handled</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <summary>
            When mouse goes down over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="button">Mouse buttons state (flags)</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <summary>
            When mouse goes up over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="button">Mouse buttons state (flags)</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <summary>
            When mouse double clicks over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="button">Mouse buttons state (flags)</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnCharInput(System.Char)">
            <summary>
            On input character
            </summary>
            <param name="c">Input character</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <summary>
            When key goes down
            </summary>
            <param name="key">Key value</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnKeyUp(FlaxEngine.KeyboardKeys)">
            <summary>
            When key goes up
            </summary>
            <param name="key">Key value</param>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsDragOver">
            <summary>
            Check if mouse dragging is over that item or its child items.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <summary>
            When mouse dragging enters control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="data">The data. See <see cref="T:FlaxEngine.GUI.DragDataText"/> and <see cref="T:FlaxEngine.GUI.DragDataFiles"/>.</param>
            <returns>The drag event result effect.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <summary>
            When mouse dragging moves over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="data">The data. See <see cref="T:FlaxEngine.GUI.DragDataText"/> and <see cref="T:FlaxEngine.GUI.DragDataFiles"/>.</param>
            <returns>The drag event result effect.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <summary>
            When mouse dragging drops on control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="data">The data. See <see cref="T:FlaxEngine.GUI.DragDataText"/> and <see cref="T:FlaxEngine.GUI.DragDataFiles"/>.</param>
            <returns>The drag event result effect.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDragLeave">
            <summary>
            When mouse dragging leaves control's area
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.DoDragDrop(FlaxEngine.GUI.DragData)">
            <summary>
            Starts the drag and drop operation.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:FlaxEngine.GUI.Control.TooltipText">
            <summary>
            Gets or sets the tooltip text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.CustomTooltip">
            <summary>
            Gets or sets the custom tooltip control linked. Use null to show default shared tooltip from the current <see cref="T:FlaxEngine.GUI.Style"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Tooltip">
            <summary>
            Gets the tooltip used by this control (custom or shared one).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.ShowTooltip">
            <summary>
            Gets a value indicating whether show control tooltip (control is in a proper state, tooltip text is valid, etc.). Can be used to implement custom conditions for showing tooltips (eg. based on current mouse location within the control bounds).
            </summary>
            <remarks>
            Tooltip can be only visible if mouse is over the control area (see <see cref="P:FlaxEngine.GUI.Control.IsMouseOver"/>).
            </remarks>
        </member>
        <member name="M:FlaxEngine.GUI.Control.LinkTooltip(System.String,FlaxEngine.GUI.Tooltip)">
            <summary>
            Links the tooltip.
            </summary>
            <param name="text">The text.</param>
            <param name="customTooltip">The custom tooltip.</param>
            <returns>This control pointer. Useful for creating controls in code.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.UnlinkTooltip">
            <summary>
            Unlinks the tooltip.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <summary>
            Called when tooltip wants to be shown. Allows modifying its appearance.
            </summary>
            <param name="text">The tooltip text to show.</param>
            <param name="location">The popup start location (in this control local space).</param>
            <param name="area">The allowed area of mouse movement to show tooltip (in this control local space).</param>
            <returns>True if can show tooltip, otherwise false to skip.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnTestTooltipOverControl(FlaxEngine.Vector2@)">
            <summary>
            Called when tooltip is visible and tests if the given mouse location (in control space) is valid (is over the content).
            </summary>
            <param name="location">The location.</param>
            <returns>True if tooltip can be still visible, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.IntersectsContent(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Checks if given location point in Parent Space intersects with the control content and calculates local position.
            </summary>
            <param name="locationParent">The location in Parent Space.</param>
            <param name="location">The location of intersection in Control Space.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.ContainsPoint(FlaxEngine.Vector2@)">
            <summary>
            Checks if control contains given point in local Control Space.
            </summary>
            <param name="location">Point location in Control Space to check</param>
            <returns>True if point is inside control's area</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToParent(FlaxEngine.GUI.ContainerControl,FlaxEngine.Vector2)">
            <summary>
            Converts point in local control's space into one of the parent control coordinates
            </summary>
            <param name="parent">This control parent of any other parent.</param>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in parent control coordinates</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToParent(FlaxEngine.Vector2)">
            <summary>
            Converts point in local control's space into parent control coordinates.
            </summary>
            <param name="location">The input location of the point to convert.</param>
            <returns>The converted point location in parent control coordinates.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToParent(FlaxEngine.Vector2@)">
            <summary>
            Converts point in local control's space into parent control coordinates.
            </summary>
            <param name="location">The input location of the point to convert.</param>
            <returns>The converted point location in parent control coordinates.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointFromParent(FlaxEngine.Vector2)">
            <summary>
            Converts point in parent control coordinates into local control's space.
            </summary>
            <param name="locationParent">The input location of the point to convert.</param>
            <returns>The converted point location in control's space.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointFromParent(FlaxEngine.Vector2@)">
            <summary>
            Converts point in parent control coordinates into local control's space.
            </summary>
            <param name="locationParent">The input location of the point to convert.</param>
            <returns>The converted point location in control's space.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointFromParent(FlaxEngine.GUI.ContainerControl,FlaxEngine.Vector2)">
            <summary>
            Converts point in one of the parent control coordinates into local control's space.
            </summary>
            <param name="parent">This control parent of any other parent.</param>
            <param name="location">Input location of the point to convert</param>
            <returns>The converted point location in control's space.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToWindow(FlaxEngine.Vector2)">
            <summary>
            Converts point in local control's space into window coordinates
            </summary>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in window coordinates</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointFromWindow(FlaxEngine.Vector2)">
            <summary>
            Converts point in the window coordinates into control's space
            </summary>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in control's space</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.ClientToScreen(FlaxEngine.Vector2)">
            <summary>
            Converts point in the local control's space into screen coordinates
            </summary>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in screen coordinates</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.ScreenToClient(FlaxEngine.Vector2)">
            <summary>
            Converts point in screen coordinates into the local control's space
            </summary>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in local control's space</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnLocationChanged">
            <summary>
            Called when control location gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnSizeChanged">
            <summary>
            Called when control size gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetScaleInternal(FlaxEngine.Vector2@)">
            <summary>
            Sets the scale and updates the transform.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetPivotInternal(FlaxEngine.Vector2@)">
            <summary>
            Sets the pivot and updates the transform.
            </summary>
            <param name="pivot">The pivot.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetShearInternal(FlaxEngine.Vector2@)">
            <summary>
            Sets the shear and updates the transform.
            </summary>
            <param name="shear">The shear.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetRotationInternal(System.Single)">
            <summary>
            Sets the rotation angle and updates the transform.
            </summary>
            <param name="rotation">The rotation (in degrees).</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnVisibleChanged">
            <summary>
            Called when visible state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnParentChangedInternal">
            <summary>
            Action fred when parent control gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.CacheRootHandle">
            <summary>
            Caches the root control handle.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.AddUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <summary>
            Adds the custom control logic update callbacks to the root.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.RemoveUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <summary>
            Removes the custom control logic update callbacks from the root.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetUpdate(FlaxEngine.GUI.Control.UpdateDelegate@,FlaxEngine.GUI.Control.UpdateDelegate)">
            <summary>
            Helper utility function to sets the update callback to the root. Does nothing if value has not been modified. Handles if control ahs no root or parent.
            </summary>
            <param name="onUpdate">The cached update callback delegate (field in teh custom control implementation).</param>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnParentResized">
            <summary>
            Action fred when parent control gets resized (also when control gets non-null parent).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDestroy">
            <summary>
            Method called when managed instance should be destroyed
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Control.Compare(FlaxEngine.GUI.Control)">
            <summary>
            Compares this control with the other control.
            </summary>
            <param name="other">The other.</param>
            <returns>Comparision result.</returns>
        </member>
        <member name="T:FlaxEngine.GUI.DragData">
            <summary>
            The data container for drag and drop operation in GUI.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.DragDataFiles">
            <summary>
            The drag and drop files.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.DragData" />
        </member>
        <member name="F:FlaxEngine.GUI.DragDataFiles.Files">
            <summary>
            The file paths collection.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.DragDataFiles.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.DragDataFiles"/> class.
            </summary>
            <param name="files">The files.</param>
        </member>
        <member name="T:FlaxEngine.GUI.DragDataText">
            <summary>
            The drag and drop text data.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.DragData" />
        </member>
        <member name="F:FlaxEngine.GUI.DragDataText.Text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.DragDataText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.DragDataText"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="T:FlaxEngine.GUI.AnchorPresets">
            <summary>
            UI control anchors presets.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.Custom">
            <summary>
            The empty preset.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.TopLeft">
            <summary>
            The top left corner of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.TopCenter">
            <summary>
            The center of the top edge of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.TopRight">
            <summary>
            The top right corner of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.MiddleLeft">
            <summary>
            The middle of the left edge of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.MiddleCenter">
            <summary>
            The middle center! Right in the middle of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.MiddleRight">
            <summary>
            The middle of the right edge of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.BottomLeft">
            <summary>
            The bottom left corner of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.BottomCenter">
            <summary>
            The center of the bottom edge of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.BottomRight">
            <summary>
            The bottom right corner of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.VerticalStretchLeft">
            <summary>
            The vertical stretch on the left of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.VerticalStretchCenter">
            <summary>
            The vertical stretch on the center of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.VerticalStretchRight">
            <summary>
            The vertical stretch on the right of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.HorizontalStretchTop">
            <summary>
            The horizontal stretch on the top of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.HorizontalStretchMiddle">
            <summary>
            The horizontal stretch in the middle of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.HorizontalStretchBottom">
            <summary>
            The horizontal stretch on the bottom of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.StretchAll">
            <summary>
            All parent control edges.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.ScrollBars">
            <summary>
            Specifies which scroll bars will be visible on a control
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBars.None">
            <summary>
            Don't use scroll bars.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBars.Horizontal">
            <summary>
            Use horizontal scrollbar.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBars.Vertical">
            <summary>
            Use vertical scrollbar.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBars.Both">
            <summary>
            Use horizontal and vertical scrollbar.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.DragItemPositioning">
            <summary>
            The drag item positioning modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DragItemPositioning.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DragItemPositioning.At">
            <summary>
            At the item.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DragItemPositioning.Above">
            <summary>
            Above the item (near the upper/left edge).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DragItemPositioning.Below">
            <summary>
            Below the item (near the bottom/right edge)
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.Orientation">
            <summary>
            Specifies the orientation of controls or elements of controls
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Orientation.Horizontal">
            <summary>
            The horizontal.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Orientation.Vertical">
            <summary>
            The vertical.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.Margin">
            <summary>
            Describes the space around a control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.GUI.Margin" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Zero">
            <summary>
            A <see cref="T:FlaxEngine.GUI.Margin" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Left">
            <summary>
            Holds the margin to the left.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Right">
            <summary>
            Holds the margin to the right.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Top">
            <summary>
            Holds the margin to the top.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Bottom">
            <summary>
            Holds the margin to the bottom.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.Size">
            <summary>
            Gets the margin's total size. Cumulative margin size.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.Width">
            <summary>
            Gets the width (left + right).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.Height">
            <summary>
            Gets the height (top + bottom).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Margin"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Margin"/> struct.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="top">The top.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.IsZero">
            <summary>
            Gets a value indicting whether this margin is zero.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ShrinkRectangle(FlaxEngine.Rectangle@)">
            <summary>
            Shrinks the rectangle by this margin.
            </summary>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ExpandRectangle(FlaxEngine.Rectangle@)">
            <summary>
            Expands the rectangle by this margin.
            </summary>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.op_Addition(FlaxEngine.GUI.Margin,FlaxEngine.GUI.Margin)">
            <summary>
            Adds two margins.
            </summary>
            <param name="left">The first margins to add.</param>
            <param name="right">The second margins to add.</param>
            <returns>The sum of the two margins.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.op_Subtraction(FlaxEngine.GUI.Margin,FlaxEngine.GUI.Margin)">
            <summary>
            Subtracts two margins.
            </summary>
            <param name="left">The first margins to subtract from.</param>
            <param name="right">The second margins to subtract.</param>
            <returns>The result of subtraction of the two margins.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.op_Equality(FlaxEngine.GUI.Margin,FlaxEngine.GUI.Margin)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.op_Inequality(FlaxEngine.GUI.Margin,FlaxEngine.GUI.Margin)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.Equals(FlaxEngine.GUI.Margin@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.GUI.Margin" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.GUI.Margin" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.GUI.Margin" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.Equals(FlaxEngine.GUI.Margin@,FlaxEngine.GUI.Margin@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.GUI.Margin"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.Equals(FlaxEngine.GUI.Margin)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.GUI.Margin" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.GUI.Margin" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.GUI.Margin" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.GUI.BlurPanel">
            <summary>
            The blur panel that applied the Gaussian-blur to all content beneath the control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.BlurPanel.BlurStrength">
            <summary>
            Gets or sets the blur strength. Defines how blurry the background is. Larger numbers increase blur, resulting in a larger runtime cost on the GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.BlurPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.BlurPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.BlurPanel.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.DropPanel">
            <summary>
            Drop Panel arranges control vertically and provides feature to collapse contents.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._headerHeight">
            <summary>
            The header height.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._headerTextMargin">
            <summary>
            The header text margin.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._isClosed">
            <summary>
            The 'is closed' flag.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._mouseOverHeader">
            <summary>
            The 'mouse over header' flag (over header).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._mouseDown">
            <summary>
            The 'mouse down' flag (over header).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._animationProgress">
            <summary>
            The animation progress (normalized).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._cachedHeight">
            <summary>
            The cached height of the control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._itemsMargin">
            <summary>
            The items margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderText">
            <summary>
            Gets or sets the header text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderHeight">
            <summary>
            Gets or sets the height of the header.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderTextMargin">
            <summary>
            Gets or sets the header margin.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel.HeaderTextColor">
            <summary>
            Gets or sets the color used to draw header text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderColor">
            <summary>
            Gets or sets the color of the header.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderColorMouseOver">
            <summary>
            Gets or sets the color of the header when mouse is over.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderTextFont">
            <summary>
            Gets or sets the font used to render panel header text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderTextMaterial">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.EnableDropDownIcon">
            <summary>
            Gets or sets a value indicating whether enable drop down icon drawing.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.DropPanel.ClosedChanged">
            <summary>
            Occurs when drop panel is opened or closed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.IsClosed">
            <summary>
            Gets or sets a value indicating whether this panel is closed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.ItemsMargin">
            <summary>
            Gets or sets the item slots margin (the space between items).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.CloseAnimationTime">
            <summary>
            Gets or sets the panel close/open animation duration (in seconds).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.ArrowImageOpened">
            <summary>
            Gets or sets the image used to render drop panel drop arrow icon when panel is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.ArrowImageClosed">
            <summary>
            Gets or sets the image used to render drop panel drop arrow icon when panel is closed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderRectangle">
            <summary>
            Gets the header rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.ShowTooltip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnTestTooltipOverControl(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.DropPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Open(System.Boolean)">
            <summary>
            Opens the group.
            </summary>
            <param name="animate">Enable/disable animation feature.</param>
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Close(System.Boolean)">
            <summary>
            Closes the group.
            </summary>
            <param name="animate">Enable/disable animation feature.</param>
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Toggle">
            <summary>
            Toggles open state
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.GetDesireClientArea(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.GridPanel">
            <summary>
            A panel that divides up available space between all of its children.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.GridPanel.SlotPadding">
            <summary>
            Gets or sets the padding given to each slot.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.GridPanel.RowFill">
            <summary>
            The cells heights in container height percentage (from top to bottom). Use negative values to set fixed widths for the cells.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.GridPanel.ColumnFill">
            <summary>
            The cells heights in container width percentage (from left to right). Use negative values to set fixed heights for the cells.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.GridPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.GridPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.GridPanel.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.GridPanel"/> class.
            </summary>
            <param name="slotPadding">The slot padding.</param>
        </member>
        <member name="M:FlaxEngine.GUI.GridPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.HorizontalPanel">
            <summary>
            This panel arranges child controls horizontally.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.PanelWithMargins" />
        </member>
        <member name="M:FlaxEngine.GUI.HorizontalPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.HorizontalPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.HorizontalPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.HScrollBar">
            <summary>
            Horizontal scroll bar control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ScrollBar" />
        </member>
        <member name="M:FlaxEngine.GUI.HScrollBar.#ctor(FlaxEngine.GUI.ContainerControl,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.HScrollBar"/> class.
            </summary>
            <param name="parent">The parent control.</param>
            <param name="y">The y position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:FlaxEngine.GUI.HScrollBar.TrackSize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Panel">
            <summary>
            Panel UI control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ScrollableControl" />
        </member>
        <member name="F:FlaxEngine.GUI.Panel._controlsBounds">
            <summary>
            The cached scroll area bounds. Used to scroll contents of the panel control. Cached during performing layout.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Panel.VScrollBar">
            <summary>
            The vertical scroll bar.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Panel.HScrollBar">
            <summary>
            The horizontal scroll bar.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ViewBottom">
            <summary>
            Gets the view bottom.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ControlsBounds">
            <summary>
            Gets the cached scroll area bounds. Used to scroll contents of the panel control. Cached during performing layout.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ScrollBars">
            <summary>
            Gets or sets the scroll bars usage by this panel.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.AlwaysShowScrollbars">
            <summary>
            Gets or sets a value indicating whether always show scrollbars. Otherwise show them only if scrolling is available.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ScrollMargin">
            <summary>
            Gets or sets the scroll margin applies to the child controls area. Can be used to expand the scroll area bounds by adding a margin.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Panel"/> class.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.#ctor(FlaxEngine.GUI.ScrollBars,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Panel"/> class.
            </summary>
            <param name="scrollBars">The scroll bars.</param>
            <param name="autoFocus">True if control can accept user focus</param>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.SetViewOffset(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.ScrollViewTo(FlaxEngine.GUI.Control,System.Boolean)">
            <summary>
            Scrolls the view to the given control area.
            </summary>
            <param name="c">The control.</param>
            <param name="fastScroll">True of scroll to the item quickly without smoothing.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.ScrollViewTo(FlaxEngine.Vector2,System.Boolean)">
            <summary>
            Scrolls the view to the given location.
            </summary>
            <param name="location">The location.</param>
            <param name="fastScroll">True of scroll to the item quickly without smoothing.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.ScrollViewTo(FlaxEngine.Rectangle,System.Boolean)">
            <summary>
            Scrolls the view to the given area.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="fastScroll">True of scroll to the item quickly without smoothing.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.RemoveChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.DisposeChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.IntersectsChildContent(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.AddChildInternal(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.ArrangeAndGetBounds">
            <summary>
            Arranges the child controls and gets their bounds.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.Arrange">
            <summary>
            Arranges the child controls.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.GetDesireClientArea(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.PanelWithMargins">
            <summary>
            Helper control class for other panels.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.PanelWithMargins._margin">
            <summary>
            The panel area margins.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.PanelWithMargins._spacing">
            <summary>
            The space between the items.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.PanelWithMargins._autoSize">
            <summary>
            The auto size flag.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.PanelWithMargins._offset">
            <summary>
            The control offset.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.LeftMargin">
            <summary>
            Gets or sets the left margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.RightMargin">
            <summary>
            Gets or sets the right margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.TopMargin">
            <summary>
            Gets or sets the top margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.BottomMargin">
            <summary>
            Gets or sets the bottom margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.Spacing">
            <summary>
            Gets or sets the child controls spacing.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.Offset">
            <summary>
            Gets or sets the child controls offset (additive).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.AutoSize">
            <summary>
            Gets or sets the value indicating whenever the panel size will be based on a children dimensions.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.Margin">
            <summary>
            Gets or sets the panel area margin.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.PanelWithMargins.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.PanelWithMargins"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.PanelWithMargins.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ScrollBar">
            <summary>
            Scroll Bars base class - allows to scroll contents of the GUI panel.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBar.DefaultSize">
            <summary>
            The default size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBar.DefaultMinimumOpacity">
            <summary>
            The default minimum opacity.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBar.DefaultMinimumSize">
            <summary>
            The default minimum size.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.Orientation">
            <summary>
            Gets the orientation.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.ThumbThickness">
            <summary>
            Gets or sets the thumb box thickness.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.TrackThickness">
            <summary>
            Gets or sets the track line thickness.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.SmoothingScale">
            <summary>
            Gets or sets the value smoothing scale (0 to not use it).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.UseSmoothing">
            <summary>
            Gets a value indicating whether use scroll value smoothing.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.Value">
            <summary>
            Gets or sets the scroll value (current, smooth).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.TargetValue">
            <summary>
            Gets or sets the target value (target, not smooth).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.ValueSlowDown">
            <summary>
            Gets the value slow down.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.IsThumbClicked">
            <summary>
            Gets a value indicating whether thumb is being clicked (scroll bar is in use).
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.ScrollBar.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBar.ThumbEnabled">
            <summary>
            Enables/disabled scrolling by user.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.TrackSize">
            <summary>
            Gets the size of the track.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.#ctor(FlaxEngine.GUI.Orientation)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ScrollBar"/> class.
            </summary>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.ScrollViewTo(System.Single,System.Single,System.Boolean)">
            <summary>
            Scrolls the view to the desire range (favors minimum value if cannot cover whole range in a bounds).
            </summary>
            <param name="min">The view minimum.</param>
            <param name="max">The view maximum.</param>
            <param name="fastScroll">True of scroll to the item quickly without smoothing.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnValueChanged">
            <summary>
            Called when value gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.SetScrollRange(System.Single,System.Single)">
            <summary>
            Sets the scroll range (min and max at once).
            </summary>
            <param name="minimum">The minimum scroll range value (see <see cref="P:FlaxEngine.GUI.ScrollBar.Minimum"/>).</param>
            <param name="maximum">The maximum scroll range value (see <see cref="P:FlaxEngine.GUI.ScrollBar.Minimum"/>).</param>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.AddUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.RemoveUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.SplitPanel">
            <summary>
            GUI control that contains two child panels and the splitter between them.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.SplitPanel.SpliterSize">
            <summary>
            The splitter size (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SplitPanel.SpliterSizeHalf">
            <summary>
            The splitter half size (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SplitPanel.Panel1">
            <summary>
            The first panel (left or upper based on Orientation).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SplitPanel.Panel2">
            <summary>
            The second panel.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.SplitPanel.Orientation">
            <summary>
            Gets or sets the panel orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="P:FlaxEngine.GUI.SplitPanel.SplitterValue">
            <summary>
            Gets or sets the splitter value (always in range [0; 1]).
            </summary>
            <value>
            The splitter value (always in range [0; 1]).
            </value>
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.#ctor(FlaxEngine.GUI.Orientation,FlaxEngine.GUI.ScrollBars,FlaxEngine.GUI.ScrollBars)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SplitPanel"/> class.
            </summary>
            <param name="orientation">The orientation.</param>
            <param name="panel1Scroll">The panel1 scroll bars.</param>
            <param name="panel2Scroll">The panel2 scroll bars.</param>
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.TilesPanel">
            <summary>
            Panel that arranges child controls like tiles.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.TilesPanel.TileSize">
            <summary>
            Gets or sets the size of the tile.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TilesPanel.AutoResize">
            <summary>
            Gets or sets a value indicating whether perform automatic resize after tiles arrange.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TilesPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TilesPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TilesPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.UniformGridPanel">
            <summary>
            A panel that evenly divides up available space between all of its children.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.UniformGridPanel.SlotPadding">
            <summary>
            Gets or sets the padding given to each slot.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.UniformGridPanel.SlotsHorizontally">
            <summary>
            Gets or sets the amount of slots horizontally. Use 0 to don't limit it.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.UniformGridPanel.SlotsVertically">
            <summary>
            Gets or sets the amount of slots vertically. Use 0 to don't limit it.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.UniformGridPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.UniformGridPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.UniformGridPanel.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.UniformGridPanel"/> class.
            </summary>
            <param name="slotPadding">The slot padding.</param>
        </member>
        <member name="M:FlaxEngine.GUI.UniformGridPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.VerticalPanel">
            <summary>
            This panel arranges child controls vertically.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.PanelWithMargins" />
        </member>
        <member name="M:FlaxEngine.GUI.VerticalPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.VerticalPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.VerticalPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.VScrollBar">
            <summary>
            Vertical scroll bar control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ScrollBar" />
        </member>
        <member name="M:FlaxEngine.GUI.VScrollBar.#ctor(FlaxEngine.GUI.ContainerControl,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.VScrollBar"/> class.
            </summary>
            <param name="parent">The parent control.</param>
            <param name="x">The x position.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
        </member>
        <member name="P:FlaxEngine.GUI.VScrollBar.TrackSize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RenderOutputControl">
            <summary>
            A common control used to present rendered frame in the UI.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.RenderOutputControl.BackBufferFormat">
            <summary>
            The default back buffer format used by the GUI controls presenting rendered frames.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RenderOutputControl.ResizeCheckTime">
            <summary>
            The resize check timeout (in seconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RenderOutputControl._task">
            <summary>
            The task.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RenderOutputControl._backBuffer">
            <summary>
            The back buffer.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.Task">
            <summary>
            Gets the task.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.RenderOnlyWithWindow">
            <summary>
            Gets a value indicating whether render to that output only if parent window exists, otherwise false.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.TintColor">
            <summary>
            Gets or sets the color of the tint used to color the backbuffer of the render output.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.Brightness">
            <summary>
            Gets or sets the brightness of the output.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.ResolutionScale">
            <summary>
            Gets or sets the rendering resolution scale. Can be sued to upscale image or to downscale the rendering to save the performance.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.#ctor(FlaxEngine.SceneRenderTask)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.RenderOutputControl"/> class.
            </summary>
            <param name="task">The task. Cannot be null.</param>
            <exception cref="T:System.ArgumentNullException">Invalid task.</exception>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.CanSkipRendering">
            <summary>
            Performs a check if rendering a current frame can be skipped (if control size is too small, has missing data, etc.).
            </summary>
            <returns>True if skip rendering, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.OnEnd(FlaxEngine.RenderTask,FlaxEngine.GPUContext)">
            <summary>
            Called when ask rendering ends.
            </summary>
            <param name="task">The task.</param>
            <param name="context">The GPU execution context.</param>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.SyncBackbufferSize">
            <summary>
            Synchronizes size of the back buffer with the size of the control.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RootControl">
            <summary>
            GUI root control that is represented by a window or an canvas and can contain children but has no parent at all. It's a source of the input events.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.GameRoot">
            <summary>
            Gets the main GUI control (it can be window or editor overriden control). Use it to plug-in custom GUI controls.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.CanvasRoot">
            <summary>
            Gets the canvas controls root container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.FocusedControl">
            <summary>
            Gets or sets the current focused control
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.TrackingMouseOffset">
            <summary>
            Gets the tracking mouse offset.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.MousePosition">
            <summary>
            Gets or sets the position of the mouse in the window space coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RootControl.UpdateCallbacks">
            <summary>
            The update callbacks collection. Controls can register for this to get the update event for logic handling.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RootControl.UpdateCallbacksToAdd">
            <summary>
            The update callbacks to add before invoking the update.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RootControl.UpdateCallbacksToRemove">
            <summary>
            The update callbacks to remove before invoking the update.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.RootControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.StartTrackingMouse(FlaxEngine.GUI.Control,System.Boolean)">
            <summary>
            Starts the mouse tracking. Used by the scrollbars, splitters, etc.
            </summary>
            <param name="control">The target control that want to track mouse. It will receive OnMouseMove event.</param>
            <param name="useMouseScreenOffset">If set to <c>true</c> will use mouse screen offset.</param>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.EndTrackingMouse">
            <summary>
            Ends the mouse tracking.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetKey(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets keyboard key state.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True while the user holds down the key identified by id.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetKeyDown(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets keyboard key down state.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True during the frame the user starts pressing down the key.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetKeyUp(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets keyboard key up state.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True during the frame the user releases the button.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetMouseButton(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True while the user holds down the button.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button down state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True during the frame the user starts pressing down the button.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button up state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True during the frame the user releases the button.</returns>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.Root">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ScrollableControl">
            <summary>
            Base class for container controls that can offset controls in a view (eg. scroll panels).
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.ScrollableControl._viewOffset">
            <summary>
            The view offset. Useful to offset contents of the container (used by the scrollbars and drop panels).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollableControl.ViewOffset">
            <summary>
            Gets current view offset for all the controls (used by the scroll bars).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.SetViewOffset(FlaxEngine.Vector2@)">
            <summary>
            Sets the view offset.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.OnViewOffsetChanged">
            <summary>
            Called when view offset gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.DrawChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.IntersectsChildContent(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.IntersectsContent(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.PointToParent(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.PointFromParent(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Style">
            <summary>
            Describes GUI controls style (which fonts and colors use etc.). Defines the default values used by the GUI control.s
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Style.Current">
            <summary>
            Global GUI style used by all the controls.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Style.FontTitle">
            <summary>
            The font title.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Style.FontLarge">
            <summary>
            The font large.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Style.FontMedium">
            <summary>
            The font medium.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Style.FontSmall">
            <summary>
            The font small.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Background">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.LightBackground">
            <summary>
            The light background color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.DragWindow">
            <summary>
            The drag window color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Foreground">
            <summary>
            The foreground color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ForegroundGrey">
            <summary>
            The foreground grey.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ForegroundDisabled">
            <summary>
            The foreground disabled.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BackgroundHighlighted">
            <summary>
            The background highlighted color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BorderHighlighted">
            <summary>
            The border highlighted color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BackgroundSelected">
            <summary>
            The background selected color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BorderSelected">
            <summary>
            The border selected color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BackgroundNormal">
            <summary>
            The background normal color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BorderNormal">
            <summary>
            The border normal color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.TextBoxBackground">
            <summary>
            The text box background color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.TextBoxBackgroundSelected">
            <summary>
            The text box background selected color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ProgressNormal">
            <summary>
            The progress normal color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ArrowRight">
            <summary>
            The arrow right icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ArrowDown">
            <summary>
            The arrow down icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Search">
            <summary>
            The search icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Settings">
            <summary>
            The settings icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Cross">
            <summary>
            The cross icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.CheckBoxIntermediate">
            <summary>
            The CheckBox intermediate icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.CheckBoxTick">
            <summary>
            The CheckBox tick icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.StatusBarSizeGrip">
            <summary>
            The status bar size grip icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Translate">
            <summary>
            The translate icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Rotate">
            <summary>
            The rotate icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Scale">
            <summary>
            The scale icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.SharedTooltip">
            <summary>
            The shared tooltip control used by the controls if no custom tooltip is provided.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.TextBlock">
            <summary>
            The text block.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlock.Range">
            <summary>
            The text range.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlock.Style">
            <summary>
            The text style.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlock.Bounds">
            <summary>
            The text location and size.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.TextBlockStyle">
            <summary>
            The styling descriptor for the text block.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.Font">
            <summary>
            The text font.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.CustomMaterial">
            <summary>
            The custom material for the text rendering (must be GUI domain).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.Color">
            <summary>
            The text color (tint and opacity).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.ShadowColor">
            <summary>
            The text shadow color (tint and opacity). Set to transparent to disable shadow drawing.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.ShadowOffset">
            <summary>
            The text shadow offset from the text location. Set to zero to disable shadow drawing.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.BackgroundSelectedBrush">
            <summary>
            The background brush for the selected text range.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.UnderlineBrush">
            <summary>
            The underline line brush.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.Tooltip">
            <summary>
            The tooltip popup.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.Tooltip.TimeToShow">
            <summary>
            Gets or sets the time in seconds that mouse have to be over the target to show the tooltip.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Tooltip.MaxWidth">
            <summary>
            Gets or sets the maximum width of the tooltip. Used to wrap text that overflows and ensure that tooltip stays readable.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Tooltip"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Rectangle)">
            <summary>
            Shows tooltip over given control.
            </summary>
            <param name="target">The parent control to attach to it.</param>
            <param name="location">Popup menu origin location in parent control coordinates.</param>
            <param name="targetArea">Tooltip target area of interest.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.Hide">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnMouseEnterControl(FlaxEngine.GUI.Control)">
            <summary>
            Called when mouse enters a control.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnMouseOverControl(FlaxEngine.GUI.Control,System.Single)">
            <summary>
            Called when mouse is over a control.
            </summary>
            <param name="target">The target.</param>
            <param name="dt">The delta time.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnMouseLeaveControl(FlaxEngine.GUI.Control)">
            <summary>
            Called when mouse leaves a control.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.WindowRootControl">
            <summary>
            Root control implementation used by the <see cref="T:FlaxEngine.Window"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.RootControl" />
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.Window">
            <summary>
            Gets the native window object.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.Title">
            <summary>
            Sets the window title.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsFullscreen">
            <summary>
            Gets a value indicating whether this window is in fullscreen mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsWindowed">
            <summary>
            Gets a value indicating whether this window is in windowed mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsShown">
            <summary>
            Gets a value indicating whether this instance is visible.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsMinimized">
            <summary>
            Gets a value indicating whether this window is minimized.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsMaximized">
            <summary>
            Gets a value indicating whether this window is maximized.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Show">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Minimize">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Maximize">
            <summary>
            Maximizes the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Restore">
            <summary>
            Restores the window state before minimizing or maximizing.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Close(FlaxEngine.ClosingReason)">
            <summary>
            Closes the window.
            </summary>
            <param name="reason">The closing reason.</param>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.BringToFront(System.Boolean)">
            <summary>
            Brings window to the front of the Z order.
            </summary>
            <param name="force">True if move to the front by force, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.FlashWindow">
            <summary>
            Flashes the window to bring use attention.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.FocusedControl">
            <summary>
            Gets or sets the current focused control
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.Cursor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.TrackingMouseOffset">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.RootWindow">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.MousePosition">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.StartTrackingMouse(FlaxEngine.GUI.Control,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.EndTrackingMouse">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetKey(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetKeyUp(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetMouseButton(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.ScreenToClient(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.ClientToScreen(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Focus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.DoDragDrop(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Focus(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.TextRender">
            <summary>
            Text rendering object.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextRender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TextRender"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.Material">
            <summary>
            The material used for the text rendering. It must contain texture parameter named Font used to sample font texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.Font">
            <summary>
            The font asset used as a text characters source.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.DrawModes">
            <summary>
            The draw passes to use for rendering this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.ShadowsMode">
            <summary>
            The shadows casting mode by this visual element.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.Color">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.FontSize">
            <summary>
            Gets or sets the font characters size.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.LayoutOptions">
            <summary>
            Gets or sets the layout options. Layout is defined in local space of the object (on XY plane).
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.LocalBox">
            <summary>
            Gets the axis=aligned bounding box of the text vertices in the local-space of the actor.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextRender.UpdateLayout">
            <summary>
            Updates the text vertex buffer layout and cached data if its dirty.
            </summary>
        </member>
        <member name="T:FlaxEngine.CanvasRenderMode">
            <summary>
            The canvas rendering modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.CanvasRenderMode.ScreenSpace">
            <summary>
            The screen space rendering mode that places UI elements on the screen rendered on top of the scene. If the screen is resized or changes resolution, the Canvas will automatically change size to match this.
            </summary>
        </member>
        <member name="F:FlaxEngine.CanvasRenderMode.CameraSpace">
            <summary>
            The camera space rendering mode that places Canvas in a given distance in front of a specified Camera. The UI elements are rendered by this camera, which means that the Camera settings affect the appearance of the UI. If the Camera is set to Perspective, the UI elements will be rendered with perspective, and the amount of perspective distortion can be controlled by the Camera Field of View. If the screen is resized, changes resolution, or the camera frustum changes, the Canvas will automatically change size to match as well.
            </summary>
        </member>
        <member name="F:FlaxEngine.CanvasRenderMode.WorldSpace">
            <summary>
            The world space rendering mode that places Canvas as any other object in the scene. The size of the Canvas can be set manually using its Transform, and UI elements will render in front of or behind other objects in the scene based on 3D placement. This is useful for UIs that are meant to be a part of the world. This is also known as a 'diegetic interface'.
            </summary>
        </member>
        <member name="T:FlaxEngine.CanvasRenderer">
            <summary>
            PostFx used to render the <see cref="T:FlaxEngine.UICanvas"/>. Used when render mode is <see cref="F:FlaxEngine.CanvasRenderMode.CameraSpace"/> or <see cref="F:FlaxEngine.CanvasRenderMode.WorldSpace"/>.
            </summary>
            <seealso cref="T:FlaxEngine.PostProcessEffect" />
        </member>
        <member name="F:FlaxEngine.CanvasRenderer.Canvas">
            <summary>
            The canvas to render.
            </summary>
        </member>
        <member name="P:FlaxEngine.CanvasRenderer.UseSingleTarget">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.CanvasRenderer.Location">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.CanvasRenderer.Order">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.CanvasRenderer.Render(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.UICanvas">
            <summary>
            Root of the UI structure. Renders GUI and handles input events forwarding.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.RenderMode">
            <summary>
            Gets or sets the canvas rendering mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.RenderLocation">
            <summary>
            Gets or sets the canvas rendering location within rendering pipeline. Used only in <see cref="F:FlaxEngine.CanvasRenderMode.CameraSpace"/> or <see cref="F:FlaxEngine.CanvasRenderMode.WorldSpace"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Order">
            <summary>
            Gets or sets the canvas rendering and input events gather order. Created GUI canvas objects are sorted before rendering (from the lowest order to the highest order). Canvas with the highest order can handle input event first.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.ReceivesEvents">
            <summary>
            Gets or sets a value indicating whether canvas can receive the input events.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Size">
            <summary>
            Gets or sets the size of the canvas. Used only in <see cref="F:FlaxEngine.CanvasRenderMode.CameraSpace"/> or <see cref="F:FlaxEngine.CanvasRenderMode.WorldSpace"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.IgnoreDepth">
            <summary>
            Gets or sets a value indicating whether ignore scene depth when rendering the GUI (scene objects won't cover the interface).
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.RenderCamera">
            <summary>
            Gets or sets the camera used to place the GUI when render mode is set to <see cref="F:FlaxEngine.CanvasRenderMode.CameraSpace"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Distance">
            <summary>
            Gets or sets the distance from the <see cref="P:FlaxEngine.UICanvas.RenderCamera"/> to place the plane with GUI. If the screen is resized, changes resolution, or the camera frustum changes, the Canvas will automatically change size to match as well.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.GUI">
            <summary>
            Gets the canvas GUI root control.
            </summary>
        </member>
        <member name="T:FlaxEngine.UICanvas.TestCanvasIntersectionDelegate">
            <summary>
            Delegate schema for the callback used to perform custom canvas intersection test. Can be used to implement a canvas tha has a holes or non-rectangular shape.
            </summary>
            <param name="location">The location of the point to test in coordinates of the canvas root control (see <see cref="P:FlaxEngine.UICanvas.GUI"/>).</param>
            <returns>True if canvas was hit, otherwise false.</returns>
        </member>
        <member name="F:FlaxEngine.UICanvas.TestCanvasIntersection">
            <summary>
            The callback used to perform custom canvas intersection test. Can be used to implement a canvas tha has a holes or non-rectangular shape.
            </summary>
        </member>
        <member name="T:FlaxEngine.UICanvas.CalculateRayDelegate">
            <summary>
            Delegate schema for callback used to evaluate the world-space ray from the screen-space position (eg. project mouse position).
            </summary>
            <param name="location">The location in screen-space.</param>
            <param name="ray">The output ray in world-space.</param>
        </member>
        <member name="F:FlaxEngine.UICanvas.CalculateRay">
            <summary>
            The current implementation of the <see cref="T:FlaxEngine.UICanvas.CalculateRayDelegate"/> used to calculate the mouse ray in 3D from the 2D location. Cannot be null.
            </summary>
        </member>
        <member name="M:FlaxEngine.UICanvas.DefaultCalculateRay(FlaxEngine.Vector2@,FlaxEngine.Ray@)">
            <summary>
            The default implementation of the <see cref="T:FlaxEngine.UICanvas.CalculateRayDelegate"/> that uses the <see cref="P:FlaxEngine.Camera.MainCamera"/> to evaluate the 3D ray.
            </summary>
            <param name="location">The location in screen-space.</param>
            <param name="ray">The output ray in world-space.</param>
        </member>
        <member name="P:FlaxEngine.UICanvas.Bounds">
            <summary>
            Gets the world-space oriented bounding box that contains a 3D canvas.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Is2D">
            <summary>
            Gets a value indicating whether canvas is 2D (screen-space).
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Is3D">
            <summary>
            Gets a value indicating whether canvas is 3D (world-space or camera-space).
            </summary>
        </member>
        <member name="M:FlaxEngine.UICanvas.GetWorldMatrix(FlaxEngine.Matrix@)">
            <summary>
            Gets the world matrix used to transform the GUI from the local space to the world space. Handles canvas rendering mode
            </summary>
            <param name="world">The world.</param>
        </member>
        <member name="T:FlaxEngine.UIControl">
            <summary>
            Contains a single GUI control (on C# side).
            </summary>
        </member>
        <member name="P:FlaxEngine.UIControl.Control">
            <summary>
            Gets or sets the GUI control used by this actor.
            </summary>
            <remarks>
            When changing the control, the previous one is disposed. Use <see cref="M:FlaxEngine.UIControl.UnlinkControl"/> to manage it on your own.
            </remarks>
        </member>
        <member name="P:FlaxEngine.UIControl.HasControl">
            <summary>
            Gets a value indicating whether this actor has control.
            </summary>
        </member>
        <member name="P:FlaxEngine.UIControl.Bounds">
            <summary>
            Gets the world-space oriented bounding box that contains a 3D control.
            </summary>
        </member>
        <member name="M:FlaxEngine.UIControl.Get``1">
            <summary>
            Gets the control object cased to the given type.
            </summary>
            <typeparam name="T">The type of the control.</typeparam>
            <returns>The control object.</returns>
        </member>
        <member name="M:FlaxEngine.UIControl.Is``1">
            <summary>
            Checks if the control object is of the given type.
            </summary>
            <typeparam name="T">The type of the control.</typeparam>
            <returns>True if control object is of the given type.</returns>
        </member>
        <member name="M:FlaxEngine.UIControl.AddChildControl``1">
            <summary>
            Creates a new UIControl with the control of the given type and links it to this control as a child.
            </summary>
            <remarks>
            The current actor has to have a valid container control.
            </remarks>
            <typeparam name="T">Type of the child control to add.</typeparam>
            <returns>The created UIControl that contains a new control of the given type.</returns>
        </member>
        <member name="M:FlaxEngine.UIControl.UnlinkControl">
            <summary>
            Unlinks the control from the actor without disposing it or modifying.
            </summary>
        </member>
        <member name="F:FlaxEngine.UIControl.FallbackParentGetDelegate">
            <summary>
            The fallback callback used to handle <see cref="T:FlaxEngine.UIControl"/> parent container control to link when it fails to find the default parent. Can be used to link the controls into a custom control.
            </summary>
        </member>
        <member name="M:FlaxEngine.UIControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.UIControl"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.Utilities.Extensions">
            <summary>
            Collection of various extension methods.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.DeepClone``1(``0)">
            <summary>
            Creates deep clone for a class if all members of this class are marked as serializable (uses Json serialization).
            </summary>
            <param name="instance">The input instance of an object.</param>
            <typeparam name="T">The instance type of an object.</typeparam>
            <returns>Returns new object of provided class.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.RawClone``1(``0)">
            <summary>
            Creates raw clone for a structure using memory copy. Valid only for value types.
            </summary>
            <param name="instance">The input instance of an object.</param>
            <typeparam name="T">The instance type of an object.</typeparam>
            <returns>Returns new object of provided structure.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.IsStructure(System.Type)">
            <summary>
            Checks if the input type represents a structure (value type but not enum nor primitive type).
            </summary>
            <param name="type">The input type of the object to check.</param>
            <returns>Returns true if the input type represents a structure (value type but not enum nor primitive type).</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.GetLines(System.String,System.Boolean)">
            <summary>
            Splits string into lines
            </summary>
            <param name="str">Text to split</param>
            <param name="removeEmptyLines">True if remove empty lines, otherwise keep them</param>
            <returns>Array with all lines</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextDouble(System.Random,System.Double)">
            <summary>
            Gets a random double.
            </summary>
            <param name="random">The random.</param>
            <param name="maxValue">The maximum value</param>
            <returns>A random double</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Gets a random double.
            </summary>
            <param name="random">The random.</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
            <returns>A random double</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextFloat(System.Random)">
            <summary>
            Gets a random float.
            </summary>
            <param name="random">The random.</param>
            <returns>A random float</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextFloat(System.Random,System.Single)">
            <summary>
            Gets a random float.
            </summary>
            <param name="random">The random.</param>
            <param name="maxValue">The maximum value</param>
            <returns>A random float</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            Gets a random float.
            </summary>
            <param name="random">The random.</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextColor(System.Random)">
            <summary>
            Gets a random Color.
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextVector2(System.Random)">
            <summary>
            Gets a random Vector2 with components in range [0;1].
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextVector3(System.Random)">
            <summary>
            Gets a random Vector3 with components in range [0;1].
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextVector4(System.Random)">
            <summary>
            Gets a random Vector4 with components in range [0;1].
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextQuaternion(System.Random)">
            <summary>
            Gets a random Quaternion.
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextLong(System.Random)">
            <summary>
            Gets a random 64-bit signed integer value.
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextDirection2D(System.Random)">
            <summary>
            Generates a random normalized 2D direction vector.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <returns>A random normalized 2D direction vector.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextDirection3D(System.Random)">
            <summary>
            Generates a random normalized 3D direction vector.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <returns>A random normalized 3D direction vector.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.PointInACircle(System.Random,System.Single)">
            <summary>
            Generates a random point in a circle of a given radius.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="radius">Radius of circle. Default 1.0f.</param>
            <returns>A random point in a circle of a given radius.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="destination">The <see cref="T:System.Collections.Generic.ICollection`1"/> to add items to.</param>
            <param name="collection">The collection whose elements should be added to the end of the <paramref name="destination"/>. It can contain elements that are <see langword="null"/>, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="destination"/> or <paramref name="collection"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enqueues the elements of the specified collection to the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> to add items to.</param>
            <param name="collection">The collection whose elements should be added to the <paramref name="queue"/>. It can contain elements that are <see langword="null"/>, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="queue"/> or <paramref name="collection"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.PushRange``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Pushes the elements of the specified collection to the <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="stack">The <see cref="T:System.Collections.Generic.Stack`1"/> to add items to.</param>
            <param name="collection">The collection whose elements should be pushed on to the <paramref name="stack"/>. It can contain elements that are <see langword="null"/>, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stack"/> or <paramref name="collection"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements of the input sequence.</typeparam>
            <param name="source">The sequence of elements to execute the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>1.</param>
            <exception cref="T:System.ArgumentException"><paramref name="source"/> or <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.Choose``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
            Chooses a random item from the collection.
            </summary>
            <typeparam name="T">The type of the elements of the input sequence.</typeparam>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="collection">Collection to choose item from.</param>
            <returns>A random item from collection</returns>
            <exception cref="T:System.ArgumentNullException">If the random argument is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the collection is null.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.Choose``1(System.Random,``0[])">
            <summary>
            Chooses a random item.
            </summary>
            <typeparam name="T">The type of the elements of the input sequence.</typeparam>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="collection">Collection to choose item from.</param>
            <returns>A random item from collection</returns>
            <exception cref="T:System.ArgumentNullException">If the random  is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the collection is null.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.Shuffle``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the collection in place.
            </summary>
            <typeparam name="T">The type of the elements of the input sequence.</typeparam>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="collection">Collection to shuffle.</param>
            <exception cref="T:System.ArgumentNullException">If the random argument is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the random collection is null.</exception>
        </member>
        <member name="T:FlaxEngine.Utilities.PerlinNoise">
            <summary>
            Helper class for Perlin Noise generation.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.PerlinNoise.Base">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.PerlinNoise.NoiseScale">
            <summary>
            The noise scale parameter.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.PerlinNoise.NoiseAmount">
            <summary>
            The noise amount parameter.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.PerlinNoise.Octaves">
            <summary>
            The noise octaves count.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.PerlinNoise.#ctor(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Utilities.PerlinNoise"/> class.
            </summary>
            <param name="baseValue">The base value.</param>
            <param name="scale">The noise scale.</param>
            <param name="amount">The noise amount.</param>
            <param name="octaves">The noise octaves count.</param>
        </member>
        <member name="M:FlaxEngine.Utilities.PerlinNoise.Sample(System.Int32,System.Int32)">
            <summary>
            Samples the Perlin Noise at the given location (integer coordinates).
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>The noise value.</returns>
        </member>
        <member name="T:FlaxEngine.Utilities.State">
            <summary>
            State machine state
            </summary>
        </member>
        <member name="P:FlaxEngine.Utilities.State.StateMachine">
            <summary>
            Gets the state machine.
            </summary>
            <value>
            The state machine.
            </value>
        </member>
        <member name="P:FlaxEngine.Utilities.State.IsActive">
            <summary>
            Gets a value indicating whether this state is active.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.State.CanEnter">
            <summary>
            Checks if can enter to that state
            </summary>
            <returns>True if can enter to that state, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.State.CanExit(FlaxEngine.Utilities.State)">
            <summary>
            Checks if can exit from that state
            </summary>
            <param name="nextState">Next state to enter after exit from the current state</param>
            <returns>True if can exit from that state, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.State.OnEnter">
            <summary>
            Called when state is starting to be active.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.State.OnExit(FlaxEngine.Utilities.State)">
            <summary>
            Called when state is ending to be active.
            </summary>
            <param name="nextState">The next state.</param>
        </member>
        <member name="T:FlaxEngine.Utilities.StateMachine">
            <summary>
            State machine logic pattern
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.StateMachine.currentState">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.StateMachine.states">
            <summary>
            The states.
            </summary>
        </member>
        <member name="P:FlaxEngine.Utilities.StateMachine.CurrentState">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="E:FlaxEngine.Utilities.StateMachine.StateChanging">
            <summary>
            Occurs when state is being changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.Utilities.StateMachine.StateChanged">
            <summary>
            Occurs when state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.GetState``1">
            <summary>
            Gets state of given type.
            </summary>
            <typeparam name="TStateType">The type of the state.</typeparam>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.GoToState``1">
            <summary>
            Goes to the state.
            </summary>
            <typeparam name="TStateType">The type of the state.</typeparam>
            <exception cref="T:System.InvalidOperationException">Cannot find state of given type.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.GoToState(FlaxEngine.Utilities.State)">
            <summary>
            Goes to the state.
            </summary>
            <param name="state">The target state.</param>
            <exception cref="T:System.ArgumentNullException">state</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.AddState(FlaxEngine.Utilities.State)">
            <summary>
            Adds the state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.RemoveState(FlaxEngine.Utilities.State)">
            <summary>
            Removes the state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.SwitchState(FlaxEngine.Utilities.State)">
            <summary>
            Switches the state.
            </summary>
            <param name="nextState">Then next state.</param>
        </member>
        <member name="T:FlaxEngine.Screenshot">
            <summary>
            The utility class for capturing game screenshots.
            </summary>
        </member>
        <member name="M:FlaxEngine.Screenshot.Capture(FlaxEngine.GPUTexture,System.String)">
            <summary>
            Captures the specified render target contents and saves it to the file.
            Remember that downloading data from the GPU may take a while so screenshot may be taken one or more frames later due to latency.
            </summary>
            <param name="target">The target render target to capture it's contents.</param>
            <param name="path">The custom file location. Use null or empty to use default one.</param>
        </member>
        <member name="M:FlaxEngine.Screenshot.Capture(FlaxEngine.SceneRenderTask,System.String)">
            <summary>
            Captures the specified render task backbuffer contents and saves it to the file.
            Remember that downloading data from the GPU may take a while so screenshot may be taken one or more frames later due to latency.
            </summary>
            <param name="target">The target task to capture it's backbuffer.</param>
            <param name="path">The custom file location. Use null or empty to use default one.</param>
        </member>
        <member name="M:FlaxEngine.Screenshot.Capture(System.String)">
            <summary>
            Captures the main render task backbuffer contents and saves it to the file.
            Remember that downloading data from the GPU may take a while so screenshot may be taken one or more frames later due to latency.
            </summary>
            <param name="path">The custom file location. Use null or empty to use default one.</param>
        </member>
        <member name="T:FlaxEngine.StringUtils">
            <summary>
            String utilities class.
            </summary>
        </member>
        <member name="M:FlaxEngine.StringUtils.HexDigit(System.Char)">
            <summary>
            Parse hexadecimals digit to value.
            </summary>
            <param name="c">The hex character.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.GetPathWithoutExtension(System.String)">
            <summary>
            Removes extension from the file path.
            </summary>
            <param name="path">The path.</param>
            <returns>Path without extension.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.NormalizePath(System.String)">
            <summary>
            Normalizes the path to the standard Flax format (all separators are '/' except for drive 'C:\').
            </summary>
            <param name="path">The path.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.NormalizeExtension(System.String)">
            <summary>
            Normalizes the file extension to common format: no leading dot and all lowercase.
            For example: '.TxT' will return 'txt'.
            </summary>
            <param name="extension">The extension.</param>
            <returns>The normalized extension.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.CombinePaths(System.String,System.String)">
            <summary>
            Combines the paths.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The combined path</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.CombinePaths(System.String,System.String,System.String)">
            <summary>
            Combines the paths.
            </summary>
            <param name="left">The left.</param>
            <param name="middle">The middle.</param>
            <param name="right">The right.</param>
            <returns>The combined path</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.IsRelative(System.String)">
            <summary>
            Determines whether the specified path is relative or is absolute.
            </summary>
            <param name="path">The input path.</param>
            <returns>
              <c>true</c> if the specified path is relative; otherwise, <c>false</c> if is relative.
            </returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.ConvertRelativePathToAbsolute(System.String)">
            <summary>
            Converts path relative to the engine startup folder into absolute path.
            </summary>
            <param name="path">Path relative to the engine directory.</param>
            <returns>Absolute path</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.ConvertRelativePathToAbsolute(System.String,System.String)">
            <summary>
            Converts path relative to basePath into absolute path.
            </summary>
            <param name="basePath">The base path.</param>
            <param name="path">Path relative to basePath.</param>
            <returns>Absolute path</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.RemovePathRelativeParts(System.String)">
            <summary>
            Removes the relative parts from the path. For instance it replaces 'xx/yy/../zz' with 'xx/zz'.
            </summary>
            <param name="path">The input path.</param>
            <returns>The output path.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.Reverse(System.String)">
            <summary>
            Reverses the specified input string.
            </summary>
            <param name="s">The string to reverse.</param>
            <returns>The reversed string.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.IncrementNameNumber(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Tries to parse number in the name brackets at the end of the value and then increment it to create a new name.
            Supports numbers at the end without brackets.
            </summary>
            <param name="name">The input name.</param>
            <param name="isValid">Custom function to validate the created name.</param>
            <returns>The new name.</returns>
        </member>
        <member name="T:FlaxEngine.Utils">
            <summary>
            Class with helper functions.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utils.MemoryCopy(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Copies data from one memory location to another using an unmanaged memory pointers.
            </summary>
            <remarks>
            Uses low-level memcpy call.
            </remarks>
            <param name="source">The source location.</param>
            <param name="destination">The destination location.</param>
            <param name="length">The length (amount of bytes to copy).</param>
        </member>
        <member name="M:FlaxEngine.Utils.RoundTo1DecimalPlace(System.Single)">
            <summary>
            Rounds the floating point value up to 1 decimal place.
            </summary>
            <param name="value">The value.</param>
            <returns>The rounded result.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.RoundTo2DecimalPlaces(System.Single)">
            <summary>
            Rounds the floating point value up to 2 decimal places.
            </summary>
            <param name="value">The value.</param>
            <returns>The rounded result.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.RoundTo3DecimalPlaces(System.Single)">
            <summary>
            Rounds the floating point value up to 3 decimal places.
            </summary>
            <param name="value">The value.</param>
            <returns>The rounded result.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.GetEmptyArray``1">
            <summary>
            Gets the empty array of the given type (shared one).
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The empty array object.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ArraysEqual``1(``0[],``0[])">
            <summary>
            Determines whether two arrays are equal by comparing the elements by using the default equality comparer for their type.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="a1">The first array.</param>
            <param name="a2">The second array.</param>
            <returns><c>true</c> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ArraysEqual``1(``0[],System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Determines whether two arrays are equal by comparing the elements by using the default equality comparer for their type.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="a1">The first array.</param>
            <param name="a2">The second array.</param>
            <returns><c>true</c> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ArraysEqual``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Determines whether two arrays are equal by comparing the elements by using the default equality comparer for their type.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="a1">The first array.</param>
            <param name="a2">The second array.</param>
            <returns><c>true</c> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.GetAssemblyByName(System.String)">
            <summary>
            Gets the assembly with the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>The assembly or null if not found.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.GetAssemblyByName(System.String,System.Reflection.Assembly[])">
            <summary>
            Gets the assembly with the given name.
            </summary>
            <param name="name">The name.</param>
            <param name="assemblies">The assemblies collection to search for.</param>
            <returns>The assembly or null if not found.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadColor32(System.IO.BinaryReader)">
            <summary>
            Reads the color from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadColor(System.IO.BinaryReader)">
            <summary>
            Reads the color from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadVector2(System.IO.BinaryReader)">
            <summary>
            Reads the Vector2 from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadVector3(System.IO.BinaryReader)">
            <summary>
            Reads the Vector3 from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadVector4(System.IO.BinaryReader)">
            <summary>
            Reads the Vector4 from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadQuaternion(System.IO.BinaryReader)">
            <summary>
            Reads the Quaternion from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Color32)">
            <summary>
            Writes the color to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Color)">
            <summary>
            Writes the color to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Vector2)">
            <summary>
            Writes the Vector2 to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Vector3)">
            <summary>
            Writes the Vector3 to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Vector4)">
            <summary>
            Writes the Vector4 to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Quaternion)">
            <summary>
            Writes the Quaternion to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:FlaxEngine.GraphParamType">
            <summary>
            The graph parameters types.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Bool">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Integer">
            <summary>
            The integer value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Float">
            <summary>
            The floating point value (single precision).
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Vector2">
            <summary>
            The Vector2 structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Vector3">
            <summary>
            The Vector3 structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Vector4">
            <summary>
            The Vector4 structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Color">
            <summary>
            The Color structure (RGBA, normalized, 32bit per channel).
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Texture">
            <summary>
            The texture reference.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.NormalMap">
            <summary>
            The normal map reference.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.String">
            <summary>
            The text (Unicode, UTF-16 encoding).
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Box">
            <summary>
            The bounding box structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Rotation">
            <summary>
            The quaternion structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Transform">
            <summary>
            The transform structure (translation, rotation and scale).
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Asset">
            <summary>
            The asset reference.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Actor">
            <summary>
            The actor reference.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Rectangle">
            <summary>
            The rectangle structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.CubeTexture">
            <summary>
            The cube texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.SceneTexture">
            <summary>
            The scene texture id.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.GPUTexture">
            <summary>
            The GPU texture (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.Matrix">
            <summary>
            The matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.GPUTextureArray">
            <summary>
            The GPU texture array (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.GPUTextureVolume">
            <summary>
            The GPU volume texture (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.GPUTextureCube">
            <summary>
            The GPU cube texture (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.GraphParamType.ChannelMask">
            <summary>
            The RGBA channel selection mask.
            </summary>
        </member>
        <member name="T:FlaxEngine.ChannelMask">
            <summary>
            The channel mask modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ChannelMask.Red">
            <summary>
            The red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.ChannelMask.Green">
            <summary>
            The green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.ChannelMask.Blue">
            <summary>
            The blue channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.ChannelMask.Alpha">
            <summary>
            The alpha channel.
            </summary>
        </member>
        <member name="T:FlaxEngine.GraphParameter">
            <summary>
            Represents a parameter in the Graph.
            </summary>
        </member>
        <member name="M:FlaxEngine.GraphParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GraphParameter"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GraphParameter.Type">
            <summary>
            Parameter type
            </summary>
        </member>
        <member name="P:FlaxEngine.GraphParameter.Identifier">
            <summary>
            Parameter unique ID
            </summary>
        </member>
        <member name="P:FlaxEngine.GraphParameter.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:FlaxEngine.GraphParameter.IsPublic">
            <summary>
            True if is exposed outside
            </summary>
        </member>
        <member name="P:FlaxEngine.GraphParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="M:FlaxEngine.GraphParameter.GetMetaData(System.Int32)">
            <summary>
            Gets the data of the Visject Meta entry assigned to this parameter.
            </summary>
            <param name="typeID">Entry type ID</param>
            <returns>The entry data or empty if missing or not loaded.</returns>
        </member>
        <member name="T:FlaxEngine.VisjectGraphParameter">
            <summary>
            Visject graph parameter.
            </summary>
            <seealso cref="T:FlaxEngine.GraphParameter" />
        </member>
        <member name="M:FlaxEngine.VisjectGraphParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.VisjectGraphParameter"/>.
            </summary>
        </member>
    </members>
</doc>
